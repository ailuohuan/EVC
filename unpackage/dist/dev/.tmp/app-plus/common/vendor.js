(global["webpackJsonp"] = global["webpackJsonp"] || []).push([["common/vendor"],{

/***/ 1:
/*!***********************************************************!*\
  !*** ./node_modules/@dcloudio/uni-app-plus/dist/index.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(global) {Object.defineProperty(exports, \"__esModule\", { value: true });exports.createApp = createApp;exports.createComponent = createComponent;exports.createPage = createPage;exports.default = void 0;var _vue = _interopRequireDefault(__webpack_require__(/*! vue */ 3));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}function _slicedToArray(arr, i) {return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();}function _nonIterableRest() {throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");}function _iterableToArrayLimit(arr, i) {var _arr = [];var _n = true;var _d = false;var _e = undefined;try {for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {_arr.push(_s.value);if (i && _arr.length === i) break;}} catch (err) {_d = true;_e = err;} finally {try {if (!_n && _i[\"return\"] != null) _i[\"return\"]();} finally {if (_d) throw _e;}}return _arr;}function _arrayWithHoles(arr) {if (Array.isArray(arr)) return arr;}function _defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function _toConsumableArray(arr) {return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();}function _nonIterableSpread() {throw new TypeError(\"Invalid attempt to spread non-iterable instance\");}function _iterableToArray(iter) {if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);}function _arrayWithoutHoles(arr) {if (Array.isArray(arr)) {for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {arr2[i] = arr[i];}return arr2;}}\n\nvar _toString = Object.prototype.toString;\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n\nfunction isFn(fn) {\n  return typeof fn === 'function';\n}\n\nfunction isStr(str) {\n  return typeof str === 'string';\n}\n\nfunction isPlainObject(obj) {\n  return _toString.call(obj) === '[object Object]';\n}\n\nfunction hasOwn(obj, key) {\n  return hasOwnProperty.call(obj, key);\n}\n\nfunction noop() {}\n\n/**\r\n                    * Create a cached version of a pure function.\r\n                    */\nfunction cached(fn) {\n  var cache = Object.create(null);\n  return function cachedFn(str) {\n    var hit = cache[str];\n    return hit || (cache[str] = fn(str));\n  };\n}\n\n/**\r\n   * Camelize a hyphen-delimited string.\r\n   */\nvar camelizeRE = /-(\\w)/g;\nvar camelize = cached(function (str) {\n  return str.replace(camelizeRE, function (_, c) {return c ? c.toUpperCase() : '';});\n});\n\nvar HOOKS = [\n'invoke',\n'success',\n'fail',\n'complete',\n'returnValue'];\n\n\nvar globalInterceptors = {};\nvar scopedInterceptors = {};\n\nfunction mergeHook(parentVal, childVal) {\n  var res = childVal ?\n  parentVal ?\n  parentVal.concat(childVal) :\n  Array.isArray(childVal) ?\n  childVal : [childVal] :\n  parentVal;\n  return res ?\n  dedupeHooks(res) :\n  res;\n}\n\nfunction dedupeHooks(hooks) {\n  var res = [];\n  for (var i = 0; i < hooks.length; i++) {\n    if (res.indexOf(hooks[i]) === -1) {\n      res.push(hooks[i]);\n    }\n  }\n  return res;\n}\n\nfunction removeHook(hooks, hook) {\n  var index = hooks.indexOf(hook);\n  if (index !== -1) {\n    hooks.splice(index, 1);\n  }\n}\n\nfunction mergeInterceptorHook(interceptor, option) {\n  Object.keys(option).forEach(function (hook) {\n    if (HOOKS.indexOf(hook) !== -1 && isFn(option[hook])) {\n      interceptor[hook] = mergeHook(interceptor[hook], option[hook]);\n    }\n  });\n}\n\nfunction removeInterceptorHook(interceptor, option) {\n  if (!interceptor || !option) {\n    return;\n  }\n  Object.keys(option).forEach(function (hook) {\n    if (HOOKS.indexOf(hook) !== -1 && isFn(option[hook])) {\n      removeHook(interceptor[hook], option[hook]);\n    }\n  });\n}\n\nfunction addInterceptor(method, option) {\n  if (typeof method === 'string' && isPlainObject(option)) {\n    mergeInterceptorHook(scopedInterceptors[method] || (scopedInterceptors[method] = {}), option);\n  } else if (isPlainObject(method)) {\n    mergeInterceptorHook(globalInterceptors, method);\n  }\n}\n\nfunction removeInterceptor(method, option) {\n  if (typeof method === 'string') {\n    if (isPlainObject(option)) {\n      removeInterceptorHook(scopedInterceptors[method], option);\n    } else {\n      delete scopedInterceptors[method];\n    }\n  } else if (isPlainObject(method)) {\n    removeInterceptorHook(globalInterceptors, method);\n  }\n}\n\nfunction wrapperHook(hook) {\n  return function (data) {\n    return hook(data) || data;\n  };\n}\n\nfunction isPromise(obj) {\n  return !!obj && (typeof obj === 'object' || typeof obj === 'function') && typeof obj.then === 'function';\n}\n\nfunction queue(hooks, data) {\n  var promise = false;\n  for (var i = 0; i < hooks.length; i++) {\n    var hook = hooks[i];\n    if (promise) {\n      promise = Promise.then(wrapperHook(hook));\n    } else {\n      var res = hook(data);\n      if (isPromise(res)) {\n        promise = Promise.resolve(res);\n      }\n      if (res === false) {\n        return {\n          then: function then() {} };\n\n      }\n    }\n  }\n  return promise || {\n    then: function then(callback) {\n      return callback(data);\n    } };\n\n}\n\nfunction wrapperOptions(interceptor) {var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  ['success', 'fail', 'complete'].forEach(function (name) {\n    if (Array.isArray(interceptor[name])) {\n      var oldCallback = options[name];\n      options[name] = function callbackInterceptor(res) {\n        queue(interceptor[name], res).then(function (res) {\n          /* eslint-disable no-mixed-operators */\n          return isFn(oldCallback) && oldCallback(res) || res;\n        });\n      };\n    }\n  });\n  return options;\n}\n\nfunction wrapperReturnValue(method, returnValue) {\n  var returnValueHooks = [];\n  if (Array.isArray(globalInterceptors.returnValue)) {\n    returnValueHooks.push.apply(returnValueHooks, _toConsumableArray(globalInterceptors.returnValue));\n  }\n  var interceptor = scopedInterceptors[method];\n  if (interceptor && Array.isArray(interceptor.returnValue)) {\n    returnValueHooks.push.apply(returnValueHooks, _toConsumableArray(interceptor.returnValue));\n  }\n  returnValueHooks.forEach(function (hook) {\n    returnValue = hook(returnValue) || returnValue;\n  });\n  return returnValue;\n}\n\nfunction getApiInterceptorHooks(method) {\n  var interceptor = Object.create(null);\n  Object.keys(globalInterceptors).forEach(function (hook) {\n    if (hook !== 'returnValue') {\n      interceptor[hook] = globalInterceptors[hook].slice();\n    }\n  });\n  var scopedInterceptor = scopedInterceptors[method];\n  if (scopedInterceptor) {\n    Object.keys(scopedInterceptor).forEach(function (hook) {\n      if (hook !== 'returnValue') {\n        interceptor[hook] = (interceptor[hook] || []).concat(scopedInterceptor[hook]);\n      }\n    });\n  }\n  return interceptor;\n}\n\nfunction invokeApi(method, api, options) {for (var _len = arguments.length, params = new Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {params[_key - 3] = arguments[_key];}\n  var interceptor = getApiInterceptorHooks(method);\n  if (interceptor && Object.keys(interceptor).length) {\n    if (Array.isArray(interceptor.invoke)) {\n      var res = queue(interceptor.invoke, options);\n      return res.then(function (options) {\n        return api.apply(void 0, [wrapperOptions(interceptor, options)].concat(params));\n      });\n    } else {\n      return api.apply(void 0, [wrapperOptions(interceptor, options)].concat(params));\n    }\n  }\n  return api.apply(void 0, [options].concat(params));\n}\n\nvar promiseInterceptor = {\n  returnValue: function returnValue(res) {\n    if (!isPromise(res)) {\n      return res;\n    }\n    return res.then(function (res) {\n      return res[1];\n    }).catch(function (res) {\n      return res[0];\n    });\n  } };\n\n\nvar SYNC_API_RE =\n/^\\$|getMenuButtonBoundingClientRect|^report|interceptors|Interceptor$|getSubNVueById|requireNativePlugin|upx2px|hideKeyboard|canIUse|^create|Sync$|Manager$|base64ToArrayBuffer|arrayBufferToBase64/;\n\nvar CONTEXT_API_RE = /^create|Manager$/;\n\nvar CALLBACK_API_RE = /^on/;\n\nfunction isContextApi(name) {\n  return CONTEXT_API_RE.test(name);\n}\nfunction isSyncApi(name) {\n  return SYNC_API_RE.test(name);\n}\n\nfunction isCallbackApi(name) {\n  return CALLBACK_API_RE.test(name);\n}\n\nfunction handlePromise(promise) {\n  return promise.then(function (data) {\n    return [null, data];\n  }).\n  catch(function (err) {return [err];});\n}\n\nfunction shouldPromise(name) {\n  if (\n  isContextApi(name) ||\n  isSyncApi(name) ||\n  isCallbackApi(name))\n  {\n    return false;\n  }\n  return true;\n}\n\nfunction promisify(name, api) {\n  if (!shouldPromise(name)) {\n    return api;\n  }\n  return function promiseApi() {var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};for (var _len2 = arguments.length, params = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {params[_key2 - 1] = arguments[_key2];}\n    if (isFn(options.success) || isFn(options.fail) || isFn(options.complete)) {\n      return wrapperReturnValue(name, invokeApi.apply(void 0, [name, api, options].concat(params)));\n    }\n    return wrapperReturnValue(name, handlePromise(new Promise(function (resolve, reject) {\n      invokeApi.apply(void 0, [name, api, Object.assign({}, options, {\n        success: resolve,\n        fail: reject })].concat(\n      params));\n      /* eslint-disable no-extend-native */\n      if (!Promise.prototype.finally) {\n        Promise.prototype.finally = function (callback) {\n          var promise = this.constructor;\n          return this.then(\n          function (value) {return promise.resolve(callback()).then(function () {return value;});},\n          function (reason) {return promise.resolve(callback()).then(function () {\n              throw reason;\n            });});\n\n        };\n      }\n    })));\n  };\n}\n\nvar EPS = 1e-4;\nvar BASE_DEVICE_WIDTH = 750;\nvar isIOS = false;\nvar deviceWidth = 0;\nvar deviceDPR = 0;\n\nfunction checkDeviceWidth() {var _wx$getSystemInfoSync =\n\n\n\n\n  wx.getSystemInfoSync(),platform = _wx$getSystemInfoSync.platform,pixelRatio = _wx$getSystemInfoSync.pixelRatio,windowWidth = _wx$getSystemInfoSync.windowWidth; // uni=>wx runtime 编译目标是 uni 对象，内部不允许直接使用 uni\n\n  deviceWidth = windowWidth;\n  deviceDPR = pixelRatio;\n  isIOS = platform === 'ios';\n}\n\nfunction upx2px(number, newDeviceWidth) {\n  if (deviceWidth === 0) {\n    checkDeviceWidth();\n  }\n\n  number = Number(number);\n  if (number === 0) {\n    return 0;\n  }\n  var result = number / BASE_DEVICE_WIDTH * (newDeviceWidth || deviceWidth);\n  if (result < 0) {\n    result = -result;\n  }\n  result = Math.floor(result + EPS);\n  if (result === 0) {\n    if (deviceDPR === 1 || !isIOS) {\n      return 1;\n    } else {\n      return 0.5;\n    }\n  }\n  return number < 0 ? -result : result;\n}\n\nvar interceptors = {\n  promiseInterceptor: promiseInterceptor };\n\n\n\n\nvar baseApi = /*#__PURE__*/Object.freeze({\n  upx2px: upx2px,\n  interceptors: interceptors,\n  addInterceptor: addInterceptor,\n  removeInterceptor: removeInterceptor });\n\n\nvar protocols = {};\nvar todos = [];\nvar canIUses = [];\n\nvar CALLBACKS = ['success', 'fail', 'cancel', 'complete'];\n\nfunction processCallback(methodName, method, returnValue) {\n  return function (res) {\n    return method(processReturnValue(methodName, res, returnValue));\n  };\n}\n\nfunction processArgs(methodName, fromArgs) {var argsOption = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};var returnValue = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};var keepFromArgs = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n  if (isPlainObject(fromArgs)) {// 一般 api 的参数解析\n    var toArgs = keepFromArgs === true ? fromArgs : {}; // returnValue 为 false 时，说明是格式化返回值，直接在返回值对象上修改赋值\n    if (isFn(argsOption)) {\n      argsOption = argsOption(fromArgs, toArgs) || {};\n    }\n    for (var key in fromArgs) {\n      if (hasOwn(argsOption, key)) {\n        var keyOption = argsOption[key];\n        if (isFn(keyOption)) {\n          keyOption = keyOption(fromArgs[key], fromArgs, toArgs);\n        }\n        if (!keyOption) {// 不支持的参数\n          console.warn(\"app-plus \".concat(methodName, \"\\u6682\\u4E0D\\u652F\\u6301\").concat(key));\n        } else if (isStr(keyOption)) {// 重写参数 key\n          toArgs[keyOption] = fromArgs[key];\n        } else if (isPlainObject(keyOption)) {// {name:newName,value:value}可重新指定参数 key:value\n          toArgs[keyOption.name ? keyOption.name : key] = keyOption.value;\n        }\n      } else if (CALLBACKS.indexOf(key) !== -1) {\n        toArgs[key] = processCallback(methodName, fromArgs[key], returnValue);\n      } else {\n        if (!keepFromArgs) {\n          toArgs[key] = fromArgs[key];\n        }\n      }\n    }\n    return toArgs;\n  } else if (isFn(fromArgs)) {\n    fromArgs = processCallback(methodName, fromArgs, returnValue);\n  }\n  return fromArgs;\n}\n\nfunction processReturnValue(methodName, res, returnValue) {var keepReturnValue = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n  if (isFn(protocols.returnValue)) {// 处理通用 returnValue\n    res = protocols.returnValue(methodName, res);\n  }\n  return processArgs(methodName, res, returnValue, {}, keepReturnValue);\n}\n\nfunction wrapper(methodName, method) {\n  if (hasOwn(protocols, methodName)) {\n    var protocol = protocols[methodName];\n    if (!protocol) {// 暂不支持的 api\n      return function () {\n        console.error(\"app-plus \\u6682\\u4E0D\\u652F\\u6301\".concat(methodName));\n      };\n    }\n    return function (arg1, arg2) {// 目前 api 最多两个参数\n      var options = protocol;\n      if (isFn(protocol)) {\n        options = protocol(arg1);\n      }\n\n      arg1 = processArgs(methodName, arg1, options.args, options.returnValue);\n\n      var args = [arg1];\n      if (typeof arg2 !== 'undefined') {\n        args.push(arg2);\n      }\n      var returnValue = wx[options.name || methodName].apply(wx, args);\n      if (isSyncApi(methodName)) {// 同步 api\n        return processReturnValue(methodName, returnValue, options.returnValue, isContextApi(methodName));\n      }\n      return returnValue;\n    };\n  }\n  return method;\n}\n\nvar todoApis = Object.create(null);\n\nvar TODOS = [\n'onTabBarMidButtonTap',\n'subscribePush',\n'unsubscribePush',\n'onPush',\n'offPush',\n'share'];\n\n\nfunction createTodoApi(name) {\n  return function todoApi(_ref)\n\n\n  {var fail = _ref.fail,complete = _ref.complete;\n    var res = {\n      errMsg: \"\".concat(name, \":fail:\\u6682\\u4E0D\\u652F\\u6301 \").concat(name, \" \\u65B9\\u6CD5\") };\n\n    isFn(fail) && fail(res);\n    isFn(complete) && complete(res);\n  };\n}\n\nTODOS.forEach(function (name) {\n  todoApis[name] = createTodoApi(name);\n});\n\nvar getEmitter = function () {\n  if (typeof getUniEmitter === 'function') {\n    /* eslint-disable no-undef */\n    return getUniEmitter;\n  }\n  var Emitter;\n  return function getUniEmitter() {\n    if (!Emitter) {\n      Emitter = new _vue.default();\n    }\n    return Emitter;\n  };\n}();\n\nfunction apply(ctx, method, args) {\n  return ctx[method].apply(ctx, args);\n}\n\nfunction $on() {\n  return apply(getEmitter(), '$on', Array.prototype.slice.call(arguments));\n}\nfunction $off() {\n  return apply(getEmitter(), '$off', Array.prototype.slice.call(arguments));\n}\nfunction $once() {\n  return apply(getEmitter(), '$once', Array.prototype.slice.call(arguments));\n}\nfunction $emit() {\n  return apply(getEmitter(), '$emit', Array.prototype.slice.call(arguments));\n}\n\nvar eventApi = /*#__PURE__*/Object.freeze({\n  $on: $on,\n  $off: $off,\n  $once: $once,\n  $emit: $emit });\n\n\nfunction requireNativePlugin(pluginName) {\n  /* eslint-disable no-undef */\n  if (typeof weex !== 'undefined') {\n    return weex.requireModule(pluginName);\n  }\n  /* eslint-disable no-undef */\n  return __requireNativePlugin__(pluginName);\n}\n\nfunction wrapper$1(webview) {\n  webview.$processed = true;\n\n  webview.postMessage = function (data) {\n    plus.webview.postMessageToUniNView({\n      type: 'UniAppSubNVue',\n      data: data },\n    webview.id);\n  };\n  var callbacks = [];\n  webview.onMessage = function (callback) {\n    callbacks.push(callback);\n  };\n  webview.$consumeMessage = function (e) {\n    callbacks.forEach(function (callback) {return callback(e);});\n  };\n\n  if (!webview.__uniapp_mask_id) {\n    return;\n  }\n  var maskColor = webview.__uniapp_mask;\n  var maskWebview = webview.__uniapp_mask_id === '0' ? {\n    setStyle: function setStyle(_ref2)\n\n    {var mask = _ref2.mask;\n      requireNativePlugin('uni-tabview').setMask({\n        color: mask });\n\n    } } :\n  plus.webview.getWebviewById(webview.__uniapp_mask_id);\n  var oldShow = webview.show;\n  var oldHide = webview.hide;\n  var oldClose = webview.close;\n\n  var showMask = function showMask() {\n    maskWebview.setStyle({\n      mask: maskColor });\n\n  };\n  var closeMask = function closeMask() {\n    maskWebview.setStyle({\n      mask: 'none' });\n\n  };\n  webview.show = function () {\n    showMask();for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {args[_key3] = arguments[_key3];}\n    return oldShow.apply(webview, args);\n  };\n  webview.hide = function () {\n    closeMask();for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {args[_key4] = arguments[_key4];}\n    return oldHide.apply(webview, args);\n  };\n  webview.close = function () {\n    closeMask();\n    callbacks = [];for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {args[_key5] = arguments[_key5];}\n    return oldClose.apply(webview, args);\n  };\n}\n\nfunction getSubNVueById(id) {\n  var webview = plus.webview.getWebviewById(id);\n  if (webview && !webview.$processed) {\n    wrapper$1(webview);\n  }\n  return webview;\n}\n\n\n\nvar api = /*#__PURE__*/Object.freeze({\n  getSubNVueById: getSubNVueById,\n  requireNativePlugin: requireNativePlugin });\n\n\nvar MPPage = Page;\nvar MPComponent = Component;\n\nvar customizeRE = /:/g;\n\nvar customize = cached(function (str) {\n  return camelize(str.replace(customizeRE, '-'));\n});\n\nfunction initTriggerEvent(mpInstance) {\n  {\n    if (!wx.canIUse('nextTick')) {\n      return;\n    }\n  }\n  var oldTriggerEvent = mpInstance.triggerEvent;\n  mpInstance.triggerEvent = function (event) {for (var _len6 = arguments.length, args = new Array(_len6 > 1 ? _len6 - 1 : 0), _key6 = 1; _key6 < _len6; _key6++) {args[_key6 - 1] = arguments[_key6];}\n    return oldTriggerEvent.apply(mpInstance, [customize(event)].concat(args));\n  };\n}\n\nfunction initHook(name, options) {\n  var oldHook = options[name];\n  if (!oldHook) {\n    options[name] = function () {\n      initTriggerEvent(this);\n    };\n  } else {\n    options[name] = function () {\n      initTriggerEvent(this);for (var _len7 = arguments.length, args = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {args[_key7] = arguments[_key7];}\n      return oldHook.apply(this, args);\n    };\n  }\n}\n\nPage = function Page() {var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  initHook('onLoad', options);\n  return MPPage(options);\n};\n\nComponent = function Component() {var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  initHook('created', options);\n  return MPComponent(options);\n};\n\nvar PAGE_EVENT_HOOKS = [\n'onPullDownRefresh',\n'onReachBottom',\n'onShareAppMessage',\n'onPageScroll',\n'onResize',\n'onTabItemTap'];\n\n\nfunction initMocks(vm, mocks) {\n  var mpInstance = vm.$mp[vm.mpType];\n  mocks.forEach(function (mock) {\n    if (hasOwn(mpInstance, mock)) {\n      vm[mock] = mpInstance[mock];\n    }\n  });\n}\n\nfunction hasHook(hook, vueOptions) {\n  if (!vueOptions) {\n    return true;\n  }\n\n  if (_vue.default.options && Array.isArray(_vue.default.options[hook])) {\n    return true;\n  }\n\n  vueOptions = vueOptions.default || vueOptions;\n\n  if (isFn(vueOptions)) {\n    if (isFn(vueOptions.extendOptions[hook])) {\n      return true;\n    }\n    if (vueOptions.super &&\n    vueOptions.super.options &&\n    Array.isArray(vueOptions.super.options[hook])) {\n      return true;\n    }\n    return false;\n  }\n\n  if (isFn(vueOptions[hook])) {\n    return true;\n  }\n  var mixins = vueOptions.mixins;\n  if (Array.isArray(mixins)) {\n    return !!mixins.find(function (mixin) {return hasHook(hook, mixin);});\n  }\n}\n\nfunction initHooks(mpOptions, hooks, vueOptions) {\n  hooks.forEach(function (hook) {\n    if (hasHook(hook, vueOptions)) {\n      mpOptions[hook] = function (args) {\n        return this.$vm && this.$vm.__call_hook(hook, args);\n      };\n    }\n  });\n}\n\nfunction initVueComponent(Vue, vueOptions) {\n  vueOptions = vueOptions.default || vueOptions;\n  var VueComponent;\n  if (isFn(vueOptions)) {\n    VueComponent = vueOptions;\n    vueOptions = VueComponent.extendOptions;\n  } else {\n    VueComponent = Vue.extend(vueOptions);\n  }\n  return [VueComponent, vueOptions];\n}\n\nfunction initSlots(vm, vueSlots) {\n  if (Array.isArray(vueSlots) && vueSlots.length) {\n    var $slots = Object.create(null);\n    vueSlots.forEach(function (slotName) {\n      $slots[slotName] = true;\n    });\n    vm.$scopedSlots = vm.$slots = $slots;\n  }\n}\n\nfunction initVueIds(vueIds, mpInstance) {\n  vueIds = (vueIds || '').split(',');\n  var len = vueIds.length;\n\n  if (len === 1) {\n    mpInstance._$vueId = vueIds[0];\n  } else if (len === 2) {\n    mpInstance._$vueId = vueIds[0];\n    mpInstance._$vuePid = vueIds[1];\n  }\n}\n\nfunction initData(vueOptions, context) {\n  var data = vueOptions.data || {};\n  var methods = vueOptions.methods || {};\n\n  if (typeof data === 'function') {\n    try {\n      data = data.call(context); // 支持 Vue.prototype 上挂的数据\n    } catch (e) {\n      if (Object({\"VUE_APP_PLATFORM\":\"app-plus\",\"NODE_ENV\":\"development\",\"BASE_URL\":\"/\"}).VUE_APP_DEBUG) {\n        console.warn('根据 Vue 的 data 函数初始化小程序 data 失败，请尽量确保 data 函数中不访问 vm 对象，否则可能影响首次数据渲染速度。', data);\n      }\n    }\n  } else {\n    try {\n      // 对 data 格式化\n      data = JSON.parse(JSON.stringify(data));\n    } catch (e) {}\n  }\n\n  if (!isPlainObject(data)) {\n    data = {};\n  }\n\n  Object.keys(methods).forEach(function (methodName) {\n    if (context.__lifecycle_hooks__.indexOf(methodName) === -1 && !hasOwn(data, methodName)) {\n      data[methodName] = methods[methodName];\n    }\n  });\n\n  return data;\n}\n\nvar PROP_TYPES = [String, Number, Boolean, Object, Array, null];\n\nfunction createObserver(name) {\n  return function observer(newVal, oldVal) {\n    if (this.$vm) {\n      this.$vm[name] = newVal; // 为了触发其他非 render watcher\n    }\n  };\n}\n\nfunction initBehaviors(vueOptions, initBehavior) {\n  var vueBehaviors = vueOptions['behaviors'];\n  var vueExtends = vueOptions['extends'];\n  var vueMixins = vueOptions['mixins'];\n\n  var vueProps = vueOptions['props'];\n\n  if (!vueProps) {\n    vueOptions['props'] = vueProps = [];\n  }\n\n  var behaviors = [];\n  if (Array.isArray(vueBehaviors)) {\n    vueBehaviors.forEach(function (behavior) {\n      behaviors.push(behavior.replace('uni://', \"wx\".concat(\"://\")));\n      if (behavior === 'uni://form-field') {\n        if (Array.isArray(vueProps)) {\n          vueProps.push('name');\n          vueProps.push('value');\n        } else {\n          vueProps['name'] = {\n            type: String,\n            default: '' };\n\n          vueProps['value'] = {\n            type: [String, Number, Boolean, Array, Object, Date],\n            default: '' };\n\n        }\n      }\n    });\n  }\n  if (isPlainObject(vueExtends) && vueExtends.props) {\n    behaviors.push(\n    initBehavior({\n      properties: initProperties(vueExtends.props, true) }));\n\n\n  }\n  if (Array.isArray(vueMixins)) {\n    vueMixins.forEach(function (vueMixin) {\n      if (isPlainObject(vueMixin) && vueMixin.props) {\n        behaviors.push(\n        initBehavior({\n          properties: initProperties(vueMixin.props, true) }));\n\n\n      }\n    });\n  }\n  return behaviors;\n}\n\nfunction parsePropType(key, type, defaultValue, file) {\n  // [String]=>String\n  if (Array.isArray(type) && type.length === 1) {\n    return type[0];\n  }\n  return type;\n}\n\nfunction initProperties(props) {var isBehavior = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;var file = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';\n  var properties = {};\n  if (!isBehavior) {\n    properties.vueId = {\n      type: String,\n      value: '' };\n\n    properties.vueSlots = { // 小程序不能直接定义 $slots 的 props，所以通过 vueSlots 转换到 $slots\n      type: null,\n      value: [],\n      observer: function observer(newVal, oldVal) {\n        var $slots = Object.create(null);\n        newVal.forEach(function (slotName) {\n          $slots[slotName] = true;\n        });\n        this.setData({\n          $slots: $slots });\n\n      } };\n\n  }\n  if (Array.isArray(props)) {// ['title']\n    props.forEach(function (key) {\n      properties[key] = {\n        type: null,\n        observer: createObserver(key) };\n\n    });\n  } else if (isPlainObject(props)) {// {title:{type:String,default:''},content:String}\n    Object.keys(props).forEach(function (key) {\n      var opts = props[key];\n      if (isPlainObject(opts)) {// title:{type:String,default:''}\n        var value = opts['default'];\n        if (isFn(value)) {\n          value = value();\n        }\n\n        opts.type = parsePropType(key, opts.type);\n\n        properties[key] = {\n          type: PROP_TYPES.indexOf(opts.type) !== -1 ? opts.type : null,\n          value: value,\n          observer: createObserver(key) };\n\n      } else {// content:String\n        var type = parsePropType(key, opts);\n        properties[key] = {\n          type: PROP_TYPES.indexOf(type) !== -1 ? type : null,\n          observer: createObserver(key) };\n\n      }\n    });\n  }\n  return properties;\n}\n\nfunction wrapper$2(event) {\n  // TODO 又得兼容 mpvue 的 mp 对象\n  try {\n    event.mp = JSON.parse(JSON.stringify(event));\n  } catch (e) {}\n\n  event.stopPropagation = noop;\n  event.preventDefault = noop;\n\n  event.target = event.target || {};\n\n  if (!hasOwn(event, 'detail')) {\n    event.detail = {};\n  }\n\n  if (isPlainObject(event.detail)) {\n    event.target = Object.assign({}, event.target, event.detail);\n  }\n\n  return event;\n}\n\nfunction getExtraValue(vm, dataPathsArray) {\n  var context = vm;\n  dataPathsArray.forEach(function (dataPathArray) {\n    var dataPath = dataPathArray[0];\n    var value = dataPathArray[2];\n    if (dataPath || typeof value !== 'undefined') {// ['','',index,'disable']\n      var propPath = dataPathArray[1];\n      var valuePath = dataPathArray[3];\n\n      var vFor = dataPath ? vm.__get_value(dataPath, context) : context;\n\n      if (Number.isInteger(vFor)) {\n        context = value;\n      } else if (!propPath) {\n        context = vFor[value];\n      } else {\n        if (Array.isArray(vFor)) {\n          context = vFor.find(function (vForItem) {\n            return vm.__get_value(propPath, vForItem) === value;\n          });\n        } else if (isPlainObject(vFor)) {\n          context = Object.keys(vFor).find(function (vForKey) {\n            return vm.__get_value(propPath, vFor[vForKey]) === value;\n          });\n        } else {\n          console.error('v-for 暂不支持循环数据：', vFor);\n        }\n      }\n\n      if (valuePath) {\n        context = vm.__get_value(valuePath, context);\n      }\n    }\n  });\n  return context;\n}\n\nfunction processEventExtra(vm, extra, event) {\n  var extraObj = {};\n\n  if (Array.isArray(extra) && extra.length) {\n    /**\r\n                                              *[\r\n                                              *    ['data.items', 'data.id', item.data.id],\r\n                                              *    ['metas', 'id', meta.id]\r\n                                              *],\r\n                                              *[\r\n                                              *    ['data.items', 'data.id', item.data.id],\r\n                                              *    ['metas', 'id', meta.id]\r\n                                              *],\r\n                                              *'test'\r\n                                              */\n    extra.forEach(function (dataPath, index) {\n      if (typeof dataPath === 'string') {\n        if (!dataPath) {// model,prop.sync\n          extraObj['$' + index] = vm;\n        } else {\n          if (dataPath === '$event') {// $event\n            extraObj['$' + index] = event;\n          } else if (dataPath.indexOf('$event.') === 0) {// $event.target.value\n            extraObj['$' + index] = vm.__get_value(dataPath.replace('$event.', ''), event);\n          } else {\n            extraObj['$' + index] = vm.__get_value(dataPath);\n          }\n        }\n      } else {\n        extraObj['$' + index] = getExtraValue(vm, dataPath);\n      }\n    });\n  }\n\n  return extraObj;\n}\n\nfunction getObjByArray(arr) {\n  var obj = {};\n  for (var i = 1; i < arr.length; i++) {\n    var element = arr[i];\n    obj[element[0]] = element[1];\n  }\n  return obj;\n}\n\nfunction processEventArgs(vm, event) {var args = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];var extra = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];var isCustom = arguments.length > 4 ? arguments[4] : undefined;var methodName = arguments.length > 5 ? arguments[5] : undefined;\n  var isCustomMPEvent = false; // wxcomponent 组件，传递原始 event 对象\n  if (isCustom) {// 自定义事件\n    isCustomMPEvent = event.currentTarget &&\n    event.currentTarget.dataset &&\n    event.currentTarget.dataset.comType === 'wx';\n    if (!args.length) {// 无参数，直接传入 event 或 detail 数组\n      if (isCustomMPEvent) {\n        return [event];\n      }\n      return event.detail.__args__ || event.detail;\n    }\n  }\n\n  var extraObj = processEventExtra(vm, extra, event);\n\n  var ret = [];\n  args.forEach(function (arg) {\n    if (arg === '$event') {\n      if (methodName === '__set_model' && !isCustom) {// input v-model value\n        ret.push(event.target.value);\n      } else {\n        if (isCustom && !isCustomMPEvent) {\n          ret.push(event.detail.__args__[0]);\n        } else {// wxcomponent 组件或内置组件\n          ret.push(event);\n        }\n      }\n    } else {\n      if (Array.isArray(arg) && arg[0] === 'o') {\n        ret.push(getObjByArray(arg));\n      } else if (typeof arg === 'string' && hasOwn(extraObj, arg)) {\n        ret.push(extraObj[arg]);\n      } else {\n        ret.push(arg);\n      }\n    }\n  });\n\n  return ret;\n}\n\nvar ONCE = '~';\nvar CUSTOM = '^';\n\nfunction isMatchEventType(eventType, optType) {\n  return eventType === optType ||\n\n  optType === 'regionchange' && (\n\n  eventType === 'begin' ||\n  eventType === 'end');\n\n\n}\n\nfunction handleEvent(event) {var _this = this;\n  event = wrapper$2(event);\n\n  // [['tap',[['handle',[1,2,a]],['handle1',[1,2,a]]]]]\n  var dataset = (event.currentTarget || event.target).dataset;\n  if (!dataset) {\n    return console.warn(\"\\u4E8B\\u4EF6\\u4FE1\\u606F\\u4E0D\\u5B58\\u5728\");\n  }\n  var eventOpts = dataset.eventOpts || dataset['event-opts']; // 支付宝 web-view 组件 dataset 非驼峰\n  if (!eventOpts) {\n    return console.warn(\"\\u4E8B\\u4EF6\\u4FE1\\u606F\\u4E0D\\u5B58\\u5728\");\n  }\n\n  // [['handle',[1,2,a]],['handle1',[1,2,a]]]\n  var eventType = event.type;\n\n  var ret = [];\n\n  eventOpts.forEach(function (eventOpt) {\n    var type = eventOpt[0];\n    var eventsArray = eventOpt[1];\n\n    var isCustom = type.charAt(0) === CUSTOM;\n    type = isCustom ? type.slice(1) : type;\n    var isOnce = type.charAt(0) === ONCE;\n    type = isOnce ? type.slice(1) : type;\n\n    if (eventsArray && isMatchEventType(eventType, type)) {\n      eventsArray.forEach(function (eventArray) {\n        var methodName = eventArray[0];\n        if (methodName) {\n          var handlerCtx = _this.$vm;\n          if (\n          handlerCtx.$options.generic &&\n          handlerCtx.$parent &&\n          handlerCtx.$parent.$parent)\n          {// mp-weixin,mp-toutiao 抽象节点模拟 scoped slots\n            handlerCtx = handlerCtx.$parent.$parent;\n          }\n          var handler = handlerCtx[methodName];\n          if (!isFn(handler)) {\n            throw new Error(\" _vm.\".concat(methodName, \" is not a function\"));\n          }\n          if (isOnce) {\n            if (handler.once) {\n              return;\n            }\n            handler.once = true;\n          }\n          ret.push(handler.apply(handlerCtx, processEventArgs(\n          _this.$vm,\n          event,\n          eventArray[1],\n          eventArray[2],\n          isCustom,\n          methodName)));\n\n        }\n      });\n    }\n  });\n\n  if (\n  eventType === 'input' &&\n  ret.length === 1 &&\n  typeof ret[0] !== 'undefined')\n  {\n    return ret[0];\n  }\n}\n\nvar hooks = [\n'onShow',\n'onHide',\n'onError',\n'onPageNotFound'];\n\n\nfunction parseBaseApp(vm, _ref3)\n\n\n{var mocks = _ref3.mocks,initRefs = _ref3.initRefs;\n  if (vm.$options.store) {\n    _vue.default.prototype.$store = vm.$options.store;\n  }\n\n  _vue.default.prototype.mpHost = \"app-plus\";\n\n  _vue.default.mixin({\n    beforeCreate: function beforeCreate() {\n      if (!this.$options.mpType) {\n        return;\n      }\n\n      this.mpType = this.$options.mpType;\n\n      this.$mp = _defineProperty({\n        data: {} },\n      this.mpType, this.$options.mpInstance);\n\n\n      this.$scope = this.$options.mpInstance;\n\n      delete this.$options.mpType;\n      delete this.$options.mpInstance;\n\n      if (this.mpType !== 'app') {\n        initRefs(this);\n        initMocks(this, mocks);\n      }\n    } });\n\n\n  var appOptions = {\n    onLaunch: function onLaunch(args) {\n      if (this.$vm) {// 已经初始化过了，主要是为了百度，百度 onShow 在 onLaunch 之前\n        return;\n      }\n\n      this.$vm = vm;\n\n      this.$vm.$mp = {\n        app: this };\n\n\n      this.$vm.$scope = this;\n      // vm 上也挂载 globalData\n      this.$vm.globalData = this.globalData;\n\n      this.$vm._isMounted = true;\n      this.$vm.__call_hook('mounted', args);\n\n      this.$vm.__call_hook('onLaunch', args);\n    } };\n\n\n  // 兼容旧版本 globalData\n  appOptions.globalData = vm.$options.globalData || {};\n\n  initHooks(appOptions, hooks);\n\n  return appOptions;\n}\n\nvar mocks = ['__route__', '__wxExparserNodeId__', '__wxWebviewId__'];\n\nfunction findVmByVueId(vm, vuePid) {\n  var $children = vm.$children;\n  // 优先查找直属\n  var parentVm = $children.find(function (childVm) {return childVm.$scope._$vueId === vuePid;});\n  if (parentVm) {\n    return parentVm;\n  }\n  // 反向递归查找\n  for (var i = $children.length - 1; i >= 0; i--) {\n    parentVm = findVmByVueId($children[i], vuePid);\n    if (parentVm) {\n      return parentVm;\n    }\n  }\n}\n\nfunction initBehavior(options) {\n  return Behavior(options);\n}\n\nfunction isPage() {\n  return !!this.route;\n}\n\nfunction initRelation(detail) {\n  this.triggerEvent('__l', detail);\n}\n\nfunction initRefs(vm) {\n  var mpInstance = vm.$scope;\n  Object.defineProperty(vm, '$refs', {\n    get: function get() {\n      var $refs = {};\n      var components = mpInstance.selectAllComponents('.vue-ref');\n      components.forEach(function (component) {\n        var ref = component.dataset.ref;\n        $refs[ref] = component.$vm || component;\n      });\n      var forComponents = mpInstance.selectAllComponents('.vue-ref-in-for');\n      forComponents.forEach(function (component) {\n        var ref = component.dataset.ref;\n        if (!$refs[ref]) {\n          $refs[ref] = [];\n        }\n        $refs[ref].push(component.$vm || component);\n      });\n      return $refs;\n    } });\n\n}\n\nfunction handleLink(event) {var _ref4 =\n\n\n\n  event.detail || event.value,vuePid = _ref4.vuePid,vueOptions = _ref4.vueOptions; // detail 是微信,value 是百度(dipatch)\n\n  var parentVm;\n\n  if (vuePid) {\n    parentVm = findVmByVueId(this.$vm, vuePid);\n  }\n\n  if (!parentVm) {\n    parentVm = this.$vm;\n  }\n\n  vueOptions.parent = parentVm;\n}\n\nfunction parseApp(vm) {\n  return parseBaseApp(vm, {\n    mocks: mocks,\n    initRefs: initRefs });\n\n}\n\nvar hooks$1 = [\n'onUniNViewMessage'];\n\n\nfunction parseApp$1(vm) {\n  var appOptions = parseApp(vm);\n\n  initHooks(appOptions, hooks$1);\n\n  return appOptions;\n}\n\nfunction createApp(vm) {\n  App(parseApp$1(vm));\n  return vm;\n}\n\nfunction parseBaseComponent(vueComponentOptions)\n\n\n{var _ref5 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},isPage = _ref5.isPage,initRelation = _ref5.initRelation;var _initVueComponent =\n  initVueComponent(_vue.default, vueComponentOptions),_initVueComponent2 = _slicedToArray(_initVueComponent, 2),VueComponent = _initVueComponent2[0],vueOptions = _initVueComponent2[1];\n\n  var componentOptions = {\n    options: {\n      multipleSlots: true,\n      addGlobalClass: true },\n\n    data: initData(vueOptions, _vue.default.prototype),\n    behaviors: initBehaviors(vueOptions, initBehavior),\n    properties: initProperties(vueOptions.props, false, vueOptions.__file),\n    lifetimes: {\n      attached: function attached() {\n        var properties = this.properties;\n\n        var options = {\n          mpType: isPage.call(this) ? 'page' : 'component',\n          mpInstance: this,\n          propsData: properties };\n\n\n        initVueIds(properties.vueId, this);\n\n        // 处理父子关系\n        initRelation.call(this, {\n          vuePid: this._$vuePid,\n          vueOptions: options });\n\n\n        // 初始化 vue 实例\n        this.$vm = new VueComponent(options);\n\n        // 处理$slots,$scopedSlots（暂不支持动态变化$slots）\n        initSlots(this.$vm, properties.vueSlots);\n\n        // 触发首次 setData\n        this.$vm.$mount();\n      },\n      ready: function ready() {\n        // 当组件 props 默认值为 true，初始化时传入 false 会导致 created,ready 触发, 但 attached 不触发\n        // https://developers.weixin.qq.com/community/develop/doc/00066ae2844cc0f8eb883e2a557800\n        if (this.$vm) {\n          this.$vm._isMounted = true;\n          this.$vm.__call_hook('mounted');\n          this.$vm.__call_hook('onReady');\n        }\n      },\n      detached: function detached() {\n        this.$vm.$destroy();\n      } },\n\n    pageLifetimes: {\n      show: function show(args) {\n        this.$vm && this.$vm.__call_hook('onPageShow', args);\n      },\n      hide: function hide() {\n        this.$vm && this.$vm.__call_hook('onPageHide');\n      },\n      resize: function resize(size) {\n        this.$vm && this.$vm.__call_hook('onPageResize', size);\n      } },\n\n    methods: {\n      __l: handleLink,\n      __e: handleEvent } };\n\n\n\n  if (Array.isArray(vueOptions.wxsCallMethods)) {\n    vueOptions.wxsCallMethods.forEach(function (callMethod) {\n      componentOptions.methods[callMethod] = function (args) {\n        return this.$vm[callMethod](args);\n      };\n    });\n  }\n\n  if (isPage) {\n    return componentOptions;\n  }\n  return [componentOptions, VueComponent];\n}\n\nfunction parseComponent(vueComponentOptions) {\n  return parseBaseComponent(vueComponentOptions, {\n    isPage: isPage,\n    initRelation: initRelation });\n\n}\n\nfunction parseComponent$1(vueComponentOptions) {\n  var componentOptions = parseComponent(vueComponentOptions);\n\n  componentOptions.methods.$getAppWebview = function () {\n    return plus.webview.getWebviewById(\"\".concat(this.__wxWebviewId__));\n  };\n  return componentOptions;\n}\n\nvar hooks$2 = [\n'onShow',\n'onHide',\n'onUnload'];\n\n\nhooks$2.push.apply(hooks$2, PAGE_EVENT_HOOKS);\n\nfunction parseBasePage(vuePageOptions, _ref6)\n\n\n{var isPage = _ref6.isPage,initRelation = _ref6.initRelation;\n  var pageOptions = parseComponent$1(vuePageOptions);\n\n  initHooks(pageOptions.methods, hooks$2, vuePageOptions);\n\n  pageOptions.methods.onLoad = function (args) {\n    this.$vm.$mp.query = args; // 兼容 mpvue\n    this.$vm.__call_hook('onLoad', args);\n  };\n\n  return pageOptions;\n}\n\nfunction parsePage(vuePageOptions) {\n  return parseBasePage(vuePageOptions, {\n    isPage: isPage,\n    initRelation: initRelation });\n\n}\n\nvar hooks$3 = [\n'onBackPress',\n'onNavigationBarButtonTap',\n'onNavigationBarSearchInputChanged',\n'onNavigationBarSearchInputConfirmed',\n'onNavigationBarSearchInputClicked'];\n\n\nfunction parsePage$1(vuePageOptions) {\n  var pageOptions = parsePage(vuePageOptions);\n\n  initHooks(pageOptions.methods, hooks$3);\n\n  return pageOptions;\n}\n\nfunction createPage(vuePageOptions) {\n  {\n    return Component(parsePage$1(vuePageOptions));\n  }\n}\n\nfunction createComponent(vueOptions) {\n  {\n    return Component(parseComponent$1(vueOptions));\n  }\n}\n\ntodos.forEach(function (todoApi) {\n  protocols[todoApi] = false;\n});\n\ncanIUses.forEach(function (canIUseApi) {\n  var apiName = protocols[canIUseApi] && protocols[canIUseApi].name ? protocols[canIUseApi].name :\n  canIUseApi;\n  if (!wx.canIUse(apiName)) {\n    protocols[canIUseApi] = false;\n  }\n});\n\nvar uni = {};\n\nif (typeof Proxy !== 'undefined' && \"app-plus\" !== 'app-plus') {\n  uni = new Proxy({}, {\n    get: function get(target, name) {\n      if (target[name]) {\n        return target[name];\n      }\n      if (baseApi[name]) {\n        return baseApi[name];\n      }\n      if (api[name]) {\n        return promisify(name, api[name]);\n      }\n      if (eventApi[name]) {\n        return eventApi[name];\n      }\n      if (!hasOwn(wx, name) && !hasOwn(protocols, name)) {\n        return;\n      }\n      return promisify(name, wrapper(name, wx[name]));\n    },\n    set: function set(target, name, value) {\n      target[name] = value;\n      return true;\n    } });\n\n} else {\n  Object.keys(baseApi).forEach(function (name) {\n    uni[name] = baseApi[name];\n  });\n\n  Object.keys(eventApi).forEach(function (name) {\n    uni[name] = eventApi[name];\n  });\n\n  Object.keys(api).forEach(function (name) {\n    uni[name] = promisify(name, api[name]);\n  });\n\n  Object.keys(wx).forEach(function (name) {\n    if (hasOwn(wx, name) || hasOwn(protocols, name)) {\n      uni[name] = promisify(name, wrapper(name, wx[name]));\n    }\n  });\n}\n\n{\n  if (typeof global !== 'undefined') {\n    global.uni = uni;\n    global.UniEmitter = eventApi;\n  }\n}\n\nwx.createApp = createApp;\nwx.createPage = createPage;\nwx.createComponent = createComponent;\n\nvar uni$1 = uni;var _default =\n\nuni$1;exports.default = _default;\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../webpack/buildin/global.js */ 2)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbIl90b1N0cmluZyIsIk9iamVjdCIsInByb3RvdHlwZSIsInRvU3RyaW5nIiwiaGFzT3duUHJvcGVydHkiLCJpc0ZuIiwiZm4iLCJpc1N0ciIsInN0ciIsImlzUGxhaW5PYmplY3QiLCJvYmoiLCJjYWxsIiwiaGFzT3duIiwia2V5Iiwibm9vcCIsImNhY2hlZCIsImNhY2hlIiwiY3JlYXRlIiwiY2FjaGVkRm4iLCJoaXQiLCJjYW1lbGl6ZVJFIiwiY2FtZWxpemUiLCJyZXBsYWNlIiwiXyIsImMiLCJ0b1VwcGVyQ2FzZSIsIkhPT0tTIiwiZ2xvYmFsSW50ZXJjZXB0b3JzIiwic2NvcGVkSW50ZXJjZXB0b3JzIiwibWVyZ2VIb29rIiwicGFyZW50VmFsIiwiY2hpbGRWYWwiLCJyZXMiLCJjb25jYXQiLCJBcnJheSIsImlzQXJyYXkiLCJkZWR1cGVIb29rcyIsImhvb2tzIiwiaSIsImxlbmd0aCIsImluZGV4T2YiLCJwdXNoIiwicmVtb3ZlSG9vayIsImhvb2siLCJpbmRleCIsInNwbGljZSIsIm1lcmdlSW50ZXJjZXB0b3JIb29rIiwiaW50ZXJjZXB0b3IiLCJvcHRpb24iLCJrZXlzIiwiZm9yRWFjaCIsInJlbW92ZUludGVyY2VwdG9ySG9vayIsImFkZEludGVyY2VwdG9yIiwibWV0aG9kIiwicmVtb3ZlSW50ZXJjZXB0b3IiLCJ3cmFwcGVySG9vayIsImRhdGEiLCJpc1Byb21pc2UiLCJ0aGVuIiwicXVldWUiLCJwcm9taXNlIiwiUHJvbWlzZSIsInJlc29sdmUiLCJjYWxsYmFjayIsIndyYXBwZXJPcHRpb25zIiwib3B0aW9ucyIsIm5hbWUiLCJvbGRDYWxsYmFjayIsImNhbGxiYWNrSW50ZXJjZXB0b3IiLCJ3cmFwcGVyUmV0dXJuVmFsdWUiLCJyZXR1cm5WYWx1ZSIsInJldHVyblZhbHVlSG9va3MiLCJnZXRBcGlJbnRlcmNlcHRvckhvb2tzIiwic2xpY2UiLCJzY29wZWRJbnRlcmNlcHRvciIsImludm9rZUFwaSIsImFwaSIsInBhcmFtcyIsImludm9rZSIsInByb21pc2VJbnRlcmNlcHRvciIsImNhdGNoIiwiU1lOQ19BUElfUkUiLCJDT05URVhUX0FQSV9SRSIsIkNBTExCQUNLX0FQSV9SRSIsImlzQ29udGV4dEFwaSIsInRlc3QiLCJpc1N5bmNBcGkiLCJpc0NhbGxiYWNrQXBpIiwiaGFuZGxlUHJvbWlzZSIsImVyciIsInNob3VsZFByb21pc2UiLCJwcm9taXNpZnkiLCJwcm9taXNlQXBpIiwic3VjY2VzcyIsImZhaWwiLCJjb21wbGV0ZSIsInJlamVjdCIsImFzc2lnbiIsImZpbmFsbHkiLCJjb25zdHJ1Y3RvciIsInZhbHVlIiwicmVhc29uIiwiRVBTIiwiQkFTRV9ERVZJQ0VfV0lEVEgiLCJpc0lPUyIsImRldmljZVdpZHRoIiwiZGV2aWNlRFBSIiwiY2hlY2tEZXZpY2VXaWR0aCIsInd4IiwiZ2V0U3lzdGVtSW5mb1N5bmMiLCJwbGF0Zm9ybSIsInBpeGVsUmF0aW8iLCJ3aW5kb3dXaWR0aCIsInVweDJweCIsIm51bWJlciIsIm5ld0RldmljZVdpZHRoIiwiTnVtYmVyIiwicmVzdWx0IiwiTWF0aCIsImZsb29yIiwiaW50ZXJjZXB0b3JzIiwiYmFzZUFwaSIsImZyZWV6ZSIsInByb3RvY29scyIsInRvZG9zIiwiY2FuSVVzZXMiLCJDQUxMQkFDS1MiLCJwcm9jZXNzQ2FsbGJhY2siLCJtZXRob2ROYW1lIiwicHJvY2Vzc1JldHVyblZhbHVlIiwicHJvY2Vzc0FyZ3MiLCJmcm9tQXJncyIsImFyZ3NPcHRpb24iLCJrZWVwRnJvbUFyZ3MiLCJ0b0FyZ3MiLCJrZXlPcHRpb24iLCJjb25zb2xlIiwid2FybiIsImtlZXBSZXR1cm5WYWx1ZSIsIndyYXBwZXIiLCJwcm90b2NvbCIsImVycm9yIiwiYXJnMSIsImFyZzIiLCJhcmdzIiwiYXBwbHkiLCJ0b2RvQXBpcyIsIlRPRE9TIiwiY3JlYXRlVG9kb0FwaSIsInRvZG9BcGkiLCJlcnJNc2ciLCJnZXRFbWl0dGVyIiwiZ2V0VW5pRW1pdHRlciIsIkVtaXR0ZXIiLCJWdWUiLCJjdHgiLCIkb24iLCJhcmd1bWVudHMiLCIkb2ZmIiwiJG9uY2UiLCIkZW1pdCIsImV2ZW50QXBpIiwicmVxdWlyZU5hdGl2ZVBsdWdpbiIsInBsdWdpbk5hbWUiLCJ3ZWV4IiwicmVxdWlyZU1vZHVsZSIsIl9fcmVxdWlyZU5hdGl2ZVBsdWdpbl9fIiwid3JhcHBlciQxIiwid2VidmlldyIsIiRwcm9jZXNzZWQiLCJwb3N0TWVzc2FnZSIsInBsdXMiLCJwb3N0TWVzc2FnZVRvVW5pTlZpZXciLCJ0eXBlIiwiaWQiLCJjYWxsYmFja3MiLCJvbk1lc3NhZ2UiLCIkY29uc3VtZU1lc3NhZ2UiLCJlIiwiX191bmlhcHBfbWFza19pZCIsIm1hc2tDb2xvciIsIl9fdW5pYXBwX21hc2siLCJtYXNrV2VidmlldyIsInNldFN0eWxlIiwibWFzayIsInNldE1hc2siLCJjb2xvciIsImdldFdlYnZpZXdCeUlkIiwib2xkU2hvdyIsInNob3ciLCJvbGRIaWRlIiwiaGlkZSIsIm9sZENsb3NlIiwiY2xvc2UiLCJzaG93TWFzayIsImNsb3NlTWFzayIsImdldFN1Yk5WdWVCeUlkIiwiTVBQYWdlIiwiUGFnZSIsIk1QQ29tcG9uZW50IiwiQ29tcG9uZW50IiwiY3VzdG9taXplUkUiLCJjdXN0b21pemUiLCJpbml0VHJpZ2dlckV2ZW50IiwibXBJbnN0YW5jZSIsImNhbklVc2UiLCJvbGRUcmlnZ2VyRXZlbnQiLCJ0cmlnZ2VyRXZlbnQiLCJldmVudCIsImluaXRIb29rIiwib2xkSG9vayIsIlBBR0VfRVZFTlRfSE9PS1MiLCJpbml0TW9ja3MiLCJ2bSIsIm1vY2tzIiwiJG1wIiwibXBUeXBlIiwibW9jayIsImhhc0hvb2siLCJ2dWVPcHRpb25zIiwiZGVmYXVsdCIsImV4dGVuZE9wdGlvbnMiLCJzdXBlciIsIm1peGlucyIsImZpbmQiLCJtaXhpbiIsImluaXRIb29rcyIsIm1wT3B0aW9ucyIsIiR2bSIsIl9fY2FsbF9ob29rIiwiaW5pdFZ1ZUNvbXBvbmVudCIsIlZ1ZUNvbXBvbmVudCIsImV4dGVuZCIsImluaXRTbG90cyIsInZ1ZVNsb3RzIiwiJHNsb3RzIiwic2xvdE5hbWUiLCIkc2NvcGVkU2xvdHMiLCJpbml0VnVlSWRzIiwidnVlSWRzIiwic3BsaXQiLCJsZW4iLCJfJHZ1ZUlkIiwiXyR2dWVQaWQiLCJpbml0RGF0YSIsImNvbnRleHQiLCJtZXRob2RzIiwicHJvY2VzcyIsIlZVRV9BUFBfREVCVUciLCJKU09OIiwicGFyc2UiLCJzdHJpbmdpZnkiLCJfX2xpZmVjeWNsZV9ob29rc19fIiwiUFJPUF9UWVBFUyIsIlN0cmluZyIsIkJvb2xlYW4iLCJjcmVhdGVPYnNlcnZlciIsIm9ic2VydmVyIiwibmV3VmFsIiwib2xkVmFsIiwiaW5pdEJlaGF2aW9ycyIsImluaXRCZWhhdmlvciIsInZ1ZUJlaGF2aW9ycyIsInZ1ZUV4dGVuZHMiLCJ2dWVNaXhpbnMiLCJ2dWVQcm9wcyIsImJlaGF2aW9ycyIsImJlaGF2aW9yIiwiRGF0ZSIsInByb3BzIiwicHJvcGVydGllcyIsImluaXRQcm9wZXJ0aWVzIiwidnVlTWl4aW4iLCJwYXJzZVByb3BUeXBlIiwiZGVmYXVsdFZhbHVlIiwiZmlsZSIsImlzQmVoYXZpb3IiLCJ2dWVJZCIsInNldERhdGEiLCJvcHRzIiwid3JhcHBlciQyIiwibXAiLCJzdG9wUHJvcGFnYXRpb24iLCJwcmV2ZW50RGVmYXVsdCIsInRhcmdldCIsImRldGFpbCIsImdldEV4dHJhVmFsdWUiLCJkYXRhUGF0aHNBcnJheSIsImRhdGFQYXRoQXJyYXkiLCJkYXRhUGF0aCIsInByb3BQYXRoIiwidmFsdWVQYXRoIiwidkZvciIsIl9fZ2V0X3ZhbHVlIiwiaXNJbnRlZ2VyIiwidkZvckl0ZW0iLCJ2Rm9yS2V5IiwicHJvY2Vzc0V2ZW50RXh0cmEiLCJleHRyYSIsImV4dHJhT2JqIiwiZ2V0T2JqQnlBcnJheSIsImFyciIsImVsZW1lbnQiLCJwcm9jZXNzRXZlbnRBcmdzIiwiaXNDdXN0b20iLCJpc0N1c3RvbU1QRXZlbnQiLCJjdXJyZW50VGFyZ2V0IiwiZGF0YXNldCIsImNvbVR5cGUiLCJfX2FyZ3NfXyIsInJldCIsImFyZyIsIk9OQ0UiLCJDVVNUT00iLCJpc01hdGNoRXZlbnRUeXBlIiwiZXZlbnRUeXBlIiwib3B0VHlwZSIsImhhbmRsZUV2ZW50IiwiZXZlbnRPcHRzIiwiZXZlbnRPcHQiLCJldmVudHNBcnJheSIsImNoYXJBdCIsImlzT25jZSIsImV2ZW50QXJyYXkiLCJoYW5kbGVyQ3R4IiwiJG9wdGlvbnMiLCJnZW5lcmljIiwiJHBhcmVudCIsImhhbmRsZXIiLCJFcnJvciIsIm9uY2UiLCJwYXJzZUJhc2VBcHAiLCJpbml0UmVmcyIsInN0b3JlIiwiJHN0b3JlIiwibXBIb3N0IiwiYmVmb3JlQ3JlYXRlIiwiJHNjb3BlIiwiYXBwT3B0aW9ucyIsIm9uTGF1bmNoIiwiYXBwIiwiZ2xvYmFsRGF0YSIsIl9pc01vdW50ZWQiLCJmaW5kVm1CeVZ1ZUlkIiwidnVlUGlkIiwiJGNoaWxkcmVuIiwicGFyZW50Vm0iLCJjaGlsZFZtIiwiQmVoYXZpb3IiLCJpc1BhZ2UiLCJyb3V0ZSIsImluaXRSZWxhdGlvbiIsImRlZmluZVByb3BlcnR5IiwiZ2V0IiwiJHJlZnMiLCJjb21wb25lbnRzIiwic2VsZWN0QWxsQ29tcG9uZW50cyIsImNvbXBvbmVudCIsInJlZiIsImZvckNvbXBvbmVudHMiLCJoYW5kbGVMaW5rIiwicGFyZW50IiwicGFyc2VBcHAiLCJob29rcyQxIiwicGFyc2VBcHAkMSIsImNyZWF0ZUFwcCIsIkFwcCIsInBhcnNlQmFzZUNvbXBvbmVudCIsInZ1ZUNvbXBvbmVudE9wdGlvbnMiLCJjb21wb25lbnRPcHRpb25zIiwibXVsdGlwbGVTbG90cyIsImFkZEdsb2JhbENsYXNzIiwiX19maWxlIiwibGlmZXRpbWVzIiwiYXR0YWNoZWQiLCJwcm9wc0RhdGEiLCIkbW91bnQiLCJyZWFkeSIsImRldGFjaGVkIiwiJGRlc3Ryb3kiLCJwYWdlTGlmZXRpbWVzIiwicmVzaXplIiwic2l6ZSIsIl9fbCIsIl9fZSIsInd4c0NhbGxNZXRob2RzIiwiY2FsbE1ldGhvZCIsInBhcnNlQ29tcG9uZW50IiwicGFyc2VDb21wb25lbnQkMSIsIiRnZXRBcHBXZWJ2aWV3IiwiX193eFdlYnZpZXdJZF9fIiwiaG9va3MkMiIsInBhcnNlQmFzZVBhZ2UiLCJ2dWVQYWdlT3B0aW9ucyIsInBhZ2VPcHRpb25zIiwib25Mb2FkIiwicXVlcnkiLCJwYXJzZVBhZ2UiLCJob29rcyQzIiwicGFyc2VQYWdlJDEiLCJjcmVhdGVQYWdlIiwiY3JlYXRlQ29tcG9uZW50IiwiY2FuSVVzZUFwaSIsImFwaU5hbWUiLCJ1bmkiLCJQcm94eSIsInNldCIsImdsb2JhbCIsIlVuaUVtaXR0ZXIiLCJ1bmkkMSJdLCJtYXBwaW5ncyI6IjZPQUFBLHFFOztBQUVBLElBQU1BLFNBQVMsR0FBR0MsTUFBTSxDQUFDQyxTQUFQLENBQWlCQyxRQUFuQztBQUNBLElBQU1DLGNBQWMsR0FBR0gsTUFBTSxDQUFDQyxTQUFQLENBQWlCRSxjQUF4Qzs7QUFFQSxTQUFTQyxJQUFULENBQWVDLEVBQWYsRUFBbUI7QUFDakIsU0FBTyxPQUFPQSxFQUFQLEtBQWMsVUFBckI7QUFDRDs7QUFFRCxTQUFTQyxLQUFULENBQWdCQyxHQUFoQixFQUFxQjtBQUNuQixTQUFPLE9BQU9BLEdBQVAsS0FBZSxRQUF0QjtBQUNEOztBQUVELFNBQVNDLGFBQVQsQ0FBd0JDLEdBQXhCLEVBQTZCO0FBQzNCLFNBQU9WLFNBQVMsQ0FBQ1csSUFBVixDQUFlRCxHQUFmLE1BQXdCLGlCQUEvQjtBQUNEOztBQUVELFNBQVNFLE1BQVQsQ0FBaUJGLEdBQWpCLEVBQXNCRyxHQUF0QixFQUEyQjtBQUN6QixTQUFPVCxjQUFjLENBQUNPLElBQWYsQ0FBb0JELEdBQXBCLEVBQXlCRyxHQUF6QixDQUFQO0FBQ0Q7O0FBRUQsU0FBU0MsSUFBVCxHQUFpQixDQUFFOztBQUVuQjs7O0FBR0EsU0FBU0MsTUFBVCxDQUFpQlQsRUFBakIsRUFBcUI7QUFDbkIsTUFBTVUsS0FBSyxHQUFHZixNQUFNLENBQUNnQixNQUFQLENBQWMsSUFBZCxDQUFkO0FBQ0EsU0FBTyxTQUFTQyxRQUFULENBQW1CVixH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QUNnRCxJQUFQLENBQVkyRCxFQUFaLEVBQWdCMUQsT0FBaEIsQ0FBd0IsVUFBQWdCLElBQUksRUFBSTtBQUM5QixRQUFJdEQsTUFBTSxDQUFDZ0csRUFBRCxFQUFLMUMsSUFBTCxDQUFOLElBQW9CdEQsTUFBTSxDQUFDK0csU0FBRCxFQUFZekQsSUFBWixDQUE5QixFQUFpRDtBQUMvQ2tWLFNBQUcsQ0FBQ2xWLElBQUQsQ0FBSCxHQUFZeUIsU0FBUyxDQUFDekIsSUFBRCxFQUFPeUUsT0FBTyxDQUFDekUsSUFBRCxFQUFPMEMsRUFBRSxDQUFDMUMsSUFBRCxDQUFULENBQWQsQ0FBckI7QUFDRDtBQUNGLEdBSkQ7QUFLRDs7QUFFRDtBQUNFLE1BQUksT0FBT3FWLE1BQVAsS0FBa0IsV0FBdEIsRUFBbUM7QUFDakNBLFVBQU0sQ0FBQ0gsR0FBUCxHQUFhQSxHQUFiO0FBQ0FHLFVBQU0sQ0FBQ0MsVUFBUCxHQUFvQnZQLFFBQXBCO0FBQ0Q7QUFDRjs7QUFFRHJELEVBQUUsQ0FBQ2lRLFNBQUgsR0FBZUEsU0FBZjtBQUNBalEsRUFBRSxDQUFDb1MsVUFBSCxHQUFnQkEsVUFBaEI7QUFDQXBTLEVBQUUsQ0FBQ3FTLGVBQUgsR0FBcUJBLGVBQXJCOztBQUVBLElBQUlRLEtBQUssR0FBR0wsR0FBWixDOztBQUVlSyxLIiwiZmlsZSI6IjEuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgVnVlIGZyb20gJ3Z1ZSc7XHJcblxyXG5jb25zdCBfdG9TdHJpbmcgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xyXG5jb25zdCBoYXNPd25Qcm9wZXJ0eSA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XHJcblxyXG5mdW5jdGlvbiBpc0ZuIChmbikge1xyXG4gIHJldHVybiB0eXBlb2YgZm4gPT09ICdmdW5jdGlvbidcclxufVxyXG5cclxuZnVuY3Rpb24gaXNTdHIgKHN0cikge1xyXG4gIHJldHVybiB0eXBlb2Ygc3RyID09PSAnc3RyaW5nJ1xyXG59XHJcblxyXG5mdW5jdGlvbiBpc1BsYWluT2JqZWN0IChvYmopIHtcclxuICByZXR1cm4gX3RvU3RyaW5nLmNhbGwob2JqKSA9PT0gJ1tvYmplY3QgT2JqZWN0XSdcclxufVxyXG5cclxuZnVuY3Rpb24gaGFzT3duIChvYmosIGtleSkge1xyXG4gIHJldHVybiBoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KVxyXG59XHJcblxyXG5mdW5jdGlvbiBub29wICgpIHt9XHJcblxyXG4vKipcclxuICogQ3JlYXRlIGEgY2FjaGVkIHZlcnNpb24gb2YgYSBwdXJlIGZ1bmN0aW9uLlxyXG4gKi9cclxuZnVuY3Rpb24gY2FjaGVkIChmbikge1xyXG4gIGNvbnN0IGNhY2hlID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcclxuICByZXR1cm4gZnVuY3Rpb24gY2FjaGVkRm4gKHN0cikge1xyXG4gICAgY29uc3QgaGl0ID0gY2FjaGVbc3RyXTtcclxuICAgIHJldHVybiBoaXQgfHwgKGNhY2hlW3N0cl0gPSBmbihzdHIpKVxyXG4gIH1cclxufVxyXG5cclxuLyoqXHJcbiAqIENhbWVsaXplIGEgaHlwaGVuLWRlbGltaXRlZCBzdHJpbmcuXHJcbiAqL1xyXG5jb25zdCBjYW1lbGl6ZVJFID0gLy0oXFx3KS9nO1xyXG5jb25zdCBjYW1lbGl6ZSA9IGNhY2hlZCgoc3RyKSA9PiB7XHJcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKGNhbWVsaXplUkUsIChfLCBjKSA9PiBjID8gYy50b1VwcGVyQ2FzZSgpIDogJycpXHJcbn0pO1xyXG5cclxuY29uc3QgSE9PS1MgPSBbXHJcbiAgJ2ludm9rZScsXHJcbiAgJ3N1Y2Nlc3MnLFxyXG4gICdmYWlsJyxcclxuICAnY29tcGxldGUnLFxyXG4gICdyZXR1cm5WYWx1ZSdcclxuXTtcclxuXHJcbmNvbnN0IGdsb2JhbEludGVyY2VwdG9ycyA9IHt9O1xyXG5jb25zdCBzY29wZWRJbnRlcmNlcHRvcnMgPSB7fTtcclxuXHJcbmZ1bmN0aW9uIG1lcmdlSG9vayAocGFyZW50VmFsLCBjaGlsZFZhbCkge1xyXG4gIGNvbnN0IHJlcyA9IGNoaWxkVmFsXHJcbiAgICA/IHBhcmVudFZhbFxyXG4gICAgICA/IHBhcmVudFZhbC5jb25jYXQoY2hpbGRWYWwpXHJcbiAgICAgIDogQXJyYXkuaXNBcnJheShjaGlsZFZhbClcclxuICAgICAgICA/IGNoaWxkVmFsIDogW2NoaWxkVmFsXVxyXG4gICAgOiBwYXJlbnRWYWw7XHJcbiAgcmV0dXJuIHJlc1xyXG4gICAgPyBkZWR1cGVIb29rcyhyZXMpXHJcbiAgICA6IHJlc1xyXG59XHJcblxyXG5mdW5jdGlvbiBkZWR1cGVIb29rcyAoaG9va3MpIHtcclxuICBjb25zdCByZXMgPSBbXTtcclxuICBmb3IgKGxldCBpID0gMDsgaSA8IGhvb2tzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICBpZiAocmVzLmluZGV4T2YoaG9va3NbaV0pID09PSAtMSkge1xyXG4gICAgICByZXMucHVzaChob29rc1tpXSk7XHJcbiAgICB9XHJcbiAgfVxyXG4gIHJldHVybiByZXNcclxufVxyXG5cclxuZnVuY3Rpb24gcmVtb3ZlSG9vayAoaG9va3MsIGhvb2spIHtcclxuICBjb25zdCBpbmRleCA9IGhvb2tzLmluZGV4T2YoaG9vayk7XHJcbiAgaWYgKGluZGV4ICE9PSAtMSkge1xyXG4gICAgaG9va3Muc3BsaWNlKGluZGV4LCAxKTtcclxuICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIG1lcmdlSW50ZXJjZXB0b3JIb29rIChpbnRlcmNlcHRvciwgb3B0aW9uKSB7XHJcbiAgT2JqZWN0LmtleXMob3B0aW9uKS5mb3JFYWNoKGhvb2sgPT4ge1xyXG4gICAgaWYgKEhPT0tTLmluZGV4T2YoaG9vaykgIT09IC0xICYmIGlzRm4ob3B0aW9uW2hvb2tdKSkge1xyXG4gICAgICBpbnRlcmNlcHRvcltob29rXSA9IG1lcmdlSG9vayhpbnRlcmNlcHRvcltob29rXSwgb3B0aW9uW2hvb2tdKTtcclxuICAgIH1cclxuICB9KTtcclxufVxyXG5cclxuZnVuY3Rpb24gcmVtb3ZlSW50ZXJjZXB0b3JIb29rIChpbnRlcmNlcHRvciwgb3B0aW9uKSB7XHJcbiAgaWYgKCFpbnRlcmNlcHRvciB8fCAhb3B0aW9uKSB7XHJcbiAgICByZXR1cm5cclxuICB9XHJcbiAgT2JqZWN0LmtleXMob3B0aW9uKS5mb3JFYWNoKGhvb2sgPT4ge1xyXG4gICAgaWYgKEhPT0tTLmluZGV4T2YoaG9vaykgIT09IC0xICYmIGlzRm4ob3B0aW9uW2hvb2tdKSkge1xyXG4gICAgICByZW1vdmVIb29rKGludGVyY2VwdG9yW2hvb2tdLCBvcHRpb25baG9va10pO1xyXG4gICAgfVxyXG4gIH0pO1xyXG59XHJcblxyXG5mdW5jdGlvbiBhZGRJbnRlcmNlcHRvciAobWV0aG9kLCBvcHRpb24pIHtcclxuICBpZiAodHlwZW9mIG1ldGhvZCA9PT0gJ3N0cmluZycgJiYgaXNQbGFpbk9iamVjdChvcHRpb24pKSB7XHJcbiAgICBtZXJnZUludGVyY2VwdG9ySG9vayhzY29wZWRJbnRlcmNlcHRvcnNbbWV0aG9kXSB8fCAoc2NvcGVkSW50ZXJjZXB0b3JzW21ldGhvZF0gPSB7fSksIG9wdGlvbik7XHJcbiAgfSBlbHNlIGlmIChpc1BsYWluT2JqZWN0KG1ldGhvZCkpIHtcclxuICAgIG1lcmdlSW50ZXJjZXB0b3JIb29rKGdsb2JhbEludGVyY2VwdG9ycywgbWV0aG9kKTtcclxuICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHJlbW92ZUludGVyY2VwdG9yIChtZXRob2QsIG9wdGlvbikge1xyXG4gIGlmICh0eXBlb2YgbWV0aG9kID09PSAnc3RyaW5nJykge1xyXG4gICAgaWYgKGlzUGxhaW5PYmplY3Qob3B0aW9uKSkge1xyXG4gICAgICByZW1vdmVJbnRlcmNlcHRvckhvb2soc2NvcGVkSW50ZXJjZXB0b3JzW21ldGhvZF0sIG9wdGlvbik7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBkZWxldGUgc2NvcGVkSW50ZXJjZXB0b3JzW21ldGhvZF07XHJcbiAgICB9XHJcbiAgfSBlbHNlIGlmIChpc1BsYWluT2JqZWN0KG1ldGhvZCkpIHtcclxuICAgIHJlbW92ZUludGVyY2VwdG9ySG9vayhnbG9iYWxJbnRlcmNlcHRvcnMsIG1ldGhvZCk7XHJcbiAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiB3cmFwcGVySG9vayAoaG9vaykge1xyXG4gIHJldHVybiBmdW5jdGlvbiAoZGF0YSkge1xyXG4gICAgcmV0dXJuIGhvb2soZGF0YSkgfHwgZGF0YVxyXG4gIH1cclxufVxyXG5cclxuZnVuY3Rpb24gaXNQcm9taXNlIChvYmopIHtcclxuICByZXR1cm4gISFvYmogJiYgKHR5cGVvZiBvYmogPT09ICdvYmplY3QnIHx8IHR5cGVvZiBvYmogPT09ICdmdW5jdGlvbicpICYmIHR5cGVvZiBvYmoudGhlbiA9PT0gJ2Z1bmN0aW9uJ1xyXG59XHJcblxyXG5mdW5jdGlvbiBxdWV1ZSAoaG9va3MsIGRhdGEpIHtcclxuICBsZXQgcHJvbWlzZSA9IGZhbHNlO1xyXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgaG9va3MubGVuZ3RoOyBpKyspIHtcclxuICAgIGNvbnN0IGhvb2sgPSBob29rc1tpXTtcclxuICAgIGlmIChwcm9taXNlKSB7XHJcbiAgICAgIHByb21pc2UgPSBQcm9taXNlLnRoZW4od3JhcHBlckhvb2soaG9vaykpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgY29uc3QgcmVzID0gaG9vayhkYXRhKTtcclxuICAgICAgaWYgKGlzUHJvbWlzZShyZXMpKSB7XHJcbiAgICAgICAgcHJvbWlzZSA9IFByb21pc2UucmVzb2x2ZShyZXMpO1xyXG4gICAgICB9XHJcbiAgICAgIGlmIChyZXMgPT09IGZhbHNlKSB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgIHRoZW4gKCkge31cclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcbiAgcmV0dXJuIHByb21pc2UgfHwge1xyXG4gICAgdGhlbiAoY2FsbGJhY2spIHtcclxuICAgICAgcmV0dXJuIGNhbGxiYWNrKGRhdGEpXHJcbiAgICB9XHJcbiAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiB3cmFwcGVyT3B0aW9ucyAoaW50ZXJjZXB0b3IsIG9wdGlvbnMgPSB7fSkge1xyXG4gIFsnc3VjY2VzcycsICdmYWlsJywgJ2NvbXBsZXRlJ10uZm9yRWFjaChuYW1lID0+IHtcclxuICAgIGlmIChBcnJheS5pc0FycmF5KGludGVyY2VwdG9yW25hbWVdKSkge1xyXG4gICAgICBjb25zdCBvbGRDYWxsYmFjayA9IG9wdGlvbnNbbmFtZV07XHJcbiAgICAgIG9wdGlvbnNbbmFtZV0gPSBmdW5jdGlvbiBjYWxsYmFja0ludGVyY2VwdG9yIChyZXMpIHtcclxuICAgICAgICBxdWV1ZShpbnRlcmNlcHRvcltuYW1lXSwgcmVzKS50aGVuKChyZXMpID0+IHtcclxuICAgICAgICAgIC8qIGVzbGludC1kaXNhYmxlIG5vLW1peGVkLW9wZXJhdG9ycyAqL1xyXG4gICAgICAgICAgcmV0dXJuIGlzRm4ob2xkQ2FsbGJhY2spICYmIG9sZENhbGxiYWNrKHJlcykgfHwgcmVzXHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH07XHJcbiAgICB9XHJcbiAgfSk7XHJcbiAgcmV0dXJuIG9wdGlvbnNcclxufVxyXG5cclxuZnVuY3Rpb24gd3JhcHBlclJldHVyblZhbHVlIChtZXRob2QsIHJldHVyblZhbHVlKSB7XHJcbiAgY29uc3QgcmV0dXJuVmFsdWVIb29rcyA9IFtdO1xyXG4gIGlmIChBcnJheS5pc0FycmF5KGdsb2JhbEludGVyY2VwdG9ycy5yZXR1cm5WYWx1ZSkpIHtcclxuICAgIHJldHVyblZhbHVlSG9va3MucHVzaCguLi5nbG9iYWxJbnRlcmNlcHRvcnMucmV0dXJuVmFsdWUpO1xyXG4gIH1cclxuICBjb25zdCBpbnRlcmNlcHRvciA9IHNjb3BlZEludGVyY2VwdG9yc1ttZXRob2RdO1xyXG4gIGlmIChpbnRlcmNlcHRvciAmJiBBcnJheS5pc0FycmF5KGludGVyY2VwdG9yLnJldHVyblZhbHVlKSkge1xyXG4gICAgcmV0dXJuVmFsdWVIb29rcy5wdXNoKC4uLmludGVyY2VwdG9yLnJldHVyblZhbHVlKTtcclxuICB9XHJcbiAgcmV0dXJuVmFsdWVIb29rcy5mb3JFYWNoKGhvb2sgPT4ge1xyXG4gICAgcmV0dXJuVmFsdWUgPSBob29rKHJldHVyblZhbHVlKSB8fCByZXR1cm5WYWx1ZTtcclxuICB9KTtcclxuICByZXR1cm4gcmV0dXJuVmFsdWVcclxufVxyXG5cclxuZnVuY3Rpb24gZ2V0QXBpSW50ZXJjZXB0b3JIb29rcyAobWV0aG9kKSB7XHJcbiAgY29uc3QgaW50ZXJjZXB0b3IgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xyXG4gIE9iamVjdC5rZXlzKGdsb2JhbEludGVyY2VwdG9ycykuZm9yRWFjaChob29rID0+IHtcclxuICAgIGlmIChob29rICE9PSAncmV0dXJuVmFsdWUnKSB7XHJcbiAgICAgIGludGVyY2VwdG9yW2hvb2tdID0gZ2xvYmFsSW50ZXJjZXB0b3JzW2hvb2tdLnNsaWNlKCk7XHJcbiAgICB9XHJcbiAgfSk7XHJcbiAgY29uc3Qgc2NvcGVkSW50ZXJjZXB0b3IgPSBzY29wZWRJbnRlcmNlcHRvcnNbbWV0aG9kXTtcclxuICBpZiAoc2NvcGVkSW50ZXJjZXB0b3IpIHtcclxuICAgIE9iamVjdC5rZXlzKHNjb3BlZEludGVyY2VwdG9yKS5mb3JFYWNoKGhvb2sgPT4ge1xyXG4gICAgICBpZiAoaG9vayAhPT0gJ3JldHVyblZhbHVlJykge1xyXG4gICAgICAgIGludGVyY2VwdG9yW2hvb2tdID0gKGludGVyY2VwdG9yW2hvb2tdIHx8IFtdKS5jb25jYXQoc2NvcGVkSW50ZXJjZXB0b3JbaG9va10pO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9XHJcbiAgcmV0dXJuIGludGVyY2VwdG9yXHJcbn1cclxuXHJcbmZ1bmN0aW9uIGludm9rZUFwaSAobWV0aG9kLCBhcGksIG9wdGlvbnMsIC4uLnBhcmFtcykge1xyXG4gIGNvbnN0IGludGVyY2VwdG9yID0gZ2V0QXBpSW50ZXJjZXB0b3JIb29rcyhtZXRob2QpO1xyXG4gIGlmIChpbnRlcmNlcHRvciAmJiBPYmplY3Qua2V5cyhpbnRlcmNlcHRvcikubGVuZ3RoKSB7XHJcbiAgICBpZiAoQXJyYXkuaXNBcnJheShpbnRlcmNlcHRvci5pbnZva2UpKSB7XHJcbiAgICAgIGNvbnN0IHJlcyA9IHF1ZXVlKGludGVyY2VwdG9yLmludm9rZSwgb3B0aW9ucyk7XHJcbiAgICAgIHJldHVybiByZXMudGhlbigob3B0aW9ucykgPT4ge1xyXG4gICAgICAgIHJldHVybiBhcGkod3JhcHBlck9wdGlvbnMoaW50ZXJjZXB0b3IsIG9wdGlvbnMpLCAuLi5wYXJhbXMpXHJcbiAgICAgIH0pXHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICByZXR1cm4gYXBpKHdyYXBwZXJPcHRpb25zKGludGVyY2VwdG9yLCBvcHRpb25zKSwgLi4ucGFyYW1zKVxyXG4gICAgfVxyXG4gIH1cclxuICByZXR1cm4gYXBpKG9wdGlvbnMsIC4uLnBhcmFtcylcclxufVxyXG5cclxuY29uc3QgcHJvbWlzZUludGVyY2VwdG9yID0ge1xyXG4gIHJldHVyblZhbHVlIChyZXMpIHtcclxuICAgIGlmICghaXNQcm9taXNlKHJlcykpIHtcclxuICAgICAgcmV0dXJuIHJlc1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHJlcy50aGVuKHJlcyA9PiB7XHJcbiAgICAgIHJldHVybiByZXNbMV1cclxuICAgIH0pLmNhdGNoKHJlcyA9PiB7XHJcbiAgICAgIHJldHVybiByZXNbMF1cclxuICAgIH0pXHJcbiAgfVxyXG59O1xyXG5cclxuY29uc3QgU1lOQ19BUElfUkUgPVxyXG4gIC9eXFwkfGdldE1lbnVCdXR0b25Cb3VuZGluZ0NsaWVudFJlY3R8XnJlcG9ydHxpbnRlcmNlcHRvcnN8SW50ZXJjZXB0b3IkfGdldFN1Yk5WdWVCeUlkfHJlcXVpcmVOYXRpdmVQbHVnaW58dXB4MnB4fGhpZGVLZXlib2FyZHxjYW5JVXNlfF5jcmVhdGV8U3luYyR8TWFuYWdlciR8YmFzZTY0VG9BcnJheUJ1ZmZlcnxhcnJheUJ1ZmZlclRvQmFzZTY0LztcclxuXHJcbmNvbnN0IENPTlRFWFRfQVBJX1JFID0gL15jcmVhdGV8TWFuYWdlciQvO1xyXG5cclxuY29uc3QgQ0FMTEJBQ0tfQVBJX1JFID0gL15vbi87XHJcblxyXG5mdW5jdGlvbiBpc0NvbnRleHRBcGkgKG5hbWUpIHtcclxuICByZXR1cm4gQ09OVEVYVF9BUElfUkUudGVzdChuYW1lKVxyXG59XHJcbmZ1bmN0aW9uIGlzU3luY0FwaSAobmFtZSkge1xyXG4gIHJldHVybiBTWU5DX0FQSV9SRS50ZXN0KG5hbWUpXHJcbn1cclxuXHJcbmZ1bmN0aW9uIGlzQ2FsbGJhY2tBcGkgKG5hbWUpIHtcclxuICByZXR1cm4gQ0FMTEJBQ0tfQVBJX1JFLnRlc3QobmFtZSlcclxufVxyXG5cclxuZnVuY3Rpb24gaGFuZGxlUHJvbWlzZSAocHJvbWlzZSkge1xyXG4gIHJldHVybiBwcm9taXNlLnRoZW4oZGF0YSA9PiB7XHJcbiAgICByZXR1cm4gW251bGwsIGRhdGFdXHJcbiAgfSlcclxuICAgIC5jYXRjaChlcnIgPT4gW2Vycl0pXHJcbn1cclxuXHJcbmZ1bmN0aW9uIHNob3VsZFByb21pc2UgKG5hbWUpIHtcclxuICBpZiAoXHJcbiAgICBpc0NvbnRleHRBcGkobmFtZSkgfHxcclxuICAgIGlzU3luY0FwaShuYW1lKSB8fFxyXG4gICAgaXNDYWxsYmFja0FwaShuYW1lKVxyXG4gICkge1xyXG4gICAgcmV0dXJuIGZhbHNlXHJcbiAgfVxyXG4gIHJldHVybiB0cnVlXHJcbn1cclxuXHJcbmZ1bmN0aW9uIHByb21pc2lmeSAobmFtZSwgYXBpKSB7XHJcbiAgaWYgKCFzaG91bGRQcm9taXNlKG5hbWUpKSB7XHJcbiAgICByZXR1cm4gYXBpXHJcbiAgfVxyXG4gIHJldHVybiBmdW5jdGlvbiBwcm9taXNlQXBpIChvcHRpb25zID0ge30sIC4uLnBhcmFtcykge1xyXG4gICAgaWYgKGlzRm4ob3B0aW9ucy5zdWNjZXNzKSB8fCBpc0ZuKG9wdGlvbnMuZmFpbCkgfHwgaXNGbihvcHRpb25zLmNvbXBsZXRlKSkge1xyXG4gICAgICByZXR1cm4gd3JhcHBlclJldHVyblZhbHVlKG5hbWUsIGludm9rZUFwaShuYW1lLCBhcGksIG9wdGlvbnMsIC4uLnBhcmFtcykpXHJcbiAgICB9XHJcbiAgICByZXR1cm4gd3JhcHBlclJldHVyblZhbHVlKG5hbWUsIGhhbmRsZVByb21pc2UobmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgICBpbnZva2VBcGkobmFtZSwgYXBpLCBPYmplY3QuYXNzaWduKHt9LCBvcHRpb25zLCB7XHJcbiAgICAgICAgc3VjY2VzczogcmVzb2x2ZSxcclxuICAgICAgICBmYWlsOiByZWplY3RcclxuICAgICAgfSksIC4uLnBhcmFtcyk7XHJcbiAgICAgIC8qIGVzbGludC1kaXNhYmxlIG5vLWV4dGVuZC1uYXRpdmUgKi9cclxuICAgICAgaWYgKCFQcm9taXNlLnByb3RvdHlwZS5maW5hbGx5KSB7XHJcbiAgICAgICAgUHJvbWlzZS5wcm90b3R5cGUuZmluYWxseSA9IGZ1bmN0aW9uIChjYWxsYmFjaykge1xyXG4gICAgICAgICAgY29uc3QgcHJvbWlzZSA9IHRoaXMuY29uc3RydWN0b3I7XHJcbiAgICAgICAgICByZXR1cm4gdGhpcy50aGVuKFxyXG4gICAgICAgICAgICB2YWx1ZSA9PiBwcm9taXNlLnJlc29sdmUoY2FsbGJhY2soKSkudGhlbigoKSA9PiB2YWx1ZSksXHJcbiAgICAgICAgICAgIHJlYXNvbiA9PiBwcm9taXNlLnJlc29sdmUoY2FsbGJhY2soKSkudGhlbigoKSA9PiB7XHJcbiAgICAgICAgICAgICAgdGhyb3cgcmVhc29uXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICApXHJcbiAgICAgICAgfTtcclxuICAgICAgfVxyXG4gICAgfSkpKVxyXG4gIH1cclxufVxyXG5cclxuY29uc3QgRVBTID0gMWUtNDtcclxuY29uc3QgQkFTRV9ERVZJQ0VfV0lEVEggPSA3NTA7XHJcbmxldCBpc0lPUyA9IGZhbHNlO1xyXG5sZXQgZGV2aWNlV2lkdGggPSAwO1xyXG5sZXQgZGV2aWNlRFBSID0gMDtcclxuXHJcbmZ1bmN0aW9uIGNoZWNrRGV2aWNlV2lkdGggKCkge1xyXG4gIGNvbnN0IHtcclxuICAgIHBsYXRmb3JtLFxyXG4gICAgcGl4ZWxSYXRpbyxcclxuICAgIHdpbmRvd1dpZHRoXHJcbiAgfSA9IHd4LmdldFN5c3RlbUluZm9TeW5jKCk7IC8vIHVuaT0+d3ggcnVudGltZSDnvJbor5Hnm67moIfmmK8gdW5pIOWvueixoe+8jOWGhemDqOS4jeWFgeiuuOebtOaOpeS9v+eUqCB1bmlcclxuXHJcbiAgZGV2aWNlV2lkdGggPSB3aW5kb3dXaWR0aDtcclxuICBkZXZpY2VEUFIgPSBwaXhlbFJhdGlvO1xyXG4gIGlzSU9TID0gcGxhdGZvcm0gPT09ICdpb3MnO1xyXG59XHJcblxyXG5mdW5jdGlvbiB1cHgycHggKG51bWJlciwgbmV3RGV2aWNlV2lkdGgpIHtcclxuICBpZiAoZGV2aWNlV2lkdGggPT09IDApIHtcclxuICAgIGNoZWNrRGV2aWNlV2lkdGgoKTtcclxuICB9XHJcblxyXG4gIG51bWJlciA9IE51bWJlcihudW1iZXIpO1xyXG4gIGlmIChudW1iZXIgPT09IDApIHtcclxuICAgIHJldHVybiAwXHJcbiAgfVxyXG4gIGxldCByZXN1bHQgPSAobnVtYmVyIC8gQkFTRV9ERVZJQ0VfV0lEVEgpICogKG5ld0RldmljZVdpZHRoIHx8IGRldmljZVdpZHRoKTtcclxuICBpZiAocmVzdWx0IDwgMCkge1xyXG4gICAgcmVzdWx0ID0gLXJlc3VsdDtcclxuICB9XHJcbiAgcmVzdWx0ID0gTWF0aC5mbG9vcihyZXN1bHQgKyBFUFMpO1xyXG4gIGlmIChyZXN1bHQgPT09IDApIHtcclxuICAgIGlmIChkZXZpY2VEUFIgPT09IDEgfHwgIWlzSU9TKSB7XHJcbiAgICAgIHJldHVybiAxXHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICByZXR1cm4gMC41XHJcbiAgICB9XHJcbiAgfVxyXG4gIHJldHVybiBudW1iZXIgPCAwID8gLXJlc3VsdCA6IHJlc3VsdFxyXG59XHJcblxyXG5jb25zdCBpbnRlcmNlcHRvcnMgPSB7XHJcbiAgcHJvbWlzZUludGVyY2VwdG9yXHJcbn07XHJcblxyXG5cclxuXHJcbnZhciBiYXNlQXBpID0gLyojX19QVVJFX18qL09iamVjdC5mcmVlemUoe1xyXG4gIHVweDJweDogdXB4MnB4LFxyXG4gIGludGVyY2VwdG9yczogaW50ZXJjZXB0b3JzLFxyXG4gIGFkZEludGVyY2VwdG9yOiBhZGRJbnRlcmNlcHRvcixcclxuICByZW1vdmVJbnRlcmNlcHRvcjogcmVtb3ZlSW50ZXJjZXB0b3JcclxufSk7XHJcblxyXG5jb25zdCBwcm90b2NvbHMgPSB7fTtcclxuY29uc3QgdG9kb3MgPSBbXTtcclxuY29uc3QgY2FuSVVzZXMgPSBbXTtcclxuXHJcbmNvbnN0IENBTExCQUNLUyA9IFsnc3VjY2VzcycsICdmYWlsJywgJ2NhbmNlbCcsICdjb21wbGV0ZSddO1xyXG5cclxuZnVuY3Rpb24gcHJvY2Vzc0NhbGxiYWNrIChtZXRob2ROYW1lLCBtZXRob2QsIHJldHVyblZhbHVlKSB7XHJcbiAgcmV0dXJuIGZ1bmN0aW9uIChyZXMpIHtcclxuICAgIHJldHVybiBtZXRob2QocHJvY2Vzc1JldHVyblZhbHVlKG1ldGhvZE5hbWUsIHJlcywgcmV0dXJuVmFsdWUpKVxyXG4gIH1cclxufVxyXG5cclxuZnVuY3Rpb24gcHJvY2Vzc0FyZ3MgKG1ldGhvZE5hbWUsIGZyb21BcmdzLCBhcmdzT3B0aW9uID0ge30sIHJldHVyblZhbHVlID0ge30sIGtlZXBGcm9tQXJncyA9IGZhbHNlKSB7XHJcbiAgaWYgKGlzUGxhaW5PYmplY3QoZnJvbUFyZ3MpKSB7IC8vIOS4gOiIrCBhcGkg55qE5Y+C5pWw6Kej5p6QXHJcbiAgICBjb25zdCB0b0FyZ3MgPSBrZWVwRnJvbUFyZ3MgPT09IHRydWUgPyBmcm9tQXJncyA6IHt9OyAvLyByZXR1cm5WYWx1ZSDkuLogZmFsc2Ug5pe277yM6K+05piO5piv5qC85byP5YyW6L+U5Zue5YC877yM55u05o6l5Zyo6L+U5Zue5YC85a+56LGh5LiK5L+u5pS56LWL5YC8XHJcbiAgICBpZiAoaXNGbihhcmdzT3B0aW9uKSkge1xyXG4gICAgICBhcmdzT3B0aW9uID0gYXJnc09wdGlvbihmcm9tQXJncywgdG9BcmdzKSB8fCB7fTtcclxuICAgIH1cclxuICAgIGZvciAobGV0IGtleSBpbiBmcm9tQXJncykge1xyXG4gICAgICBpZiAoaGFzT3duKGFyZ3NPcHRpb24sIGtleSkpIHtcclxuICAgICAgICBsZXQga2V5T3B0aW9uID0gYXJnc09wdGlvbltrZXldO1xyXG4gICAgICAgIGlmIChpc0ZuKGtleU9wdGlvbikpIHtcclxuICAgICAgICAgIGtleU9wdGlvbiA9IGtleU9wdGlvbihmcm9tQXJnc1trZXldLCBmcm9tQXJncywgdG9BcmdzKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKCFrZXlPcHRpb24pIHsgLy8g5LiN5pSv5oyB55qE5Y+C5pWwXHJcbiAgICAgICAgICBjb25zb2xlLndhcm4oYGFwcC1wbHVzICR7bWV0aG9kTmFtZX3mmoLkuI3mlK/mjIEke2tleX1gKTtcclxuICAgICAgICB9IGVsc2UgaWYgKGlzU3RyKGtleU9wdGlvbikpIHsgLy8g6YeN5YaZ5Y+C5pWwIGtleVxyXG4gICAgICAgICAgdG9BcmdzW2tleU9wdGlvbl0gPSBmcm9tQXJnc1trZXldO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoaXNQbGFpbk9iamVjdChrZXlPcHRpb24pKSB7IC8vIHtuYW1lOm5ld05hbWUsdmFsdWU6dmFsdWV95Y+v6YeN5paw5oyH5a6a5Y+C5pWwIGtleTp2YWx1ZVxyXG4gICAgICAgICAgdG9BcmdzW2tleU9wdGlvbi5uYW1lID8ga2V5T3B0aW9uLm5hbWUgOiBrZXldID0ga2V5T3B0aW9uLnZhbHVlO1xyXG4gICAgICAgIH1cclxuICAgICAgfSBlbHNlIGlmIChDQUxMQkFDS1MuaW5kZXhPZihrZXkpICE9PSAtMSkge1xyXG4gICAgICAgIHRvQXJnc1trZXldID0gcHJvY2Vzc0NhbGxiYWNrKG1ldGhvZE5hbWUsIGZyb21BcmdzW2tleV0sIHJldHVyblZhbHVlKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBpZiAoIWtlZXBGcm9tQXJncykge1xyXG4gICAgICAgICAgdG9BcmdzW2tleV0gPSBmcm9tQXJnc1trZXldO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRvQXJnc1xyXG4gIH0gZWxzZSBpZiAoaXNGbihmcm9tQXJncykpIHtcclxuICAgIGZyb21BcmdzID0gcHJvY2Vzc0NhbGxiYWNrKG1ldGhvZE5hbWUsIGZyb21BcmdzLCByZXR1cm5WYWx1ZSk7XHJcbiAgfVxyXG4gIHJldHVybiBmcm9tQXJnc1xyXG59XHJcblxyXG5mdW5jdGlvbiBwcm9jZXNzUmV0dXJuVmFsdWUgKG1ldGhvZE5hbWUsIHJlcywgcmV0dXJuVmFsdWUsIGtlZXBSZXR1cm5WYWx1ZSA9IGZhbHNlKSB7XHJcbiAgaWYgKGlzRm4ocHJvdG9jb2xzLnJldHVyblZhbHVlKSkgeyAvLyDlpITnkIbpgJrnlKggcmV0dXJuVmFsdWVcclxuICAgIHJlcyA9IHByb3RvY29scy5yZXR1cm5WYWx1ZShtZXRob2ROYW1lLCByZXMpO1xyXG4gIH1cclxuICByZXR1cm4gcHJvY2Vzc0FyZ3MobWV0aG9kTmFtZSwgcmVzLCByZXR1cm5WYWx1ZSwge30sIGtlZXBSZXR1cm5WYWx1ZSlcclxufVxyXG5cclxuZnVuY3Rpb24gd3JhcHBlciAobWV0aG9kTmFtZSwgbWV0aG9kKSB7XHJcbiAgaWYgKGhhc093bihwcm90b2NvbHMsIG1ldGhvZE5hbWUpKSB7XHJcbiAgICBjb25zdCBwcm90b2NvbCA9IHByb3RvY29sc1ttZXRob2ROYW1lXTtcclxuICAgIGlmICghcHJvdG9jb2wpIHsgLy8g5pqC5LiN5pSv5oyB55qEIGFwaVxyXG4gICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGNvbnNvbGUuZXJyb3IoYGFwcC1wbHVzIOaaguS4jeaUr+aMgSR7bWV0aG9kTmFtZX1gKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIGZ1bmN0aW9uIChhcmcxLCBhcmcyKSB7IC8vIOebruWJjSBhcGkg5pyA5aSa5Lik5Liq5Y+C5pWwXHJcbiAgICAgIGxldCBvcHRpb25zID0gcHJvdG9jb2w7XHJcbiAgICAgIGlmIChpc0ZuKHByb3RvY29sKSkge1xyXG4gICAgICAgIG9wdGlvbnMgPSBwcm90b2NvbChhcmcxKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgYXJnMSA9IHByb2Nlc3NBcmdzKG1ldGhvZE5hbWUsIGFyZzEsIG9wdGlvbnMuYXJncywgb3B0aW9ucy5yZXR1cm5WYWx1ZSk7XHJcblxyXG4gICAgICBjb25zdCBhcmdzID0gW2FyZzFdO1xyXG4gICAgICBpZiAodHlwZW9mIGFyZzIgIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgYXJncy5wdXNoKGFyZzIpO1xyXG4gICAgICB9XHJcbiAgICAgIGNvbnN0IHJldHVyblZhbHVlID0gd3hbb3B0aW9ucy5uYW1lIHx8IG1ldGhvZE5hbWVdLmFwcGx5KHd4LCBhcmdzKTtcclxuICAgICAgaWYgKGlzU3luY0FwaShtZXRob2ROYW1lKSkgeyAvLyDlkIzmraUgYXBpXHJcbiAgICAgICAgcmV0dXJuIHByb2Nlc3NSZXR1cm5WYWx1ZShtZXRob2ROYW1lLCByZXR1cm5WYWx1ZSwgb3B0aW9ucy5yZXR1cm5WYWx1ZSwgaXNDb250ZXh0QXBpKG1ldGhvZE5hbWUpKVxyXG4gICAgICB9XHJcbiAgICAgIHJldHVybiByZXR1cm5WYWx1ZVxyXG4gICAgfVxyXG4gIH1cclxuICByZXR1cm4gbWV0aG9kXHJcbn1cclxuXHJcbmNvbnN0IHRvZG9BcGlzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcclxuXHJcbmNvbnN0IFRPRE9TID0gW1xyXG4gICdvblRhYkJhck1pZEJ1dHRvblRhcCcsXHJcbiAgJ3N1YnNjcmliZVB1c2gnLFxyXG4gICd1bnN1YnNjcmliZVB1c2gnLFxyXG4gICdvblB1c2gnLFxyXG4gICdvZmZQdXNoJyxcclxuICAnc2hhcmUnXHJcbl07XHJcblxyXG5mdW5jdGlvbiBjcmVhdGVUb2RvQXBpIChuYW1lKSB7XHJcbiAgcmV0dXJuIGZ1bmN0aW9uIHRvZG9BcGkgKHtcclxuICAgIGZhaWwsXHJcbiAgICBjb21wbGV0ZVxyXG4gIH0pIHtcclxuICAgIGNvbnN0IHJlcyA9IHtcclxuICAgICAgZXJyTXNnOiBgJHtuYW1lfTpmYWlsOuaaguS4jeaUr+aMgSAke25hbWV9IOaWueazlWBcclxuICAgIH07XHJcbiAgICBpc0ZuKGZhaWwpICYmIGZhaWwocmVzKTtcclxuICAgIGlzRm4oY29tcGxldGUpICYmIGNvbXBsZXRlKHJlcyk7XHJcbiAgfVxyXG59XHJcblxyXG5UT0RPUy5mb3JFYWNoKGZ1bmN0aW9uIChuYW1lKSB7XHJcbiAgdG9kb0FwaXNbbmFtZV0gPSBjcmVhdGVUb2RvQXBpKG5hbWUpO1xyXG59KTtcclxuXHJcbmNvbnN0IGdldEVtaXR0ZXIgPSAoZnVuY3Rpb24gKCkge1xyXG4gIGlmICh0eXBlb2YgZ2V0VW5pRW1pdHRlciA9PT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgLyogZXNsaW50LWRpc2FibGUgbm8tdW5kZWYgKi9cclxuICAgIHJldHVybiBnZXRVbmlFbWl0dGVyXHJcbiAgfVxyXG4gIGxldCBFbWl0dGVyO1xyXG4gIHJldHVybiBmdW5jdGlvbiBnZXRVbmlFbWl0dGVyICgpIHtcclxuICAgIGlmICghRW1pdHRlcikge1xyXG4gICAgICBFbWl0dGVyID0gbmV3IFZ1ZSgpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIEVtaXR0ZXJcclxuICB9XHJcbn0pKCk7XHJcblxyXG5mdW5jdGlvbiBhcHBseSAoY3R4LCBtZXRob2QsIGFyZ3MpIHtcclxuICByZXR1cm4gY3R4W21ldGhvZF0uYXBwbHkoY3R4LCBhcmdzKVxyXG59XHJcblxyXG5mdW5jdGlvbiAkb24gKCkge1xyXG4gIHJldHVybiBhcHBseShnZXRFbWl0dGVyKCksICckb24nLCBbLi4uYXJndW1lbnRzXSlcclxufVxyXG5mdW5jdGlvbiAkb2ZmICgpIHtcclxuICByZXR1cm4gYXBwbHkoZ2V0RW1pdHRlcigpLCAnJG9mZicsIFsuLi5hcmd1bWVudHNdKVxyXG59XHJcbmZ1bmN0aW9uICRvbmNlICgpIHtcclxuICByZXR1cm4gYXBwbHkoZ2V0RW1pdHRlcigpLCAnJG9uY2UnLCBbLi4uYXJndW1lbnRzXSlcclxufVxyXG5mdW5jdGlvbiAkZW1pdCAoKSB7XHJcbiAgcmV0dXJuIGFwcGx5KGdldEVtaXR0ZXIoKSwgJyRlbWl0JywgWy4uLmFyZ3VtZW50c10pXHJcbn1cclxuXHJcbnZhciBldmVudEFwaSA9IC8qI19fUFVSRV9fKi9PYmplY3QuZnJlZXplKHtcclxuICAkb246ICRvbixcclxuICAkb2ZmOiAkb2ZmLFxyXG4gICRvbmNlOiAkb25jZSxcclxuICAkZW1pdDogJGVtaXRcclxufSk7XHJcblxyXG5mdW5jdGlvbiByZXF1aXJlTmF0aXZlUGx1Z2luIChwbHVnaW5OYW1lKSB7XHJcbiAgLyogZXNsaW50LWRpc2FibGUgbm8tdW5kZWYgKi9cclxuICBpZiAodHlwZW9mIHdlZXggIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICByZXR1cm4gd2VleC5yZXF1aXJlTW9kdWxlKHBsdWdpbk5hbWUpXHJcbiAgfVxyXG4gIC8qIGVzbGludC1kaXNhYmxlIG5vLXVuZGVmICovXHJcbiAgcmV0dXJuIF9fcmVxdWlyZU5hdGl2ZVBsdWdpbl9fKHBsdWdpbk5hbWUpXHJcbn1cclxuXHJcbmZ1bmN0aW9uIHdyYXBwZXIkMSAod2Vidmlldykge1xyXG4gIHdlYnZpZXcuJHByb2Nlc3NlZCA9IHRydWU7XHJcblxyXG4gIHdlYnZpZXcucG9zdE1lc3NhZ2UgPSBmdW5jdGlvbiAoZGF0YSkge1xyXG4gICAgcGx1cy53ZWJ2aWV3LnBvc3RNZXNzYWdlVG9VbmlOVmlldyh7XHJcbiAgICAgIHR5cGU6ICdVbmlBcHBTdWJOVnVlJyxcclxuICAgICAgZGF0YVxyXG4gICAgfSwgd2Vidmlldy5pZCk7XHJcbiAgfTtcclxuICBsZXQgY2FsbGJhY2tzID0gW107XHJcbiAgd2Vidmlldy5vbk1lc3NhZ2UgPSBmdW5jdGlvbiAoY2FsbGJhY2spIHtcclxuICAgIGNhbGxiYWNrcy5wdXNoKGNhbGxiYWNrKTtcclxuICB9O1xyXG4gIHdlYnZpZXcuJGNvbnN1bWVNZXNzYWdlID0gZnVuY3Rpb24gKGUpIHtcclxuICAgIGNhbGxiYWNrcy5mb3JFYWNoKGNhbGxiYWNrID0+IGNhbGxiYWNrKGUpKTtcclxuICB9O1xyXG5cclxuICBpZiAoIXdlYnZpZXcuX191bmlhcHBfbWFza19pZCkge1xyXG4gICAgcmV0dXJuXHJcbiAgfVxyXG4gIGNvbnN0IG1hc2tDb2xvciA9IHdlYnZpZXcuX191bmlhcHBfbWFzaztcclxuICBsZXQgbWFza1dlYnZpZXcgPSB3ZWJ2aWV3Ll9fdW5pYXBwX21hc2tfaWQgPT09ICcwJyA/IHtcclxuICAgIHNldFN0eWxlICh7XHJcbiAgICAgIG1hc2tcclxuICAgIH0pIHtcclxuICAgICAgcmVxdWlyZU5hdGl2ZVBsdWdpbigndW5pLXRhYnZpZXcnKS5zZXRNYXNrKHtcclxuICAgICAgICBjb2xvcjogbWFza1xyXG4gICAgICB9KTtcclxuICAgIH1cclxuICB9IDogcGx1cy53ZWJ2aWV3LmdldFdlYnZpZXdCeUlkKHdlYnZpZXcuX191bmlhcHBfbWFza19pZCk7XHJcbiAgY29uc3Qgb2xkU2hvdyA9IHdlYnZpZXcuc2hvdztcclxuICBjb25zdCBvbGRIaWRlID0gd2Vidmlldy5oaWRlO1xyXG4gIGNvbnN0IG9sZENsb3NlID0gd2Vidmlldy5jbG9zZTtcclxuXHJcbiAgY29uc3Qgc2hvd01hc2sgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICBtYXNrV2Vidmlldy5zZXRTdHlsZSh7XHJcbiAgICAgIG1hc2s6IG1hc2tDb2xvclxyXG4gICAgfSk7XHJcbiAgfTtcclxuICBjb25zdCBjbG9zZU1hc2sgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICBtYXNrV2Vidmlldy5zZXRTdHlsZSh7XHJcbiAgICAgIG1hc2s6ICdub25lJ1xyXG4gICAgfSk7XHJcbiAgfTtcclxuICB3ZWJ2aWV3LnNob3cgPSBmdW5jdGlvbiAoLi4uYXJncykge1xyXG4gICAgc2hvd01hc2soKTtcclxuICAgIHJldHVybiBvbGRTaG93LmFwcGx5KHdlYnZpZXcsIGFyZ3MpXHJcbiAgfTtcclxuICB3ZWJ2aWV3LmhpZGUgPSBmdW5jdGlvbiAoLi4uYXJncykge1xyXG4gICAgY2xvc2VNYXNrKCk7XHJcbiAgICByZXR1cm4gb2xkSGlkZS5hcHBseSh3ZWJ2aWV3LCBhcmdzKVxyXG4gIH07XHJcbiAgd2Vidmlldy5jbG9zZSA9IGZ1bmN0aW9uICguLi5hcmdzKSB7XHJcbiAgICBjbG9zZU1hc2soKTtcclxuICAgIGNhbGxiYWNrcyA9IFtdO1xyXG4gICAgcmV0dXJuIG9sZENsb3NlLmFwcGx5KHdlYnZpZXcsIGFyZ3MpXHJcbiAgfTtcclxufVxyXG5cclxuZnVuY3Rpb24gZ2V0U3ViTlZ1ZUJ5SWQgKGlkKSB7XHJcbiAgY29uc3Qgd2VidmlldyA9IHBsdXMud2Vidmlldy5nZXRXZWJ2aWV3QnlJZChpZCk7XHJcbiAgaWYgKHdlYnZpZXcgJiYgIXdlYnZpZXcuJHByb2Nlc3NlZCkge1xyXG4gICAgd3JhcHBlciQxKHdlYnZpZXcpO1xyXG4gIH1cclxuICByZXR1cm4gd2Vidmlld1xyXG59XHJcblxyXG5cclxuXHJcbnZhciBhcGkgPSAvKiNfX1BVUkVfXyovT2JqZWN0LmZyZWV6ZSh7XHJcbiAgZ2V0U3ViTlZ1ZUJ5SWQ6IGdldFN1Yk5WdWVCeUlkLFxyXG4gIHJlcXVpcmVOYXRpdmVQbHVnaW46IHJlcXVpcmVOYXRpdmVQbHVnaW5cclxufSk7XHJcblxyXG5jb25zdCBNUFBhZ2UgPSBQYWdlO1xyXG5jb25zdCBNUENvbXBvbmVudCA9IENvbXBvbmVudDtcclxuXHJcbmNvbnN0IGN1c3RvbWl6ZVJFID0gLzovZztcclxuXHJcbmNvbnN0IGN1c3RvbWl6ZSA9IGNhY2hlZCgoc3RyKSA9PiB7XHJcbiAgcmV0dXJuIGNhbWVsaXplKHN0ci5yZXBsYWNlKGN1c3RvbWl6ZVJFLCAnLScpKVxyXG59KTtcclxuXHJcbmZ1bmN0aW9uIGluaXRUcmlnZ2VyRXZlbnQgKG1wSW5zdGFuY2UpIHtcclxuICB7XHJcbiAgICBpZiAoIXd4LmNhbklVc2UoJ25leHRUaWNrJykpIHtcclxuICAgICAgcmV0dXJuXHJcbiAgICB9XHJcbiAgfVxyXG4gIGNvbnN0IG9sZFRyaWdnZXJFdmVudCA9IG1wSW5zdGFuY2UudHJpZ2dlckV2ZW50O1xyXG4gIG1wSW5zdGFuY2UudHJpZ2dlckV2ZW50ID0gZnVuY3Rpb24gKGV2ZW50LCAuLi5hcmdzKSB7XHJcbiAgICByZXR1cm4gb2xkVHJpZ2dlckV2ZW50LmFwcGx5KG1wSW5zdGFuY2UsIFtjdXN0b21pemUoZXZlbnQpLCAuLi5hcmdzXSlcclxuICB9O1xyXG59XHJcblxyXG5mdW5jdGlvbiBpbml0SG9vayAobmFtZSwgb3B0aW9ucykge1xyXG4gIGNvbnN0IG9sZEhvb2sgPSBvcHRpb25zW25hbWVdO1xyXG4gIGlmICghb2xkSG9vaykge1xyXG4gICAgb3B0aW9uc1tuYW1lXSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgaW5pdFRyaWdnZXJFdmVudCh0aGlzKTtcclxuICAgIH07XHJcbiAgfSBlbHNlIHtcclxuICAgIG9wdGlvbnNbbmFtZV0gPSBmdW5jdGlvbiAoLi4uYXJncykge1xyXG4gICAgICBpbml0VHJpZ2dlckV2ZW50KHRoaXMpO1xyXG4gICAgICByZXR1cm4gb2xkSG9vay5hcHBseSh0aGlzLCBhcmdzKVxyXG4gICAgfTtcclxuICB9XHJcbn1cclxuXHJcblBhZ2UgPSBmdW5jdGlvbiAob3B0aW9ucyA9IHt9KSB7XHJcbiAgaW5pdEhvb2soJ29uTG9hZCcsIG9wdGlvbnMpO1xyXG4gIHJldHVybiBNUFBhZ2Uob3B0aW9ucylcclxufTtcclxuXHJcbkNvbXBvbmVudCA9IGZ1bmN0aW9uIChvcHRpb25zID0ge30pIHtcclxuICBpbml0SG9vaygnY3JlYXRlZCcsIG9wdGlvbnMpO1xyXG4gIHJldHVybiBNUENvbXBvbmVudChvcHRpb25zKVxyXG59O1xyXG5cclxuY29uc3QgUEFHRV9FVkVOVF9IT09LUyA9IFtcclxuICAnb25QdWxsRG93blJlZnJlc2gnLFxyXG4gICdvblJlYWNoQm90dG9tJyxcclxuICAnb25TaGFyZUFwcE1lc3NhZ2UnLFxyXG4gICdvblBhZ2VTY3JvbGwnLFxyXG4gICdvblJlc2l6ZScsXHJcbiAgJ29uVGFiSXRlbVRhcCdcclxuXTtcclxuXHJcbmZ1bmN0aW9uIGluaXRNb2NrcyAodm0sIG1vY2tzKSB7XHJcbiAgY29uc3QgbXBJbnN0YW5jZSA9IHZtLiRtcFt2bS5tcFR5cGVdO1xyXG4gIG1vY2tzLmZvckVhY2gobW9jayA9PiB7XHJcbiAgICBpZiAoaGFzT3duKG1wSW5zdGFuY2UsIG1vY2spKSB7XHJcbiAgICAgIHZtW21vY2tdID0gbXBJbnN0YW5jZVttb2NrXTtcclxuICAgIH1cclxuICB9KTtcclxufVxyXG5cclxuZnVuY3Rpb24gaGFzSG9vayAoaG9vaywgdnVlT3B0aW9ucykge1xyXG4gIGlmICghdnVlT3B0aW9ucykge1xyXG4gICAgcmV0dXJuIHRydWVcclxuICB9XHJcblxyXG4gIGlmIChWdWUub3B0aW9ucyAmJiBBcnJheS5pc0FycmF5KFZ1ZS5vcHRpb25zW2hvb2tdKSkge1xyXG4gICAgcmV0dXJuIHRydWVcclxuICB9XHJcblxyXG4gIHZ1ZU9wdGlvbnMgPSB2dWVPcHRpb25zLmRlZmF1bHQgfHwgdnVlT3B0aW9ucztcclxuXHJcbiAgaWYgKGlzRm4odnVlT3B0aW9ucykpIHtcclxuICAgIGlmIChpc0ZuKHZ1ZU9wdGlvbnMuZXh0ZW5kT3B0aW9uc1tob29rXSkpIHtcclxuICAgICAgcmV0dXJuIHRydWVcclxuICAgIH1cclxuICAgIGlmICh2dWVPcHRpb25zLnN1cGVyICYmXHJcbiAgICAgIHZ1ZU9wdGlvbnMuc3VwZXIub3B0aW9ucyAmJlxyXG4gICAgICBBcnJheS5pc0FycmF5KHZ1ZU9wdGlvbnMuc3VwZXIub3B0aW9uc1tob29rXSkpIHtcclxuICAgICAgcmV0dXJuIHRydWVcclxuICAgIH1cclxuICAgIHJldHVybiBmYWxzZVxyXG4gIH1cclxuXHJcbiAgaWYgKGlzRm4odnVlT3B0aW9uc1tob29rXSkpIHtcclxuICAgIHJldHVybiB0cnVlXHJcbiAgfVxyXG4gIGNvbnN0IG1peGlucyA9IHZ1ZU9wdGlvbnMubWl4aW5zO1xyXG4gIGlmIChBcnJheS5pc0FycmF5KG1peGlucykpIHtcclxuICAgIHJldHVybiAhIW1peGlucy5maW5kKG1peGluID0+IGhhc0hvb2soaG9vaywgbWl4aW4pKVxyXG4gIH1cclxufVxyXG5cclxuZnVuY3Rpb24gaW5pdEhvb2tzIChtcE9wdGlvbnMsIGhvb2tzLCB2dWVPcHRpb25zKSB7XHJcbiAgaG9va3MuZm9yRWFjaChob29rID0+IHtcclxuICAgIGlmIChoYXNIb29rKGhvb2ssIHZ1ZU9wdGlvbnMpKSB7XHJcbiAgICAgIG1wT3B0aW9uc1tob29rXSA9IGZ1bmN0aW9uIChhcmdzKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuJHZtICYmIHRoaXMuJHZtLl9fY2FsbF9ob29rKGhvb2ssIGFyZ3MpXHJcbiAgICAgIH07XHJcbiAgICB9XHJcbiAgfSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGluaXRWdWVDb21wb25lbnQgKFZ1ZSwgdnVlT3B0aW9ucykge1xyXG4gIHZ1ZU9wdGlvbnMgPSB2dWVPcHRpb25zLmRlZmF1bHQgfHwgdnVlT3B0aW9ucztcclxuICBsZXQgVnVlQ29tcG9uZW50O1xyXG4gIGlmIChpc0ZuKHZ1ZU9wdGlvbnMpKSB7XHJcbiAgICBWdWVDb21wb25lbnQgPSB2dWVPcHRpb25zO1xyXG4gICAgdnVlT3B0aW9ucyA9IFZ1ZUNvbXBvbmVudC5leHRlbmRPcHRpb25zO1xyXG4gIH0gZWxzZSB7XHJcbiAgICBWdWVDb21wb25lbnQgPSBWdWUuZXh0ZW5kKHZ1ZU9wdGlvbnMpO1xyXG4gIH1cclxuICByZXR1cm4gW1Z1ZUNvbXBvbmVudCwgdnVlT3B0aW9uc11cclxufVxyXG5cclxuZnVuY3Rpb24gaW5pdFNsb3RzICh2bSwgdnVlU2xvdHMpIHtcclxuICBpZiAoQXJyYXkuaXNBcnJheSh2dWVTbG90cykgJiYgdnVlU2xvdHMubGVuZ3RoKSB7XHJcbiAgICBjb25zdCAkc2xvdHMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xyXG4gICAgdnVlU2xvdHMuZm9yRWFjaChzbG90TmFtZSA9PiB7XHJcbiAgICAgICRzbG90c1tzbG90TmFtZV0gPSB0cnVlO1xyXG4gICAgfSk7XHJcbiAgICB2bS4kc2NvcGVkU2xvdHMgPSB2bS4kc2xvdHMgPSAkc2xvdHM7XHJcbiAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBpbml0VnVlSWRzICh2dWVJZHMsIG1wSW5zdGFuY2UpIHtcclxuICB2dWVJZHMgPSAodnVlSWRzIHx8ICcnKS5zcGxpdCgnLCcpO1xyXG4gIGNvbnN0IGxlbiA9IHZ1ZUlkcy5sZW5ndGg7XHJcblxyXG4gIGlmIChsZW4gPT09IDEpIHtcclxuICAgIG1wSW5zdGFuY2UuXyR2dWVJZCA9IHZ1ZUlkc1swXTtcclxuICB9IGVsc2UgaWYgKGxlbiA9PT0gMikge1xyXG4gICAgbXBJbnN0YW5jZS5fJHZ1ZUlkID0gdnVlSWRzWzBdO1xyXG4gICAgbXBJbnN0YW5jZS5fJHZ1ZVBpZCA9IHZ1ZUlkc1sxXTtcclxuICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGluaXREYXRhICh2dWVPcHRpb25zLCBjb250ZXh0KSB7XHJcbiAgbGV0IGRhdGEgPSB2dWVPcHRpb25zLmRhdGEgfHwge307XHJcbiAgY29uc3QgbWV0aG9kcyA9IHZ1ZU9wdGlvbnMubWV0aG9kcyB8fCB7fTtcclxuXHJcbiAgaWYgKHR5cGVvZiBkYXRhID09PSAnZnVuY3Rpb24nKSB7XHJcbiAgICB0cnkge1xyXG4gICAgICBkYXRhID0gZGF0YS5jYWxsKGNvbnRleHQpOyAvLyDmlK/mjIEgVnVlLnByb3RvdHlwZSDkuIrmjILnmoTmlbDmja5cclxuICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgaWYgKHByb2Nlc3MuZW52LlZVRV9BUFBfREVCVUcpIHtcclxuICAgICAgICBjb25zb2xlLndhcm4oJ+agueaNriBWdWUg55qEIGRhdGEg5Ye95pWw5Yid5aeL5YyW5bCP56iL5bqPIGRhdGEg5aSx6LSl77yM6K+35bC96YeP56Gu5L+dIGRhdGEg5Ye95pWw5Lit5LiN6K6/6ZeuIHZtIOWvueixoe+8jOWQpuWImeWPr+iDveW9seWTjemmluasoeaVsOaNrua4suafk+mAn+W6puOAgicsIGRhdGEpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfSBlbHNlIHtcclxuICAgIHRyeSB7XHJcbiAgICAgIC8vIOWvuSBkYXRhIOagvOW8j+WMllxyXG4gICAgICBkYXRhID0gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShkYXRhKSk7XHJcbiAgICB9IGNhdGNoIChlKSB7fVxyXG4gIH1cclxuXHJcbiAgaWYgKCFpc1BsYWluT2JqZWN0KGRhdGEpKSB7XHJcbiAgICBkYXRhID0ge307XHJcbiAgfVxyXG5cclxuICBPYmplY3Qua2V5cyhtZXRob2RzKS5mb3JFYWNoKG1ldGhvZE5hbWUgPT4ge1xyXG4gICAgaWYgKGNvbnRleHQuX19saWZlY3ljbGVfaG9va3NfXy5pbmRleE9mKG1ldGhvZE5hbWUpID09PSAtMSAmJiAhaGFzT3duKGRhdGEsIG1ldGhvZE5hbWUpKSB7XHJcbiAgICAgIGRhdGFbbWV0aG9kTmFtZV0gPSBtZXRob2RzW21ldGhvZE5hbWVdO1xyXG4gICAgfVxyXG4gIH0pO1xyXG5cclxuICByZXR1cm4gZGF0YVxyXG59XHJcblxyXG5jb25zdCBQUk9QX1RZUEVTID0gW1N0cmluZywgTnVtYmVyLCBCb29sZWFuLCBPYmplY3QsIEFycmF5LCBudWxsXTtcclxuXHJcbmZ1bmN0aW9uIGNyZWF0ZU9ic2VydmVyIChuYW1lKSB7XHJcbiAgcmV0dXJuIGZ1bmN0aW9uIG9ic2VydmVyIChuZXdWYWwsIG9sZFZhbCkge1xyXG4gICAgaWYgKHRoaXMuJHZtKSB7XHJcbiAgICAgIHRoaXMuJHZtW25hbWVdID0gbmV3VmFsOyAvLyDkuLrkuobop6blj5Hlhbbku5bpnZ4gcmVuZGVyIHdhdGNoZXJcclxuICAgIH1cclxuICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGluaXRCZWhhdmlvcnMgKHZ1ZU9wdGlvbnMsIGluaXRCZWhhdmlvcikge1xyXG4gIGNvbnN0IHZ1ZUJlaGF2aW9ycyA9IHZ1ZU9wdGlvbnNbJ2JlaGF2aW9ycyddO1xyXG4gIGNvbnN0IHZ1ZUV4dGVuZHMgPSB2dWVPcHRpb25zWydleHRlbmRzJ107XHJcbiAgY29uc3QgdnVlTWl4aW5zID0gdnVlT3B0aW9uc1snbWl4aW5zJ107XHJcblxyXG4gIGxldCB2dWVQcm9wcyA9IHZ1ZU9wdGlvbnNbJ3Byb3BzJ107XHJcblxyXG4gIGlmICghdnVlUHJvcHMpIHtcclxuICAgIHZ1ZU9wdGlvbnNbJ3Byb3BzJ10gPSB2dWVQcm9wcyA9IFtdO1xyXG4gIH1cclxuXHJcbiAgY29uc3QgYmVoYXZpb3JzID0gW107XHJcbiAgaWYgKEFycmF5LmlzQXJyYXkodnVlQmVoYXZpb3JzKSkge1xyXG4gICAgdnVlQmVoYXZpb3JzLmZvckVhY2goYmVoYXZpb3IgPT4ge1xyXG4gICAgICBiZWhhdmlvcnMucHVzaChiZWhhdmlvci5yZXBsYWNlKCd1bmk6Ly8nLCBgJHtcInd4XCJ9Oi8vYCkpO1xyXG4gICAgICBpZiAoYmVoYXZpb3IgPT09ICd1bmk6Ly9mb3JtLWZpZWxkJykge1xyXG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KHZ1ZVByb3BzKSkge1xyXG4gICAgICAgICAgdnVlUHJvcHMucHVzaCgnbmFtZScpO1xyXG4gICAgICAgICAgdnVlUHJvcHMucHVzaCgndmFsdWUnKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgdnVlUHJvcHNbJ25hbWUnXSA9IHtcclxuICAgICAgICAgICAgdHlwZTogU3RyaW5nLFxyXG4gICAgICAgICAgICBkZWZhdWx0OiAnJ1xyXG4gICAgICAgICAgfTtcclxuICAgICAgICAgIHZ1ZVByb3BzWyd2YWx1ZSddID0ge1xyXG4gICAgICAgICAgICB0eXBlOiBbU3RyaW5nLCBOdW1iZXIsIEJvb2xlYW4sIEFycmF5LCBPYmplY3QsIERhdGVdLFxyXG4gICAgICAgICAgICBkZWZhdWx0OiAnJ1xyXG4gICAgICAgICAgfTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH1cclxuICBpZiAoaXNQbGFpbk9iamVjdCh2dWVFeHRlbmRzKSAmJiB2dWVFeHRlbmRzLnByb3BzKSB7XHJcbiAgICBiZWhhdmlvcnMucHVzaChcclxuICAgICAgaW5pdEJlaGF2aW9yKHtcclxuICAgICAgICBwcm9wZXJ0aWVzOiBpbml0UHJvcGVydGllcyh2dWVFeHRlbmRzLnByb3BzLCB0cnVlKVxyXG4gICAgICB9KVxyXG4gICAgKTtcclxuICB9XHJcbiAgaWYgKEFycmF5LmlzQXJyYXkodnVlTWl4aW5zKSkge1xyXG4gICAgdnVlTWl4aW5zLmZvckVhY2godnVlTWl4aW4gPT4ge1xyXG4gICAgICBpZiAoaXNQbGFpbk9iamVjdCh2dWVNaXhpbikgJiYgdnVlTWl4aW4ucHJvcHMpIHtcclxuICAgICAgICBiZWhhdmlvcnMucHVzaChcclxuICAgICAgICAgIGluaXRCZWhhdmlvcih7XHJcbiAgICAgICAgICAgIHByb3BlcnRpZXM6IGluaXRQcm9wZXJ0aWVzKHZ1ZU1peGluLnByb3BzLCB0cnVlKVxyXG4gICAgICAgICAgfSlcclxuICAgICAgICApO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9XHJcbiAgcmV0dXJuIGJlaGF2aW9yc1xyXG59XHJcblxyXG5mdW5jdGlvbiBwYXJzZVByb3BUeXBlIChrZXksIHR5cGUsIGRlZmF1bHRWYWx1ZSwgZmlsZSkge1xyXG4gIC8vIFtTdHJpbmddPT5TdHJpbmdcclxuICBpZiAoQXJyYXkuaXNBcnJheSh0eXBlKSAmJiB0eXBlLmxlbmd0aCA9PT0gMSkge1xyXG4gICAgcmV0dXJuIHR5cGVbMF1cclxuICB9XHJcbiAgcmV0dXJuIHR5cGVcclxufVxyXG5cclxuZnVuY3Rpb24gaW5pdFByb3BlcnRpZXMgKHByb3BzLCBpc0JlaGF2aW9yID0gZmFsc2UsIGZpbGUgPSAnJykge1xyXG4gIGNvbnN0IHByb3BlcnRpZXMgPSB7fTtcclxuICBpZiAoIWlzQmVoYXZpb3IpIHtcclxuICAgIHByb3BlcnRpZXMudnVlSWQgPSB7XHJcbiAgICAgIHR5cGU6IFN0cmluZyxcclxuICAgICAgdmFsdWU6ICcnXHJcbiAgICB9O1xyXG4gICAgcHJvcGVydGllcy52dWVTbG90cyA9IHsgLy8g5bCP56iL5bqP5LiN6IO955u05o6l5a6a5LmJICRzbG90cyDnmoQgcHJvcHPvvIzmiYDku6XpgJrov4cgdnVlU2xvdHMg6L2s5o2i5YiwICRzbG90c1xyXG4gICAgICB0eXBlOiBudWxsLFxyXG4gICAgICB2YWx1ZTogW10sXHJcbiAgICAgIG9ic2VydmVyOiBmdW5jdGlvbiAobmV3VmFsLCBvbGRWYWwpIHtcclxuICAgICAgICBjb25zdCAkc2xvdHMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xyXG4gICAgICAgIG5ld1ZhbC5mb3JFYWNoKHNsb3ROYW1lID0+IHtcclxuICAgICAgICAgICRzbG90c1tzbG90TmFtZV0gPSB0cnVlO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMuc2V0RGF0YSh7XHJcbiAgICAgICAgICAkc2xvdHNcclxuICAgICAgICB9KTtcclxuICAgICAgfVxyXG4gICAgfTtcclxuICB9XHJcbiAgaWYgKEFycmF5LmlzQXJyYXkocHJvcHMpKSB7IC8vIFsndGl0bGUnXVxyXG4gICAgcHJvcHMuZm9yRWFjaChrZXkgPT4ge1xyXG4gICAgICBwcm9wZXJ0aWVzW2tleV0gPSB7XHJcbiAgICAgICAgdHlwZTogbnVsbCxcclxuICAgICAgICBvYnNlcnZlcjogY3JlYXRlT2JzZXJ2ZXIoa2V5KVxyXG4gICAgICB9O1xyXG4gICAgfSk7XHJcbiAgfSBlbHNlIGlmIChpc1BsYWluT2JqZWN0KHByb3BzKSkgeyAvLyB7dGl0bGU6e3R5cGU6U3RyaW5nLGRlZmF1bHQ6Jyd9LGNvbnRlbnQ6U3RyaW5nfVxyXG4gICAgT2JqZWN0LmtleXMocHJvcHMpLmZvckVhY2goa2V5ID0+IHtcclxuICAgICAgY29uc3Qgb3B0cyA9IHByb3BzW2tleV07XHJcbiAgICAgIGlmIChpc1BsYWluT2JqZWN0KG9wdHMpKSB7IC8vIHRpdGxlOnt0eXBlOlN0cmluZyxkZWZhdWx0OicnfVxyXG4gICAgICAgIGxldCB2YWx1ZSA9IG9wdHNbJ2RlZmF1bHQnXTtcclxuICAgICAgICBpZiAoaXNGbih2YWx1ZSkpIHtcclxuICAgICAgICAgIHZhbHVlID0gdmFsdWUoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIG9wdHMudHlwZSA9IHBhcnNlUHJvcFR5cGUoa2V5LCBvcHRzLnR5cGUpO1xyXG5cclxuICAgICAgICBwcm9wZXJ0aWVzW2tleV0gPSB7XHJcbiAgICAgICAgICB0eXBlOiBQUk9QX1RZUEVTLmluZGV4T2Yob3B0cy50eXBlKSAhPT0gLTEgPyBvcHRzLnR5cGUgOiBudWxsLFxyXG4gICAgICAgICAgdmFsdWUsXHJcbiAgICAgICAgICBvYnNlcnZlcjogY3JlYXRlT2JzZXJ2ZXIoa2V5KVxyXG4gICAgICAgIH07XHJcbiAgICAgIH0gZWxzZSB7IC8vIGNvbnRlbnQ6U3RyaW5nXHJcbiAgICAgICAgY29uc3QgdHlwZSA9IHBhcnNlUHJvcFR5cGUoa2V5LCBvcHRzKTtcclxuICAgICAgICBwcm9wZXJ0aWVzW2tleV0gPSB7XHJcbiAgICAgICAgICB0eXBlOiBQUk9QX1RZUEVTLmluZGV4T2YodHlwZSkgIT09IC0xID8gdHlwZSA6IG51bGwsXHJcbiAgICAgICAgICBvYnNlcnZlcjogY3JlYXRlT2JzZXJ2ZXIoa2V5KVxyXG4gICAgICAgIH07XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH1cclxuICByZXR1cm4gcHJvcGVydGllc1xyXG59XHJcblxyXG5mdW5jdGlvbiB3cmFwcGVyJDIgKGV2ZW50KSB7XHJcbiAgLy8gVE9ETyDlj4jlvpflhbzlrrkgbXB2dWUg55qEIG1wIOWvueixoVxyXG4gIHRyeSB7XHJcbiAgICBldmVudC5tcCA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkoZXZlbnQpKTtcclxuICB9IGNhdGNoIChlKSB7fVxyXG5cclxuICBldmVudC5zdG9wUHJvcGFnYXRpb24gPSBub29wO1xyXG4gIGV2ZW50LnByZXZlbnREZWZhdWx0ID0gbm9vcDtcclxuXHJcbiAgZXZlbnQudGFyZ2V0ID0gZXZlbnQudGFyZ2V0IHx8IHt9O1xyXG5cclxuICBpZiAoIWhhc093bihldmVudCwgJ2RldGFpbCcpKSB7XHJcbiAgICBldmVudC5kZXRhaWwgPSB7fTtcclxuICB9XHJcblxyXG4gIGlmIChpc1BsYWluT2JqZWN0KGV2ZW50LmRldGFpbCkpIHtcclxuICAgIGV2ZW50LnRhcmdldCA9IE9iamVjdC5hc3NpZ24oe30sIGV2ZW50LnRhcmdldCwgZXZlbnQuZGV0YWlsKTtcclxuICB9XHJcblxyXG4gIHJldHVybiBldmVudFxyXG59XHJcblxyXG5mdW5jdGlvbiBnZXRFeHRyYVZhbHVlICh2bSwgZGF0YVBhdGhzQXJyYXkpIHtcclxuICBsZXQgY29udGV4dCA9IHZtO1xyXG4gIGRhdGFQYXRoc0FycmF5LmZvckVhY2goZGF0YVBhdGhBcnJheSA9PiB7XHJcbiAgICBjb25zdCBkYXRhUGF0aCA9IGRhdGFQYXRoQXJyYXlbMF07XHJcbiAgICBjb25zdCB2YWx1ZSA9IGRhdGFQYXRoQXJyYXlbMl07XHJcbiAgICBpZiAoZGF0YVBhdGggfHwgdHlwZW9mIHZhbHVlICE9PSAndW5kZWZpbmVkJykgeyAvLyBbJycsJycsaW5kZXgsJ2Rpc2FibGUnXVxyXG4gICAgICBjb25zdCBwcm9wUGF0aCA9IGRhdGFQYXRoQXJyYXlbMV07XHJcbiAgICAgIGNvbnN0IHZhbHVlUGF0aCA9IGRhdGFQYXRoQXJyYXlbM107XHJcblxyXG4gICAgICBjb25zdCB2Rm9yID0gZGF0YVBhdGggPyB2bS5fX2dldF92YWx1ZShkYXRhUGF0aCwgY29udGV4dCkgOiBjb250ZXh0O1xyXG5cclxuICAgICAgaWYgKE51bWJlci5pc0ludGVnZXIodkZvcikpIHtcclxuICAgICAgICBjb250ZXh0ID0gdmFsdWU7XHJcbiAgICAgIH0gZWxzZSBpZiAoIXByb3BQYXRoKSB7XHJcbiAgICAgICAgY29udGV4dCA9IHZGb3JbdmFsdWVdO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KHZGb3IpKSB7XHJcbiAgICAgICAgICBjb250ZXh0ID0gdkZvci5maW5kKHZGb3JJdGVtID0+IHtcclxuICAgICAgICAgICAgcmV0dXJuIHZtLl9fZ2V0X3ZhbHVlKHByb3BQYXRoLCB2Rm9ySXRlbSkgPT09IHZhbHVlXHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICB9IGVsc2UgaWYgKGlzUGxhaW5PYmplY3QodkZvcikpIHtcclxuICAgICAgICAgIGNvbnRleHQgPSBPYmplY3Qua2V5cyh2Rm9yKS5maW5kKHZGb3JLZXkgPT4ge1xyXG4gICAgICAgICAgICByZXR1cm4gdm0uX19nZXRfdmFsdWUocHJvcFBhdGgsIHZGb3JbdkZvcktleV0pID09PSB2YWx1ZVxyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ3YtZm9yIOaaguS4jeaUr+aMgeW+queOr+aVsOaNru+8micsIHZGb3IpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKHZhbHVlUGF0aCkge1xyXG4gICAgICAgIGNvbnRleHQgPSB2bS5fX2dldF92YWx1ZSh2YWx1ZVBhdGgsIGNvbnRleHQpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfSk7XHJcbiAgcmV0dXJuIGNvbnRleHRcclxufVxyXG5cclxuZnVuY3Rpb24gcHJvY2Vzc0V2ZW50RXh0cmEgKHZtLCBleHRyYSwgZXZlbnQpIHtcclxuICBjb25zdCBleHRyYU9iaiA9IHt9O1xyXG5cclxuICBpZiAoQXJyYXkuaXNBcnJheShleHRyYSkgJiYgZXh0cmEubGVuZ3RoKSB7XHJcbiAgICAvKipcclxuICAgICAqW1xyXG4gICAgICogICAgWydkYXRhLml0ZW1zJywgJ2RhdGEuaWQnLCBpdGVtLmRhdGEuaWRdLFxyXG4gICAgICogICAgWydtZXRhcycsICdpZCcsIG1ldGEuaWRdXHJcbiAgICAgKl0sXHJcbiAgICAgKltcclxuICAgICAqICAgIFsnZGF0YS5pdGVtcycsICdkYXRhLmlkJywgaXRlbS5kYXRhLmlkXSxcclxuICAgICAqICAgIFsnbWV0YXMnLCAnaWQnLCBtZXRhLmlkXVxyXG4gICAgICpdLFxyXG4gICAgICondGVzdCdcclxuICAgICAqL1xyXG4gICAgZXh0cmEuZm9yRWFjaCgoZGF0YVBhdGgsIGluZGV4KSA9PiB7XHJcbiAgICAgIGlmICh0eXBlb2YgZGF0YVBhdGggPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgaWYgKCFkYXRhUGF0aCkgeyAvLyBtb2RlbCxwcm9wLnN5bmNcclxuICAgICAgICAgIGV4dHJhT2JqWyckJyArIGluZGV4XSA9IHZtO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBpZiAoZGF0YVBhdGggPT09ICckZXZlbnQnKSB7IC8vICRldmVudFxyXG4gICAgICAgICAgICBleHRyYU9ialsnJCcgKyBpbmRleF0gPSBldmVudDtcclxuICAgICAgICAgIH0gZWxzZSBpZiAoZGF0YVBhdGguaW5kZXhPZignJGV2ZW50LicpID09PSAwKSB7IC8vICRldmVudC50YXJnZXQudmFsdWVcclxuICAgICAgICAgICAgZXh0cmFPYmpbJyQnICsgaW5kZXhdID0gdm0uX19nZXRfdmFsdWUoZGF0YVBhdGgucmVwbGFjZSgnJGV2ZW50LicsICcnKSwgZXZlbnQpO1xyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgZXh0cmFPYmpbJyQnICsgaW5kZXhdID0gdm0uX19nZXRfdmFsdWUoZGF0YVBhdGgpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBleHRyYU9ialsnJCcgKyBpbmRleF0gPSBnZXRFeHRyYVZhbHVlKHZtLCBkYXRhUGF0aCk7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIGV4dHJhT2JqXHJcbn1cclxuXHJcbmZ1bmN0aW9uIGdldE9iakJ5QXJyYXkgKGFycikge1xyXG4gIGNvbnN0IG9iaiA9IHt9O1xyXG4gIGZvciAobGV0IGkgPSAxOyBpIDwgYXJyLmxlbmd0aDsgaSsrKSB7XHJcbiAgICBjb25zdCBlbGVtZW50ID0gYXJyW2ldO1xyXG4gICAgb2JqW2VsZW1lbnRbMF1dID0gZWxlbWVudFsxXTtcclxuICB9XHJcbiAgcmV0dXJuIG9ialxyXG59XHJcblxyXG5mdW5jdGlvbiBwcm9jZXNzRXZlbnRBcmdzICh2bSwgZXZlbnQsIGFyZ3MgPSBbXSwgZXh0cmEgPSBbXSwgaXNDdXN0b20sIG1ldGhvZE5hbWUpIHtcclxuICBsZXQgaXNDdXN0b21NUEV2ZW50ID0gZmFsc2U7IC8vIHd4Y29tcG9uZW50IOe7hOS7tu+8jOS8oOmAkuWOn+WniyBldmVudCDlr7nosaFcclxuICBpZiAoaXNDdXN0b20pIHsgLy8g6Ieq5a6a5LmJ5LqL5Lu2XHJcbiAgICBpc0N1c3RvbU1QRXZlbnQgPSBldmVudC5jdXJyZW50VGFyZ2V0ICYmXHJcbiAgICAgIGV2ZW50LmN1cnJlbnRUYXJnZXQuZGF0YXNldCAmJlxyXG4gICAgICBldmVudC5jdXJyZW50VGFyZ2V0LmRhdGFzZXQuY29tVHlwZSA9PT0gJ3d4JztcclxuICAgIGlmICghYXJncy5sZW5ndGgpIHsgLy8g5peg5Y+C5pWw77yM55u05o6l5Lyg5YWlIGV2ZW50IOaIliBkZXRhaWwg5pWw57uEXHJcbiAgICAgIGlmIChpc0N1c3RvbU1QRXZlbnQpIHtcclxuICAgICAgICByZXR1cm4gW2V2ZW50XVxyXG4gICAgICB9XHJcbiAgICAgIHJldHVybiBldmVudC5kZXRhaWwuX19hcmdzX18gfHwgZXZlbnQuZGV0YWlsXHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBjb25zdCBleHRyYU9iaiA9IHByb2Nlc3NFdmVudEV4dHJhKHZtLCBleHRyYSwgZXZlbnQpO1xyXG5cclxuICBjb25zdCByZXQgPSBbXTtcclxuICBhcmdzLmZvckVhY2goYXJnID0+IHtcclxuICAgIGlmIChhcmcgPT09ICckZXZlbnQnKSB7XHJcbiAgICAgIGlmIChtZXRob2ROYW1lID09PSAnX19zZXRfbW9kZWwnICYmICFpc0N1c3RvbSkgeyAvLyBpbnB1dCB2LW1vZGVsIHZhbHVlXHJcbiAgICAgICAgcmV0LnB1c2goZXZlbnQudGFyZ2V0LnZhbHVlKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBpZiAoaXNDdXN0b20gJiYgIWlzQ3VzdG9tTVBFdmVudCkge1xyXG4gICAgICAgICAgcmV0LnB1c2goZXZlbnQuZGV0YWlsLl9fYXJnc19fWzBdKTtcclxuICAgICAgICB9IGVsc2UgeyAvLyB3eGNvbXBvbmVudCDnu4Tku7bmiJblhoXnva7nu4Tku7ZcclxuICAgICAgICAgIHJldC5wdXNoKGV2ZW50KTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGlmIChBcnJheS5pc0FycmF5KGFyZykgJiYgYXJnWzBdID09PSAnbycpIHtcclxuICAgICAgICByZXQucHVzaChnZXRPYmpCeUFycmF5KGFyZykpO1xyXG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiBhcmcgPT09ICdzdHJpbmcnICYmIGhhc093bihleHRyYU9iaiwgYXJnKSkge1xyXG4gICAgICAgIHJldC5wdXNoKGV4dHJhT2JqW2FyZ10pO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHJldC5wdXNoKGFyZyk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9KTtcclxuXHJcbiAgcmV0dXJuIHJldFxyXG59XHJcblxyXG5jb25zdCBPTkNFID0gJ34nO1xyXG5jb25zdCBDVVNUT00gPSAnXic7XHJcblxyXG5mdW5jdGlvbiBpc01hdGNoRXZlbnRUeXBlIChldmVudFR5cGUsIG9wdFR5cGUpIHtcclxuICByZXR1cm4gKGV2ZW50VHlwZSA9PT0gb3B0VHlwZSkgfHxcclxuICAgIChcclxuICAgICAgb3B0VHlwZSA9PT0gJ3JlZ2lvbmNoYW5nZScgJiZcclxuICAgICAgKFxyXG4gICAgICAgIGV2ZW50VHlwZSA9PT0gJ2JlZ2luJyB8fFxyXG4gICAgICAgIGV2ZW50VHlwZSA9PT0gJ2VuZCdcclxuICAgICAgKVxyXG4gICAgKVxyXG59XHJcblxyXG5mdW5jdGlvbiBoYW5kbGVFdmVudCAoZXZlbnQpIHtcclxuICBldmVudCA9IHdyYXBwZXIkMihldmVudCk7XHJcblxyXG4gIC8vIFtbJ3RhcCcsW1snaGFuZGxlJyxbMSwyLGFdXSxbJ2hhbmRsZTEnLFsxLDIsYV1dXV1dXHJcbiAgY29uc3QgZGF0YXNldCA9IChldmVudC5jdXJyZW50VGFyZ2V0IHx8IGV2ZW50LnRhcmdldCkuZGF0YXNldDtcclxuICBpZiAoIWRhdGFzZXQpIHtcclxuICAgIHJldHVybiBjb25zb2xlLndhcm4oYOS6i+S7tuS/oeaBr+S4jeWtmOWcqGApXHJcbiAgfVxyXG4gIGNvbnN0IGV2ZW50T3B0cyA9IGRhdGFzZXQuZXZlbnRPcHRzIHx8IGRhdGFzZXRbJ2V2ZW50LW9wdHMnXTsgLy8g5pSv5LuY5a6dIHdlYi12aWV3IOe7hOS7tiBkYXRhc2V0IOmdnumpvOWzsFxyXG4gIGlmICghZXZlbnRPcHRzKSB7XHJcbiAgICByZXR1cm4gY29uc29sZS53YXJuKGDkuovku7bkv6Hmga/kuI3lrZjlnKhgKVxyXG4gIH1cclxuXHJcbiAgLy8gW1snaGFuZGxlJyxbMSwyLGFdXSxbJ2hhbmRsZTEnLFsxLDIsYV1dXVxyXG4gIGNvbnN0IGV2ZW50VHlwZSA9IGV2ZW50LnR5cGU7XHJcblxyXG4gIGNvbnN0IHJldCA9IFtdO1xyXG5cclxuICBldmVudE9wdHMuZm9yRWFjaChldmVudE9wdCA9PiB7XHJcbiAgICBsZXQgdHlwZSA9IGV2ZW50T3B0WzBdO1xyXG4gICAgY29uc3QgZXZlbnRzQXJyYXkgPSBldmVudE9wdFsxXTtcclxuXHJcbiAgICBjb25zdCBpc0N1c3RvbSA9IHR5cGUuY2hhckF0KDApID09PSBDVVNUT007XHJcbiAgICB0eXBlID0gaXNDdXN0b20gPyB0eXBlLnNsaWNlKDEpIDogdHlwZTtcclxuICAgIGNvbnN0IGlzT25jZSA9IHR5cGUuY2hhckF0KDApID09PSBPTkNFO1xyXG4gICAgdHlwZSA9IGlzT25jZSA/IHR5cGUuc2xpY2UoMSkgOiB0eXBlO1xyXG5cclxuICAgIGlmIChldmVudHNBcnJheSAmJiBpc01hdGNoRXZlbnRUeXBlKGV2ZW50VHlwZSwgdHlwZSkpIHtcclxuICAgICAgZXZlbnRzQXJyYXkuZm9yRWFjaChldmVudEFycmF5ID0+IHtcclxuICAgICAgICBjb25zdCBtZXRob2ROYW1lID0gZXZlbnRBcnJheVswXTtcclxuICAgICAgICBpZiAobWV0aG9kTmFtZSkge1xyXG4gICAgICAgICAgbGV0IGhhbmRsZXJDdHggPSB0aGlzLiR2bTtcclxuICAgICAgICAgIGlmIChcclxuICAgICAgICAgICAgaGFuZGxlckN0eC4kb3B0aW9ucy5nZW5lcmljICYmXHJcbiAgICAgICAgICAgIGhhbmRsZXJDdHguJHBhcmVudCAmJlxyXG4gICAgICAgICAgICBoYW5kbGVyQ3R4LiRwYXJlbnQuJHBhcmVudFxyXG4gICAgICAgICAgKSB7IC8vIG1wLXdlaXhpbixtcC10b3V0aWFvIOaKveixoeiKgueCueaooeaLnyBzY29wZWQgc2xvdHNcclxuICAgICAgICAgICAgaGFuZGxlckN0eCA9IGhhbmRsZXJDdHguJHBhcmVudC4kcGFyZW50O1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgY29uc3QgaGFuZGxlciA9IGhhbmRsZXJDdHhbbWV0aG9kTmFtZV07XHJcbiAgICAgICAgICBpZiAoIWlzRm4oaGFuZGxlcikpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGAgX3ZtLiR7bWV0aG9kTmFtZX0gaXMgbm90IGEgZnVuY3Rpb25gKVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgaWYgKGlzT25jZSkge1xyXG4gICAgICAgICAgICBpZiAoaGFuZGxlci5vbmNlKSB7XHJcbiAgICAgICAgICAgICAgcmV0dXJuXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaGFuZGxlci5vbmNlID0gdHJ1ZTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIHJldC5wdXNoKGhhbmRsZXIuYXBwbHkoaGFuZGxlckN0eCwgcHJvY2Vzc0V2ZW50QXJncyhcclxuICAgICAgICAgICAgdGhpcy4kdm0sXHJcbiAgICAgICAgICAgIGV2ZW50LFxyXG4gICAgICAgICAgICBldmVudEFycmF5WzFdLFxyXG4gICAgICAgICAgICBldmVudEFycmF5WzJdLFxyXG4gICAgICAgICAgICBpc0N1c3RvbSxcclxuICAgICAgICAgICAgbWV0aG9kTmFtZVxyXG4gICAgICAgICAgKSkpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgfSk7XHJcblxyXG4gIGlmIChcclxuICAgIGV2ZW50VHlwZSA9PT0gJ2lucHV0JyAmJlxyXG4gICAgcmV0Lmxlbmd0aCA9PT0gMSAmJlxyXG4gICAgdHlwZW9mIHJldFswXSAhPT0gJ3VuZGVmaW5lZCdcclxuICApIHtcclxuICAgIHJldHVybiByZXRbMF1cclxuICB9XHJcbn1cclxuXHJcbmNvbnN0IGhvb2tzID0gW1xyXG4gICdvblNob3cnLFxyXG4gICdvbkhpZGUnLFxyXG4gICdvbkVycm9yJyxcclxuICAnb25QYWdlTm90Rm91bmQnXHJcbl07XHJcblxyXG5mdW5jdGlvbiBwYXJzZUJhc2VBcHAgKHZtLCB7XHJcbiAgbW9ja3MsXHJcbiAgaW5pdFJlZnNcclxufSkge1xyXG4gIGlmICh2bS4kb3B0aW9ucy5zdG9yZSkge1xyXG4gICAgVnVlLnByb3RvdHlwZS4kc3RvcmUgPSB2bS4kb3B0aW9ucy5zdG9yZTtcclxuICB9XHJcblxyXG4gIFZ1ZS5wcm90b3R5cGUubXBIb3N0ID0gXCJhcHAtcGx1c1wiO1xyXG5cclxuICBWdWUubWl4aW4oe1xyXG4gICAgYmVmb3JlQ3JlYXRlICgpIHtcclxuICAgICAgaWYgKCF0aGlzLiRvcHRpb25zLm1wVHlwZSkge1xyXG4gICAgICAgIHJldHVyblxyXG4gICAgICB9XHJcblxyXG4gICAgICB0aGlzLm1wVHlwZSA9IHRoaXMuJG9wdGlvbnMubXBUeXBlO1xyXG5cclxuICAgICAgdGhpcy4kbXAgPSB7XHJcbiAgICAgICAgZGF0YToge30sXHJcbiAgICAgICAgW3RoaXMubXBUeXBlXTogdGhpcy4kb3B0aW9ucy5tcEluc3RhbmNlXHJcbiAgICAgIH07XHJcblxyXG4gICAgICB0aGlzLiRzY29wZSA9IHRoaXMuJG9wdGlvbnMubXBJbnN0YW5jZTtcclxuXHJcbiAgICAgIGRlbGV0ZSB0aGlzLiRvcHRpb25zLm1wVHlwZTtcclxuICAgICAgZGVsZXRlIHRoaXMuJG9wdGlvbnMubXBJbnN0YW5jZTtcclxuXHJcbiAgICAgIGlmICh0aGlzLm1wVHlwZSAhPT0gJ2FwcCcpIHtcclxuICAgICAgICBpbml0UmVmcyh0aGlzKTtcclxuICAgICAgICBpbml0TW9ja3ModGhpcywgbW9ja3MpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfSk7XHJcblxyXG4gIGNvbnN0IGFwcE9wdGlvbnMgPSB7XHJcbiAgICBvbkxhdW5jaCAoYXJncykge1xyXG4gICAgICBpZiAodGhpcy4kdm0pIHsgLy8g5bey57uP5Yid5aeL5YyW6L+H5LqG77yM5Li76KaB5piv5Li65LqG55m+5bqm77yM55m+5bqmIG9uU2hvdyDlnKggb25MYXVuY2gg5LmL5YmNXHJcbiAgICAgICAgcmV0dXJuXHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHRoaXMuJHZtID0gdm07XHJcblxyXG4gICAgICB0aGlzLiR2bS4kbXAgPSB7XHJcbiAgICAgICAgYXBwOiB0aGlzXHJcbiAgICAgIH07XHJcblxyXG4gICAgICB0aGlzLiR2bS4kc2NvcGUgPSB0aGlzO1xyXG4gICAgICAvLyB2bSDkuIrkuZ/mjILovb0gZ2xvYmFsRGF0YVxyXG4gICAgICB0aGlzLiR2bS5nbG9iYWxEYXRhID0gdGhpcy5nbG9iYWxEYXRhO1xyXG5cclxuICAgICAgdGhpcy4kdm0uX2lzTW91bnRlZCA9IHRydWU7XHJcbiAgICAgIHRoaXMuJHZtLl9fY2FsbF9ob29rKCdtb3VudGVkJywgYXJncyk7XHJcblxyXG4gICAgICB0aGlzLiR2bS5fX2NhbGxfaG9vaygnb25MYXVuY2gnLCBhcmdzKTtcclxuICAgIH1cclxuICB9O1xyXG5cclxuICAvLyDlhbzlrrnml6fniYjmnKwgZ2xvYmFsRGF0YVxyXG4gIGFwcE9wdGlvbnMuZ2xvYmFsRGF0YSA9IHZtLiRvcHRpb25zLmdsb2JhbERhdGEgfHwge307XHJcblxyXG4gIGluaXRIb29rcyhhcHBPcHRpb25zLCBob29rcyk7XHJcblxyXG4gIHJldHVybiBhcHBPcHRpb25zXHJcbn1cclxuXHJcbmNvbnN0IG1vY2tzID0gWydfX3JvdXRlX18nLCAnX193eEV4cGFyc2VyTm9kZUlkX18nLCAnX193eFdlYnZpZXdJZF9fJ107XHJcblxyXG5mdW5jdGlvbiBmaW5kVm1CeVZ1ZUlkICh2bSwgdnVlUGlkKSB7XHJcbiAgY29uc3QgJGNoaWxkcmVuID0gdm0uJGNoaWxkcmVuO1xyXG4gIC8vIOS8mOWFiOafpeaJvuebtOWxnlxyXG4gIGxldCBwYXJlbnRWbSA9ICRjaGlsZHJlbi5maW5kKGNoaWxkVm0gPT4gY2hpbGRWbS4kc2NvcGUuXyR2dWVJZCA9PT0gdnVlUGlkKTtcclxuICBpZiAocGFyZW50Vm0pIHtcclxuICAgIHJldHVybiBwYXJlbnRWbVxyXG4gIH1cclxuICAvLyDlj43lkJHpgJLlvZLmn6Xmib5cclxuICBmb3IgKGxldCBpID0gJGNoaWxkcmVuLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XHJcbiAgICBwYXJlbnRWbSA9IGZpbmRWbUJ5VnVlSWQoJGNoaWxkcmVuW2ldLCB2dWVQaWQpO1xyXG4gICAgaWYgKHBhcmVudFZtKSB7XHJcbiAgICAgIHJldHVybiBwYXJlbnRWbVxyXG4gICAgfVxyXG4gIH1cclxufVxyXG5cclxuZnVuY3Rpb24gaW5pdEJlaGF2aW9yIChvcHRpb25zKSB7XHJcbiAgcmV0dXJuIEJlaGF2aW9yKG9wdGlvbnMpXHJcbn1cclxuXHJcbmZ1bmN0aW9uIGlzUGFnZSAoKSB7XHJcbiAgcmV0dXJuICEhdGhpcy5yb3V0ZVxyXG59XHJcblxyXG5mdW5jdGlvbiBpbml0UmVsYXRpb24gKGRldGFpbCkge1xyXG4gIHRoaXMudHJpZ2dlckV2ZW50KCdfX2wnLCBkZXRhaWwpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBpbml0UmVmcyAodm0pIHtcclxuICBjb25zdCBtcEluc3RhbmNlID0gdm0uJHNjb3BlO1xyXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh2bSwgJyRyZWZzJywge1xyXG4gICAgZ2V0ICgpIHtcclxuICAgICAgY29uc3QgJHJlZnMgPSB7fTtcclxuICAgICAgY29uc3QgY29tcG9uZW50cyA9IG1wSW5zdGFuY2Uuc2VsZWN0QWxsQ29tcG9uZW50cygnLnZ1ZS1yZWYnKTtcclxuICAgICAgY29tcG9uZW50cy5mb3JFYWNoKGNvbXBvbmVudCA9PiB7XHJcbiAgICAgICAgY29uc3QgcmVmID0gY29tcG9uZW50LmRhdGFzZXQucmVmO1xyXG4gICAgICAgICRyZWZzW3JlZl0gPSBjb21wb25lbnQuJHZtIHx8IGNvbXBvbmVudDtcclxuICAgICAgfSk7XHJcbiAgICAgIGNvbnN0IGZvckNvbXBvbmVudHMgPSBtcEluc3RhbmNlLnNlbGVjdEFsbENvbXBvbmVudHMoJy52dWUtcmVmLWluLWZvcicpO1xyXG4gICAgICBmb3JDb21wb25lbnRzLmZvckVhY2goY29tcG9uZW50ID0+IHtcclxuICAgICAgICBjb25zdCByZWYgPSBjb21wb25lbnQuZGF0YXNldC5yZWY7XHJcbiAgICAgICAgaWYgKCEkcmVmc1tyZWZdKSB7XHJcbiAgICAgICAgICAkcmVmc1tyZWZdID0gW107XHJcbiAgICAgICAgfVxyXG4gICAgICAgICRyZWZzW3JlZl0ucHVzaChjb21wb25lbnQuJHZtIHx8IGNvbXBvbmVudCk7XHJcbiAgICAgIH0pO1xyXG4gICAgICByZXR1cm4gJHJlZnNcclxuICAgIH1cclxuICB9KTtcclxufVxyXG5cclxuZnVuY3Rpb24gaGFuZGxlTGluayAoZXZlbnQpIHtcclxuICBjb25zdCB7XHJcbiAgICB2dWVQaWQsXHJcbiAgICB2dWVPcHRpb25zXHJcbiAgfSA9IGV2ZW50LmRldGFpbCB8fCBldmVudC52YWx1ZTsgLy8gZGV0YWlsIOaYr+W+ruS/oSx2YWx1ZSDmmK/nmb7luqYoZGlwYXRjaClcclxuXHJcbiAgbGV0IHBhcmVudFZtO1xyXG5cclxuICBpZiAodnVlUGlkKSB7XHJcbiAgICBwYXJlbnRWbSA9IGZpbmRWbUJ5VnVlSWQodGhpcy4kdm0sIHZ1ZVBpZCk7XHJcbiAgfVxyXG5cclxuICBpZiAoIXBhcmVudFZtKSB7XHJcbiAgICBwYXJlbnRWbSA9IHRoaXMuJHZtO1xyXG4gIH1cclxuXHJcbiAgdnVlT3B0aW9ucy5wYXJlbnQgPSBwYXJlbnRWbTtcclxufVxyXG5cclxuZnVuY3Rpb24gcGFyc2VBcHAgKHZtKSB7XHJcbiAgcmV0dXJuIHBhcnNlQmFzZUFwcCh2bSwge1xyXG4gICAgbW9ja3MsXHJcbiAgICBpbml0UmVmc1xyXG4gIH0pXHJcbn1cclxuXHJcbmNvbnN0IGhvb2tzJDEgPSBbXHJcbiAgJ29uVW5pTlZpZXdNZXNzYWdlJ1xyXG5dO1xyXG5cclxuZnVuY3Rpb24gcGFyc2VBcHAkMSAodm0pIHtcclxuICBjb25zdCBhcHBPcHRpb25zID0gcGFyc2VBcHAodm0pO1xyXG5cclxuICBpbml0SG9va3MoYXBwT3B0aW9ucywgaG9va3MkMSk7XHJcblxyXG4gIHJldHVybiBhcHBPcHRpb25zXHJcbn1cclxuXHJcbmZ1bmN0aW9uIGNyZWF0ZUFwcCAodm0pIHtcclxuICBBcHAocGFyc2VBcHAkMSh2bSkpO1xyXG4gIHJldHVybiB2bVxyXG59XHJcblxyXG5mdW5jdGlvbiBwYXJzZUJhc2VDb21wb25lbnQgKHZ1ZUNvbXBvbmVudE9wdGlvbnMsIHtcclxuICBpc1BhZ2UsXHJcbiAgaW5pdFJlbGF0aW9uXHJcbn0gPSB7fSkge1xyXG4gIGxldCBbVnVlQ29tcG9uZW50LCB2dWVPcHRpb25zXSA9IGluaXRWdWVDb21wb25lbnQoVnVlLCB2dWVDb21wb25lbnRPcHRpb25zKTtcclxuXHJcbiAgY29uc3QgY29tcG9uZW50T3B0aW9ucyA9IHtcclxuICAgIG9wdGlvbnM6IHtcclxuICAgICAgbXVsdGlwbGVTbG90czogdHJ1ZSxcclxuICAgICAgYWRkR2xvYmFsQ2xhc3M6IHRydWVcclxuICAgIH0sXHJcbiAgICBkYXRhOiBpbml0RGF0YSh2dWVPcHRpb25zLCBWdWUucHJvdG90eXBlKSxcclxuICAgIGJlaGF2aW9yczogaW5pdEJlaGF2aW9ycyh2dWVPcHRpb25zLCBpbml0QmVoYXZpb3IpLFxyXG4gICAgcHJvcGVydGllczogaW5pdFByb3BlcnRpZXModnVlT3B0aW9ucy5wcm9wcywgZmFsc2UsIHZ1ZU9wdGlvbnMuX19maWxlKSxcclxuICAgIGxpZmV0aW1lczoge1xyXG4gICAgICBhdHRhY2hlZCAoKSB7XHJcbiAgICAgICAgY29uc3QgcHJvcGVydGllcyA9IHRoaXMucHJvcGVydGllcztcclxuXHJcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHtcclxuICAgICAgICAgIG1wVHlwZTogaXNQYWdlLmNhbGwodGhpcykgPyAncGFnZScgOiAnY29tcG9uZW50JyxcclxuICAgICAgICAgIG1wSW5zdGFuY2U6IHRoaXMsXHJcbiAgICAgICAgICBwcm9wc0RhdGE6IHByb3BlcnRpZXNcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBpbml0VnVlSWRzKHByb3BlcnRpZXMudnVlSWQsIHRoaXMpO1xyXG5cclxuICAgICAgICAvLyDlpITnkIbniLblrZDlhbPns7tcclxuICAgICAgICBpbml0UmVsYXRpb24uY2FsbCh0aGlzLCB7XHJcbiAgICAgICAgICB2dWVQaWQ6IHRoaXMuXyR2dWVQaWQsXHJcbiAgICAgICAgICB2dWVPcHRpb25zOiBvcHRpb25zXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIC8vIOWIneWni+WMliB2dWUg5a6e5L6LXHJcbiAgICAgICAgdGhpcy4kdm0gPSBuZXcgVnVlQ29tcG9uZW50KG9wdGlvbnMpO1xyXG5cclxuICAgICAgICAvLyDlpITnkIYkc2xvdHMsJHNjb3BlZFNsb3Rz77yI5pqC5LiN5pSv5oyB5Yqo5oCB5Y+Y5YyWJHNsb3Rz77yJXHJcbiAgICAgICAgaW5pdFNsb3RzKHRoaXMuJHZtLCBwcm9wZXJ0aWVzLnZ1ZVNsb3RzKTtcclxuXHJcbiAgICAgICAgLy8g6Kem5Y+R6aaW5qyhIHNldERhdGFcclxuICAgICAgICB0aGlzLiR2bS4kbW91bnQoKTtcclxuICAgICAgfSxcclxuICAgICAgcmVhZHkgKCkge1xyXG4gICAgICAgIC8vIOW9k+e7hOS7tiBwcm9wcyDpu5jorqTlgLzkuLogdHJ1Ze+8jOWIneWni+WMluaXtuS8oOWFpSBmYWxzZSDkvJrlr7zoh7QgY3JlYXRlZCxyZWFkeSDop6blj5EsIOS9hiBhdHRhY2hlZCDkuI3op6blj5FcclxuICAgICAgICAvLyBodHRwczovL2RldmVsb3BlcnMud2VpeGluLnFxLmNvbS9jb21tdW5pdHkvZGV2ZWxvcC9kb2MvMDAwNjZhZTI4NDRjYzBmOGViODgzZTJhNTU3ODAwXHJcbiAgICAgICAgaWYgKHRoaXMuJHZtKSB7XHJcbiAgICAgICAgICB0aGlzLiR2bS5faXNNb3VudGVkID0gdHJ1ZTtcclxuICAgICAgICAgIHRoaXMuJHZtLl9fY2FsbF9ob29rKCdtb3VudGVkJyk7XHJcbiAgICAgICAgICB0aGlzLiR2bS5fX2NhbGxfaG9vaygnb25SZWFkeScpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSxcclxuICAgICAgZGV0YWNoZWQgKCkge1xyXG4gICAgICAgIHRoaXMuJHZtLiRkZXN0cm95KCk7XHJcbiAgICAgIH1cclxuICAgIH0sXHJcbiAgICBwYWdlTGlmZXRpbWVzOiB7XHJcbiAgICAgIHNob3cgKGFyZ3MpIHtcclxuICAgICAgICB0aGlzLiR2bSAmJiB0aGlzLiR2bS5fX2NhbGxfaG9vaygnb25QYWdlU2hvdycsIGFyZ3MpO1xyXG4gICAgICB9LFxyXG4gICAgICBoaWRlICgpIHtcclxuICAgICAgICB0aGlzLiR2bSAmJiB0aGlzLiR2bS5fX2NhbGxfaG9vaygnb25QYWdlSGlkZScpO1xyXG4gICAgICB9LFxyXG4gICAgICByZXNpemUgKHNpemUpIHtcclxuICAgICAgICB0aGlzLiR2bSAmJiB0aGlzLiR2bS5fX2NhbGxfaG9vaygnb25QYWdlUmVzaXplJywgc2l6ZSk7XHJcbiAgICAgIH1cclxuICAgIH0sXHJcbiAgICBtZXRob2RzOiB7XHJcbiAgICAgIF9fbDogaGFuZGxlTGluayxcclxuICAgICAgX19lOiBoYW5kbGVFdmVudFxyXG4gICAgfVxyXG4gIH07XHJcblxyXG4gIGlmIChBcnJheS5pc0FycmF5KHZ1ZU9wdGlvbnMud3hzQ2FsbE1ldGhvZHMpKSB7XHJcbiAgICB2dWVPcHRpb25zLnd4c0NhbGxNZXRob2RzLmZvckVhY2goY2FsbE1ldGhvZCA9PiB7XHJcbiAgICAgIGNvbXBvbmVudE9wdGlvbnMubWV0aG9kc1tjYWxsTWV0aG9kXSA9IGZ1bmN0aW9uIChhcmdzKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuJHZtW2NhbGxNZXRob2RdKGFyZ3MpXHJcbiAgICAgIH07XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIGlmIChpc1BhZ2UpIHtcclxuICAgIHJldHVybiBjb21wb25lbnRPcHRpb25zXHJcbiAgfVxyXG4gIHJldHVybiBbY29tcG9uZW50T3B0aW9ucywgVnVlQ29tcG9uZW50XVxyXG59XHJcblxyXG5mdW5jdGlvbiBwYXJzZUNvbXBvbmVudCAodnVlQ29tcG9uZW50T3B0aW9ucykge1xyXG4gIHJldHVybiBwYXJzZUJhc2VDb21wb25lbnQodnVlQ29tcG9uZW50T3B0aW9ucywge1xyXG4gICAgaXNQYWdlLFxyXG4gICAgaW5pdFJlbGF0aW9uXHJcbiAgfSlcclxufVxyXG5cclxuZnVuY3Rpb24gcGFyc2VDb21wb25lbnQkMSAodnVlQ29tcG9uZW50T3B0aW9ucykge1xyXG4gIGNvbnN0IGNvbXBvbmVudE9wdGlvbnMgPSBwYXJzZUNvbXBvbmVudCh2dWVDb21wb25lbnRPcHRpb25zKTtcclxuXHJcbiAgY29tcG9uZW50T3B0aW9ucy5tZXRob2RzLiRnZXRBcHBXZWJ2aWV3ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgcmV0dXJuIHBsdXMud2Vidmlldy5nZXRXZWJ2aWV3QnlJZChgJHt0aGlzLl9fd3hXZWJ2aWV3SWRfX31gKVxyXG4gIH07XHJcbiAgcmV0dXJuIGNvbXBvbmVudE9wdGlvbnNcclxufVxyXG5cclxuY29uc3QgaG9va3MkMiA9IFtcclxuICAnb25TaG93JyxcclxuICAnb25IaWRlJyxcclxuICAnb25VbmxvYWQnXHJcbl07XHJcblxyXG5ob29rcyQyLnB1c2goLi4uUEFHRV9FVkVOVF9IT09LUyk7XHJcblxyXG5mdW5jdGlvbiBwYXJzZUJhc2VQYWdlICh2dWVQYWdlT3B0aW9ucywge1xyXG4gIGlzUGFnZSxcclxuICBpbml0UmVsYXRpb25cclxufSkge1xyXG4gIGNvbnN0IHBhZ2VPcHRpb25zID0gcGFyc2VDb21wb25lbnQkMSh2dWVQYWdlT3B0aW9ucyk7XHJcblxyXG4gIGluaXRIb29rcyhwYWdlT3B0aW9ucy5tZXRob2RzLCBob29rcyQyLCB2dWVQYWdlT3B0aW9ucyk7XHJcblxyXG4gIHBhZ2VPcHRpb25zLm1ldGhvZHMub25Mb2FkID0gZnVuY3Rpb24gKGFyZ3MpIHtcclxuICAgIHRoaXMuJHZtLiRtcC5xdWVyeSA9IGFyZ3M7IC8vIOWFvOWuuSBtcHZ1ZVxyXG4gICAgdGhpcy4kdm0uX19jYWxsX2hvb2soJ29uTG9hZCcsIGFyZ3MpO1xyXG4gIH07XHJcblxyXG4gIHJldHVybiBwYWdlT3B0aW9uc1xyXG59XHJcblxyXG5mdW5jdGlvbiBwYXJzZVBhZ2UgKHZ1ZVBhZ2VPcHRpb25zKSB7XHJcbiAgcmV0dXJuIHBhcnNlQmFzZVBhZ2UodnVlUGFnZU9wdGlvbnMsIHtcclxuICAgIGlzUGFnZSxcclxuICAgIGluaXRSZWxhdGlvblxyXG4gIH0pXHJcbn1cclxuXHJcbmNvbnN0IGhvb2tzJDMgPSBbXHJcbiAgJ29uQmFja1ByZXNzJyxcclxuICAnb25OYXZpZ2F0aW9uQmFyQnV0dG9uVGFwJyxcclxuICAnb25OYXZpZ2F0aW9uQmFyU2VhcmNoSW5wdXRDaGFuZ2VkJyxcclxuICAnb25OYXZpZ2F0aW9uQmFyU2VhcmNoSW5wdXRDb25maXJtZWQnLFxyXG4gICdvbk5hdmlnYXRpb25CYXJTZWFyY2hJbnB1dENsaWNrZWQnXHJcbl07XHJcblxyXG5mdW5jdGlvbiBwYXJzZVBhZ2UkMSAodnVlUGFnZU9wdGlvbnMpIHtcclxuICBjb25zdCBwYWdlT3B0aW9ucyA9IHBhcnNlUGFnZSh2dWVQYWdlT3B0aW9ucyk7XHJcblxyXG4gIGluaXRIb29rcyhwYWdlT3B0aW9ucy5tZXRob2RzLCBob29rcyQzKTtcclxuXHJcbiAgcmV0dXJuIHBhZ2VPcHRpb25zXHJcbn1cclxuXHJcbmZ1bmN0aW9uIGNyZWF0ZVBhZ2UgKHZ1ZVBhZ2VPcHRpb25zKSB7XHJcbiAge1xyXG4gICAgcmV0dXJuIENvbXBvbmVudChwYXJzZVBhZ2UkMSh2dWVQYWdlT3B0aW9ucykpXHJcbiAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBjcmVhdGVDb21wb25lbnQgKHZ1ZU9wdGlvbnMpIHtcclxuICB7XHJcbiAgICByZXR1cm4gQ29tcG9uZW50KHBhcnNlQ29tcG9uZW50JDEodnVlT3B0aW9ucykpXHJcbiAgfVxyXG59XHJcblxyXG50b2Rvcy5mb3JFYWNoKHRvZG9BcGkgPT4ge1xyXG4gIHByb3RvY29sc1t0b2RvQXBpXSA9IGZhbHNlO1xyXG59KTtcclxuXHJcbmNhbklVc2VzLmZvckVhY2goY2FuSVVzZUFwaSA9PiB7XHJcbiAgY29uc3QgYXBpTmFtZSA9IHByb3RvY29sc1tjYW5JVXNlQXBpXSAmJiBwcm90b2NvbHNbY2FuSVVzZUFwaV0ubmFtZSA/IHByb3RvY29sc1tjYW5JVXNlQXBpXS5uYW1lXHJcbiAgICA6IGNhbklVc2VBcGk7XHJcbiAgaWYgKCF3eC5jYW5JVXNlKGFwaU5hbWUpKSB7XHJcbiAgICBwcm90b2NvbHNbY2FuSVVzZUFwaV0gPSBmYWxzZTtcclxuICB9XHJcbn0pO1xyXG5cclxubGV0IHVuaSA9IHt9O1xyXG5cclxuaWYgKHR5cGVvZiBQcm94eSAhPT0gJ3VuZGVmaW5lZCcgJiYgXCJhcHAtcGx1c1wiICE9PSAnYXBwLXBsdXMnKSB7XHJcbiAgdW5pID0gbmV3IFByb3h5KHt9LCB7XHJcbiAgICBnZXQgKHRhcmdldCwgbmFtZSkge1xyXG4gICAgICBpZiAodGFyZ2V0W25hbWVdKSB7XHJcbiAgICAgICAgcmV0dXJuIHRhcmdldFtuYW1lXVxyXG4gICAgICB9XHJcbiAgICAgIGlmIChiYXNlQXBpW25hbWVdKSB7XHJcbiAgICAgICAgcmV0dXJuIGJhc2VBcGlbbmFtZV1cclxuICAgICAgfVxyXG4gICAgICBpZiAoYXBpW25hbWVdKSB7XHJcbiAgICAgICAgcmV0dXJuIHByb21pc2lmeShuYW1lLCBhcGlbbmFtZV0pXHJcbiAgICAgIH1cclxuICAgICAgaWYgKGV2ZW50QXBpW25hbWVdKSB7XHJcbiAgICAgICAgcmV0dXJuIGV2ZW50QXBpW25hbWVdXHJcbiAgICAgIH1cclxuICAgICAgaWYgKCFoYXNPd24od3gsIG5hbWUpICYmICFoYXNPd24ocHJvdG9jb2xzLCBuYW1lKSkge1xyXG4gICAgICAgIHJldHVyblxyXG4gICAgICB9XHJcbiAgICAgIHJldHVybiBwcm9taXNpZnkobmFtZSwgd3JhcHBlcihuYW1lLCB3eFtuYW1lXSkpXHJcbiAgICB9LFxyXG4gICAgc2V0ICh0YXJnZXQsIG5hbWUsIHZhbHVlKSB7XHJcbiAgICAgIHRhcmdldFtuYW1lXSA9IHZhbHVlO1xyXG4gICAgICByZXR1cm4gdHJ1ZVxyXG4gICAgfVxyXG4gIH0pO1xyXG59IGVsc2Uge1xyXG4gIE9iamVjdC5rZXlzKGJhc2VBcGkpLmZvckVhY2gobmFtZSA9PiB7XHJcbiAgICB1bmlbbmFtZV0gPSBiYXNlQXBpW25hbWVdO1xyXG4gIH0pO1xyXG5cclxuICBPYmplY3Qua2V5cyhldmVudEFwaSkuZm9yRWFjaChuYW1lID0+IHtcclxuICAgIHVuaVtuYW1lXSA9IGV2ZW50QXBpW25hbWVdO1xyXG4gIH0pO1xyXG5cclxuICBPYmplY3Qua2V5cyhhcGkpLmZvckVhY2gobmFtZSA9PiB7XHJcbiAgICB1bmlbbmFtZV0gPSBwcm9taXNpZnkobmFtZSwgYXBpW25hbWVdKTtcclxuICB9KTtcclxuXHJcbiAgT2JqZWN0LmtleXMod3gpLmZvckVhY2gobmFtZSA9PiB7XHJcbiAgICBpZiAoaGFzT3duKHd4LCBuYW1lKSB8fCBoYXNPd24ocHJvdG9jb2xzLCBuYW1lKSkge1xyXG4gICAgICB1bmlbbmFtZV0gPSBwcm9taXNpZnkobmFtZSwgd3JhcHBlcihuYW1lLCB3eFtuYW1lXSkpO1xyXG4gICAgfVxyXG4gIH0pO1xyXG59XHJcblxyXG57XHJcbiAgaWYgKHR5cGVvZiBnbG9iYWwgIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICBnbG9iYWwudW5pID0gdW5pO1xyXG4gICAgZ2xvYmFsLlVuaUVtaXR0ZXIgPSBldmVudEFwaTtcclxuICB9XHJcbn1cclxuXHJcbnd4LmNyZWF0ZUFwcCA9IGNyZWF0ZUFwcDtcclxud3guY3JlYXRlUGFnZSA9IGNyZWF0ZVBhZ2U7XHJcbnd4LmNyZWF0ZUNvbXBvbmVudCA9IGNyZWF0ZUNvbXBvbmVudDtcclxuXHJcbnZhciB1bmkkMSA9IHVuaTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IHVuaSQxO1xyXG5leHBvcnQgeyBjcmVhdGVBcHAsIGNyZWF0ZUNvbXBvbmVudCwgY3JlYXRlUGFnZSB9O1xyXG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///1\n");

/***/ }),

/***/ 12:
/*!*********************************************************************!*\
  !*** ./node_modules/@dcloudio/vue-cli-plugin-uni/lib/format-log.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = formatLog;function typof(v) {\n  var s = Object.prototype.toString.call(v);\n  return s.substring(8, s.length - 1);\n}\n\nfunction formatLog() {for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {args[_key] = arguments[_key];}\n  var msgs = args.map(function (v) {\n    var type = Object.prototype.toString.call(v);\n    if (type.toLowerCase() === '[object object]') {\n      try {\n        v = '---BEGIN:JSON---' + JSON.stringify(v) + '---END:JSON---';\n      } catch (e) {\n        v = '[object object]';\n      }\n    } else {\n      if (v === null) {\n        v = '---NULL---';\n      } else if (v === undefined) {\n        v = '---UNDEFINED---';\n      } else {\n        var vType = typof(v).toUpperCase();\n        if (vType === 'NUMBER' || vType === 'BOOLEAN') {\n          v = '---BEGIN:' + vType + '---' + v + '---END:' + vType + '---';\n        } else {\n          v = String(v);\n        }\n      }\n    }\n    return v;\n  });\n  var msg = '';\n  if (msgs.length > 1) {\n    var lastMsg = msgs.pop();\n    msg = msgs.join('---COMMA---');\n    if (lastMsg.indexOf(' at ') === 0) {\n      msg += lastMsg;\n    } else {\n      msg += '---COMMA---' + lastMsg;\n    }\n  } else {\n    msg = msgs[0];\n  }\n  return msg;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbInR5cG9mIiwidiIsInMiLCJPYmplY3QiLCJwcm90b3R5cGUiLCJ0b1N0cmluZyIsImNhbGwiLCJzdWJzdHJpbmciLCJsZW5ndGgiLCJmb3JtYXRMb2ciLCJhcmdzIiwibXNncyIsIm1hcCIsInR5cGUiLCJ0b0xvd2VyQ2FzZSIsIkpTT04iLCJzdHJpbmdpZnkiLCJlIiwidW5kZWZpbmVkIiwidlR5cGUiLCJ0b1VwcGVyQ2FzZSIsIlN0cmluZyIsIm1zZyIsImxhc3RNc2ciLCJwb3AiLCJqb2luIiwiaW5kZXhPZiJdLCJtYXBwaW5ncyI6IjBGQUFBLFNBQVNBLEtBQVQsQ0FBZ0JDLENBQWhCLEVBQW1CO0FBQ2pCLE1BQU1DLENBQUMsR0FBR0MsTUFBTSxDQUFDQyxTQUFQLENBQWlCQyxRQUFqQixDQUEwQkMsSUFBMUIsQ0FBK0JMLENBQS9CLENBQVY7QUFDQSxTQUFPQyxDQUFDLENBQUNLLFNBQUYsQ0FBWSxDQUFaLEVBQWVMLENBQUMsQ0FBQ00sTUFBRixHQUFXLENBQTFCLENBQVA7QUFDRDs7QUFFYyxTQUFTQyxTQUFULEdBQTZCLG1DQUFOQyxJQUFNLG9EQUFOQSxJQUFNO0FBQzFDLE1BQU1DLElBQUksR0FBR0QsSUFBSSxDQUFDRSxHQUFMLENBQVMsVUFBQ1gsQ0FBRCxFQUFPO0FBQzNCLFFBQU1ZLElBQUksR0FBR1YsTUFBTSxDQUFDQyxTQUFQLENBQWlCQyxRQUFqQixDQUEwQkMsSUFBMUIsQ0FBK0JMLENBQS9CLENBQWI7QUFDQSxRQUFJWSxJQUFJLENBQUNDLFdBQUwsT0FBdUIsaUJBQTNCLEVBQThDO0FBQzVDLFVBQUk7QUFDRmIsU0FBQyxHQUFHLHFCQUFxQmMsSUFBSSxDQUFDQyxTQUFMLENBQWVmLENBQWYsQ0FBckIsR0FBeUMsZ0JBQTdDO0FBQ0QsT0FGRCxDQUVFLE9BQU9nQixDQUFQLEVBQVU7QUFDVmhCLFNBQUMsR0FBRyxpQkFBSjtBQUNEO0FBQ0YsS0FORCxNQU1PO0FBQ0wsVUFBSUEsQ0FBQyxLQUFLLElBQVYsRUFBZ0I7QUFDZEEsU0FBQyxHQUFHLFlBQUo7QUFDRCxPQUZELE1BRU8sSUFBSUEsQ0FBQyxLQUFLaUIsU0FBVixFQUFxQjtBQUMxQmpCLFNBQUMsR0FBRyxpQkFBSjtBQUNELE9BRk0sTUFFQTtBQUNMLFlBQU1rQixLQUFLLEdBQUduQixLQUFLLENBQUNDLENBQUQsQ0FBTCxDQUFTbUIsV0FBVCxFQUFkO0FBQ0EsWUFBSUQsS0FBSyxLQUFLLFFBQVYsSUFBc0JBLEtBQUssS0FBSyxTQUFwQyxFQUErQztBQUM3Q2xCLFdBQUMsR0FBRyxjQUFja0IsS0FBZCxHQUFzQixLQUF0QixHQUE4QmxCLENBQTlCLEdBQWtDLFNBQWxDLEdBQThDa0IsS0FBOUMsR0FBc0QsS0FBMUQ7QUFDRCxTQUZELE1BRU87QUFDTGxCLFdBQUMsR0FBR29CLE1BQU0sQ0FBQ3BCLENBQUQsQ0FBVjtBQUNEO0FBQ0Y7QUFDRjtBQUNELFdBQU9BLENBQVA7QUFDRCxHQXZCWSxDQUFiO0FBd0JBLE1BQUlxQixHQUFHLEdBQUcsRUFBVjtBQUNBLE1BQUlYLElBQUksQ0FBQ0gsTUFBTCxHQUFjLENBQWxCLEVBQXFCO0FBQ25CLFFBQU1lLE9BQU8sR0FBR1osSUFBSSxDQUFDYSxHQUFMLEVBQWhCO0FBQ0FGLE9BQUcsR0FBR1gsSUFBSSxDQUFDYyxJQUFMLENBQVUsYUFBVixDQUFOO0FBQ0EsUUFBSUYsT0FBTyxDQUFDRyxPQUFSLENBQWdCLE1BQWhCLE1BQTRCLENBQWhDLEVBQW1DO0FBQ2pDSixTQUFHLElBQUlDLE9BQVA7QUFDRCxLQUZELE1BRU87QUFDTEQsU0FBRyxJQUFJLGdCQUFnQkMsT0FBdkI7QUFDRDtBQUNGLEdBUkQsTUFRTztBQUNMRCxPQUFHLEdBQUdYLElBQUksQ0FBQyxDQUFELENBQVY7QUFDRDtBQUNELFNBQU9XLEdBQVA7QUFDRCIsImZpbGUiOiIxMi5qcyIsInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIHR5cG9mICh2KSB7XHJcbiAgY29uc3QgcyA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2KVxyXG4gIHJldHVybiBzLnN1YnN0cmluZyg4LCBzLmxlbmd0aCAtIDEpXHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGZvcm1hdExvZyAoLi4uYXJncykge1xyXG4gIGNvbnN0IG1zZ3MgPSBhcmdzLm1hcCgodikgPT4ge1xyXG4gICAgY29uc3QgdHlwZSA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2KVxyXG4gICAgaWYgKHR5cGUudG9Mb3dlckNhc2UoKSA9PT0gJ1tvYmplY3Qgb2JqZWN0XScpIHtcclxuICAgICAgdHJ5IHtcclxuICAgICAgICB2ID0gJy0tLUJFR0lOOkpTT04tLS0nICsgSlNPTi5zdHJpbmdpZnkodikgKyAnLS0tRU5EOkpTT04tLS0nXHJcbiAgICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgICB2ID0gJ1tvYmplY3Qgb2JqZWN0XSdcclxuICAgICAgfVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgaWYgKHYgPT09IG51bGwpIHtcclxuICAgICAgICB2ID0gJy0tLU5VTEwtLS0nXHJcbiAgICAgIH0gZWxzZSBpZiAodiA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgdiA9ICctLS1VTkRFRklORUQtLS0nXHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgY29uc3QgdlR5cGUgPSB0eXBvZih2KS50b1VwcGVyQ2FzZSgpXHJcbiAgICAgICAgaWYgKHZUeXBlID09PSAnTlVNQkVSJyB8fCB2VHlwZSA9PT0gJ0JPT0xFQU4nKSB7XHJcbiAgICAgICAgICB2ID0gJy0tLUJFR0lOOicgKyB2VHlwZSArICctLS0nICsgdiArICctLS1FTkQ6JyArIHZUeXBlICsgJy0tLSdcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgdiA9IFN0cmluZyh2KVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHZcclxuICB9KVxyXG4gIGxldCBtc2cgPSAnJ1xyXG4gIGlmIChtc2dzLmxlbmd0aCA+IDEpIHtcclxuICAgIGNvbnN0IGxhc3RNc2cgPSBtc2dzLnBvcCgpXHJcbiAgICBtc2cgPSBtc2dzLmpvaW4oJy0tLUNPTU1BLS0tJylcclxuICAgIGlmIChsYXN0TXNnLmluZGV4T2YoJyBhdCAnKSA9PT0gMCkge1xyXG4gICAgICBtc2cgKz0gbGFzdE1zZ1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgbXNnICs9ICctLS1DT01NQS0tLScgKyBsYXN0TXNnXHJcbiAgICB9XHJcbiAgfSBlbHNlIHtcclxuICAgIG1zZyA9IG1zZ3NbMF1cclxuICB9XHJcbiAgcmV0dXJuIG1zZ1xyXG59XHJcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///12\n");

/***/ }),

/***/ 15:
/*!********************************************************************!*\
  !*** ./node_modules/vue-loader/lib/runtime/componentNormalizer.js ***!
  \********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return normalizeComponent; });\n/* globals __VUE_SSR_CONTEXT__ */\n\n// IMPORTANT: Do NOT use ES2015 features in this file (except for modules).\n// This module is a runtime utility for cleaner component module output and will\n// be included in the final webpack user bundle.\n\nfunction normalizeComponent (\n  scriptExports,\n  render,\n  staticRenderFns,\n  functionalTemplate,\n  injectStyles,\n  scopeId,\n  moduleIdentifier, /* server only */\n  shadowMode /* vue-cli only */\n) {\n  // Vue.extend constructor export interop\n  var options = typeof scriptExports === 'function'\n    ? scriptExports.options\n    : scriptExports\n\n  // render functions\n  if (render) {\n    options.render = render\n    options.staticRenderFns = staticRenderFns\n    options._compiled = true\n  }\n\n  // functional template\n  if (functionalTemplate) {\n    options.functional = true\n  }\n\n  // scopedId\n  if (scopeId) {\n    options._scopeId = 'data-v-' + scopeId\n  }\n\n  var hook\n  if (moduleIdentifier) { // server build\n    hook = function (context) {\n      // 2.3 injection\n      context =\n        context || // cached call\n        (this.$vnode && this.$vnode.ssrContext) || // stateful\n        (this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext) // functional\n      // 2.2 with runInNewContext: true\n      if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {\n        context = __VUE_SSR_CONTEXT__\n      }\n      // inject component styles\n      if (injectStyles) {\n        injectStyles.call(this, context)\n      }\n      // register component module identifier for async chunk inferrence\n      if (context && context._registeredComponents) {\n        context._registeredComponents.add(moduleIdentifier)\n      }\n    }\n    // used by ssr in case component is cached and beforeCreate\n    // never gets called\n    options._ssrRegister = hook\n  } else if (injectStyles) {\n    hook = shadowMode\n      ? function () { injectStyles.call(this, this.$root.$options.shadowRoot) }\n      : injectStyles\n  }\n\n  if (hook) {\n    if (options.functional) {\n      // for template-only hot-reload because in that case the render fn doesn't\n      // go through the normalizer\n      options._injectStyles = hook\n      // register for functioal component in vue file\n      var originalRender = options.render\n      options.render = function renderWithStyleInjection (h, context) {\n        hook.call(context)\n        return originalRender(h, context)\n      }\n    } else {\n      // inject component registration as beforeCreate hook\n      var existing = options.beforeCreate\n      options.beforeCreate = existing\n        ? [].concat(existing, hook)\n        : [hook]\n    }\n  }\n\n  return {\n    exports: scriptExports,\n    options: options\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRWU7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSx5QkFBeUI7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxxQkFBcUI7QUFDckI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiMTUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBnbG9iYWxzIF9fVlVFX1NTUl9DT05URVhUX18gKi9cblxuLy8gSU1QT1JUQU5UOiBEbyBOT1QgdXNlIEVTMjAxNSBmZWF0dXJlcyBpbiB0aGlzIGZpbGUgKGV4Y2VwdCBmb3IgbW9kdWxlcykuXG4vLyBUaGlzIG1vZHVsZSBpcyBhIHJ1bnRpbWUgdXRpbGl0eSBmb3IgY2xlYW5lciBjb21wb25lbnQgbW9kdWxlIG91dHB1dCBhbmQgd2lsbFxuLy8gYmUgaW5jbHVkZWQgaW4gdGhlIGZpbmFsIHdlYnBhY2sgdXNlciBidW5kbGUuXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG5vcm1hbGl6ZUNvbXBvbmVudCAoXG4gIHNjcmlwdEV4cG9ydHMsXG4gIHJlbmRlcixcbiAgc3RhdGljUmVuZGVyRm5zLFxuICBmdW5jdGlvbmFsVGVtcGxhdGUsXG4gIGluamVjdFN0eWxlcyxcbiAgc2NvcGVJZCxcbiAgbW9kdWxlSWRlbnRpZmllciwgLyogc2VydmVyIG9ubHkgKi9cbiAgc2hhZG93TW9kZSAvKiB2dWUtY2xpIG9ubHkgKi9cbikge1xuICAvLyBWdWUuZXh0ZW5kIGNvbnN0cnVjdG9yIGV4cG9ydCBpbnRlcm9wXG4gIHZhciBvcHRpb25zID0gdHlwZW9mIHNjcmlwdEV4cG9ydHMgPT09ICdmdW5jdGlvbidcbiAgICA/IHNjcmlwdEV4cG9ydHMub3B0aW9uc1xuICAgIDogc2NyaXB0RXhwb3J0c1xuXG4gIC8vIHJlbmRlciBmdW5jdGlvbnNcbiAgaWYgKHJlbmRlcikge1xuICAgIG9wdGlvbnMucmVuZGVyID0gcmVuZGVyXG4gICAgb3B0aW9ucy5zdGF0aWNSZW5kZXJGbnMgPSBzdGF0aWNSZW5kZXJGbnNcbiAgICBvcHRpb25zLl9jb21waWxlZCA9IHRydWVcbiAgfVxuXG4gIC8vIGZ1bmN0aW9uYWwgdGVtcGxhdGVcbiAgaWYgKGZ1bmN0aW9uYWxUZW1wbGF0ZSkge1xuICAgIG9wdGlvbnMuZnVuY3Rpb25hbCA9IHRydWVcbiAgfVxuXG4gIC8vIHNjb3BlZElkXG4gIGlmIChzY29wZUlkKSB7XG4gICAgb3B0aW9ucy5fc2NvcGVJZCA9ICdkYXRhLXYtJyArIHNjb3BlSWRcbiAgfVxuXG4gIHZhciBob29rXG4gIGlmIChtb2R1bGVJZGVudGlmaWVyKSB7IC8vIHNlcnZlciBidWlsZFxuICAgIGhvb2sgPSBmdW5jdGlvbiAoY29udGV4dCkge1xuICAgICAgLy8gMi4zIGluamVjdGlvblxuICAgICAgY29udGV4dCA9XG4gICAgICAgIGNvbnRleHQgfHwgLy8gY2FjaGVkIGNhbGxcbiAgICAgICAgKHRoaXMuJHZub2RlICYmIHRoaXMuJHZub2RlLnNzckNvbnRleHQpIHx8IC8vIHN0YXRlZnVsXG4gICAgICAgICh0aGlzLnBhcmVudCAmJiB0aGlzLnBhcmVudC4kdm5vZGUgJiYgdGhpcy5wYXJlbnQuJHZub2RlLnNzckNvbnRleHQpIC8vIGZ1bmN0aW9uYWxcbiAgICAgIC8vIDIuMiB3aXRoIHJ1bkluTmV3Q29udGV4dDogdHJ1ZVxuICAgICAgaWYgKCFjb250ZXh0ICYmIHR5cGVvZiBfX1ZVRV9TU1JfQ09OVEVYVF9fICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICBjb250ZXh0ID0gX19WVUVfU1NSX0NPTlRFWFRfX1xuICAgICAgfVxuICAgICAgLy8gaW5qZWN0IGNvbXBvbmVudCBzdHlsZXNcbiAgICAgIGlmIChpbmplY3RTdHlsZXMpIHtcbiAgICAgICAgaW5qZWN0U3R5bGVzLmNhbGwodGhpcywgY29udGV4dClcbiAgICAgIH1cbiAgICAgIC8vIHJlZ2lzdGVyIGNvbXBvbmVudCBtb2R1bGUgaWRlbnRpZmllciBmb3IgYXN5bmMgY2h1bmsgaW5mZXJyZW5jZVxuICAgICAgaWYgKGNvbnRleHQgJiYgY29udGV4dC5fcmVnaXN0ZXJlZENvbXBvbmVudHMpIHtcbiAgICAgICAgY29udGV4dC5fcmVnaXN0ZXJlZENvbXBvbmVudHMuYWRkKG1vZHVsZUlkZW50aWZpZXIpXG4gICAgICB9XG4gICAgfVxuICAgIC8vIHVzZWQgYnkgc3NyIGluIGNhc2UgY29tcG9uZW50IGlzIGNhY2hlZCBhbmQgYmVmb3JlQ3JlYXRlXG4gICAgLy8gbmV2ZXIgZ2V0cyBjYWxsZWRcbiAgICBvcHRpb25zLl9zc3JSZWdpc3RlciA9IGhvb2tcbiAgfSBlbHNlIGlmIChpbmplY3RTdHlsZXMpIHtcbiAgICBob29rID0gc2hhZG93TW9kZVxuICAgICAgPyBmdW5jdGlvbiAoKSB7IGluamVjdFN0eWxlcy5jYWxsKHRoaXMsIHRoaXMuJHJvb3QuJG9wdGlvbnMuc2hhZG93Um9vdCkgfVxuICAgICAgOiBpbmplY3RTdHlsZXNcbiAgfVxuXG4gIGlmIChob29rKSB7XG4gICAgaWYgKG9wdGlvbnMuZnVuY3Rpb25hbCkge1xuICAgICAgLy8gZm9yIHRlbXBsYXRlLW9ubHkgaG90LXJlbG9hZCBiZWNhdXNlIGluIHRoYXQgY2FzZSB0aGUgcmVuZGVyIGZuIGRvZXNuJ3RcbiAgICAgIC8vIGdvIHRocm91Z2ggdGhlIG5vcm1hbGl6ZXJcbiAgICAgIG9wdGlvbnMuX2luamVjdFN0eWxlcyA9IGhvb2tcbiAgICAgIC8vIHJlZ2lzdGVyIGZvciBmdW5jdGlvYWwgY29tcG9uZW50IGluIHZ1ZSBmaWxlXG4gICAgICB2YXIgb3JpZ2luYWxSZW5kZXIgPSBvcHRpb25zLnJlbmRlclxuICAgICAgb3B0aW9ucy5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXJXaXRoU3R5bGVJbmplY3Rpb24gKGgsIGNvbnRleHQpIHtcbiAgICAgICAgaG9vay5jYWxsKGNvbnRleHQpXG4gICAgICAgIHJldHVybiBvcmlnaW5hbFJlbmRlcihoLCBjb250ZXh0KVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBpbmplY3QgY29tcG9uZW50IHJlZ2lzdHJhdGlvbiBhcyBiZWZvcmVDcmVhdGUgaG9va1xuICAgICAgdmFyIGV4aXN0aW5nID0gb3B0aW9ucy5iZWZvcmVDcmVhdGVcbiAgICAgIG9wdGlvbnMuYmVmb3JlQ3JlYXRlID0gZXhpc3RpbmdcbiAgICAgICAgPyBbXS5jb25jYXQoZXhpc3RpbmcsIGhvb2spXG4gICAgICAgIDogW2hvb2tdXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBleHBvcnRzOiBzY3JpcHRFeHBvcnRzLFxuICAgIG9wdGlvbnM6IG9wdGlvbnNcbiAgfVxufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///15\n");

/***/ }),

/***/ 16:
/*!********************************************************!*\
  !*** C:/Users/Admin/Desktop/evc.app/common/js/base.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(uni, __f__) {module.exports = {\n  _cacheWallet: \"evc_wallet\", //钱包的缓存名字\n  _cacheCoin: \"evc_coin\", //币种缓存名称\n  _cacheList: 'evc_list', //充提记录缓存名称\n  _des3pwd: \"ioqXdfdHfbSZaLeBQhLgxBNG\", //des3加密秘钥\n  _platCoin: function _platCoin() {//平台币\n    return '';\n  },\n  _prePage: function _prePage() {//获取上一个页面\n    var pages = getCurrentPages();\n    var prePage = pages[pages.length - 2];\n    return prePage;\n  },\n  _toast: function _toast(msg) {//自动消失的提示窗\n    uni.showToast({\n      icon: 'none',\n      title: msg,\n      duration: 2000 });\n\n  },\n  /**\r\n      * 时间戳格式化\r\n      * @param {String} 内容\r\n      */\n  _formatDate: function _formatDate(inputTime) {\n    var date = new Date(parseInt(inputTime * 1000));\n    var y = date.getFullYear();\n    var m = date.getMonth() + 1;\n    m = m < 10 ? '0' + m : m;\n    var d = date.getDate();\n    d = d < 10 ? '0' + d : d;\n    var h = date.getHours();\n    h = h < 10 ? '0' + h : h;\n    var minute = date.getMinutes();\n    var second = date.getSeconds();\n    minute = minute < 10 ? '0' + minute : minute;\n    second = second < 10 ? '0' + second : second;\n    return y + '-' + m + '-' + d + ' ' + h + ':' + minute + ':' + second;\n  },\n  /**\r\n      * 小数截取\r\n      */\n  _toFixed: function _toFixed(str1, num) {\n    var str = String(str1);\n\n    function hanZeo(z) {\n      var zeo = '';\n      for (var i = 0; i < z; i++) {\n        zeo += '0';\n      }\n      return zeo;\n    }\n    var arr = str.split('.');\n    if (arr[1]) {\n      if (arr[1].length >= num) {\n        return arr[0] + '.' + arr[1].slice(0, num);\n      } else {\n        return arr[0] + '.' + arr[1] + hanZeo(num - arr[1].length);\n      }\n    } else {\n      return str + '.' + hanZeo(num);\n    }\n  },\n  _addressMethod: function _addressMethod(address) {//钱包地址中间用……代替\n    var frontLen = 10,endLen = 10;\n    var len = address.length - frontLen - endLen;\n    var temp = '......';\n    return address.substring(0, frontLen) + temp + address.substring(address.length - endLen);\n  },\n  _phoneMethod: function _phoneMethod(cellValue) {//电话号码中间用*代替\n    if (Number(cellValue) && String(cellValue).length === 11) {\n      var mobile = String(cellValue);\n      var reg = /^(\\d{3})\\d{4}(\\d{4})$/;\n      return mobile.replace(reg, '$1****$2');\n    } else {\n      return cellValue;\n    }\n  },\n  _checkPwd: function _checkPwd(pwd) {//验证密码，必须8-20字母数字组成\n    if (!/^(?![0-9]+$)(?![a-zA-Z]+$)[0-9A-Za-z]{8,20}$/.test(pwd)) {\n      return false;\n    } else {\n      return true;\n    }\n  },\n  _networkMethod: function _networkMethod() {//网络监听\n    uni.getNetworkType({\n      success: function success(res) {\n        console.log(__f__(res.networkType, \" at common\\\\js\\\\base.js:89\"));\n        if (res.networkType == 'none') {\n          uni.showModal({\n            title: \"提示\",\n            content: \"您当前处于无网络状态，请链接网络后操作\",\n            showCancel: false,\n            confirmText: \"确定\" });\n\n        }\n      } });\n\n    uni.onNetworkStatusChange(function (res) {\n      console.log(__f__(res.isConnected, \" at common\\\\js\\\\base.js:101\"));\n      console.log(__f__(res.networkType, \" at common\\\\js\\\\base.js:102\"));\n      if (!res.isConnected) {\n        uni.showModal({\n          title: \"提示\",\n          content: \"您当前处于无网络状态，请链接网络后操作\",\n          showCancel: false,\n          confirmText: \"确定\" });\n\n      }\n    });\n  },\n  _accMul: function _accMul(arg1, arg2) {//乘法\n    var m = 0,\n    s1 = arg1.toString(),\n    s2 = arg2.toString();\n    try {\n      m += s1.split(\".\")[1].length;\n    } catch (e) {}\n    try {\n      m += s2.split(\".\")[1].length;\n    } catch (e) {}\n    return Number(s1.replace(\".\", \"\")) * Number(s2.replace(\".\", \"\")) / Math.pow(10, m);\n  },\n  _accDiv: function _accDiv(arg1, arg2) {//除法\n    var t1 = 0,t2 = 0,r1,r2;\n    try {t1 = arg1.toString().split(\".\")[1].length;} catch (e) {}\n    try {t2 = arg2.toString().split(\".\")[1].length;} catch (e) {}\n    r1 = Number(arg1.toString().replace(\".\", \"\"));\n    r2 = Number(arg2.toString().replace(\".\", \"\"));\n    return r1 / r2 * Math.pow(10, t2 - t1);\n  },\n  _datediff: function _datediff(date) {// 时间减去8小时\n    date = date.substring(0, 19);\n    date = date.replace(/-/g, '/');\n    var timestamp = new Date(date).getTime() - 8 * 60 * 60 * 1000;\n    return this._formatDate(timestamp / 1000);\n  },\n  _checkLoginStatus: function _checkLoginStatus(status) {//检查登录状态\n    if (status == 1004 || status == 1003 || status == 1002 || status == 1001 || status == 2001 || status == 20002 || status == 20003 || status == 20004) {\n      uni.clearStorageSync();\n      plus.nativeUI.toast(\"您的登录已过期，请重新登录\", {\n        verticalAlign: 'center' });\n\n      uni.reLaunch({\n        url: '/pages/account/login' });\n\n    }\n  },\n  _install: function _install(item) {//安装新版本\n    plus.nativeUI.showWaiting(\"更新中...\");\n    var url = item.Android;\n    if (plus.os.name.toLowerCase() == \"ios\") {\n      url = item.IOS;\n      if (item.install) {\n        plus.runtime.openURL(url, function () {\n          plus.nativeUI.toast(\"启动外部浏览器错误\", {\n            verticalAlign: 'center' });\n\n        });\n        return;\n      }\n    }\n    var self = this;\n    var dtask = plus.downloader.createDownload(url, {},\n    function (d, status) {\n      plus.nativeUI.closeWaiting();\n      if (status == 200) {\n        self._toast(\"正在准备环境，请稍后！\");\n        setTimeout(function () {\n          var path = d.filename; //下载apk\n          //plus.runtime.install()\n          plus.runtime.install(path, {\n            force: true },\n          function () {\n            var str = '更新成功,请手动重启';\n            if (plus.os.name.toLowerCase() == 'ios') {\n              str = '更新成功，将自动重启';\n            }\n            plus.nativeUI.alert(str, function () {\n              if (plus.os.name.toLowerCase() == 'ios') {\n                plus.runtime.restart();\n              } else {\n                plus.runtime.quit();\n              }\n            });\n          }, function (ttt) {\n            plus.nativeUI.toast(\"更新失败\", {\n              verticalAlign: 'center' });\n\n          }); // 自动安装apk文件\n        }, 100);\n      } else {\n        plus.nativeUI.alert('资源包下载失败:' + status);\n      }\n    });\n    dtask.start();\n  } };\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/uni-app-plus/dist/index.js */ 1)[\"default\"], __webpack_require__(/*! ./node_modules/@dcloudio/vue-cli-plugin-uni/lib/format-log.js */ 12)[\"default\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///16\n");

/***/ }),

/***/ 17:
/*!*********************************************************!*\
  !*** C:/Users/Admin/Desktop/evc.app/common/js/base1.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(uni) {Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = void 0;var _default = {\n  /**\r\n                                                                                                                      * 时间戳格式化\r\n                                                                                                                      * @param {String} 内容\r\n                                                                                                                      */\n  _formatDate: function _formatDate(inputTime) {\n    var date = new Date(parseInt(inputTime * 1000));\n    var y = date.getFullYear();\n    var m = date.getMonth() + 1;\n    m = m < 10 ? '0' + m : m;\n    var d = date.getDate();\n    d = d < 10 ? '0' + d : d;\n    var h = date.getHours();\n    h = h < 10 ? '0' + h : h;\n    var minute = date.getMinutes();\n    var second = date.getSeconds();\n    minute = minute < 10 ? '0' + minute : minute;\n    second = second < 10 ? '0' + second : second;\n    return y + '-' + m + '-' + d + ' ' + h + ':' + minute + ':' + second;\n  },\n  /**\r\n      * 小数截取\r\n      */\n  _toFixed: function _toFixed(str1, num) {\n    var str = String(str1);\n\n    function hanZeo(z) {\n      var zeo = '';\n      for (var i = 0; i < z; i++) {\n        zeo += '0';\n      }\n      return zeo;\n    }\n    var arr = str.split('.');\n    if (arr[1]) {\n      if (arr[1].length >= num) {\n        return arr[0] + '.' + arr[1].slice(0, num);\n      } else {\n        return arr[0] + '.' + arr[1] + hanZeo(num - arr[1].length);\n      }\n    } else {\n      return str + '.' + hanZeo(num);\n    }\n  },\n  /**\r\n      * 检查登录状态\r\n      * @param {String} 内容\r\n      */\n  _isLogin: function _isLogin(status) {\n    if (!status) {\n      uni.showModal({\n        content: \"您还未登录，请先登录\",\n        showCancel: false,\n        confirmText: \"确定\",\n        success: function success(res) {\n          if (res.confirm) {\n            uni.navigateTo({\n              url: \"/pages/pagesB/login/login\" });\n\n          }\n        } });\n\n      return;\n    };\n  },\n  // 判断返回值以2开头为未登录跳转到登录信息\n  _indexOf: function _indexOf(status) {\n    var reg = new RegExp(/^2\\d/);\n    return reg.test(status);\n  },\n  //返回值为空，不存在，null，undefine时显示为0\n  _showZero: function _showZero(number) {\n    if (number == \"null\" || number == \"\" || number == 0 || number == null || number == undefined || number == \"undefined\") {\n      return \"0\";\n    } else {\n      return number;\n    }\n  } };exports.default = _default;\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/uni-app-plus/dist/index.js */ 1)[\"default\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vY29tbW9uL2pzL2Jhc2UxLmpzIl0sIm5hbWVzIjpbIl9mb3JtYXREYXRlIiwiaW5wdXRUaW1lIiwiZGF0ZSIsIkRhdGUiLCJwYXJzZUludCIsInkiLCJnZXRGdWxsWWVhciIsIm0iLCJnZXRNb250aCIsImQiLCJnZXREYXRlIiwiaCIsImdldEhvdXJzIiwibWludXRlIiwiZ2V0TWludXRlcyIsInNlY29uZCIsImdldFNlY29uZHMiLCJfdG9GaXhlZCIsInN0cjEiLCJudW0iLCJzdHIiLCJTdHJpbmciLCJoYW5aZW8iLCJ6IiwiemVvIiwiaSIsImFyciIsInNwbGl0IiwibGVuZ3RoIiwic2xpY2UiLCJfaXNMb2dpbiIsInN0YXR1cyIsInVuaSIsInNob3dNb2RhbCIsImNvbnRlbnQiLCJzaG93Q2FuY2VsIiwiY29uZmlybVRleHQiLCJzdWNjZXNzIiwicmVzIiwiY29uZmlybSIsIm5hdmlnYXRlVG8iLCJ1cmwiLCJfaW5kZXhPZiIsInJlZyIsIlJlZ0V4cCIsInRlc3QiLCJfc2hvd1plcm8iLCJudW1iZXIiLCJ1bmRlZmluZWQiXSwibWFwcGluZ3MiOiJpSkFBZTtBQUNkOzs7O0FBSUFBLGFBTGMsdUJBS0ZDLFNBTEUsRUFLUztBQUN0QixRQUFJQyxJQUFJLEdBQUcsSUFBSUMsSUFBSixDQUFTQyxRQUFRLENBQUNILFNBQVMsR0FBRyxJQUFiLENBQWpCLENBQVg7QUFDQSxRQUFJSSxDQUFDLEdBQUdILElBQUksQ0FBQ0ksV0FBTCxFQUFSO0FBQ0EsUUFBSUMsQ0FBQyxHQUFHTCxJQUFJLENBQUNNLFFBQUwsS0FBa0IsQ0FBMUI7QUFDQUQsS0FBQyxHQUFHQSxDQUFDLEdBQUcsRUFBSixHQUFVLE1BQU1BLENBQWhCLEdBQXFCQSxDQUF6QjtBQUNBLFFBQUlFLENBQUMsR0FBR1AsSUFBSSxDQUFDUSxPQUFMLEVBQVI7QUFDQUQsS0FBQyxHQUFHQSxDQUFDLEdBQUcsRUFBSixHQUFVLE1BQU1BLENBQWhCLEdBQXFCQSxDQUF6QjtBQUNBLFFB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QU0sSUFBRSxDQUFwQyxJQUF1Q0EsTUFBTSxJQUFFLElBQS9DLElBQXFEQSxNQUFNLElBQUVDLFNBQTdELElBQXdFRCxNQUFNLElBQUUsV0FBbkYsRUFBK0Y7QUFDOUYsYUFBTyxHQUFQO0FBQ0EsS0FGRCxNQUVLO0FBQ0osYUFBT0EsTUFBUDtBQUNBO0FBQ0QsR0E3RVksRSIsImZpbGUiOiIxNy5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IHtcclxuXHQvKipcclxuXHQgKiDml7bpl7TmiLPmoLzlvI/ljJZcclxuXHQgKiBAcGFyYW0ge1N0cmluZ30g5YaF5a65XHJcblx0ICovXHJcblx0X2Zvcm1hdERhdGUoaW5wdXRUaW1lKSB7XHJcblx0XHR2YXIgZGF0ZSA9IG5ldyBEYXRlKHBhcnNlSW50KGlucHV0VGltZSAqIDEwMDApKTtcclxuXHRcdHZhciB5ID0gZGF0ZS5nZXRGdWxsWWVhcigpO1xyXG5cdFx0dmFyIG0gPSBkYXRlLmdldE1vbnRoKCkgKyAxO1xyXG5cdFx0bSA9IG0gPCAxMCA/ICgnMCcgKyBtKSA6IG07XHJcblx0XHR2YXIgZCA9IGRhdGUuZ2V0RGF0ZSgpO1xyXG5cdFx0ZCA9IGQgPCAxMCA/ICgnMCcgKyBkKSA6IGQ7XHJcblx0XHR2YXIgaCA9IGRhdGUuZ2V0SG91cnMoKTtcclxuXHRcdGggPSBoIDwgMTAgPyAoJzAnICsgaCkgOiBoO1xyXG5cdFx0dmFyIG1pbnV0ZSA9IGRhdGUuZ2V0TWludXRlcygpO1xyXG5cdFx0dmFyIHNlY29uZCA9IGRhdGUuZ2V0U2Vjb25kcygpO1xyXG5cdFx0bWludXRlID0gbWludXRlIDwgMTAgPyAoJzAnICsgbWludXRlKSA6IG1pbnV0ZTtcclxuXHRcdHNlY29uZCA9IHNlY29uZCA8IDEwID8gKCcwJyArIHNlY29uZCkgOiBzZWNvbmQ7XHJcblx0XHRyZXR1cm4geSArICctJyArIG0gKyAnLScgKyBkICsgJyAnICsgaCArICc6JyArIG1pbnV0ZSArICc6JyArIHNlY29uZDtcclxuXHR9LFxyXG5cdC8qKlxyXG5cdCAqIOWwj+aVsOaIquWPllxyXG5cdCAqL1xyXG5cdF90b0ZpeGVkKHN0cjEsIG51bSkge1xyXG5cdFx0dmFyIHN0ciA9IFN0cmluZyhzdHIxKTtcclxuXHJcblx0XHRmdW5jdGlvbiBoYW5aZW8oeikge1xyXG5cdFx0XHR2YXIgemVvID0gJyc7XHJcblx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgejsgaSsrKSB7XHJcblx0XHRcdFx0emVvICs9ICcwJztcclxuXHRcdFx0fVxyXG5cdFx0XHRyZXR1cm4gemVvO1xyXG5cdFx0fVxyXG5cdFx0dmFyIGFyciA9IHN0ci5zcGxpdCgnLicpO1xyXG5cdFx0aWYgKGFyclsxXSkge1xyXG5cdFx0XHRpZiAoYXJyWzFdLmxlbmd0aCA+PSBudW0pIHtcclxuXHRcdFx0XHRyZXR1cm4gYXJyWzBdICsgJy4nICsgYXJyWzFdLnNsaWNlKDAsIG51bSk7XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0cmV0dXJuIGFyclswXSArICcuJyArIGFyclsxXSArIGhhblplbyhudW0gLSBhcnJbMV0ubGVuZ3RoKTtcclxuXHRcdFx0fVxyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0cmV0dXJuIHN0ciArICcuJyArIGhhblplbyhudW0pO1xyXG5cdFx0fVxyXG5cdH0sXHJcblx0XHQvKipcclxuXHRcdCAqIOajgOafpeeZu+W9leeKtuaAgVxyXG5cdFx0ICogQHBhcmFtIHtTdHJpbmd9IOWGheWuuVxyXG5cdFx0ICovXHJcblx0XHRfaXNMb2dpbihzdGF0dXMpe1xyXG5cdFx0XHRpZighc3RhdHVzKXtcclxuXHRcdFx0XHR1bmkuc2hvd01vZGFsKHtcclxuXHRcdFx0XHRcdGNvbnRlbnQ6IFwi5oKo6L+Y5pyq55m75b2V77yM6K+35YWI55m75b2VXCIsXHJcblx0XHRcdFx0XHRzaG93Q2FuY2VsOiBmYWxzZSxcclxuXHRcdFx0XHRcdGNvbmZpcm1UZXh0OiBcIuehruWumlwiLFxyXG5cdFx0XHRcdFx0c3VjY2VzczogZnVuY3Rpb24gKHJlcykge1xyXG5cdFx0XHRcdFx0XHRpZiAocmVzLmNvbmZpcm0pIHtcclxuXHRcdFx0XHRcdFx0XHR1bmkubmF2aWdhdGVUbyh7XHJcblx0XHRcdFx0XHRcdFx0XHR1cmw6XCIvcGFnZXMvcGFnZXNCL2xvZ2luL2xvZ2luXCJcclxuXHRcdFx0XHRcdFx0XHR9KVxyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fSk7XHJcblx0XHRcdFx0cmV0dXJuO1xyXG5cdFx0XHR9O1xyXG5cdFx0fSxcclxuXHRcdC8vIOWIpOaWrei/lOWbnuWAvOS7pTLlvIDlpLTkuLrmnKrnmbvlvZXot7PovazliLDnmbvlvZXkv6Hmga9cclxuXHRcdF9pbmRleE9mKHN0YXR1cyl7XHJcblx0XHRcdHZhciByZWcgPSBuZXcgUmVnRXhwKC9eMlxcZC8pXHJcblx0XHRcdHJldHVybiByZWcudGVzdChzdGF0dXMpXHJcblx0XHR9LFxyXG5cdFx0Ly/ov5Tlm57lgLzkuLrnqbrvvIzkuI3lrZjlnKjvvIxudWxs77yMdW5kZWZpbmXml7bmmL7npLrkuLowXHJcblx0XHRfc2hvd1plcm8obnVtYmVyKXtcclxuXHRcdFx0aWYobnVtYmVyPT1cIm51bGxcInx8bnVtYmVyPT1cIlwifHxudW1iZXI9PTB8fG51bWJlcj09bnVsbHx8bnVtYmVyPT11bmRlZmluZWR8fG51bWJlcj09XCJ1bmRlZmluZWRcIil7XHJcblx0XHRcdFx0cmV0dXJuIFwiMFwiXHJcblx0XHRcdH1lbHNle1xyXG5cdFx0XHRcdHJldHVybiBudW1iZXJcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG59O1xyXG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///17\n");

/***/ }),

/***/ 2:
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsNENBQTRDOztBQUU1QyIsImZpbGUiOiIyLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGc7XG5cbi8vIFRoaXMgd29ya3MgaW4gbm9uLXN0cmljdCBtb2RlXG5nID0gKGZ1bmN0aW9uKCkge1xuXHRyZXR1cm4gdGhpcztcbn0pKCk7XG5cbnRyeSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgZXZhbCBpcyBhbGxvd2VkIChzZWUgQ1NQKVxuXHRnID0gZyB8fCBuZXcgRnVuY3Rpb24oXCJyZXR1cm4gdGhpc1wiKSgpO1xufSBjYXRjaCAoZSkge1xuXHQvLyBUaGlzIHdvcmtzIGlmIHRoZSB3aW5kb3cgcmVmZXJlbmNlIGlzIGF2YWlsYWJsZVxuXHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gXCJvYmplY3RcIikgZyA9IHdpbmRvdztcbn1cblxuLy8gZyBjYW4gc3RpbGwgYmUgdW5kZWZpbmVkLCBidXQgbm90aGluZyB0byBkbyBhYm91dCBpdC4uLlxuLy8gV2UgcmV0dXJuIHVuZGVmaW5lZCwgaW5zdGVhZCBvZiBub3RoaW5nIGhlcmUsIHNvIGl0J3Ncbi8vIGVhc2llciB0byBoYW5kbGUgdGhpcyBjYXNlLiBpZighZ2xvYmFsKSB7IC4uLn1cblxubW9kdWxlLmV4cG9ydHMgPSBnO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///2\n");

/***/ }),

/***/ 24:
/*!**********************************************************!*\
  !*** C:/Users/Admin/Desktop/evc.app/common/js/wallet.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(uni, __f__) {var _vue = _interopRequireDefault(__webpack_require__(/*! vue */ 3));\nvar _base = _interopRequireDefault(__webpack_require__(/*! ./base.js */ 16));\nvar _DES = _interopRequireDefault(__webpack_require__(/*! ./DES3.js */ 25));\nvar _eth = _interopRequireDefault(__webpack_require__(/*! ./eth.js */ 26));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}\nvar wallet = {\n  ecodeDes3JSON: function ecodeDes3JSON(data) {// des3加密json\n    var list = {};\n    for (var key in data) {\n      var val = null;\n      if (typeof data[key] == 'object' || typeof data[key] == 'number') {\n        val = JSON.stringify(data[key]);\n      } else {\n        val = data[key];\n      }\n      list[_DES.default.encrypt(_base.default._des3pwd, key)] = _DES.default.encrypt(_base.default._des3pwd, val);\n    }\n    return list;\n  },\n  decodeDes3JSON: function decodeDes3JSON(data) {// des3解密json\n    var list = {};\n    for (var key in data) {\n      var val = null;\n      if (typeof data[key] == 'object' || typeof data[key] == 'number') {\n        val = JSON.stringify(data[key]);\n      } else {\n        val = data[key];\n      }\n      list[_DES.default.decrypt(_base.default._des3pwd, key)] = _DES.default.decrypt(_base.default._des3pwd, val);\n    }\n    return list;\n  },\n  create: function create(pin, callback) {//创建钱包\n    var data = _eth.default.create();\n    if (data.status == 1) {\n      this.walletSuccess(pin, data);\n      callback();\n    } else {\n      _base.default._toast('钱包创建失败，请稍后再试');\n    }\n  },\n  getCurrentWallet: function getCurrentWallet() {//获取当前正在使用钱包解密后的信息\n    var walletList = this.getWalletList();\n    return walletList.filter(function (item) {\n      return item.isDefault == 1;\n    })[0];\n  },\n  getWalletList: function getWalletList() {//获取解密后所有钱包信息\n    var temp = uni.getStorageSync(_base.default._cacheWallet);\n    var walletList = [];\n    for (var index in temp) {\n      walletList.push(this.decodeDes3JSON(temp[index]));\n    }\n    return walletList;\n  },\n  importByPrivateKey: function importByPrivateKey(privateKey, pin, callback) {//通过私钥导入钱包\n    var wallet = _eth.default.importByPrivateKey(privateKey);\n    var currentWallet = this.getCurrentWallet() || [];\n    console.log(__f__(JSON.stringify(currentWallet), \" at common\\\\js\\\\wallet.js:58\"));\n    if (wallet.status == 2) {\n      _base.default._toast('私钥输入错误，请检查');\n    } else if (currentWallet.address === wallet.address) {\n      _base.default._toast('钱包已经存在，不需再次导入');\n    } else if (wallet.status == 1) {\n      this.walletSuccess(pin, wallet);\n      callback();\n    }\n  },\n  importByMnemonic: function importByMnemonic(mnemonic, pin, callback) {//通过助记词导入钱包\n    var wallet = _eth.default.importByMnemonic(mnemonic.replace(/,/g, \" \"));\n    var currentWallet = this.getCurrentWallet() || [];\n    console.log(__f__(JSON.stringify(wallet), \" at common\\\\js\\\\wallet.js:71\"));\n    if (wallet.status == 3) {\n      _base.default._toast('助记词输入错误，请检查');\n    } else if (currentWallet.address === wallet.address) {\n      _base.default._toast('钱包已经存在，不需再次导入');\n    } else if (wallet.status == 1) {\n      this.walletSuccess(pin, wallet);\n      callback();\n    }\n  },\n  walletSuccess: function walletSuccess(pin, data) {\n    var walletArray = this.getWalletList(),ecodeWalletList = [];\n    walletArray.forEach(function (item) {\n      item.isDefault = 0;\n    });\n    for (var i in walletArray) {\n      ecodeWalletList.push(this.ecodeDes3JSON(walletArray[i]));\n    }\n    var temp = this.ecodeDes3JSON({\n      privateKey: data.privateKey,\n      mnemonic: data.mnemonic,\n      address: data.address,\n      pin: pin,\n      isDefault: 1 //1：当前正在使用的钱包\n    });\n    ecodeWalletList.push(temp);\n    uni.setStorageSync(_base.default._cacheWallet, ecodeWalletList); //缓存多个钱包\n  },\n  getBalance: function getBalance(address, ctaddress, length, callback) {//获取余额\n    if (ctaddress.length > 10) {//获取合约币余额\n      _eth.default.getBalance({\n        address: address,\n        contactAddress: ctaddress,\n        length: length,\n        success: function success(balance) {\n          console.log(__f__(ctaddress, \" at common\\\\js\\\\wallet.js:106\"));\n          console.log(__f__(JSON.stringify(balance), \" at common\\\\js\\\\wallet.js:107\"));\n          callback(balance);\n        },\n        error: function error(err) {\n          console.log(__f__(err, \" at common\\\\js\\\\wallet.js:111\"));\n        } });\n\n    } else {//获取ETH余额\n      _eth.default.getBalance({\n        address: address,\n        contactAddress: '',\n        contactAbi: [],\n        length: 18,\n        success: function success(balance) {\n          console.log(__f__(JSON.stringify(balance), \" at common\\\\js\\\\wallet.js:121\"));\n          callback(balance);\n        } });\n\n    }\n  },\n  trasfer: function trasfer(data, suc, err) {//转账\n    _eth.default.transfer({\n      privateKey: data.privateKey,\n      to: data.toaddress,\n      money: data.money,\n      gas: data.gasNum,\n      gasPrice: data.gasPrice,\n      contactAddress: data.contractAddress,\n      length: data.contractLength,\n      success: function success(hash) {\n        console.log(__f__(hash, \" at common\\\\js\\\\wallet.js:137\"));\n        if (hash) {\n          suc();\n        }\n        uni.hideLoading();\n      },\n      error: function error(status, msg) {\n        console.log(__f__(msg, \" at common\\\\js\\\\wallet.js:144\"));\n        uni.hideLoading();\n        _base.default._toast(msg);\n        err();\n      } });\n\n  },\n  formatValue: function formatValue(value, length) {//格式化金额\n    return _eth.default.formatValue(value, length);\n  },\n  getCNY: function getCNY(name) {// 获取币种人民币价格\n    if (!name) return 0;\n    var cnyPrice = this.getUsdtPrice();\n    if (name.toUpperCase() == \"USDT\") {\n      return cnyPrice;\n    }\n    var namePrice = this.getUsdt(name);\n    if (cnyPrice == 0 || namePrice == 0) {\n      return 0;\n    }\n    var price = cnyPrice * namePrice;\n    return _base.default._toFixed(price, 2);\n  },\n  getUsdtPrice: function getUsdtPrice() {\n    var list = uni.getStorageSync(_base.default._cacheCoin) || [];\n    if (list.length > 0) {\n      var coin = list.filter(function (a) {\n        return a.Name.toUpperCase() == \"USDT\";\n      });\n      if (coin.length > 0) {\n        return coin[0].Price;\n      }\n    }\n    return 6.91;\n  },\n  getUsdt: function getUsdt(name) {\n    if (name == \"USDT\") return 1;\n    var list = uni.getStorageSync(_base.default._cacheCoin) || [];\n    if (list.length > 0) {\n      var coin = list.filter(function (a) {\n        return a.Name == name;\n      });\n      if (coin.length > 0) {\n        return coin[0].Price;\n      }\n    }\n    return 0;\n  } };\n\n_vue.default.prototype.$Wallet = wallet;\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/uni-app-plus/dist/index.js */ 1)[\"default\"], __webpack_require__(/*! ./node_modules/@dcloudio/vue-cli-plugin-uni/lib/format-log.js */ 12)[\"default\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///24\n");

/***/ }),

/***/ 25:
/*!********************************************************!*\
  !*** C:/Users/Admin/Desktop/evc.app/common/js/DES3.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = void 0; /** \r\n                                                                                                      * DES 加密算法 \r\n                                                                                                      * \r\n                                                                                                      * 该函数接受一个 8 字节字符串作为普通 DES 算法的密钥（也就是 64 位，但是算法只使用 56 位），或者接受一个 24 字节字符串作为 3DES \r\n                                                                                                      * 算法的密钥；第二个参数是要加密或解密的信息字符串；第三个布尔值参数用来说明信息是加密还是解密；接下来的可选参数 mode 如果是 0 表示 ECB \r\n                                                                                                      * 模式，1 表示 CBC 模式，默认是 ECB 模式；最后一个可选项是一个 8 字节的输入向量字符串（在 ECB 模式下不使用）。返回的密文是字符串。 \r\n                                                                                                      * \r\n                                                                                                      * 参数： <br> \r\n                                                                                                      * key: 8字节字符串作为普通 DES 算法的密钥,或 24 字节字符串作为 3DES <br> \r\n                                                                                                      * message： 加密或解密的信息字符串<br> \r\n                                                                                                      * encrypt: 布尔值参数用来说明信息是加密还是解密<br> \r\n                                                                                                      * mode: 1:CBC模式，0:ECB模式(默认)<br> \r\n                                                                                                      * iv:<br> \r\n                                                                                                      * padding: 可选项, 8字节的输入向量字符串（在 ECB 模式下不使用） \r\n                                                                                                      */\n//this takes the key, the message, and whether to encrypt or decrypt\nfunction des(key, message, encrypt, mode, iv, padding) {\n  if (encrypt) //如果是加密的话，首先转换编码\n    message = unescape(encodeURIComponent(message));\n  //declaring this locally speeds things up a bit\n  var spfunction1 = new Array(0x1010400, 0, 0x10000, 0x1010404, 0x1010004, 0x10404, 0x4, 0x10000, 0x400, 0x1010400, 0x1010404, 0x400, 0x1000404, 0x1010004, 0x1000000, 0x4, 0x404, 0x1000400, 0x1000400, 0x10400, 0x10400, 0x1010000, 0x1010000, 0x1000404, 0x10004, 0x1000004, 0x1000004, 0x10004, 0, 0x404, 0x10404, 0x1000000, 0x10000, 0x1010404, 0x4, 0x1010000, 0x1010400, 0x1000000, 0x1000000, 0x400, 0x1010004, 0x10000, 0x10400, 0x1000004, 0x400, 0x4, 0x1000404, 0x10404, 0x1010404, 0x10004, 0x1010000, 0x1000404, 0x1000004, 0x404, 0x10404, 0x1010400, 0x404, 0x1000400, 0x1000400, 0, 0x10004, 0x10400, 0, 0x1010004);\n  var spfunction2 = new Array(-0x7fef7fe0, -0x7fff8000, 0x8000, 0x108020, 0x100000, 0x20, -0x7fefffe0, -0x7fff7fe0, -0x7fffffe0, -0x7fef7fe0, -0x7fef8000, -0x80000000, -0x7fff8000, 0x100000, 0x20, -0x7fefffe0, 0x108000, 0x100020, -0x7fff7fe0, 0, -0x80000000, 0x8000, 0x108020, -0x7ff00000, 0x100020, -0x7fffffe0, 0, 0x108000, 0x8020, -0x7fef8000, -0x7ff00000, 0x8020, 0, 0x108020, -0x7fefffe0, 0x100000, -0x7fff7fe0, -0x7ff00000, -0x7fef8000, 0x8000, -0x7ff00000, -0x7fff8000, 0x20, -0x7fef7fe0, 0x108020, 0x20, 0x8000, -0x80000000, 0x8020, -0x7fef8000, 0x100000, -0x7fffffe0, 0x100020, -0x7fff7fe0, -0x7fffffe0, 0x100020, 0x108000, 0, -0x7fff8000, 0x8020, -0x80000000, -0x7fefffe0, -0x7fef7fe0, 0x108000);\n  var spfunction3 = new Array(0x208, 0x8020200, 0, 0x8020008, 0x8000200, 0, 0x20208, 0x8000200, 0x20008, 0x8000008, 0x8000008, 0x20000, 0x8020208, 0x20008, 0x8020000, 0x208, 0x8000000, 0x8, 0x8020200, 0x200, 0x20200, 0x8020000, 0x8020008, 0x20208, 0x8000208, 0x20200, 0x20000, 0x8000208, 0x8, 0x8020208, 0x200, 0x8000000, 0x8020200, 0x8000000, 0x20008, 0x208, 0x20000, 0x8020200, 0x8000200, 0, 0x200, 0x20008, 0x8020208, 0x8000200, 0x8000008, 0x200, 0, 0x8020008, 0x8000208, 0x20000, 0x8000000, 0x8020208, 0x8, 0x20208, 0x20200, 0x8000008, 0x8020000, 0x8000208, 0x208, 0x8020000, 0x20208, 0x8, 0x8020008, 0x20200);\n  var spfunction4 = new Array(0x802001, 0x2081, 0x2081, 0x80, 0x802080, 0x800081, 0x800001, 0x2001, 0, 0x802000, 0x802000, 0x802081, 0x81, 0, 0x800080, 0x800001, 0x1, 0x2000, 0x800000, 0x802001, 0x80, 0x800000, 0x2001, 0x2080, 0x800081, 0x1, 0x2080, 0x800080, 0x2000, 0x802080, 0x802081, 0x81, 0x800080, 0x800001, 0x802000, 0x802081, 0x81, 0, 0, 0x802000, 0x2080, 0x800080, 0x800081, 0x1, 0x802001, 0x2081, 0x2081, 0x80, 0x802081, 0x81, 0x1, 0x2000, 0x800001, 0x2001, 0x802080, 0x800081, 0x2001, 0x2080, 0x800000, 0x802001, 0x80, 0x800000, 0x2000, 0x802080);\n  var spfunction5 = new Array(0x100, 0x2080100, 0x2080000, 0x42000100, 0x80000, 0x100, 0x40000000, 0x2080000, 0x40080100, 0x80000, 0x2000100, 0x40080100, 0x42000100, 0x42080000, 0x80100, 0x40000000, 0x2000000, 0x40080000, 0x40080000, 0, 0x40000100, 0x42080100, 0x42080100, 0x2000100, 0x42080000, 0x40000100, 0, 0x42000000, 0x2080100, 0x2000000, 0x42000000, 0x80100, 0x80000, 0x42000100, 0x100, 0x2000000, 0x40000000, 0x2080000, 0x42000100, 0x40080100, 0x2000100, 0x40000000, 0x42080000, 0x2080100, 0x40080100, 0x100, 0x2000000, 0x42080000, 0x42080100, 0x80100, 0x42000000, 0x42080100, 0x2080000, 0, 0x40080000, 0x42000000, 0x80100, 0x2000100, 0x40000100, 0x80000, 0, 0x40080000, 0x2080100, 0x40000100);\n  var spfunction6 = new Array(0x20000010, 0x20400000, 0x4000, 0x20404010, 0x20400000, 0x10, 0x20404010, 0x400000, 0x20004000, 0x404010, 0x400000, 0x20000010, 0x400010, 0x20004000, 0x20000000, 0x4010, 0, 0x400010, 0x20004010, 0x4000, 0x404000, 0x20004010, 0x10, 0x20400010, 0x20400010, 0, 0x404010, 0x20404000, 0x4010, 0x404000, 0x20404000, 0x20000000, 0x20004000, 0x10, 0x20400010, 0x404000, 0x20404010, 0x400000, 0x4010, 0x20000010, 0x400000, 0x20004000, 0x20000000, 0x4010, 0x20000010, 0x20404010, 0x404000, 0x20400000, 0x404010, 0x20404000, 0, 0x20400010, 0x10, 0x4000, 0x20400000, 0x404010, 0x4000, 0x400010, 0x20004010, 0, 0x20404000, 0x20000000, 0x400010, 0x20004010);\n  var spfunction7 = new Array(0x200000, 0x4200002, 0x4000802, 0, 0x800, 0x4000802, 0x200802, 0x4200800, 0x4200802, 0x200000, 0, 0x4000002, 0x2, 0x4000000, 0x4200002, 0x802, 0x4000800, 0x200802, 0x200002, 0x4000800, 0x4000002, 0x4200000, 0x4200800, 0x200002, 0x4200000, 0x800, 0x802, 0x4200802, 0x200800, 0x2, 0x4000000, 0x200800, 0x4000000, 0x200800, 0x200000, 0x4000802, 0x4000802, 0x4200002, 0x4200002, 0x2, 0x200002, 0x4000000, 0x4000800, 0x200000, 0x4200800, 0x802, 0x200802, 0x4200800, 0x802, 0x4000002, 0x4200802, 0x4200000, 0x200800, 0, 0x2, 0x4200802, 0, 0x200802, 0x4200000, 0x800, 0x4000002, 0x4000800, 0x800, 0x200002);\n  var spfunction8 = new Array(0x10001040, 0x1000, 0x40000, 0x10041040, 0x10000000, 0x10001040, 0x40, 0x10000000, 0x40040, 0x10040000, 0x10041040, 0x41000, 0x10041000, 0x41040, 0x1000, 0x40, 0x10040000, 0x10000040, 0x10001000, 0x1040, 0x41000, 0x40040, 0x10040040, 0x10041000, 0x1040, 0, 0, 0x10040040, 0x10000040, 0x10001000, 0x41040, 0x40000, 0x41040, 0x40000, 0x10041000, 0x1000, 0x40, 0x10040040, 0x1000, 0x41040, 0x10001000, 0x40, 0x10000040, 0x10040000, 0x10040040, 0x10000000, 0x40000, 0x10001040, 0, 0x10041040, 0x40040, 0x10000040, 0x10040000, 0x10001000, 0x10001040, 0, 0x10041040, 0x41000, 0x41000, 0x1040, 0x1040, 0x40040, 0x10000000, 0x10041000);\n  //create the 16 or 48 subkeys we will need\n  var keys = des_createKeys(key);\n  var m = 0,i,j,temp,temp2,right1,right2,left,right,looping;\n  var cbcleft, cbcleft2, cbcright, cbcright2;\n  var endloop, loopinc;\n  var len = message.length;\n  var chunk = 0;\n  //set up the loops for single and triple des\n  var iterations = keys.length == 32 ? 3 : 9; //single or triple des\n  if (iterations == 3) {looping = encrypt ? new Array(0, 32, 2) : new Array(30, -2, -2);} else\n  {looping = encrypt ? new Array(0, 32, 2, 62, 30, -2, 64, 96, 2) : new Array(94, 62, -2, 32, 64, 2, 30, -2, -2);}\n  //pad the message depending on the padding parameter\n  if (padding == 2) message += \"    \"; //pad the message with spaces\n  else if (padding == 1) {\n      if (encrypt) {\n        temp = 8 - len % 8;\n        message += String.fromCharCode(temp, temp, temp, temp, temp, temp, temp, temp);\n        if (temp === 8) len += 8;\n      }\n    } //PKCS7 padding\n    else if (!padding) message += \"\\0\\0\\0\\0\\0\\0\\0\\0\"; //pad the message out with null bytes\n  //store the result here\n  var result = \"\";\n  var tempresult = \"\";\n  if (mode == 1) {//CBC mode\n    cbcleft = iv.charCodeAt(m++) << 24 | iv.charCodeAt(m++) << 16 | iv.charCodeAt(m++) << 8 | iv.charCodeAt(m++);\n    cbcright = iv.charCodeAt(m++) << 24 | iv.charCodeAt(m++) << 16 | iv.charCodeAt(m++) << 8 | iv.charCodeAt(m++);\n    m = 0;\n  }\n  //loop through each 64 bit chunk of the message\n  while (m < len) {\n    left = message.charCodeAt(m++) << 24 | message.charCodeAt(m++) << 16 | message.charCodeAt(m++) << 8 | message.charCodeAt(m++);\n    right = message.charCodeAt(m++) << 24 | message.charCodeAt(m++) << 16 | message.charCodeAt(m++) << 8 | message.charCodeAt(m++);\n    //for Cipher Block Chaining mode, xor the message with the previous result\n    if (mode == 1) {if (encrypt) {left ^= cbcleft;right ^= cbcright;} else {cbcleft2 = cbcleft;cbcright2 = cbcright;cbcleft = left;cbcright = right;}}\n    //first each 64 but chunk of the message must be permuted according to IP\n    temp = (left >>> 4 ^ right) & 0x0f0f0f0f;right ^= temp;left ^= temp << 4;\n    temp = (left >>> 16 ^ right) & 0x0000ffff;right ^= temp;left ^= temp << 16;\n    temp = (right >>> 2 ^ left) & 0x33333333;left ^= temp;right ^= temp << 2;\n    temp = (right >>> 8 ^ left) & 0x00ff00ff;left ^= temp;right ^= temp << 8;\n    temp = (left >>> 1 ^ right) & 0x55555555;right ^= temp;left ^= temp << 1;\n    left = left << 1 | left >>> 31;\n    right = right << 1 | right >>> 31;\n    //do this either 1 or 3 times for each chunk of the message\n    for (j = 0; j < iterations; j += 3) {\n      endloop = looping[j + 1];\n      loopinc = looping[j + 2];\n      //now go through and perform the encryption or decryption\n      for (i = looping[j]; i != endloop; i += loopinc) {//for efficiency\n        right1 = right ^ keys[i];\n        right2 = (right >>> 4 | right << 28) ^ keys[i + 1];\n        //the result is attained by passing these bytes through the S selection functions\n        temp = left;\n        left = right;\n        right = temp ^ (spfunction2[right1 >>> 24 & 0x3f] | spfunction4[right1 >>> 16 & 0x3f] |\n        spfunction6[right1 >>> 8 & 0x3f] | spfunction8[right1 & 0x3f] |\n        spfunction1[right2 >>> 24 & 0x3f] | spfunction3[right2 >>> 16 & 0x3f] |\n        spfunction5[right2 >>> 8 & 0x3f] | spfunction7[right2 & 0x3f]);\n      }\n      temp = left;left = right;right = temp; //unreverse left and right\n    } //for either 1 or 3 iterations\n    //move then each one bit to the right\n    left = left >>> 1 | left << 31;\n    right = right >>> 1 | right << 31;\n    //now perform IP-1, which is IP in the opposite direction\n    temp = (left >>> 1 ^ right) & 0x55555555;right ^= temp;left ^= temp << 1;\n    temp = (right >>> 8 ^ left) & 0x00ff00ff;left ^= temp;right ^= temp << 8;\n    temp = (right >>> 2 ^ left) & 0x33333333;left ^= temp;right ^= temp << 2;\n    temp = (left >>> 16 ^ right) & 0x0000ffff;right ^= temp;left ^= temp << 16;\n    temp = (left >>> 4 ^ right) & 0x0f0f0f0f;right ^= temp;left ^= temp << 4;\n    //for Cipher Block Chaining mode, xor the message with the previous result\n    if (mode == 1) {if (encrypt) {cbcleft = left;cbcright = right;} else {left ^= cbcleft2;right ^= cbcright2;}}\n    tempresult += String.fromCharCode(left >>> 24, left >>> 16 & 0xff, left >>> 8 & 0xff, left & 0xff, right >>> 24, right >>> 16 & 0xff, right >>> 8 & 0xff, right & 0xff);\n    chunk += 8;\n    if (chunk == 512) {result += tempresult;tempresult = \"\";chunk = 0;}\n  } //for every 8 characters, or 64 bits in the message\n  //return the result as an array\n  result += tempresult;\n  result = result.replace(/\\0*$/g, \"\");\n  if (!encrypt) {//如果是解密的话，解密结束后对PKCS7 padding进行解码，并转换成utf-8编码\n    if (padding === 1) {//PKCS7 padding解码\n      var len = result.length,paddingChars = 0;\n      len && (paddingChars = result.charCodeAt(len - 1));\n      paddingChars <= 8 && (result = result.substring(0, len - paddingChars));\n    }\n    //转换成UTF-8编码\n    result = decodeURIComponent(escape(result));\n  }\n  return result;\n} //end of des\n//des_createKeys\n//this takes as input a 64 bit key (even though only 56 bits are used)\n//as an array of 2 integers, and returns 16 48 bit keys\nfunction des_createKeys(key) {\n  //declaring this locally speeds things up a bit\n  var pc2bytes0 = new Array(0, 0x4, 0x20000000, 0x20000004, 0x10000, 0x10004, 0x20010000, 0x20010004, 0x200, 0x204, 0x20000200, 0x20000204, 0x10200, 0x10204, 0x20010200, 0x20010204);\n  var pc2bytes1 = new Array(0, 0x1, 0x100000, 0x100001, 0x4000000, 0x4000001, 0x4100000, 0x4100001, 0x100, 0x101, 0x100100, 0x100101, 0x4000100, 0x4000101, 0x4100100, 0x4100101);\n  var pc2bytes2 = new Array(0, 0x8, 0x800, 0x808, 0x1000000, 0x1000008, 0x1000800, 0x1000808, 0, 0x8, 0x800, 0x808, 0x1000000, 0x1000008, 0x1000800, 0x1000808);\n  var pc2bytes3 = new Array(0, 0x200000, 0x8000000, 0x8200000, 0x2000, 0x202000, 0x8002000, 0x8202000, 0x20000, 0x220000, 0x8020000, 0x8220000, 0x22000, 0x222000, 0x8022000, 0x8222000);\n  var pc2bytes4 = new Array(0, 0x40000, 0x10, 0x40010, 0, 0x40000, 0x10, 0x40010, 0x1000, 0x41000, 0x1010, 0x41010, 0x1000, 0x41000, 0x1010, 0x41010);\n  var pc2bytes5 = new Array(0, 0x400, 0x20, 0x420, 0, 0x400, 0x20, 0x420, 0x2000000, 0x2000400, 0x2000020, 0x2000420, 0x2000000, 0x2000400, 0x2000020, 0x2000420);\n  var pc2bytes6 = new Array(0, 0x10000000, 0x80000, 0x10080000, 0x2, 0x10000002, 0x80002, 0x10080002, 0, 0x10000000, 0x80000, 0x10080000, 0x2, 0x10000002, 0x80002, 0x10080002);\n  var pc2bytes7 = new Array(0, 0x10000, 0x800, 0x10800, 0x20000000, 0x20010000, 0x20000800, 0x20010800, 0x20000, 0x30000, 0x20800, 0x30800, 0x20020000, 0x20030000, 0x20020800, 0x20030800);\n  var pc2bytes8 = new Array(0, 0x40000, 0, 0x40000, 0x2, 0x40002, 0x2, 0x40002, 0x2000000, 0x2040000, 0x2000000, 0x2040000, 0x2000002, 0x2040002, 0x2000002, 0x2040002);\n  var pc2bytes9 = new Array(0, 0x10000000, 0x8, 0x10000008, 0, 0x10000000, 0x8, 0x10000008, 0x400, 0x10000400, 0x408, 0x10000408, 0x400, 0x10000400, 0x408, 0x10000408);\n  var pc2bytes10 = new Array(0, 0x20, 0, 0x20, 0x100000, 0x100020, 0x100000, 0x100020, 0x2000, 0x2020, 0x2000, 0x2020, 0x102000, 0x102020, 0x102000, 0x102020);\n  var pc2bytes11 = new Array(0, 0x1000000, 0x200, 0x1000200, 0x200000, 0x1200000, 0x200200, 0x1200200, 0x4000000, 0x5000000, 0x4000200, 0x5000200, 0x4200000, 0x5200000, 0x4200200, 0x5200200);\n  var pc2bytes12 = new Array(0, 0x1000, 0x8000000, 0x8001000, 0x80000, 0x81000, 0x8080000, 0x8081000, 0x10, 0x1010, 0x8000010, 0x8001010, 0x80010, 0x81010, 0x8080010, 0x8081010);\n  var pc2bytes13 = new Array(0, 0x4, 0x100, 0x104, 0, 0x4, 0x100, 0x104, 0x1, 0x5, 0x101, 0x105, 0x1, 0x5, 0x101, 0x105);\n  //how many iterations (1 for des, 3 for triple des)\n  var iterations = key.length > 8 ? 3 : 1; //changed by Paul 16/6/2007 to use Triple DES for 9+ byte keys\n  //stores the return keys\n  var keys = new Array(32 * iterations);\n  //now define the left shifts which need to be done\n  var shifts = new Array(0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0);\n  //other variables\n  var lefttemp,righttemp,m = 0,n = 0,temp;\n  for (var j = 0; j < iterations; j++) {//either 1 or 3 iterations\n    var left = key.charCodeAt(m++) << 24 | key.charCodeAt(m++) << 16 | key.charCodeAt(m++) << 8 | key.charCodeAt(m++);\n    var right = key.charCodeAt(m++) << 24 | key.charCodeAt(m++) << 16 | key.charCodeAt(m++) << 8 | key.charCodeAt(m++);\n    temp = (left >>> 4 ^ right) & 0x0f0f0f0f;right ^= temp;left ^= temp << 4;\n    temp = (right >>> -16 ^ left) & 0x0000ffff;left ^= temp;right ^= temp << -16;\n    temp = (left >>> 2 ^ right) & 0x33333333;right ^= temp;left ^= temp << 2;\n    temp = (right >>> -16 ^ left) & 0x0000ffff;left ^= temp;right ^= temp << -16;\n    temp = (left >>> 1 ^ right) & 0x55555555;right ^= temp;left ^= temp << 1;\n    temp = (right >>> 8 ^ left) & 0x00ff00ff;left ^= temp;right ^= temp << 8;\n    temp = (left >>> 1 ^ right) & 0x55555555;right ^= temp;left ^= temp << 1;\n    //the right side needs to be shifted and to get the last four bits of the left side\n    temp = left << 8 | right >>> 20 & 0x000000f0;\n    //left needs to be put upside down\n    left = right << 24 | right << 8 & 0xff0000 | right >>> 8 & 0xff00 | right >>> 24 & 0xf0;\n    right = temp;\n    //now go through and perform these shifts on the left and right keys\n    for (var i = 0; i < shifts.length; i++) {\n      //shift the keys either one or two bits to the left\n      if (shifts[i]) {left = left << 2 | left >>> 26;right = right << 2 | right >>> 26;} else\n      {left = left << 1 | left >>> 27;right = right << 1 | right >>> 27;}\n      left &= -0xf;right &= -0xf;\n      //now apply PC-2, in such a way that E is easier when encrypting or decrypting\n      //this conversion will look like PC-2 except only the last 6 bits of each byte are used\n      //rather than 48 consecutive bits and the order of lines will be according to\n      //how the S selection functions will be applied: S2, S4, S6, S8, S1, S3, S5, S7\n      lefttemp = pc2bytes0[left >>> 28] | pc2bytes1[left >>> 24 & 0xf] |\n      pc2bytes2[left >>> 20 & 0xf] | pc2bytes3[left >>> 16 & 0xf] |\n      pc2bytes4[left >>> 12 & 0xf] | pc2bytes5[left >>> 8 & 0xf] |\n      pc2bytes6[left >>> 4 & 0xf];\n      righttemp = pc2bytes7[right >>> 28] | pc2bytes8[right >>> 24 & 0xf] |\n      pc2bytes9[right >>> 20 & 0xf] | pc2bytes10[right >>> 16 & 0xf] |\n      pc2bytes11[right >>> 12 & 0xf] | pc2bytes12[right >>> 8 & 0xf] |\n      pc2bytes13[right >>> 4 & 0xf];\n      temp = (righttemp >>> 16 ^ lefttemp) & 0x0000ffff;\n      keys[n++] = lefttemp ^ temp;keys[n++] = righttemp ^ temp << 16;\n    }\n  } //for each iterations\n  //return the keys we've created\n  return keys;\n} //end of des_createKeys\nfunction genkey(key, start, end) {\n  //8 byte / 64 bit Key (DES) or 192 bit Key\n  return { key: pad(key.slice(start, end)), vector: 1 };\n}\nfunction pad(key) {\n  for (var i = key.length; i < 24; i++) {\n    key += \"0\";\n  }\n  return key;\n}\nvar des3iv = '12345678';\nvar DES3 = {\n  //3DES加密，CBC/PKCS5Padding\n  encrypt: function encrypt(key, input) {\n    var genKey = genkey(key, 0, 24);\n    return btoa(des(genKey.key, input, 1, 1, des3iv, 1));\n  },\n  ////3DES解密，CBC/PKCS5Padding\n  decrypt: function decrypt(key, input) {\n    var genKey = genkey(key, 0, 24);\n    return des(genKey.key, atob(input), 0, 1, des3iv, 1);\n  } };var _default =\n\nDES3;exports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///25\n");

/***/ }),

/***/ 26:
/*!*******************************************************!*\
  !*** C:/Users/Admin/Desktop/evc.app/common/js/eth.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(__f__, uni) {Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = void 0;var ethers = __webpack_require__(/*! @/common/js/ethers.min.js */ 27);\nvar shims = __webpack_require__(/*! @/common/js/shims.js */ 28);\nvar _defautAbi = [{\n  \"constant\": true,\n  \"inputs\": [],\n  \"name\": \"name\",\n  \"outputs\": [{\n    \"name\": \"\",\n    \"type\": \"string\" }],\n\n  \"payable\": false,\n  \"stateMutability\": \"view\",\n  \"type\": \"function\" },\n{\n  \"constant\": false,\n  \"inputs\": [],\n  \"name\": \"stop\",\n  \"outputs\": [],\n  \"payable\": false,\n  \"stateMutability\": \"nonpayable\",\n  \"type\": \"function\" },\n{\n  \"constant\": false,\n  \"inputs\": [{\n    \"name\": \"_spender\",\n    \"type\": \"address\" },\n  {\n    \"name\": \"_value\",\n    \"type\": \"uint256\" }],\n\n  \"name\": \"approve\",\n  \"outputs\": [{\n    \"name\": \"success\",\n    \"type\": \"bool\" }],\n\n  \"payable\": false,\n  \"stateMutability\": \"nonpayable\",\n  \"type\": \"function\" },\n{\n  \"constant\": true,\n  \"inputs\": [],\n  \"name\": \"totalSupply\",\n  \"outputs\": [{\n    \"name\": \"\",\n    \"type\": \"uint256\" }],\n\n  \"payable\": false,\n  \"stateMutability\": \"view\",\n  \"type\": \"function\" },\n{\n  \"constant\": false,\n  \"inputs\": [{\n    \"name\": \"_from\",\n    \"type\": \"address\" },\n  {\n    \"name\": \"_to\",\n    \"type\": \"address\" },\n  {\n    \"name\": \"_value\",\n    \"type\": \"uint256\" }],\n\n  \"name\": \"transferFrom\",\n  \"outputs\": [{\n    \"name\": \"success\",\n    \"type\": \"bool\" }],\n\n  \"payable\": false,\n  \"stateMutability\": \"nonpayable\",\n  \"type\": \"function\" },\n{\n  \"constant\": true,\n  \"inputs\": [],\n  \"name\": \"decimals\",\n  \"outputs\": [{\n    \"name\": \"\",\n    \"type\": \"uint256\" }],\n\n  \"payable\": false,\n  \"stateMutability\": \"view\",\n  \"type\": \"function\" },\n{\n  \"constant\": false,\n  \"inputs\": [{\n    \"name\": \"_value\",\n    \"type\": \"uint256\" }],\n\n  \"name\": \"burn\",\n  \"outputs\": [],\n  \"payable\": false,\n  \"stateMutability\": \"nonpayable\",\n  \"type\": \"function\" },\n{\n  \"constant\": true,\n  \"inputs\": [{\n    \"name\": \"\",\n    \"type\": \"address\" }],\n\n  \"name\": \"balanceOf\",\n  \"outputs\": [{\n    \"name\": \"\",\n    \"type\": \"uint256\" }],\n\n  \"payable\": false,\n  \"stateMutability\": \"view\",\n  \"type\": \"function\" },\n{\n  \"constant\": true,\n  \"inputs\": [],\n  \"name\": \"stopped\",\n  \"outputs\": [{\n    \"name\": \"\",\n    \"type\": \"bool\" }],\n\n  \"payable\": false,\n  \"stateMutability\": \"view\",\n  \"type\": \"function\" },\n{\n  \"constant\": true,\n  \"inputs\": [],\n  \"name\": \"symbol\",\n  \"outputs\": [{\n    \"name\": \"\",\n    \"type\": \"string\" }],\n\n  \"payable\": false,\n  \"stateMutability\": \"view\",\n  \"type\": \"function\" },\n{\n  \"constant\": false,\n  \"inputs\": [{\n    \"name\": \"_to\",\n    \"type\": \"address\" },\n  {\n    \"name\": \"_value\",\n    \"type\": \"uint256\" }],\n\n  \"name\": \"transfer\",\n  \"outputs\": [{\n    \"name\": \"success\",\n    \"type\": \"bool\" }],\n\n  \"payable\": false,\n  \"stateMutability\": \"nonpayable\",\n  \"type\": \"function\" },\n{\n  \"constant\": false,\n  \"inputs\": [],\n  \"name\": \"start\",\n  \"outputs\": [],\n  \"payable\": false,\n  \"stateMutability\": \"nonpayable\",\n  \"type\": \"function\" },\n{\n  \"constant\": false,\n  \"inputs\": [{\n    \"name\": \"_name\",\n    \"type\": \"string\" }],\n\n  \"name\": \"setName\",\n  \"outputs\": [],\n  \"payable\": false,\n  \"stateMutability\": \"nonpayable\",\n  \"type\": \"function\" },\n{\n  \"constant\": true,\n  \"inputs\": [{\n    \"name\": \"\",\n    \"type\": \"address\" },\n  {\n    \"name\": \"\",\n    \"type\": \"address\" }],\n\n  \"name\": \"allowance\",\n  \"outputs\": [{\n    \"name\": \"\",\n    \"type\": \"uint256\" }],\n\n  \"payable\": false,\n  \"stateMutability\": \"view\",\n  \"type\": \"function\" },\n{\n  \"inputs\": [{\n    \"name\": \"_addressFounder\",\n    \"type\": \"address\" }],\n\n  \"payable\": false,\n  \"stateMutability\": \"nonpayable\",\n  \"type\": \"constructor\" },\n{\n  \"anonymous\": false,\n  \"inputs\": [{\n    \"indexed\": true,\n    \"name\": \"_from\",\n    \"type\": \"address\" },\n  {\n    \"indexed\": true,\n    \"name\": \"_to\",\n    \"type\": \"address\" },\n  {\n    \"indexed\": false,\n    \"name\": \"_value\",\n    \"type\": \"uint256\" }],\n\n  \"name\": \"Transfer\",\n  \"type\": \"event\" },\n{\n  \"anonymous\": false,\n  \"inputs\": [{\n    \"indexed\": true,\n    \"name\": \"_owner\",\n    \"type\": \"address\" },\n  {\n    \"indexed\": true,\n    \"name\": \"_spender\",\n    \"type\": \"address\" },\n  {\n    \"indexed\": false,\n    \"name\": \"_value\",\n    \"type\": \"uint256\" }],\n\n  \"name\": \"Approval\",\n  \"type\": \"event\" }];\n\nvar ResultStatus = {\n  Error: 0, //错误\n  Success: 1,\n  PrivateKeyError: 2, //私钥错误\n  MnemonicError: 3, //助记词错误\n  NotEnougth: 4, //余额不足\n  NotEnougthFee: 5, //Eth手续费不足\n  AddressError: 6, //地址无效\n  ContactAddressError: 7, //合约地址无效\n  LengthError: 8 //长度错误，3-18\n};\nvar __wallet = {};\nvar _success = function _success() {};\nvar _error = function _error() {};\n/**\r\n                                    * 生成一个新地址，返回私钥，助记词及地址\r\n                                    */\n__wallet.create = function () {\n  try {\n    var wallet = ethers.Wallet.createRandom();\n    var mnemonic = wallet.mnemonic;\n    var path = wallet.path;\n    var privateKey = wallet.privateKey;\n    var address = wallet.address;\n    return {\n      status: ResultStatus.Success,\n      msg: \"success\",\n      privateKey: privateKey,\n      mnemonic: mnemonic,\n      address: address };\n\n  } catch (e) {\n    return {\n      status: ResultStatus.Error,\n      msg: e.message,\n      privateKey: '',\n      mnemonic: '',\n      address: '' };\n\n  }\n};\n\n/**\r\n    * 根据私钥获取地址信息\r\n    * @param {String} 私钥\r\n    */\n__wallet.importByPrivateKey = function (privateKey) {\n  try {\n    var wallet = new ethers.Wallet(privateKey);\n    var privateKey = wallet.privateKey;\n    var address = wallet.address;\n    return {\n      status: ResultStatus.Success,\n      msg: \"success\",\n      privateKey: privateKey,\n      mnemonic: '',\n      address: address };\n\n  } catch (e) {\n    return {\n      status: ResultStatus.PrivateKeyError,\n      msg: e.message,\n      privateKey: '',\n      mnemonic: '',\n      address: '' };\n\n  }\n};\n\n/**\r\n    * 根据助记词获取地址信息\r\n    * @param {String} 助记词\r\n    */\n__wallet.importByMnemonic = function (mnemonic) {\n  try {\n    var wallet = ethers.Wallet.fromMnemonic(mnemonic);\n    var path = wallet.path;\n    var privateKey = wallet.privateKey;\n    var address = wallet.address;\n    return {\n      status: ResultStatus.Success,\n      msg: \"success\",\n      privateKey: privateKey,\n      mnemonic: mnemonic,\n      address: address };\n\n  } catch (e) {\n\n    return {\n      status: ResultStatus.MnemonicError,\n      msg: e.message,\n      privateKey: '',\n      mnemonic: '',\n      address: '' };\n\n  }\n};\n\n/**\r\n    * 获取地址余额\r\n    * @param {String} Eth地址\r\n    * @param {JSON} 合约信息\r\n    * @param {Function} 成功回调\r\n    * @param {Function} 失败回调\r\n    */\n__wallet.getContactBalance = function (data) {\n  if (data.contactAddress == \"\" || data.contactAddress.length != 42) {\n    data.error(ResultStatus.ContactAddressError, \"合约地址非法\");\n  }\n\n  if (data.length < 3 || data.length > 18) {\n    data.error(LengthError.LengthError, \"请输入正确的合约币长度\");\n  }\n  //var provider = new ethers.providers.JsonRpcProvider(\"https://web3.token.im\");\n  var provider = new ethers.providers.JsonRpcProvider(\"https://mainnet-eth.token.im\");\n\n  var contract = new ethers.Contract(data.contactAddress, data.contactAbi, provider);\n  var balance = contract.balanceOf(data.address);\n  balance.then(function (_balance) {\n    _balance = ethers.utils.formatUnits(_balance, data.length);\n    data.success(_balance);\n  }, function (error) {\n    console.log(__f__(error, \" at common\\\\js\\\\eth.js:346\"));\n  });\n};\n\n/**\r\n    * 获取地址余额\r\n    * @param {String} Eth地址\r\n    * @param {JSON} 合约信息，Eth直接用{},{address:'',abi:[],length:18}\r\n    * @param {Function} 成功回调\r\n    * @param {Function} 失败回调\r\n    */\n__wallet.getBalance = function (data) {\n  data.address = data.address || \"\";\n  data.success = data.success || _success;\n  data.error = data.error || _error;\n  data.contactAddress = data.contactAddress || \"\";\n  data.contactAbi = data.contactAbi || _defautAbi;\n  data.length = data.length || 18;\n  if (data.contactAddress.length != 42 && data.contactAddress.length != 0) {\n    data.error(ResultStatus.ContactAddressError, '请输入正确的合约地址');\n    return;\n  }\n  var provider = new ethers.providers.JsonRpcProvider(\"https://web3.token.im\");\n  //var provider = new ethers.providers.JsonRpcProvider(\"https://mainnet-eth.token.im\");\n  var self = this;\n  provider.getBalance(data.address).then(function (balance) {\n    if (data.contactAddress == 'eth' || data.contactAddress == '') {\n      balance = ethers.utils.formatEther(balance);\n      data.success(balance);\n    } else {\n      self.getContactBalance(data);\n    }\n  }, function (error) {\n    console.log(__f__(error, \" at common\\\\js\\\\eth.js:379\"));\n  });\n};\n\n__wallet.transferEth = function (data, wallet) {\n  var provider = ethers.getDefaultProvider();\n\n  var balancePromise = provider.getBalance(wallet.address);\n  var gasPricePromise = provider.getGasPrice();\n  var transactionCountPromise = provider.getTransactionCount(wallet.address);\n\n  var allPromises = Promise.all([\n  gasPricePromise,\n  balancePromise,\n  transactionCountPromise]);\n\n\n  var gasPriceWei = ethers.utils.parseUnits(data.gasPrice.toString(), 9);\n\n  var fee = ethers.utils.formatEther(gasPriceWei.mul(data.gas));\n  var sendPromise = allPromises.then(function (results) {\n    var gasPrice = results[0];\n    var balance = ethers.utils.formatEther(results[1]);\n    var transactionCount = results[2];\n    if (parseFloat(balance) < parseFloat(fee) + parseFloat(data.money)) {\n      data.error(ResultStatus.NotEnougth, '手续费不足');\n    } else {\n      var transaction = {\n        nonce: transactionCount,\n        gasLimit: ethers.utils.bigNumberify(data.gas),\n        gasPrice: gasPriceWei,\n        to: data.to,\n        value: ethers.utils.parseUnits(data.money.toString(), data.length),\n        data: \"0x\",\n        // This ensures the transaction cannot be replayed on different networks\n        chainId: ethers.utils.getNetwork('homestead').chainId };\n\n      console.log(__f__(JSON.stringify(transaction), \" at common\\\\js\\\\eth.js:416\"));\n      var wallet = new ethers.Wallet(data.privateKey);\n      var signPromise = wallet.sign(transaction);\n      signPromise.then(function (signedTransaction) {\n        provider.sendTransaction(signedTransaction).then(function (tx) {\n          data.success(tx.hash);\n        }).catch(function (err) {\n          uni.showToast({\n            icon: 'none',\n            title: '有一笔交易正在进行中',\n            duration: 2000 });\n\n          uni.hideLoading();\n        });\n      }).catch(function (err) {\n        console.log(__f__(err, \" at common\\\\js\\\\eth.js:431\"));\n        uni.hideLoading();\n      });\n    }\n  });\n};\n\n/**\r\n    * 发起一笔转帐\r\n    * @param {JSON} 转帐数据\r\n    */\n__wallet.transfer = function (data) {\n  try {\n    data.privateKey = data.privateKey || \"\";\n    data.to = data.to || \"\";\n    data.money = data.money || 0;\n    data.gas = data.gas || 80000;\n    data.gasPrice = data.gasPrice || 10;\n    data.length = data.length || 18;\n    data.contactAddress = data.contactAddress || \"\";\n    data.success = data.success || _success;\n    data.error = data.error || _error;\n    var wallet = this.importByPrivateKey(data.privateKey);\n    if (data.to.length != 42) {\n      data.error(ResultStatus.AddressError, \"接收地址出错\");\n      return;\n    }\n    if (wallet.status == ResultStatus.PrivateKeyError) {\n      data.error(ResultStatus.PrivateKeyError, \"请输入正确的私钥\");\n      return;\n    }\n    if (data.contactAddress.length == 0 || data.contactAddress == \"eth\") {\n      this.transferEth(data, wallet);\n    } else {\n      this.transferContact(data, wallet);\n    }\n  } catch (e) {\n    data.error(ResultStatus.Error, e.message);\n  }\n};\n\n__wallet.transferContact = function (data, wallet) {\n  if (data.length < 3 || data.length > 18) {\n    data.error(LengthError.LengthError, \"请输入正确的合约币长度\");\n    return;\n  }\n  var provider = ethers.getDefaultProvider();\n\n  var ethbalancePromise = provider.getBalance(wallet.address);\n  var gasPricePromise = provider.getGasPrice();\n  var transactionCountPromise = provider.getTransactionCount(wallet.address);\n\n  data.abi = data.abi || _defautAbi;\n  var contract = new ethers.Contract(data.contactAddress, data.abi, provider);\n  var contractbalancePromise = contract.balanceOf(data.contactAddress);\n  var allPromises = Promise.all([\n  gasPricePromise,\n  ethbalancePromise,\n  transactionCountPromise,\n  contractbalancePromise]);\n\n  var gasPriceWei = ethers.utils.parseUnits(data.gasPrice.toString(), 9);\n  var fee = ethers.utils.formatEther(gasPriceWei.mul(data.gas));\n  var sendPromise = allPromises.then(function (results) {\n    var gasPrice = results[0];\n    var ethbalance = ethers.utils.formatEther(results[1]);\n    var transactionCount = results[2];\n    var contactbalance = ethers.utils.formatUnits(results[3], data.length);\n\n    if (ethbalance < fee) {\n      data.error(ResultStatus.NotEnougthFee, 'Eth手续费不足');\n    } else {\n      if (contactbalance < data.Money) {\n        data.error(ResultStatus.NotEnougth, '余额不足');\n      } else {\n        var transaction = {\n          nonce: transactionCount,\n          gasLimit: ethers.utils.bigNumberify(data.gas),\n          gasPrice: gasPriceWei,\n          to: data.contactAddress,\n          value: ethers.utils.bigNumberify(\"0\"),\n          data: \"0xa9059cbb\" + ethers.utils.hexZeroPad(ethers.utils.hexlify(data.to), 32).replace(\"0x\", \"\") + ethers.utils.hexZeroPad(ethers.utils.hexlify(ethers.utils.parseUnits(data.money.toString(), data.length)), 32).replace(\"0x\", \"\"),\n          // This ensures the transaction cannot be replayed on different networks\n          chainId: ethers.utils.getNetwork('homestead').chainId };\n\n\n        var wallet = new ethers.Wallet(data.privateKey);\n        var signPromise = wallet.sign(transaction);\n        signPromise.then(function (signedTransaction) {\n          provider.sendTransaction(signedTransaction).then(function (tx) {\n            data.success(tx.hash);\n          });\n        }).catch(function () {\n\n        });\n      }\n    }\n  });\n};\n__wallet.formatValue = function (data, length) {//格式化金额\n  return ethers.utils.formatUnits(data, length);\n};var _default =\n__wallet;exports.default = _default;\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/vue-cli-plugin-uni/lib/format-log.js */ 12)[\"default\"], __webpack_require__(/*! ./node_modules/@dcloudio/uni-app-plus/dist/index.js */ 1)[\"default\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///26\n");

/***/ }),

/***/ 27:
/*!**************************************************************!*\
  !*** C:/Users/Admin/Desktop/evc.app/common/js/ethers.min.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(global, __f__) {var require;var require;!function (e) {if (true) module.exports = e();else {}}(function () {return function o(s, a, u) {function l(t, e) {if (!a[t]) {if (!s[t]) {var r = \"function\" == typeof require && require;if (!e && r) return require(t, !0);if (h) return h(t, !0);var n = new Error(\"Cannot find module '\" + t + \"'\");throw n.code = \"MODULE_NOT_FOUND\", n;}var i = a[t] = { exports: {} };s[t][0].call(i.exports, function (e) {return l(s[t][1][e] || e);}, i, i.exports, o, s, a, u);}return a[t].exports;}for (var h = \"function\" == typeof require && require, e = 0; e < u.length; e++) {l(u[e]);}return l;}({ 1: [function (e, t, r) {\"use strict\";Object.defineProperty(r, \"__esModule\", { value: !0 }), r.version = \"4.0.37\";}, {}], 2: [function (e, t, r) {\"use strict\";Object.defineProperty(r, \"__esModule\", { value: !0 });var n = e(\"./utils/properties\"),i = (o.isSigner = function (e) {return n.isType(e, \"Signer\");}, o);function o() {n.setType(this, \"Signer\");}r.Signer = i;}, { \"./utils/properties\": 73 }], 3: [function (e, t, r) {\"use strict\";Object.defineProperty(r, \"__esModule\", { value: !0 });var n = e(\"./utils/bignumber\");r.AddressZero = \"0x0000000000000000000000000000000000000000\";r.HashZero = \"0x0000000000000000000000000000000000000000000000000000000000000000\";r.EtherSymbol = \"\\u039E\";var i = n.bigNumberify(-1);r.NegativeOne = i;var o = n.bigNumberify(0);r.Zero = o;var s = n.bigNumberify(1);r.One = s;var a = n.bigNumberify(2);r.Two = a;var u = n.bigNumberify(\"1000000000000000000\");r.WeiPerEther = u;var l = n.bigNumberify(\"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");r.MaxUint256 = l;}, { \"./utils/bignumber\": 62 }], 4: [function (e, t, r) {\"use strict\";var n,i = this && this.__extends || (n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (e, t) {e.__proto__ = t;} || function (e, t) {for (var r in t) {t.hasOwnProperty(r) && (e[r] = t[r]);}}, function (e, t) {function r() {this.constructor = e;}n(e, t), e.prototype = null === t ? Object.create(t) : (r.prototype = t.prototype, new r());}),o = this && this.__importStar || function (e) {if (e && e.__esModule) return e;var t = {};if (null != e) for (var r in e) {Object.hasOwnProperty.call(e, r) && (t[r] = e[r]);}return t.default = e, t;};Object.defineProperty(r, \"__esModule\", { value: !0 });var s,u = e(\"./constants\"),l = o(e(\"./errors\")),h = e(\"./utils/abi-coder\"),a = e(\"./utils/address\"),f = e(\"./utils/bignumber\"),c = e(\"./utils/bytes\"),d = e(\"./utils/interface\"),p = e(\"./utils/properties\"),v = e(\"./providers/abstract-provider\"),y = e(\"./abstract-signer\"),m = (s = y.Signer, i(g, s), g.prototype.getAddress = function () {return Promise.resolve(this.address);}, g.prototype._fail = function (e, t) {return Promise.resolve().then(function () {l.throwError(e, l.UNSUPPORTED_OPERATION, { operation: t });});}, g.prototype.signMessage = function (e) {return this._fail(\"VoidSigner cannot sign messages\", \"signMessage\");}, g.prototype.sendTransaction = function (e) {return this._fail(\"VoidSigner cannot sign transactions\", \"sendTransaction\");}, g.prototype.connect = function (e) {return new g(this.address, e);}, g);function g(e, t) {var r = s.call(this) || this;return p.defineReadOnly(r, \"address\", e), p.defineReadOnly(r, \"provider\", t), r;}r.VoidSigner = m;var b = { chainId: !0, data: !0, from: !0, gasLimit: !0, gasPrice: !0, nonce: !0, to: !0, value: !0 };function w(o, e, s) {var a = o.interface.functions[e];return function () {for (var e = [], t = 0; t < arguments.length; t++) {e[t] = arguments[t];}var i = {},r = null;if (e.length === a.inputs.length + 1 && \"object\" == typeof e[e.length - 1]) for (var n in null != (i = p.shallowCopy(e.pop())).blockTag && (r = i.blockTag), delete i.blockTag, i) {if (!b[n]) throw new Error(\"unknown transaction override \" + n);}if (e.length != a.inputs.length) throw new Error(\"incorrect number of arguments\");return [\"data\", \"to\"].forEach(function (e) {null != i[e] && l.throwError(\"cannot override \" + e, l.UNSUPPORTED_OPERATION, { operation: e });}), i.to = o._deployed(r).then(function () {return o.addressPromise;}), function n(i, o, e) {if (Array.isArray(e)) {var s = [];return e.forEach(function (e, t) {var r = null;r = Array.isArray(o) ? o[t] : o[e.name], s.push(n(i, r, e));}), Promise.all(s);}if (\"address\" === e.type) return i.resolveName(o);if (\"tuple\" === e.type) return n(i, o, e.components);var t = e.type.match(/(.*)(\\[[0-9]*\\]$)/);if (t) {if (!Array.isArray(o)) throw new Error(\"invalid value for array\");var r = [],a = { components: e.components, type: t[1] };return o.forEach(function (e) {r.push(n(i, e, a));}), Promise.all(r);}return Promise.resolve(o);}(o.provider, e, a.inputs).then(function (n) {if (i.data = a.encode(n), \"call\" === a.type) return s ? Promise.resolve(u.Zero) : (o.provider || l.throwError(\"call (constant functions) require a provider or a signer with a provider\", l.UNSUPPORTED_OPERATION, { operation: \"call\" }), [\"gasLimit\", \"gasPrice\", \"value\"].forEach(function (e) {if (null != i[e]) throw new Error(\"call cannot override \" + e);}), null == i.from && o.signer && (i.from = o.signer.getAddress()), o.provider.call(i, r).then(function (t) {if (c.hexDataLength(t) % 32 == 4 && \"0x08c379a0\" === c.hexDataSlice(t, 0, 4)) {var e = h.defaultAbiCoder.decode([\"string\"], c.hexDataSlice(t, 4));l.throwError(\"call revert exception\", l.CALL_EXCEPTION, { address: o.address, args: n, method: a.signature, errorSignature: \"Error(string)\", errorArgs: [e], reason: e, transaction: i });}try {var r = a.decode(t);return 1 === a.outputs.length && (r = r[0]), r;} catch (e) {throw \"0x\" === t && 0 < a.outputs.length && l.throwError(\"call exception\", l.CALL_EXCEPTION, { address: o.address, method: a.signature, args: n }), e;}}));if (\"transaction\" === a.type) return s ? (o.provider || l.throwError(\"estimate gas require a provider or a signer with a provider\", l.UNSUPPORTED_OPERATION, { operation: \"estimateGas\" }), null == i.from && o.signer && (i.from = o.signer.getAddress()), o.provider.estimateGas(i)) : (null == i.gasLimit && null != a.gas && (i.gasLimit = f.bigNumberify(a.gas).add(21e3)), o.signer || l.throwError(\"sending a transaction requires a signer\", l.UNSUPPORTED_OPERATION, { operation: \"sendTransaction\" }), null != i.from && l.throwError(\"cannot override from in a transaction\", l.UNSUPPORTED_OPERATION, { operation: \"sendTransaction\" }), o.signer.sendTransaction(i).then(function (e) {var t = e.wait.bind(e);return e.wait = function (e) {return t(e).then(function (n) {return n.events = n.logs.map(function (e) {var t = p.deepCopy(e),r = o.interface.parseLog(e);return r && (t.args = r.values, t.decode = r.decode, t.event = r.name, t.eventSignature = r.signature), t.removeListener = function () {return o.provider;}, t.getBlock = function () {return o.provider.getBlock(n.blockHash);}, t.getTransaction = function () {return o.provider.getTransaction(n.transactionHash);}, t.getTransactionReceipt = function () {return Promise.resolve(n);}, t;}), n;});}, e;}));throw new Error(\"invalid type - \" + a.type);});};}function _(e) {return !e.address || null != e.topics && 0 !== e.topics.length ? (e.address || \"*\") + \"@\" + (e.topics ? e.topics.join(\":\") : \"\") : \"*\";}var M = (A.prototype.deployed = function () {return this._deployed();}, A.prototype._deployed = function (e) {var t = this;return this._deployedPromise || (this.deployTransaction ? this._deployedPromise = this.deployTransaction.wait().then(function () {return t;}) : this._deployedPromise = this.provider.getCode(this.address, e).then(function (e) {return \"0x\" === e && l.throwError(\"contract not deployed\", l.UNSUPPORTED_OPERATION, { contractAddress: t.address, operation: \"getDeployed\" }), t;})), this._deployedPromise;}, A.prototype.fallback = function (e) {var t = this;this.signer || l.throwError(\"sending a transaction requires a signer\", l.UNSUPPORTED_OPERATION, { operation: \"sendTransaction(fallback)\" });var r = p.shallowCopy(e || {});return [\"from\", \"to\"].forEach(function (e) {null != r[e] && l.throwError(\"cannot override \" + e, l.UNSUPPORTED_OPERATION, { operation: e });}), r.to = this.addressPromise, this.deployed().then(function () {return t.signer.sendTransaction(r);});}, A.prototype.connect = function (e) {\"string\" == typeof e && (e = new m(e, this.provider));var t = new A(this.address, this.interface, e);return this.deployTransaction && p.defineReadOnly(t, \"deployTransaction\", this.deployTransaction), t;}, A.prototype.attach = function (e) {return new A(e, this.interface, this.signer || this.provider);}, A.isIndexed = function (e) {return d.Interface.isIndexed(e);}, A.prototype._getEventFilter = function (e) {var r = this;if (\"string\" == typeof e) {if (\"*\" === e) return { prepareEvent: function prepareEvent(e) {var t = r.interface.parseLog(e);return t && (e.args = t.values, e.decode = t.decode, e.event = t.name, e.eventSignature = t.signature), [e];}, eventTag: \"*\", filter: { address: this.address } };-1 !== e.indexOf(\"(\") && (e = h.formatSignature(h.parseSignature(\"event \" + e)));var n = this.interface.events[e];n || l.throwError(\"unknown event - \" + e, l.INVALID_ARGUMENT, { argumnet: \"eventName\", value: e });var t = { address: this.address, topics: [n.topic] };return { prepareEvent: function prepareEvent(e) {var t = n.decode(e.data, e.topics);e.args = t;var r = Array.prototype.slice.call(t);return r.push(e), r;}, event: n, eventTag: _(t), filter: t };}var i = { address: this.address },o = null;if (e.topics && e.topics[0]) for (var s in i.topics = e.topics, this.interface.events) {if (-1 !== s.indexOf(\"(\")) {var a = this.interface.events[s];if (a.topic === e.topics[0].toLowerCase()) {o = a;break;}}}return { prepareEvent: function prepareEvent(e) {if (!o) return [e];var t = o.decode(e.data, e.topics);e.args = t;var r = Array.prototype.slice.call(t);return r.push(e), r;}, event: o, eventTag: _(i), filter: i };}, A.prototype._addEventListener = function (n, i, e) {var o = this;function t(e) {var t = p.deepCopy(e),r = n.prepareEvent(t);n.event && (t.decode = n.event.decode, t.event = n.event.name, t.eventSignature = n.event.signature), t.removeListener = function () {o.removeListener(n.filter, i);}, t.getBlock = function () {return o.provider.getBlock(e.blockHash);}, t.getTransaction = function () {return o.provider.getTransaction(e.transactionHash);}, t.getTransactionReceipt = function () {return o.provider.getTransactionReceipt(e.transactionHash);}, o.emit.apply(o, [n.filter].concat(r));}this.provider || l.throwError(\"events require a provider or a signer with a provider\", l.UNSUPPORTED_OPERATION, { operation: \"once\" }), this.provider.on(n.filter, t), this._events.push({ eventFilter: n, listener: i, wrappedListener: t, once: e });}, A.prototype.on = function (e, t) {return this._addEventListener(this._getEventFilter(e), t, !1), this;}, A.prototype.once = function (e, t) {return this._addEventListener(this._getEventFilter(e), t, !0), this;}, A.prototype.addListener = function (e, t) {return this.on(e, t);}, A.prototype.emit = function (e) {for (var t = this, r = [], n = 1; n < arguments.length; n++) {r[n - 1] = arguments[n];}if (!this.provider) return !1;var i = !1,o = this._getEventFilter(e);return this._events = this._events.filter(function (e) {return e.eventFilter.eventTag !== o.eventTag || (setTimeout(function () {e.listener.apply(t, r);}, 0), i = !0, !e.once);}), i;}, A.prototype.listenerCount = function (e) {if (!this.provider) return 0;var t = this._getEventFilter(e);return this._events.filter(function (e) {return e.eventFilter.eventTag === t.eventTag;}).length;}, A.prototype.listeners = function (e) {if (!this.provider) return [];var t = this._getEventFilter(e);return this._events.filter(function (e) {return e.eventFilter.eventTag === t.eventTag;}).map(function (e) {return e.listener;});}, A.prototype.removeAllListeners = function (e) {var t = this;if (!this.provider) return this;var r = this._getEventFilter(e);return this._events = this._events.filter(function (e) {return e.eventFilter.eventTag !== r.eventTag || (t.provider.removeListener(e.eventFilter.filter, e.wrappedListener), !1);}), this;}, A.prototype.removeListener = function (e, t) {var r = this;if (!this.provider) return this;var n = !1,i = this._getEventFilter(e);return this._events = this._events.filter(function (e) {return e.eventFilter.eventTag !== i.eventTag || e.listener !== t || (r.provider.removeListener(e.eventFilter.filter, e.wrappedListener), !!n || !(n = !0));}), this;}, A);function A(t, e, r) {var n = this;if (l.checkNew(this, A), d.Interface.isInterface(e) ? p.defineReadOnly(this, \"interface\", e) : p.defineReadOnly(this, \"interface\", new d.Interface(e)), y.Signer.isSigner(r) ? (p.defineReadOnly(this, \"provider\", r.provider), p.defineReadOnly(this, \"signer\", r)) : v.Provider.isProvider(r) ? (p.defineReadOnly(this, \"provider\", r), p.defineReadOnly(this, \"signer\", null)) : l.throwError(\"invalid signer or provider\", l.INVALID_ARGUMENT, { arg: \"signerOrProvider\", value: r }), p.defineReadOnly(this, \"estimate\", {}), p.defineReadOnly(this, \"functions\", {}), p.defineReadOnly(this, \"filters\", {}), Object.keys(this.interface.events).forEach(function (e) {var r = n.interface.events[e];p.defineReadOnly(n.filters, e, function () {for (var e = [], t = 0; t < arguments.length; t++) {e[t] = arguments[t];}return { address: n.address, topics: r.encodeTopics(e) };});}), this._events = [], p.defineReadOnly(this, \"address\", t), this.provider) p.defineReadOnly(this, \"addressPromise\", this.provider.resolveName(t).then(function (e) {if (null == e) throw new Error(\"name not found\");return e;}).catch(function (e) {throw e;}));else try {p.defineReadOnly(this, \"addressPromise\", Promise.resolve(a.getAddress(t)));} catch (e) {l.throwError(\"provider is required to use non-address contract address\", l.INVALID_ARGUMENT, { argument: \"addressOrName\", value: t });}Object.keys(this.interface.functions).forEach(function (e) {var t = w(n, e, !1);null == n[e] ? p.defineReadOnly(n, e, t) : l.warn(\"WARNING: Multiple definitions for \" + e), null == n.functions[e] && (p.defineReadOnly(n.functions, e, t), p.defineReadOnly(n.estimate, e, w(n, e, !0)));});}r.Contract = M;var E = (S.prototype.getDeployTransaction = function () {for (var e = [], t = 0; t < arguments.length; t++) {e[t] = arguments[t];}var r = {};if (e.length === this.interface.deployFunction.inputs.length + 1) for (var n in r = p.shallowCopy(e.pop())) {if (!b[n]) throw new Error(\"unknown transaction override \" + n);}return [\"data\", \"from\", \"to\"].forEach(function (e) {null != r[e] && l.throwError(\"cannot override \" + e, l.UNSUPPORTED_OPERATION, { operation: e });}), l.checkArgumentCount(e.length, this.interface.deployFunction.inputs.length, \" in Contract constructor\"), r.data = this.interface.deployFunction.encode(this.bytecode, e), r;}, S.prototype.deploy = function () {for (var r = this, e = [], t = 0; t < arguments.length; t++) {e[t] = arguments[t];}var n = this.getDeployTransaction.apply(this, e);return this.signer.sendTransaction(n).then(function (e) {var t = new M(a.getContractAddress(e), r.interface, r.signer);return p.defineReadOnly(t, \"deployTransaction\", e), t;});}, S.prototype.attach = function (e) {return new M(e, this.interface, this.signer);}, S.prototype.connect = function (e) {return new S(this.interface, this.bytecode, e);}, S.fromSolidity = function (e, t) {null == e && l.throwError(\"missing compiler output\", l.MISSING_ARGUMENT, { argument: \"compilerOutput\" }), \"string\" == typeof e && (e = JSON.parse(e));var r = e.abi,n = null;return e.bytecode ? n = e.bytecode : e.evm && e.evm.bytecode && (n = e.evm.bytecode), new S(r, n, t);}, S);function S(e, t, r) {var n = null;\"string\" == typeof t ? n = t : c.isArrayish(t) ? n = c.hexlify(t) : \"string\" == typeof t.object ? n = t.object : l.throwError(\"bytecode must be a valid hex string\", l.INVALID_ARGUMENT, { arg: \"bytecode\", value: t }), \"0x\" !== n.substring(0, 2) && (n = \"0x\" + n), c.isHexString(n) || l.throwError(\"bytecode must be a valid hex string\", l.INVALID_ARGUMENT, { arg: \"bytecode\", value: t }), n.length % 2 != 0 && l.throwError(\"bytecode must be valid data (even length)\", l.INVALID_ARGUMENT, { arg: \"bytecode\", value: t }), p.defineReadOnly(this, \"bytecode\", n), d.Interface.isInterface(e) ? p.defineReadOnly(this, \"interface\", e) : p.defineReadOnly(this, \"interface\", new d.Interface(e)), r && !y.Signer.isSigner(r) && l.throwError(\"invalid signer\", l.INVALID_ARGUMENT, { arg: \"signer\", value: null }), p.defineReadOnly(this, \"signer\", r || null);}r.ContractFactory = E;}, { \"./abstract-signer\": 2, \"./constants\": 3, \"./errors\": 5, \"./providers/abstract-provider\": 49, \"./utils/abi-coder\": 58, \"./utils/address\": 59, \"./utils/bignumber\": 62, \"./utils/bytes\": 63, \"./utils/interface\": 68, \"./utils/properties\": 73 }], 5: [function (e, t, s) {\"use strict\";Object.defineProperty(s, \"__esModule\", { value: !0 });var a = e(\"./_version\");s.UNKNOWN_ERROR = \"UNKNOWN_ERROR\", s.NOT_IMPLEMENTED = \"NOT_IMPLEMENTED\", s.MISSING_NEW = \"MISSING_NEW\", s.CALL_EXCEPTION = \"CALL_EXCEPTION\", s.INVALID_ARGUMENT = \"INVALID_ARGUMENT\", s.MISSING_ARGUMENT = \"MISSING_ARGUMENT\", s.UNEXPECTED_ARGUMENT = \"UNEXPECTED_ARGUMENT\", s.NUMERIC_FAULT = \"NUMERIC_FAULT\", s.INSUFFICIENT_FUNDS = \"INSUFFICIENT_FUNDS\", s.NONCE_EXPIRED = \"NONCE_EXPIRED\", s.REPLACEMENT_UNDERPRICED = \"REPLACEMENT_UNDERPRICED\";var r = !(s.UNSUPPORTED_OPERATION = \"UNSUPPORTED_OPERATION\"),u = !1;function n(e, t, r) {if (u) throw new Error(\"unknown error\");t = t || s.UNKNOWN_ERROR, r = r || {};var n = [];Object.keys(r).forEach(function (t) {try {n.push(t + \"=\" + JSON.stringify(r[t]));} catch (e) {n.push(t + \"=\" + JSON.stringify(r[t].toString()));}}), n.push(\"version=\" + a.version);var i = e;n.length && (e += \" (\" + n.join(\", \") + \")\");var o = new Error(e);throw o.reason = i, o.code = t, Object.keys(r).forEach(function (e) {o[e] = r[e];}), o;}s.throwError = n, s.checkNew = function (e, t) {e instanceof t || n(\"missing new\", s.MISSING_NEW, { name: t.name });}, s.checkArgumentCount = function (e, t, r) {r = r || \"\", e < t && n(\"missing argument\" + r, s.MISSING_ARGUMENT, { count: e, expectedCount: t }), t < e && n(\"too many arguments\" + r, s.UNEXPECTED_ARGUMENT, { count: e, expectedCount: t });}, s.setCensorship = function (e, t) {r && n(\"error censorship permanent\", s.UNSUPPORTED_OPERATION, { operation: \"setCensorship\" }), u = !!e, r = !!t;}, s.checkNormalize = function () {try {if ([\"NFD\", \"NFC\", \"NFKD\", \"NFKC\"].forEach(function (t) {try {\"test\".normalize(t);} catch (e) {throw new Error(\"missing \" + t);}}), String.fromCharCode(233).normalize(\"NFD\") !== String.fromCharCode(101, 769)) throw new Error(\"broken implementation\");} catch (e) {n(\"platform missing String.prototype.normalize\", s.UNSUPPORTED_OPERATION, { operation: \"String.prototype.normalize\", form: e.message });}};var i = { debug: 1, default: 2, info: 2, warn: 3, error: 4, off: 5 },o = i.default;function l(e, t) {o > i[e] || console.log.apply(console, t);}function h() {for (var e = [], t = 0; t < arguments.length; t++) {e[t] = arguments[t];}l(\"warn\", e);}s.setLogLevel = function (e) {var t = i[e];null != t ? o = t : h(\"invliad log level - \" + e);}, s.warn = h, s.info = function () {for (var e = [], t = 0; t < arguments.length; t++) {e[t] = arguments[t];}l(\"info\", e);};}, { \"./_version\": 1 }], 6: [function (e, t, r) {\"use strict\";var n = this && this.__importStar || function (e) {if (e && e.__esModule) return e;var t = {};if (null != e) for (var r in e) {Object.hasOwnProperty.call(e, r) && (t[r] = e[r]);}return t.default = e, t;};Object.defineProperty(r, \"__esModule\", { value: !0 });var i = e(\"./contract\");r.Contract = i.Contract, r.ContractFactory = i.ContractFactory, r.VoidSigner = i.VoidSigner;var o = e(\"./abstract-signer\");r.Signer = o.Signer;var s = e(\"./wallet\");r.Wallet = s.Wallet;var a = n(e(\"./constants\"));r.constants = a;var u = n(e(\"./errors\"));r.errors = u;var l = n(e(\"./providers\"));r.providers = l;var h = n(e(\"./utils\"));r.utils = h;var f = n(e(\"./wordlists\"));r.wordlists = f;var c = e(\"./utils/shims\");r.platform = c.platform;var d = e(\"./_version\");r.version = d.version, r.getDefaultProvider = function (e) {null == e && (e = \"homestead\");var t = h.getNetwork(e);return t && t._defaultProvider || u.throwError(\"unsupported getDefaultProvider network\", u.UNSUPPORTED_OPERATION, { operation: \"getDefaultProvider\", network: e }), t._defaultProvider(l);};}, { \"./_version\": 1, \"./abstract-signer\": 2, \"./constants\": 3, \"./contract\": 4, \"./errors\": 5, \"./providers\": 53, \"./utils\": 67, \"./utils/shims\": 79, \"./wallet\": 87, \"./wordlists\": 88 }], 7: [function (e, t, r) {\"use strict\";var n = this && this.__importStar || function (e) {if (e && e.__esModule) return e;var t = {};if (null != e) for (var r in e) {Object.hasOwnProperty.call(e, r) && (t[r] = e[r]);}return t.default = e, t;};Object.defineProperty(r, \"__esModule\", { value: !0 });var i = n(e(\"./ethers\"));r.ethers = i, function (e) {for (var t in e) {r.hasOwnProperty(t) || (r[t] = e[t]);}}(e(\"./ethers\"));}, { \"./ethers\": 6 }], 8: [function (e, C, B) {\"use strict\";!function (e) {function r(e) {return parseInt(e) === e;}function n(e) {if (!r(e.length)) return !1;for (var t = 0; t < e.length; t++) {if (!r(e[t]) || e[t] < 0 || 255 < e[t]) return !1;}return !0;}function o(e, t) {if (e.buffer && ArrayBuffer.isView(e) && \"Uint8Array\" === e.name) return t && (e = e.slice ? e.slice() : Array.prototype.slice.call(e)), e;if (Array.isArray(e)) {if (!n(e)) throw new Error(\"Array contains invalid value: \" + e);return new Uint8Array(e);}if (r(e.length) && n(e)) return new Uint8Array(e);throw new Error(\"unsupported array-like object\");}function u(e) {return new Uint8Array(e);}function s(e, t, r, n, i) {null == n && null == i || (e = e.slice ? e.slice(n, i) : Array.prototype.slice.call(e, n, i)), t.set(e, r);}var i,t = { toBytes: function toBytes(e) {var t = [],r = 0;for (e = encodeURI(e); r < e.length;) {var n = e.charCodeAt(r++);37 === n ? (t.push(parseInt(e.substr(r, 2), 16)), r += 2) : t.push(n);}return o(t);}, fromBytes: function fromBytes(e) {for (var t = [], r = 0; r < e.length;) {var n = e[r];n < 128 ? (t.push(String.fromCharCode(n)), r++) : 191 < n && n < 224 ? (t.push(String.fromCharCode((31 & n) << 6 | 63 & e[r + 1])), r += 2) : (t.push(String.fromCharCode((15 & n) << 12 | (63 & e[r + 1]) << 6 | 63 & e[r + 2])), r += 3);}return t.join(\"\");} },a = (i = \"0123456789abcdef\", { toBytes: function toBytes(e) {for (var t = [], r = 0; r < e.length; r += 2) {t.push(parseInt(e.substr(r, 2), 16));}return t;}, fromBytes: function fromBytes(e) {for (var t = [], r = 0; r < e.length; r++) {var n = e[r];t.push(i[(240 & n) >> 4] + i[15 & n]);}return t.join(\"\");} }),f = { 16: 10, 24: 12, 32: 14 },c = [1, 2, 4, 8, 16, 32, 64, 128, 27, 54, 108, 216, 171, 77, 154, 47, 94, 188, 99, 198, 151, 53, 106, 212, 179, 125, 250, 239, 197, 145],d = [99, 124, 119, 123, 242, 107, 111, 197, 48, 1, 103, 43, 254, 215, 171, 118, 202, 130, 201, 125, 250, 89, 71, 240, 173, 212, 162, 175, 156, 164, 114, 192, 183, 253, 147, 38, 54, 63, 247, 204, 52, 165, 229, 241, 113, 216, 49, 21, 4, 199, 35, 195, 24, 150, 5, 154, 7, 18, 128, 226, 235, 39, 178, 117, 9, 131, 44, 26, 27, 110, 90, 160, 82, 59, 214, 179, 41, 227, 47, 132, 83, 209, 0, 237, 32, 252, 177, 91, 106, 203, 190, 57, 74, 76, 88, 207, 208, 239, 170, 251, 67, 77, 51, 133, 69, 249, 2, 127, 80, 60, 159, 168, 81, 163, 64, 143, 146, 157, 56, 245, 188, 182, 218, 33, 16, 255, 243, 210, 205, 12, 19, 236, 95, 151, 68, 23, 196, 167, 126, 61, 100, 93, 25, 115, 96, 129, 79, 220, 34, 42, 144, 136, 70, 238, 184, 20, 222, 94, 11, 219, 224, 50, 58, 10, 73, 6, 36, 92, 194, 211, 172, 98, 145, 149, 228, 121, 231, 200, 55, 109, 141, 213, 78, 169, 108, 86, 244, 234, 101, 122, 174, 8, 186, 120, 37, 46, 28, 166, 180, 198, 232, 221, 116, 31, 75, 189, 139, 138, 112, 62, 181, 102, 72, 3, 246, 14, 97, 53, 87, 185, 134, 193, 29, 158, 225, 248, 152, 17, 105, 217, 142, 148, 155, 30, 135, 233, 206, 85, 40, 223, 140, 161, 137, 13, 191, 230, 66, 104, 65, 153, 45, 15, 176, 84, 187, 22],l = [82, 9, 106, 213, 48, 54, 165, 56, 191, 64, 163, 158, 129, 243, 215, 251, 124, 227, 57, 130, 155, 47, 255, 135, 52, 142, 67, 68, 196, 222, 233, 203, 84, 123, 148, 50, 166, 194, 35, 61, 238, 76, 149, 11, 66, 250, 195, 78, 8, 46, 161, 102, 40, 217, 36, 178, 118, 91, 162, 73, 109, 139, 209, 37, 114, 248, 246, 100, 134, 104, 152, 22, 212, 164, 92, 204, 93, 101, 182, 146, 108, 112, 72, 80, 253, 237, 185, 218, 94, 21, 70, 87, 167, 141, 157, 132, 144, 216, 171, 0, 140, 188, 211, 10, 247, 228, 88, 5, 184, 179, 69, 6, 208, 44, 30, 143, 202, 63, 15, 2, 193, 175, 189, 3, 1, 19, 138, 107, 58, 145, 17, 65, 79, 103, 220, 234, 151, 242, 207, 206, 240, 180, 230, 115, 150, 172, 116, 34, 231, 173, 53, 133, 226, 249, 55, 232, 28, 117, 223, 110, 71, 241, 26, 113, 29, 41, 197, 137, 111, 183, 98, 14, 170, 24, 190, 27, 252, 86, 62, 75, 198, 210, 121, 32, 154, 219, 192, 254, 120, 205, 90, 244, 31, 221, 168, 51, 136, 7, 199, 49, 177, 18, 16, 89, 39, 128, 236, 95, 96, 81, 127, 169, 25, 181, 74, 13, 45, 229, 122, 159, 147, 201, 156, 239, 160, 224, 59, 77, 174, 42, 245, 176, 200, 235, 187, 60, 131, 83, 153, 97, 23, 43, 4, 126, 186, 119, 214, 38, 225, 105, 20, 99, 85, 33, 12, 125],h = [3328402341, 4168907908, 4000806809, 4135287693, 4294111757, 3597364157, 3731845041, 2445657428, 1613770832, 33620227, 3462883241, 1445669757, 3892248089, 3050821474, 1303096294, 3967186586, 2412431941, 528646813, 2311702848, 4202528135, 4026202645, 2992200171, 2387036105, 4226871307, 1101901292, 3017069671, 1604494077, 1169141738, 597466303, 1403299063, 3832705686, 2613100635, 1974974402, 3791519004, 1033081774, 1277568618, 1815492186, 2118074177, 4126668546, 2211236943, 1748251740, 1369810420, 3521504564, 4193382664, 3799085459, 2883115123, 1647391059, 706024767, 134480908, 2512897874, 1176707941, 2646852446, 806885416, 932615841, 168101135, 798661301, 235341577, 605164086, 461406363, 3756188221, 3454790438, 1311188841, 2142417613, 3933566367, 302582043, 495158174, 1479289972, 874125870, 907746093, 3698224818, 3025820398, 1537253627, 2756858614, 1983593293, 3084310113, 2108928974, 1378429307, 3722699582, 1580150641, 327451799, 2790478837, 3117535592, 0, 3253595436, 1075847264, 3825007647, 2041688520, 3059440621, 3563743934, 2378943302, 1740553945, 1916352843, 2487896798, 2555137236, 2958579944, 2244988746, 3151024235, 3320835882, 1336584933, 3992714006, 2252555205, 2588757463, 1714631509, 293963156, 2319795663, 3925473552, 67240454, 4269768577, 2689618160, 2017213508, 631218106, 1269344483, 2723238387, 1571005438, 2151694528, 93294474, 1066570413, 563977660, 1882732616, 4059428100, 1673313503, 2008463041, 2950355573, 1109467491, 537923632, 3858759450, 4260623118, 3218264685, 2177748300, 403442708, 638784309, 3287084079, 3193921505, 899127202, 2286175436, 773265209, 2479146071, 1437050866, 4236148354, 2050833735, 3362022572, 3126681063, 840505643, 3866325909, 3227541664, 427917720, 2655997905, 2749160575, 1143087718, 1412049534, 999329963, 193497219, 2353415882, 3354324521, 1807268051, 672404540, 2816401017, 3160301282, 369822493, 2916866934, 3688947771, 1681011286, 1949973070, 336202270, 2454276571, 201721354, 1210328172, 3093060836, 2680341085, 3184776046, 1135389935, 3294782118, 965841320, 831886756, 3554993207, 4068047243, 3588745010, 2345191491, 1849112409, 3664604599, 26054028, 2983581028, 2622377682, 1235855840, 3630984372, 2891339514, 4092916743, 3488279077, 3395642799, 4101667470, 1202630377, 268961816, 1874508501, 4034427016, 1243948399, 1546530418, 941366308, 1470539505, 1941222599, 2546386513, 3421038627, 2715671932, 3899946140, 1042226977, 2521517021, 1639824860, 227249030, 260737669, 3765465232, 2084453954, 1907733956, 3429263018, 2420656344, 100860677, 4160157185, 470683154, 3261161891, 1781871967, 2924959737, 1773779408, 394692241, 2579611992, 974986535, 664706745, 3655459128, 3958962195, 731420851, 571543859, 3530123707, 2849626480, 126783113, 865375399, 765172662, 1008606754, 361203602, 3387549984, 2278477385, 2857719295, 1344809080, 2782912378, 59542671, 1503764984, 160008576, 437062935, 1707065306, 3622233649, 2218934982, 3496503480, 2185314755, 697932208, 1512910199, 504303377, 2075177163, 2824099068, 1841019862, 739644986],p = [2781242211, 2230877308, 2582542199, 2381740923, 234877682, 3184946027, 2984144751, 1418839493, 1348481072, 50462977, 2848876391, 2102799147, 434634494, 1656084439, 3863849899, 2599188086, 1167051466, 2636087938, 1082771913, 2281340285, 368048890, 3954334041, 3381544775, 201060592, 3963727277, 1739838676, 4250903202, 3930435503, 3206782108, 4149453988, 2531553906, 1536934080, 3262494647, 484572669, 2923271059, 1783375398, 1517041206, 1098792767, 49674231, 1334037708, 1550332980, 4098991525, 886171109, 150598129, 2481090929, 1940642008, 1398944049, 1059722517, 201851908, 1385547719, 1699095331, 1587397571, 674240536, 2704774806, 252314885, 3039795866, 151914247, 908333586, 2602270848, 1038082786, 651029483, 1766729511, 3447698098, 2682942837, 454166793, 2652734339, 1951935532, 775166490, 758520603, 3000790638, 4004797018, 4217086112, 4137964114, 1299594043, 1639438038, 3464344499, 2068982057, 1054729187, 1901997871, 2534638724, 4121318227, 1757008337, 0, 750906861, 1614815264, 535035132, 3363418545, 3988151131, 3201591914, 1183697867, 3647454910, 1265776953, 3734260298, 3566750796, 3903871064, 1250283471, 1807470800, 717615087, 3847203498, 384695291, 3313910595, 3617213773, 1432761139, 2484176261, 3481945413, 283769337, 100925954, 2180939647, 4037038160, 1148730428, 3123027871, 3813386408, 4087501137, 4267549603, 3229630528, 2315620239, 2906624658, 3156319645, 1215313976, 82966005, 3747855548, 3245848246, 1974459098, 1665278241, 807407632, 451280895, 251524083, 1841287890, 1283575245, 337120268, 891687699, 801369324, 3787349855, 2721421207, 3431482436, 959321879, 1469301956, 4065699751, 2197585534, 1199193405, 2898814052, 3887750493, 724703513, 2514908019, 2696962144, 2551808385, 3516813135, 2141445340, 1715741218, 2119445034, 2872807568, 2198571144, 3398190662, 700968686, 3547052216, 1009259540, 2041044702, 3803995742, 487983883, 1991105499, 1004265696, 1449407026, 1316239930, 504629770, 3683797321, 168560134, 1816667172, 3837287516, 1570751170, 1857934291, 4014189740, 2797888098, 2822345105, 2754712981, 936633572, 2347923833, 852879335, 1133234376, 1500395319, 3084545389, 2348912013, 1689376213, 3533459022, 3762923945, 3034082412, 4205598294, 133428468, 634383082, 2949277029, 2398386810, 3913789102, 403703816, 3580869306, 2297460856, 1867130149, 1918643758, 607656988, 4049053350, 3346248884, 1368901318, 600565992, 2090982877, 2632479860, 557719327, 3717614411, 3697393085, 2249034635, 2232388234, 2430627952, 1115438654, 3295786421, 2865522278, 3633334344, 84280067, 33027830, 303828494, 2747425121, 1600795957, 4188952407, 3496589753, 2434238086, 1486471617, 658119965, 3106381470, 953803233, 334231800, 3005978776, 857870609, 3151128937, 1890179545, 2298973838, 2805175444, 3056442267, 574365214, 2450884487, 550103529, 1233637070, 4289353045, 2018519080, 2057691103, 2399374476, 4166623649, 2148108681, 387583245, 3664101311, 836232934, 3330556482, 3100665960, 3280093505, 2955516313, 2002398509, 287182607, 3413881008, 4238890068, 3597515707, 975967766],v = [1671808611, 2089089148, 2006576759, 2072901243, 4061003762, 1807603307, 1873927791, 3310653893, 810573872, 16974337, 1739181671, 729634347, 4263110654, 3613570519, 2883997099, 1989864566, 3393556426, 2191335298, 3376449993, 2106063485, 4195741690, 1508618841, 1204391495, 4027317232, 2917941677, 3563566036, 2734514082, 2951366063, 2629772188, 2767672228, 1922491506, 3227229120, 3082974647, 4246528509, 2477669779, 644500518, 911895606, 1061256767, 4144166391, 3427763148, 878471220, 2784252325, 3845444069, 4043897329, 1905517169, 3631459288, 827548209, 356461077, 67897348, 3344078279, 593839651, 3277757891, 405286936, 2527147926, 84871685, 2595565466, 118033927, 305538066, 2157648768, 3795705826, 3945188843, 661212711, 2999812018, 1973414517, 152769033, 2208177539, 745822252, 439235610, 455947803, 1857215598, 1525593178, 2700827552, 1391895634, 994932283, 3596728278, 3016654259, 695947817, 3812548067, 795958831, 2224493444, 1408607827, 3513301457, 0, 3979133421, 543178784, 4229948412, 2982705585, 1542305371, 1790891114, 3410398667, 3201918910, 961245753, 1256100938, 1289001036, 1491644504, 3477767631, 3496721360, 4012557807, 2867154858, 4212583931, 1137018435, 1305975373, 861234739, 2241073541, 1171229253, 4178635257, 33948674, 2139225727, 1357946960, 1011120188, 2679776671, 2833468328, 1374921297, 2751356323, 1086357568, 2408187279, 2460827538, 2646352285, 944271416, 4110742005, 3168756668, 3066132406, 3665145818, 560153121, 271589392, 4279952895, 4077846003, 3530407890, 3444343245, 202643468, 322250259, 3962553324, 1608629855, 2543990167, 1154254916, 389623319, 3294073796, 2817676711, 2122513534, 1028094525, 1689045092, 1575467613, 422261273, 1939203699, 1621147744, 2174228865, 1339137615, 3699352540, 577127458, 712922154, 2427141008, 2290289544, 1187679302, 3995715566, 3100863416, 339486740, 3732514782, 1591917662, 186455563, 3681988059, 3762019296, 844522546, 978220090, 169743370, 1239126601, 101321734, 611076132, 1558493276, 3260915650, 3547250131, 2901361580, 1655096418, 2443721105, 2510565781, 3828863972, 2039214713, 3878868455, 3359869896, 928607799, 1840765549, 2374762893, 3580146133, 1322425422, 2850048425, 1823791212, 1459268694, 4094161908, 3928346602, 1706019429, 2056189050, 2934523822, 135794696, 3134549946, 2022240376, 628050469, 779246638, 472135708, 2800834470, 3032970164, 3327236038, 3894660072, 3715932637, 1956440180, 522272287, 1272813131, 3185336765, 2340818315, 2323976074, 1888542832, 1044544574, 3049550261, 1722469478, 1222152264, 50660867, 4127324150, 236067854, 1638122081, 895445557, 1475980887, 3117443513, 2257655686, 3243809217, 489110045, 2662934430, 3778599393, 4162055160, 2561878936, 288563729, 1773916777, 3648039385, 2391345038, 2493985684, 2612407707, 505560094, 2274497927, 3911240169, 3460925390, 1442818645, 678973480, 3749357023, 2358182796, 2717407649, 2306869641, 219617805, 3218761151, 3862026214, 1120306242, 1756942440, 1103331905, 2578459033, 762796589, 252780047, 2966125488, 1425844308, 3151392187, 372911126],y = [1667474886, 2088535288, 2004326894, 2071694838, 4075949567, 1802223062, 1869591006, 3318043793, 808472672, 16843522, 1734846926, 724270422, 4278065639, 3621216949, 2880169549, 1987484396, 3402253711, 2189597983, 3385409673, 2105378810, 4210693615, 1499065266, 1195886990, 4042263547, 2913856577, 3570689971, 2728590687, 2947541573, 2627518243, 2762274643, 1920112356, 3233831835, 3082273397, 4261223649, 2475929149, 640051788, 909531756, 1061110142, 4160160501, 3435941763, 875846760, 2779116625, 3857003729, 4059105529, 1903268834, 3638064043, 825316194, 353713962, 67374088, 3351728789, 589522246, 3284360861, 404236336, 2526454071, 84217610, 2593830191, 117901582, 303183396, 2155911963, 3806477791, 3958056653, 656894286, 2998062463, 1970642922, 151591698, 2206440989, 741110872, 437923380, 454765878, 1852748508, 1515908788, 2694904667, 1381168804, 993742198, 3604373943, 3014905469, 690584402, 3823320797, 791638366, 2223281939, 1398011302, 3520161977, 0, 3991743681, 538992704, 4244381667, 2981218425, 1532751286, 1785380564, 3419096717, 3200178535, 960056178, 1246420628, 1280103576, 1482221744, 3486468741, 3503319995, 4025428677, 2863326543, 4227536621, 1128514950, 1296947098, 859002214, 2240123921, 1162203018, 4193849577, 33687044, 2139062782, 1347481760, 1010582648, 2678045221, 2829640523, 1364325282, 2745433693, 1077985408, 2408548869, 2459086143, 2644360225, 943212656, 4126475505, 3166494563, 3065430391, 3671750063, 555836226, 269496352, 4294908645, 4092792573, 3537006015, 3452783745, 202118168, 320025894, 3974901699, 1600119230, 2543297077, 1145359496, 387397934, 3301201811, 2812801621, 2122220284, 1027426170, 1684319432, 1566435258, 421079858, 1936954854, 1616945344, 2172753945, 1330631070, 3705438115, 572679748, 707427924, 2425400123, 2290647819, 1179044492, 4008585671, 3099120491, 336870440, 3739122087, 1583276732, 185277718, 3688593069, 3772791771, 842159716, 976899700, 168435220, 1229577106, 101059084, 606366792, 1549591736, 3267517855, 3553849021, 2897014595, 1650632388, 2442242105, 2509612081, 3840161747, 2038008818, 3890688725, 3368567691, 926374254, 1835907034, 2374863873, 3587531953, 1313788572, 2846482505, 1819063512, 1448540844, 4109633523, 3941213647, 1701162954, 2054852340, 2930698567, 134748176, 3132806511, 2021165296, 623210314, 774795868, 471606328, 2795958615, 3031746419, 3334885783, 3907527627, 3722280097, 1953799400, 522133822, 1263263126, 3183336545, 2341176845, 2324333839, 1886425312, 1044267644, 3048588401, 1718004428, 1212733584, 50529542, 4143317495, 235803164, 1633788866, 892690282, 1465383342, 3115962473, 2256965911, 3250673817, 488449850, 2661202215, 3789633753, 4177007595, 2560144171, 286339874, 1768537042, 3654906025, 2391705863, 2492770099, 2610673197, 505291324, 2273808917, 3924369609, 3469625735, 1431699370, 673740880, 3755965093, 2358021891, 2711746649, 2307489801, 218961690, 3217021541, 3873845719, 1111672452, 1751693520, 1094828930, 2576986153, 757954394, 252645662, 2964376443, 1414855848, 3149649517, 370555436],m = [1374988112, 2118214995, 437757123, 975658646, 1001089995, 530400753, 2902087851, 1273168787, 540080725, 2910219766, 2295101073, 4110568485, 1340463100, 3307916247, 641025152, 3043140495, 3736164937, 632953703, 1172967064, 1576976609, 3274667266, 2169303058, 2370213795, 1809054150, 59727847, 361929877, 3211623147, 2505202138, 3569255213, 1484005843, 1239443753, 2395588676, 1975683434, 4102977912, 2572697195, 666464733, 3202437046, 4035489047, 3374361702, 2110667444, 1675577880, 3843699074, 2538681184, 1649639237, 2976151520, 3144396420, 4269907996, 4178062228, 1883793496, 2403728665, 2497604743, 1383856311, 2876494627, 1917518562, 3810496343, 1716890410, 3001755655, 800440835, 2261089178, 3543599269, 807962610, 599762354, 33778362, 3977675356, 2328828971, 2809771154, 4077384432, 1315562145, 1708848333, 101039829, 3509871135, 3299278474, 875451293, 2733856160, 92987698, 2767645557, 193195065, 1080094634, 1584504582, 3178106961, 1042385657, 2531067453, 3711829422, 1306967366, 2438237621, 1908694277, 67556463, 1615861247, 429456164, 3602770327, 2302690252, 1742315127, 2968011453, 126454664, 3877198648, 2043211483, 2709260871, 2084704233, 4169408201, 0, 159417987, 841739592, 504459436, 1817866830, 4245618683, 260388950, 1034867998, 908933415, 168810852, 1750902305, 2606453969, 607530554, 202008497, 2472011535, 3035535058, 463180190, 2160117071, 1641816226, 1517767529, 470948374, 3801332234, 3231722213, 1008918595, 303765277, 235474187, 4069246893, 766945465, 337553864, 1475418501, 2943682380, 4003061179, 2743034109, 4144047775, 1551037884, 1147550661, 1543208500, 2336434550, 3408119516, 3069049960, 3102011747, 3610369226, 1113818384, 328671808, 2227573024, 2236228733, 3535486456, 2935566865, 3341394285, 496906059, 3702665459, 226906860, 2009195472, 733156972, 2842737049, 294930682, 1206477858, 2835123396, 2700099354, 1451044056, 573804783, 2269728455, 3644379585, 2362090238, 2564033334, 2801107407, 2776292904, 3669462566, 1068351396, 742039012, 1350078989, 1784663195, 1417561698, 4136440770, 2430122216, 775550814, 2193862645, 2673705150, 1775276924, 1876241833, 3475313331, 3366754619, 270040487, 3902563182, 3678124923, 3441850377, 1851332852, 3969562369, 2203032232, 3868552805, 2868897406, 566021896, 4011190502, 3135740889, 1248802510, 3936291284, 699432150, 832877231, 708780849, 3332740144, 899835584, 1951317047, 4236429990, 3767586992, 866637845, 4043610186, 1106041591, 2144161806, 395441711, 1984812685, 1139781709, 3433712980, 3835036895, 2664543715, 1282050075, 3240894392, 1181045119, 2640243204, 25965917, 4203181171, 4211818798, 3009879386, 2463879762, 3910161971, 1842759443, 2597806476, 933301370, 1509430414, 3943906441, 3467192302, 3076639029, 3776767469, 2051518780, 2631065433, 1441952575, 404016761, 1942435775, 1408749034, 1610459739, 3745345300, 2017778566, 3400528769, 3110650942, 941896748, 3265478751, 371049330, 3168937228, 675039627, 4279080257, 967311729, 135050206, 3635733660, 1683407248, 2076935265, 3576870512, 1215061108, 3501741890],g = [1347548327, 1400783205, 3273267108, 2520393566, 3409685355, 4045380933, 2880240216, 2471224067, 1428173050, 4138563181, 2441661558, 636813900, 4233094615, 3620022987, 2149987652, 2411029155, 1239331162, 1730525723, 2554718734, 3781033664, 46346101, 310463728, 2743944855, 3328955385, 3875770207, 2501218972, 3955191162, 3667219033, 768917123, 3545789473, 692707433, 1150208456, 1786102409, 2029293177, 1805211710, 3710368113, 3065962831, 401639597, 1724457132, 3028143674, 409198410, 2196052529, 1620529459, 1164071807, 3769721975, 2226875310, 486441376, 2499348523, 1483753576, 428819965, 2274680428, 3075636216, 598438867, 3799141122, 1474502543, 711349675, 129166120, 53458370, 2592523643, 2782082824, 4063242375, 2988687269, 3120694122, 1559041666, 730517276, 2460449204, 4042459122, 2706270690, 3446004468, 3573941694, 533804130, 2328143614, 2637442643, 2695033685, 839224033, 1973745387, 957055980, 2856345839, 106852767, 1371368976, 4181598602, 1033297158, 2933734917, 1179510461, 3046200461, 91341917, 1862534868, 4284502037, 605657339, 2547432937, 3431546947, 2003294622, 3182487618, 2282195339, 954669403, 3682191598, 1201765386, 3917234703, 3388507166, 0, 2198438022, 1211247597, 2887651696, 1315723890, 4227665663, 1443857720, 507358933, 657861945, 1678381017, 560487590, 3516619604, 975451694, 2970356327, 261314535, 3535072918, 2652609425, 1333838021, 2724322336, 1767536459, 370938394, 182621114, 3854606378, 1128014560, 487725847, 185469197, 2918353863, 3106780840, 3356761769, 2237133081, 1286567175, 3152976349, 4255350624, 2683765030, 3160175349, 3309594171, 878443390, 1988838185, 3704300486, 1756818940, 1673061617, 3403100636, 272786309, 1075025698, 545572369, 2105887268, 4174560061, 296679730, 1841768865, 1260232239, 4091327024, 3960309330, 3497509347, 1814803222, 2578018489, 4195456072, 575138148, 3299409036, 446754879, 3629546796, 4011996048, 3347532110, 3252238545, 4270639778, 915985419, 3483825537, 681933534, 651868046, 2755636671, 3828103837, 223377554, 2607439820, 1649704518, 3270937875, 3901806776, 1580087799, 4118987695, 3198115200, 2087309459, 2842678573, 3016697106, 1003007129, 2802849917, 1860738147, 2077965243, 164439672, 4100872472, 32283319, 2827177882, 1709610350, 2125135846, 136428751, 3874428392, 3652904859, 3460984630, 3572145929, 3593056380, 2939266226, 824852259, 818324884, 3224740454, 930369212, 2801566410, 2967507152, 355706840, 1257309336, 4148292826, 243256656, 790073846, 2373340630, 1296297904, 1422699085, 3756299780, 3818836405, 457992840, 3099667487, 2135319889, 77422314, 1560382517, 1945798516, 788204353, 1521706781, 1385356242, 870912086, 325965383, 2358957921, 2050466060, 2388260884, 2313884476, 4006521127, 901210569, 3990953189, 1014646705, 1503449823, 1062597235, 2031621326, 3212035895, 3931371469, 1533017514, 350174575, 2256028891, 2177544179, 1052338372, 741876788, 1606591296, 1914052035, 213705253, 2334669897, 1107234197, 1899603969, 3725069491, 2631447780, 2422494913, 1635502980, 1893020342, 1950903388, 1120974935],b = [2807058932, 1699970625, 2764249623, 1586903591, 1808481195, 1173430173, 1487645946, 59984867, 4199882800, 1844882806, 1989249228, 1277555970, 3623636965, 3419915562, 1149249077, 2744104290, 1514790577, 459744698, 244860394, 3235995134, 1963115311, 4027744588, 2544078150, 4190530515, 1608975247, 2627016082, 2062270317, 1507497298, 2200818878, 567498868, 1764313568, 3359936201, 2305455554, 2037970062, 1047239e3, 1910319033, 1337376481, 2904027272, 2892417312, 984907214, 1243112415, 830661914, 861968209, 2135253587, 2011214180, 2927934315, 2686254721, 731183368, 1750626376, 4246310725, 1820824798, 4172763771, 3542330227, 48394827, 2404901663, 2871682645, 671593195, 3254988725, 2073724613, 145085239, 2280796200, 2779915199, 1790575107, 2187128086, 472615631, 3029510009, 4075877127, 3802222185, 4107101658, 3201631749, 1646252340, 4270507174, 1402811438, 1436590835, 3778151818, 3950355702, 3963161475, 4020912224, 2667994737, 273792366, 2331590177, 104699613, 95345982, 3175501286, 2377486676, 1560637892, 3564045318, 369057872, 4213447064, 3919042237, 1137477952, 2658625497, 1119727848, 2340947849, 1530455833, 4007360968, 172466556, 266959938, 516552836, 0, 2256734592, 3980931627, 1890328081, 1917742170, 4294704398, 945164165, 3575528878, 958871085, 3647212047, 2787207260, 1423022939, 775562294, 1739656202, 3876557655, 2530391278, 2443058075, 3310321856, 547512796, 1265195639, 437656594, 3121275539, 719700128, 3762502690, 387781147, 218828297, 3350065803, 2830708150, 2848461854, 428169201, 122466165, 3720081049, 1627235199, 648017665, 4122762354, 1002783846, 2117360635, 695634755, 3336358691, 4234721005, 4049844452, 3704280881, 2232435299, 574624663, 287343814, 612205898, 1039717051, 840019705, 2708326185, 793451934, 821288114, 1391201670, 3822090177, 376187827, 3113855344, 1224348052, 1679968233, 2361698556, 1058709744, 752375421, 2431590963, 1321699145, 3519142200, 2734591178, 188127444, 2177869557, 3727205754, 2384911031, 3215212461, 2648976442, 2450346104, 3432737375, 1180849278, 331544205, 3102249176, 4150144569, 2952102595, 2159976285, 2474404304, 766078933, 313773861, 2570832044, 2108100632, 1668212892, 3145456443, 2013908262, 418672217, 3070356634, 2594734927, 1852171925, 3867060991, 3473416636, 3907448597, 2614737639, 919489135, 164948639, 2094410160, 2997825956, 590424639, 2486224549, 1723872674, 3157750862, 3399941250, 3501252752, 3625268135, 2555048196, 3673637356, 1343127501, 4130281361, 3599595085, 2957853679, 1297403050, 81781910, 3051593425, 2283490410, 532201772, 1367295589, 3926170974, 895287692, 1953757831, 1093597963, 492483431, 3528626907, 1446242576, 1192455638, 1636604631, 209336225, 344873464, 1015671571, 669961897, 3375740769, 3857572124, 2973530695, 3747192018, 1933530610, 3464042516, 935293895, 3454686199, 2858115069, 1863638845, 3683022916, 4085369519, 3292445032, 875313188, 1080017571, 3279033885, 621591778, 1233856572, 2504130317, 24197544, 3017672716, 3835484340, 3247465558, 2220981195, 3060847922, 1551124588, 1463996600],w = [4104605777, 1097159550, 396673818, 660510266, 2875968315, 2638606623, 4200115116, 3808662347, 821712160, 1986918061, 3430322568, 38544885, 3856137295, 718002117, 893681702, 1654886325, 2975484382, 3122358053, 3926825029, 4274053469, 796197571, 1290801793, 1184342925, 3556361835, 2405426947, 2459735317, 1836772287, 1381620373, 3196267988, 1948373848, 3764988233, 3385345166, 3263785589, 2390325492, 1480485785, 3111247143, 3780097726, 2293045232, 548169417, 3459953789, 3746175075, 439452389, 1362321559, 1400849762, 1685577905, 1806599355, 2174754046, 137073913, 1214797936, 1174215055, 3731654548, 2079897426, 1943217067, 1258480242, 529487843, 1437280870, 3945269170, 3049390895, 3313212038, 923313619, 679998e3, 3215307299, 57326082, 377642221, 3474729866, 2041877159, 133361907, 1776460110, 3673476453, 96392454, 878845905, 2801699524, 777231668, 4082475170, 2330014213, 4142626212, 2213296395, 1626319424, 1906247262, 1846563261, 562755902, 3708173718, 1040559837, 3871163981, 1418573201, 3294430577, 114585348, 1343618912, 2566595609, 3186202582, 1078185097, 3651041127, 3896688048, 2307622919, 425408743, 3371096953, 2081048481, 1108339068, 2216610296, 0, 2156299017, 736970802, 292596766, 1517440620, 251657213, 2235061775, 2933202493, 758720310, 265905162, 1554391400, 1532285339, 908999204, 174567692, 1474760595, 4002861748, 2610011675, 3234156416, 3693126241, 2001430874, 303699484, 2478443234, 2687165888, 585122620, 454499602, 151849742, 2345119218, 3064510765, 514443284, 4044981591, 1963412655, 2581445614, 2137062819, 19308535, 1928707164, 1715193156, 4219352155, 1126790795, 600235211, 3992742070, 3841024952, 836553431, 1669664834, 2535604243, 3323011204, 1243905413, 3141400786, 4180808110, 698445255, 2653899549, 2989552604, 2253581325, 3252932727, 3004591147, 1891211689, 2487810577, 3915653703, 4237083816, 4030667424, 2100090966, 865136418, 1229899655, 953270745, 3399679628, 3557504664, 4118925222, 2061379749, 3079546586, 2915017791, 983426092, 2022837584, 1607244650, 2118541908, 2366882550, 3635996816, 972512814, 3283088770, 1568718495, 3499326569, 3576539503, 621982671, 2895723464, 410887952, 2623762152, 1002142683, 645401037, 1494807662, 2595684844, 1335535747, 2507040230, 4293295786, 3167684641, 367585007, 3885750714, 1865862730, 2668221674, 2960971305, 2763173681, 1059270954, 2777952454, 2724642869, 1320957812, 2194319100, 2429595872, 2815956275, 77089521, 3973773121, 3444575871, 2448830231, 1305906550, 4021308739, 2857194700, 2516901860, 3518358430, 1787304780, 740276417, 1699839814, 1592394909, 2352307457, 2272556026, 188821243, 1729977011, 3687994002, 274084841, 3594982253, 3613494426, 2701949495, 4162096729, 322734571, 2837966542, 1640576439, 484830689, 1202797690, 3537852828, 4067639125, 349075736, 3342319475, 4157467219, 4255800159, 1030690015, 1155237496, 2951971274, 1757691577, 607398968, 2738905026, 499347990, 3794078908, 1011452712, 227885567, 2818666809, 213114376, 3034881240, 1455525988, 3414450555, 850817237, 1817998408, 3092726480],_ = [0, 235474187, 470948374, 303765277, 941896748, 908933415, 607530554, 708780849, 1883793496, 2118214995, 1817866830, 1649639237, 1215061108, 1181045119, 1417561698, 1517767529, 3767586992, 4003061179, 4236429990, 4069246893, 3635733660, 3602770327, 3299278474, 3400528769, 2430122216, 2664543715, 2362090238, 2193862645, 2835123396, 2801107407, 3035535058, 3135740889, 3678124923, 3576870512, 3341394285, 3374361702, 3810496343, 3977675356, 4279080257, 4043610186, 2876494627, 2776292904, 3076639029, 3110650942, 2472011535, 2640243204, 2403728665, 2169303058, 1001089995, 899835584, 666464733, 699432150, 59727847, 226906860, 530400753, 294930682, 1273168787, 1172967064, 1475418501, 1509430414, 1942435775, 2110667444, 1876241833, 1641816226, 2910219766, 2743034109, 2976151520, 3211623147, 2505202138, 2606453969, 2302690252, 2269728455, 3711829422, 3543599269, 3240894392, 3475313331, 3843699074, 3943906441, 4178062228, 4144047775, 1306967366, 1139781709, 1374988112, 1610459739, 1975683434, 2076935265, 1775276924, 1742315127, 1034867998, 866637845, 566021896, 800440835, 92987698, 193195065, 429456164, 395441711, 1984812685, 2017778566, 1784663195, 1683407248, 1315562145, 1080094634, 1383856311, 1551037884, 101039829, 135050206, 437757123, 337553864, 1042385657, 807962610, 573804783, 742039012, 2531067453, 2564033334, 2328828971, 2227573024, 2935566865, 2700099354, 3001755655, 3168937228, 3868552805, 3902563182, 4203181171, 4102977912, 3736164937, 3501741890, 3265478751, 3433712980, 1106041591, 1340463100, 1576976609, 1408749034, 2043211483, 2009195472, 1708848333, 1809054150, 832877231, 1068351396, 766945465, 599762354, 159417987, 126454664, 361929877, 463180190, 2709260871, 2943682380, 3178106961, 3009879386, 2572697195, 2538681184, 2236228733, 2336434550, 3509871135, 3745345300, 3441850377, 3274667266, 3910161971, 3877198648, 4110568485, 4211818798, 2597806476, 2497604743, 2261089178, 2295101073, 2733856160, 2902087851, 3202437046, 2968011453, 3936291284, 3835036895, 4136440770, 4169408201, 3535486456, 3702665459, 3467192302, 3231722213, 2051518780, 1951317047, 1716890410, 1750902305, 1113818384, 1282050075, 1584504582, 1350078989, 168810852, 67556463, 371049330, 404016761, 841739592, 1008918595, 775550814, 540080725, 3969562369, 3801332234, 4035489047, 4269907996, 3569255213, 3669462566, 3366754619, 3332740144, 2631065433, 2463879762, 2160117071, 2395588676, 2767645557, 2868897406, 3102011747, 3069049960, 202008497, 33778362, 270040487, 504459436, 875451293, 975658646, 675039627, 641025152, 2084704233, 1917518562, 1615861247, 1851332852, 1147550661, 1248802510, 1484005843, 1451044056, 933301370, 967311729, 733156972, 632953703, 260388950, 25965917, 328671808, 496906059, 1206477858, 1239443753, 1543208500, 1441952575, 2144161806, 1908694277, 1675577880, 1842759443, 3610369226, 3644379585, 3408119516, 3307916247, 4011190502, 3776767469, 4077384432, 4245618683, 2809771154, 2842737049, 3144396420, 3043140495, 2673705150, 2438237621, 2203032232, 2370213795],M = [0, 185469197, 370938394, 487725847, 741876788, 657861945, 975451694, 824852259, 1483753576, 1400783205, 1315723890, 1164071807, 1950903388, 2135319889, 1649704518, 1767536459, 2967507152, 3152976349, 2801566410, 2918353863, 2631447780, 2547432937, 2328143614, 2177544179, 3901806776, 3818836405, 4270639778, 4118987695, 3299409036, 3483825537, 3535072918, 3652904859, 2077965243, 1893020342, 1841768865, 1724457132, 1474502543, 1559041666, 1107234197, 1257309336, 598438867, 681933534, 901210569, 1052338372, 261314535, 77422314, 428819965, 310463728, 3409685355, 3224740454, 3710368113, 3593056380, 3875770207, 3960309330, 4045380933, 4195456072, 2471224067, 2554718734, 2237133081, 2388260884, 3212035895, 3028143674, 2842678573, 2724322336, 4138563181, 4255350624, 3769721975, 3955191162, 3667219033, 3516619604, 3431546947, 3347532110, 2933734917, 2782082824, 3099667487, 3016697106, 2196052529, 2313884476, 2499348523, 2683765030, 1179510461, 1296297904, 1347548327, 1533017514, 1786102409, 1635502980, 2087309459, 2003294622, 507358933, 355706840, 136428751, 53458370, 839224033, 957055980, 605657339, 790073846, 2373340630, 2256028891, 2607439820, 2422494913, 2706270690, 2856345839, 3075636216, 3160175349, 3573941694, 3725069491, 3273267108, 3356761769, 4181598602, 4063242375, 4011996048, 3828103837, 1033297158, 915985419, 730517276, 545572369, 296679730, 446754879, 129166120, 213705253, 1709610350, 1860738147, 1945798516, 2029293177, 1239331162, 1120974935, 1606591296, 1422699085, 4148292826, 4233094615, 3781033664, 3931371469, 3682191598, 3497509347, 3446004468, 3328955385, 2939266226, 2755636671, 3106780840, 2988687269, 2198438022, 2282195339, 2501218972, 2652609425, 1201765386, 1286567175, 1371368976, 1521706781, 1805211710, 1620529459, 2105887268, 1988838185, 533804130, 350174575, 164439672, 46346101, 870912086, 954669403, 636813900, 788204353, 2358957921, 2274680428, 2592523643, 2441661558, 2695033685, 2880240216, 3065962831, 3182487618, 3572145929, 3756299780, 3270937875, 3388507166, 4174560061, 4091327024, 4006521127, 3854606378, 1014646705, 930369212, 711349675, 560487590, 272786309, 457992840, 106852767, 223377554, 1678381017, 1862534868, 1914052035, 2031621326, 1211247597, 1128014560, 1580087799, 1428173050, 32283319, 182621114, 401639597, 486441376, 768917123, 651868046, 1003007129, 818324884, 1503449823, 1385356242, 1333838021, 1150208456, 1973745387, 2125135846, 1673061617, 1756818940, 2970356327, 3120694122, 2802849917, 2887651696, 2637442643, 2520393566, 2334669897, 2149987652, 3917234703, 3799141122, 4284502037, 4100872472, 3309594171, 3460984630, 3545789473, 3629546796, 2050466060, 1899603969, 1814803222, 1730525723, 1443857720, 1560382517, 1075025698, 1260232239, 575138148, 692707433, 878443390, 1062597235, 243256656, 91341917, 409198410, 325965383, 3403100636, 3252238545, 3704300486, 3620022987, 3874428392, 3990953189, 4042459122, 4227665663, 2460449204, 2578018489, 2226875310, 2411029155, 3198115200, 3046200461, 2827177882, 2743944855],A = [0, 218828297, 437656594, 387781147, 875313188, 958871085, 775562294, 590424639, 1750626376, 1699970625, 1917742170, 2135253587, 1551124588, 1367295589, 1180849278, 1265195639, 3501252752, 3720081049, 3399941250, 3350065803, 3835484340, 3919042237, 4270507174, 4085369519, 3102249176, 3051593425, 2734591178, 2952102595, 2361698556, 2177869557, 2530391278, 2614737639, 3145456443, 3060847922, 2708326185, 2892417312, 2404901663, 2187128086, 2504130317, 2555048196, 3542330227, 3727205754, 3375740769, 3292445032, 3876557655, 3926170974, 4246310725, 4027744588, 1808481195, 1723872674, 1910319033, 2094410160, 1608975247, 1391201670, 1173430173, 1224348052, 59984867, 244860394, 428169201, 344873464, 935293895, 984907214, 766078933, 547512796, 1844882806, 1627235199, 2011214180, 2062270317, 1507497298, 1423022939, 1137477952, 1321699145, 95345982, 145085239, 532201772, 313773861, 830661914, 1015671571, 731183368, 648017665, 3175501286, 2957853679, 2807058932, 2858115069, 2305455554, 2220981195, 2474404304, 2658625497, 3575528878, 3625268135, 3473416636, 3254988725, 3778151818, 3963161475, 4213447064, 4130281361, 3599595085, 3683022916, 3432737375, 3247465558, 3802222185, 4020912224, 4172763771, 4122762354, 3201631749, 3017672716, 2764249623, 2848461854, 2331590177, 2280796200, 2431590963, 2648976442, 104699613, 188127444, 472615631, 287343814, 840019705, 1058709744, 671593195, 621591778, 1852171925, 1668212892, 1953757831, 2037970062, 1514790577, 1463996600, 1080017571, 1297403050, 3673637356, 3623636965, 3235995134, 3454686199, 4007360968, 3822090177, 4107101658, 4190530515, 2997825956, 3215212461, 2830708150, 2779915199, 2256734592, 2340947849, 2627016082, 2443058075, 172466556, 122466165, 273792366, 492483431, 1047239e3, 861968209, 612205898, 695634755, 1646252340, 1863638845, 2013908262, 1963115311, 1446242576, 1530455833, 1277555970, 1093597963, 1636604631, 1820824798, 2073724613, 1989249228, 1436590835, 1487645946, 1337376481, 1119727848, 164948639, 81781910, 331544205, 516552836, 1039717051, 821288114, 669961897, 719700128, 2973530695, 3157750862, 2871682645, 2787207260, 2232435299, 2283490410, 2667994737, 2450346104, 3647212047, 3564045318, 3279033885, 3464042516, 3980931627, 3762502690, 4150144569, 4199882800, 3070356634, 3121275539, 2904027272, 2686254721, 2200818878, 2384911031, 2570832044, 2486224549, 3747192018, 3528626907, 3310321856, 3359936201, 3950355702, 3867060991, 4049844452, 4234721005, 1739656202, 1790575107, 2108100632, 1890328081, 1402811438, 1586903591, 1233856572, 1149249077, 266959938, 48394827, 369057872, 418672217, 1002783846, 919489135, 567498868, 752375421, 209336225, 24197544, 376187827, 459744698, 945164165, 895287692, 574624663, 793451934, 1679968233, 1764313568, 2117360635, 1933530610, 1343127501, 1560637892, 1243112415, 1192455638, 3704280881, 3519142200, 3336358691, 3419915562, 3907448597, 3857572124, 4075877127, 4294704398, 3029510009, 3113855344, 2927934315, 2744104290, 2159976285, 2377486676, 2594734927, 2544078150],E = [0, 151849742, 303699484, 454499602, 607398968, 758720310, 908999204, 1059270954, 1214797936, 1097159550, 1517440620, 1400849762, 1817998408, 1699839814, 2118541908, 2001430874, 2429595872, 2581445614, 2194319100, 2345119218, 3034881240, 3186202582, 2801699524, 2951971274, 3635996816, 3518358430, 3399679628, 3283088770, 4237083816, 4118925222, 4002861748, 3885750714, 1002142683, 850817237, 698445255, 548169417, 529487843, 377642221, 227885567, 77089521, 1943217067, 2061379749, 1640576439, 1757691577, 1474760595, 1592394909, 1174215055, 1290801793, 2875968315, 2724642869, 3111247143, 2960971305, 2405426947, 2253581325, 2638606623, 2487810577, 3808662347, 3926825029, 4044981591, 4162096729, 3342319475, 3459953789, 3576539503, 3693126241, 1986918061, 2137062819, 1685577905, 1836772287, 1381620373, 1532285339, 1078185097, 1229899655, 1040559837, 923313619, 740276417, 621982671, 439452389, 322734571, 137073913, 19308535, 3871163981, 4021308739, 4104605777, 4255800159, 3263785589, 3414450555, 3499326569, 3651041127, 2933202493, 2815956275, 3167684641, 3049390895, 2330014213, 2213296395, 2566595609, 2448830231, 1305906550, 1155237496, 1607244650, 1455525988, 1776460110, 1626319424, 2079897426, 1928707164, 96392454, 213114376, 396673818, 514443284, 562755902, 679998e3, 865136418, 983426092, 3708173718, 3557504664, 3474729866, 3323011204, 4180808110, 4030667424, 3945269170, 3794078908, 2507040230, 2623762152, 2272556026, 2390325492, 2975484382, 3092726480, 2738905026, 2857194700, 3973773121, 3856137295, 4274053469, 4157467219, 3371096953, 3252932727, 3673476453, 3556361835, 2763173681, 2915017791, 3064510765, 3215307299, 2156299017, 2307622919, 2459735317, 2610011675, 2081048481, 1963412655, 1846563261, 1729977011, 1480485785, 1362321559, 1243905413, 1126790795, 878845905, 1030690015, 645401037, 796197571, 274084841, 425408743, 38544885, 188821243, 3613494426, 3731654548, 3313212038, 3430322568, 4082475170, 4200115116, 3780097726, 3896688048, 2668221674, 2516901860, 2366882550, 2216610296, 3141400786, 2989552604, 2837966542, 2687165888, 1202797690, 1320957812, 1437280870, 1554391400, 1669664834, 1787304780, 1906247262, 2022837584, 265905162, 114585348, 499347990, 349075736, 736970802, 585122620, 972512814, 821712160, 2595684844, 2478443234, 2293045232, 2174754046, 3196267988, 3079546586, 2895723464, 2777952454, 3537852828, 3687994002, 3234156416, 3385345166, 4142626212, 4293295786, 3841024952, 3992742070, 174567692, 57326082, 410887952, 292596766, 777231668, 660510266, 1011452712, 893681702, 1108339068, 1258480242, 1343618912, 1494807662, 1715193156, 1865862730, 1948373848, 2100090966, 2701949495, 2818666809, 3004591147, 3122358053, 2235061775, 2352307457, 2535604243, 2653899549, 3915653703, 3764988233, 4219352155, 4067639125, 3444575871, 3294430577, 3746175075, 3594982253, 836553431, 953270745, 600235211, 718002117, 367585007, 484830689, 133361907, 251657213, 2041877159, 1891211689, 1806599355, 1654886325, 1568718495, 1418573201, 1335535747, 1184342925];function S(e) {for (var t = [], r = 0; r < e.length; r += 4) {t.push(e[r] << 24 | e[r + 1] << 16 | e[r + 2] << 8 | e[r + 3]);}return t;}var k = function k(e) {if (!(this instanceof k)) throw Error(\"AES must be instanitated with `new`\");Object.defineProperty(this, \"key\", { value: o(e, !0) }), this._prepare();};k.prototype._prepare = function () {var e = f[this.key.length];if (null == e) throw new Error(\"invalid key size (must be 16, 24 or 32 bytes)\");this._Ke = [], this._Kd = [];for (var t = 0; t <= e; t++) {this._Ke.push([0, 0, 0, 0]), this._Kd.push([0, 0, 0, 0]);}var r,n = 4 * (e + 1),i = this.key.length / 4,o = S(this.key);for (t = 0; t < i; t++) {r = t >> 2, this._Ke[r][t % 4] = o[t], this._Kd[e - r][t % 4] = o[t];}for (var s, a = 0, u = i; u < n;) {if (s = o[i - 1], o[0] ^= d[s >> 16 & 255] << 24 ^ d[s >> 8 & 255] << 16 ^ d[255 & s] << 8 ^ d[s >> 24 & 255] ^ c[a] << 24, a += 1, 8 != i) for (t = 1; t < i; t++) {o[t] ^= o[t - 1];} else {for (t = 1; t < i / 2; t++) {o[t] ^= o[t - 1];}s = o[i / 2 - 1], o[i / 2] ^= d[255 & s] ^ d[s >> 8 & 255] << 8 ^ d[s >> 16 & 255] << 16 ^ d[s >> 24 & 255] << 24;for (t = i / 2 + 1; t < i; t++) {o[t] ^= o[t - 1];}}for (t = 0; t < i && u < n;) {l = u >> 2, h = u % 4, this._Ke[l][h] = o[t], this._Kd[e - l][h] = o[t++], u++;}}for (var l = 1; l < e; l++) {for (var h = 0; h < 4; h++) {s = this._Kd[l][h], this._Kd[l][h] = _[s >> 24 & 255] ^ M[s >> 16 & 255] ^ A[s >> 8 & 255] ^ E[255 & s];}}}, k.prototype.encrypt = function (e) {if (16 != e.length) throw new Error(\"invalid plaintext size (must be 16 bytes)\");for (var t = this._Ke.length - 1, r = [0, 0, 0, 0], n = S(e), i = 0; i < 4; i++) {n[i] ^= this._Ke[0][i];}for (var o = 1; o < t; o++) {for (i = 0; i < 4; i++) {r[i] = h[n[i] >> 24 & 255] ^ p[n[(i + 1) % 4] >> 16 & 255] ^ v[n[(i + 2) % 4] >> 8 & 255] ^ y[255 & n[(i + 3) % 4]] ^ this._Ke[o][i];}n = r.slice();}var s,a = u(16);for (i = 0; i < 4; i++) {s = this._Ke[t][i], a[4 * i] = 255 & (d[n[i] >> 24 & 255] ^ s >> 24), a[4 * i + 1] = 255 & (d[n[(i + 1) % 4] >> 16 & 255] ^ s >> 16), a[4 * i + 2] = 255 & (d[n[(i + 2) % 4] >> 8 & 255] ^ s >> 8), a[4 * i + 3] = 255 & (d[255 & n[(i + 3) % 4]] ^ s);}return a;}, k.prototype.decrypt = function (e) {if (16 != e.length) throw new Error(\"invalid ciphertext size (must be 16 bytes)\");for (var t = this._Kd.length - 1, r = [0, 0, 0, 0], n = S(e), i = 0; i < 4; i++) {n[i] ^= this._Kd[0][i];}for (var o = 1; o < t; o++) {for (i = 0; i < 4; i++) {r[i] = m[n[i] >> 24 & 255] ^ g[n[(i + 3) % 4] >> 16 & 255] ^ b[n[(i + 2) % 4] >> 8 & 255] ^ w[255 & n[(i + 1) % 4]] ^ this._Kd[o][i];}n = r.slice();}var s,a = u(16);for (i = 0; i < 4; i++) {s = this._Kd[t][i], a[4 * i] = 255 & (l[n[i] >> 24 & 255] ^ s >> 24), a[4 * i + 1] = 255 & (l[n[(i + 3) % 4] >> 16 & 255] ^ s >> 16), a[4 * i + 2] = 255 & (l[n[(i + 2) % 4] >> 8 & 255] ^ s >> 8), a[4 * i + 3] = 255 & (l[255 & n[(i + 1) % 4]] ^ s);}return a;};var N = function N(e) {if (!(this instanceof N)) throw Error(\"AES must be instanitated with `new`\");this.description = \"Electronic Code Block\", this.name = \"ecb\", this._aes = new k(e);};N.prototype.encrypt = function (e) {if ((e = o(e)).length % 16 != 0) throw new Error(\"invalid plaintext size (must be multiple of 16 bytes)\");for (var t = u(e.length), r = u(16), n = 0; n < e.length; n += 16) {s(e, r, 0, n, n + 16), s(r = this._aes.encrypt(r), t, n);}return t;}, N.prototype.decrypt = function (e) {if ((e = o(e)).length % 16 != 0) throw new Error(\"invalid ciphertext size (must be multiple of 16 bytes)\");for (var t = u(e.length), r = u(16), n = 0; n < e.length; n += 16) {s(e, r, 0, n, n + 16), s(r = this._aes.decrypt(r), t, n);}return t;};var P = function P(e, t) {if (!(this instanceof P)) throw Error(\"AES must be instanitated with `new`\");if (this.description = \"Cipher Block Chaining\", this.name = \"cbc\", t) {if (16 != t.length) throw new Error(\"invalid initialation vector size (must be 16 bytes)\");} else t = u(16);this._lastCipherblock = o(t, !0), this._aes = new k(e);};P.prototype.encrypt = function (e) {if ((e = o(e)).length % 16 != 0) throw new Error(\"invalid plaintext size (must be multiple of 16 bytes)\");for (var t = u(e.length), r = u(16), n = 0; n < e.length; n += 16) {s(e, r, 0, n, n + 16);for (var i = 0; i < 16; i++) {r[i] ^= this._lastCipherblock[i];}this._lastCipherblock = this._aes.encrypt(r), s(this._lastCipherblock, t, n);}return t;}, P.prototype.decrypt = function (e) {if ((e = o(e)).length % 16 != 0) throw new Error(\"invalid ciphertext size (must be multiple of 16 bytes)\");for (var t = u(e.length), r = u(16), n = 0; n < e.length; n += 16) {s(e, r, 0, n, n + 16), r = this._aes.decrypt(r);for (var i = 0; i < 16; i++) {t[n + i] = r[i] ^ this._lastCipherblock[i];}s(e, this._lastCipherblock, 0, n, n + 16);}return t;};var x = function x(e, t, r) {if (!(this instanceof x)) throw Error(\"AES must be instanitated with `new`\");if (this.description = \"Cipher Feedback\", this.name = \"cfb\", t) {if (16 != t.length) throw new Error(\"invalid initialation vector size (must be 16 size)\");} else t = u(16);r = r || 1, this.segmentSize = r, this._shiftRegister = o(t, !0), this._aes = new k(e);};x.prototype.encrypt = function (e) {if (e.length % this.segmentSize != 0) throw new Error(\"invalid plaintext size (must be segmentSize bytes)\");for (var t, r = o(e, !0), n = 0; n < r.length; n += this.segmentSize) {t = this._aes.encrypt(this._shiftRegister);for (var i = 0; i < this.segmentSize; i++) {r[n + i] ^= t[i];}s(this._shiftRegister, this._shiftRegister, 0, this.segmentSize), s(r, this._shiftRegister, 16 - this.segmentSize, n, n + this.segmentSize);}return r;}, x.prototype.decrypt = function (e) {if (e.length % this.segmentSize != 0) throw new Error(\"invalid ciphertext size (must be segmentSize bytes)\");for (var t, r = o(e, !0), n = 0; n < r.length; n += this.segmentSize) {t = this._aes.encrypt(this._shiftRegister);for (var i = 0; i < this.segmentSize; i++) {r[n + i] ^= t[i];}s(this._shiftRegister, this._shiftRegister, 0, this.segmentSize), s(e, this._shiftRegister, 16 - this.segmentSize, n, n + this.segmentSize);}return r;};var I = function I(e, t) {if (!(this instanceof I)) throw Error(\"AES must be instanitated with `new`\");if (this.description = \"Output Feedback\", this.name = \"ofb\", t) {if (16 != t.length) throw new Error(\"invalid initialation vector size (must be 16 bytes)\");} else t = u(16);this._lastPrecipher = o(t, !0), this._lastPrecipherIndex = 16, this._aes = new k(e);};I.prototype.encrypt = function (e) {for (var t = o(e, !0), r = 0; r < t.length; r++) {16 === this._lastPrecipherIndex && (this._lastPrecipher = this._aes.encrypt(this._lastPrecipher), this._lastPrecipherIndex = 0), t[r] ^= this._lastPrecipher[this._lastPrecipherIndex++];}return t;}, I.prototype.decrypt = I.prototype.encrypt;var T = function T(e) {if (!(this instanceof T)) throw Error(\"Counter must be instanitated with `new`\");0 === e || e || (e = 1), \"number\" == typeof e ? (this._counter = u(16), this.setValue(e)) : this.setBytes(e);};T.prototype.setValue = function (e) {if (\"number\" != typeof e || parseInt(e) != e) throw new Error(\"invalid counter value (must be an integer)\");for (var t = 15; 0 <= t; --t) {this._counter[t] = e % 256, e >>= 8;}}, T.prototype.setBytes = function (e) {if (16 != (e = o(e, !0)).length) throw new Error(\"invalid counter bytes size (must be 16 bytes)\");this._counter = e;}, T.prototype.increment = function () {for (var e = 15; 0 <= e; e--) {if (255 !== this._counter[e]) {this._counter[e]++;break;}this._counter[e] = 0;}};var R = function R(e, t) {if (!(this instanceof R)) throw Error(\"AES must be instanitated with `new`\");this.description = \"Counter\", this.name = \"ctr\", t instanceof T || (t = new T(t)), this._counter = t, this._remainingCounter = null, this._remainingCounterIndex = 16, this._aes = new k(e);};R.prototype.encrypt = function (e) {for (var t = o(e, !0), r = 0; r < t.length; r++) {16 === this._remainingCounterIndex && (this._remainingCounter = this._aes.encrypt(this._counter._counter), this._remainingCounterIndex = 0, this._counter.increment()), t[r] ^= this._remainingCounter[this._remainingCounterIndex++];}return t;}, R.prototype.decrypt = R.prototype.encrypt;var O = { AES: k, Counter: T, ModeOfOperation: { ecb: N, cbc: P, cfb: x, ofb: I, ctr: R }, utils: { hex: a, utf8: t }, padding: { pkcs7: { pad: function pad(e) {var t = 16 - (e = o(e, !0)).length % 16,r = u(e.length + t);s(e, r);for (var n = e.length; n < r.length; n++) {r[n] = t;}return r;}, strip: function strip(e) {if ((e = o(e, !0)).length < 16) throw new Error(\"PKCS#7 invalid length\");var t = e[e.length - 1];if (16 < t) throw new Error(\"PKCS#7 padding byte out of range\");for (var r = e.length - t, n = 0; n < t; n++) {if (e[r + n] !== t) throw new Error(\"PKCS#7 invalid padding byte\");}var i = u(r);return s(e, i, 0, 0, r), i;} } }, _arrayTest: { coerceArray: o, createArray: u, copyArray: s } };void 0 !== B ? C.exports = O : (e.aesjs && (O._aesjs = e.aesjs), e.aesjs = O);}(this);}, {}], 9: [function (A, e, t) {!function (e, t) {\"use strict\";function y(e, t) {if (!e) throw new Error(t || \"Assertion failed\");}function r(e, t) {e.super_ = t;function r() {}r.prototype = t.prototype, e.prototype = new r(), e.prototype.constructor = e;}function m(e, t, r) {if (m.isBN(e)) return e;this.negative = 0, this.words = null, this.length = 0, (this.red = null) !== e && (\"le\" !== t && \"be\" !== t || (r = t, t = 10), this._init(e || 0, t || 10, r || \"be\"));}var n;\"object\" == typeof e ? e.exports = m : t.BN = m, (m.BN = m).wordSize = 26;try {n = A(\"buffer\").Buffer;} catch (e) {}function s(e, t, r) {for (var n = 0, i = Math.min(e.length, r), o = t; o < i; o++) {var s = e.charCodeAt(o) - 48;n <<= 4, n |= 49 <= s && s <= 54 ? s - 49 + 10 : 17 <= s && s <= 22 ? s - 17 + 10 : 15 & s;}return n;}function f(e, t, r, n) {for (var i = 0, o = Math.min(e.length, r), s = t; s < o; s++) {var a = e.charCodeAt(s) - 48;i *= n, i += 49 <= a ? a - 49 + 10 : 17 <= a ? a - 17 + 10 : a;}return i;}m.isBN = function (e) {return e instanceof m || null !== e && \"object\" == typeof e && e.constructor.wordSize === m.wordSize && Array.isArray(e.words);}, m.max = function (e, t) {return 0 < e.cmp(t) ? e : t;}, m.min = function (e, t) {return e.cmp(t) < 0 ? e : t;}, m.prototype._init = function (e, t, r) {if (\"number\" == typeof e) return this._initNumber(e, t, r);if (\"object\" == typeof e) return this._initArray(e, t, r);\"hex\" === t && (t = 16), y(t === (0 | t) && 2 <= t && t <= 36);var n = 0;\"-\" === (e = e.toString().replace(/\\s+/g, \"\"))[0] && n++, 16 === t ? this._parseHex(e, n) : this._parseBase(e, t, n), \"-\" === e[0] && (this.negative = 1), this.strip(), \"le\" === r && this._initArray(this.toArray(), t, r);}, m.prototype._initNumber = function (e, t, r) {e < 0 && (this.negative = 1, e = -e), e < 67108864 ? (this.words = [67108863 & e], this.length = 1) : e < 4503599627370496 ? (this.words = [67108863 & e, e / 67108864 & 67108863], this.length = 2) : (y(e < 9007199254740992), this.words = [67108863 & e, e / 67108864 & 67108863, 1], this.length = 3), \"le\" === r && this._initArray(this.toArray(), t, r);}, m.prototype._initArray = function (e, t, r) {if (y(\"number\" == typeof e.length), e.length <= 0) return this.words = [0], this.length = 1, this;this.length = Math.ceil(e.length / 3), this.words = new Array(this.length);for (var n = 0; n < this.length; n++) {this.words[n] = 0;}var i,o,s = 0;if (\"be\" === r) for (n = e.length - 1, i = 0; 0 <= n; n -= 3) {o = e[n] | e[n - 1] << 8 | e[n - 2] << 16, this.words[i] |= o << s & 67108863, this.words[i + 1] = o >>> 26 - s & 67108863, 26 <= (s += 24) && (s -= 26, i++);} else if (\"le\" === r) for (i = n = 0; n < e.length; n += 3) {o = e[n] | e[n + 1] << 8 | e[n + 2] << 16, this.words[i] |= o << s & 67108863, this.words[i + 1] = o >>> 26 - s & 67108863, 26 <= (s += 24) && (s -= 26, i++);}return this.strip();}, m.prototype._parseHex = function (e, t) {this.length = Math.ceil((e.length - t) / 6), this.words = new Array(this.length);for (var r = 0; r < this.length; r++) {this.words[r] = 0;}var n,i,o = 0;for (r = e.length - 6, n = 0; t <= r; r -= 6) {i = s(e, r, r + 6), this.words[n] |= i << o & 67108863, this.words[n + 1] |= i >>> 26 - o & 4194303, 26 <= (o += 24) && (o -= 26, n++);}r + 6 !== t && (i = s(e, t, r + 6), this.words[n] |= i << o & 67108863, this.words[n + 1] |= i >>> 26 - o & 4194303), this.strip();}, m.prototype._parseBase = function (e, t, r) {this.words = [0];for (var n = 0, i = this.length = 1; i <= 67108863; i *= t) {n++;}n--, i = i / t | 0;for (var o = e.length - r, s = o % n, a = Math.min(o, o - s) + r, u = 0, l = r; l < a; l += n) {u = f(e, l, l + n, t), this.imuln(i), this.words[0] + u < 67108864 ? this.words[0] += u : this._iaddn(u);}if (0 != s) {var h = 1;for (u = f(e, l, e.length, t), l = 0; l < s; l++) {h *= t;}this.imuln(h), this.words[0] + u < 67108864 ? this.words[0] += u : this._iaddn(u);}}, m.prototype.copy = function (e) {e.words = new Array(this.length);for (var t = 0; t < this.length; t++) {e.words[t] = this.words[t];}e.length = this.length, e.negative = this.negative, e.red = this.red;}, m.prototype.clone = function () {var e = new m(null);return this.copy(e), e;}, m.prototype._expand = function (e) {for (; this.length < e;) {this.words[this.length++] = 0;}return this;}, m.prototype.strip = function () {for (; 1 < this.length && 0 === this.words[this.length - 1];) {this.length--;}return this._normSign();}, m.prototype._normSign = function () {return 1 === this.length && 0 === this.words[0] && (this.negative = 0), this;}, m.prototype.inspect = function () {return (this.red ? \"<BN-R: \" : \"<BN: \") + this.toString(16) + \">\";};var c = [\"\", \"0\", \"00\", \"000\", \"0000\", \"00000\", \"000000\", \"0000000\", \"00000000\", \"000000000\", \"0000000000\", \"00000000000\", \"000000000000\", \"0000000000000\", \"00000000000000\", \"000000000000000\", \"0000000000000000\", \"00000000000000000\", \"000000000000000000\", \"0000000000000000000\", \"00000000000000000000\", \"000000000000000000000\", \"0000000000000000000000\", \"00000000000000000000000\", \"000000000000000000000000\", \"0000000000000000000000000\"],d = [0, 0, 25, 16, 12, 11, 10, 9, 8, 8, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5],p = [0, 0, 33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216, 43046721, 1e7, 19487171, 35831808, 62748517, 7529536, 11390625, 16777216, 24137569, 34012224, 47045881, 64e6, 4084101, 5153632, 6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149, 243e5, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176];function i(e, t, r) {r.negative = t.negative ^ e.negative;var n = e.length + t.length | 0;n = (r.length = n) - 1 | 0;var i = 0 | e.words[0],o = 0 | t.words[0],s = i * o,a = 67108863 & s,u = s / 67108864 | 0;r.words[0] = a;for (var l = 1; l < n; l++) {for (var h = u >>> 26, f = 67108863 & u, c = Math.min(l, t.length - 1), d = Math.max(0, l - e.length + 1); d <= c; d++) {var p = l - d | 0;h += (s = (i = 0 | e.words[p]) * (o = 0 | t.words[d]) + f) / 67108864 | 0, f = 67108863 & s;}r.words[l] = 0 | f, u = 0 | h;}return 0 !== u ? r.words[l] = 0 | u : r.length--, r.strip();}m.prototype.toString = function (e, t) {var r;if (t = 0 | t || 1, 16 === (e = e || 10) || \"hex\" === e) {r = \"\";for (var n = 0, i = 0, o = 0; o < this.length; o++) {var s = this.words[o],a = (16777215 & (s << n | i)).toString(16);r = 0 !== (i = s >>> 24 - n & 16777215) || o !== this.length - 1 ? c[6 - a.length] + a + r : a + r, 26 <= (n += 2) && (n -= 26, o--);}for (0 !== i && (r = i.toString(16) + r); r.length % t != 0;) {r = \"0\" + r;}return 0 !== this.negative && (r = \"-\" + r), r;}if (e === (0 | e) && 2 <= e && e <= 36) {var u = d[e],l = p[e];r = \"\";var h = this.clone();for (h.negative = 0; !h.isZero();) {var f = h.modn(l).toString(e);r = (h = h.idivn(l)).isZero() ? f + r : c[u - f.length] + f + r;}for (this.isZero() && (r = \"0\" + r); r.length % t != 0;) {r = \"0\" + r;}return 0 !== this.negative && (r = \"-\" + r), r;}y(!1, \"Base should be between 2 and 36\");}, m.prototype.toNumber = function () {var e = this.words[0];return 2 === this.length ? e += 67108864 * this.words[1] : 3 === this.length && 1 === this.words[2] ? e += 4503599627370496 + 67108864 * this.words[1] : 2 < this.length && y(!1, \"Number can only safely store up to 53 bits\"), 0 !== this.negative ? -e : e;}, m.prototype.toJSON = function () {return this.toString(16);}, m.prototype.toBuffer = function (e, t) {return y(void 0 !== n), this.toArrayLike(n, e, t);}, m.prototype.toArray = function (e, t) {return this.toArrayLike(Array, e, t);}, m.prototype.toArrayLike = function (e, t, r) {var n = this.byteLength(),i = r || Math.max(1, n);y(n <= i, \"byte array longer than desired length\"), y(0 < i, \"Requested array length <= 0\"), this.strip();var o,s,a = \"le\" === t,u = new e(i),l = this.clone();if (a) {for (s = 0; !l.isZero(); s++) {o = l.andln(255), l.iushrn(8), u[s] = o;}for (; s < i; s++) {u[s] = 0;}} else {for (s = 0; s < i - n; s++) {u[s] = 0;}for (s = 0; !l.isZero(); s++) {o = l.andln(255), l.iushrn(8), u[i - s - 1] = o;}}return u;}, m.prototype._countBits = Math.clz32 ? function (e) {return 32 - Math.clz32(e);} : function (e) {var t = e,r = 0;return 4096 <= t && (r += 13, t >>>= 13), 64 <= t && (r += 7, t >>>= 7), 8 <= t && (r += 4, t >>>= 4), 2 <= t && (r += 2, t >>>= 2), r + t;}, m.prototype._zeroBits = function (e) {if (0 === e) return 26;var t = e,r = 0;return 0 == (8191 & t) && (r += 13, t >>>= 13), 0 == (127 & t) && (r += 7, t >>>= 7), 0 == (15 & t) && (r += 4, t >>>= 4), 0 == (3 & t) && (r += 2, t >>>= 2), 0 == (1 & t) && r++, r;}, m.prototype.bitLength = function () {var e = this.words[this.length - 1],t = this._countBits(e);return 26 * (this.length - 1) + t;}, m.prototype.zeroBits = function () {if (this.isZero()) return 0;for (var e = 0, t = 0; t < this.length; t++) {var r = this._zeroBits(this.words[t]);if (e += r, 26 !== r) break;}return e;}, m.prototype.byteLength = function () {return Math.ceil(this.bitLength() / 8);}, m.prototype.toTwos = function (e) {return 0 !== this.negative ? this.abs().inotn(e).iaddn(1) : this.clone();}, m.prototype.fromTwos = function (e) {return this.testn(e - 1) ? this.notn(e).iaddn(1).ineg() : this.clone();}, m.prototype.isNeg = function () {return 0 !== this.negative;}, m.prototype.neg = function () {return this.clone().ineg();}, m.prototype.ineg = function () {return this.isZero() || (this.negative ^= 1), this;}, m.prototype.iuor = function (e) {for (; this.length < e.length;) {this.words[this.length++] = 0;}for (var t = 0; t < e.length; t++) {this.words[t] = this.words[t] | e.words[t];}return this.strip();}, m.prototype.ior = function (e) {return y(0 == (this.negative | e.negative)), this.iuor(e);}, m.prototype.or = function (e) {return this.length > e.length ? this.clone().ior(e) : e.clone().ior(this);}, m.prototype.uor = function (e) {return this.length > e.length ? this.clone().iuor(e) : e.clone().iuor(this);}, m.prototype.iuand = function (e) {var t;t = this.length > e.length ? e : this;for (var r = 0; r < t.length; r++) {this.words[r] = this.words[r] & e.words[r];}return this.length = t.length, this.strip();}, m.prototype.iand = function (e) {return y(0 == (this.negative | e.negative)), this.iuand(e);}, m.prototype.and = function (e) {return this.length > e.length ? this.clone().iand(e) : e.clone().iand(this);}, m.prototype.uand = function (e) {return this.length > e.length ? this.clone().iuand(e) : e.clone().iuand(this);}, m.prototype.iuxor = function (e) {var t, r;r = this.length > e.length ? (t = this, e) : (t = e, this);for (var n = 0; n < r.length; n++) {this.words[n] = t.words[n] ^ r.words[n];}if (this !== t) for (; n < t.length; n++) {this.words[n] = t.words[n];}return this.length = t.length, this.strip();}, m.prototype.ixor = function (e) {return y(0 == (this.negative | e.negative)), this.iuxor(e);}, m.prototype.xor = function (e) {return this.length > e.length ? this.clone().ixor(e) : e.clone().ixor(this);}, m.prototype.uxor = function (e) {return this.length > e.length ? this.clone().iuxor(e) : e.clone().iuxor(this);}, m.prototype.inotn = function (e) {y(\"number\" == typeof e && 0 <= e);var t = 0 | Math.ceil(e / 26),r = e % 26;this._expand(t), 0 < r && t--;for (var n = 0; n < t; n++) {this.words[n] = 67108863 & ~this.words[n];}return 0 < r && (this.words[n] = ~this.words[n] & 67108863 >> 26 - r), this.strip();}, m.prototype.notn = function (e) {return this.clone().inotn(e);}, m.prototype.setn = function (e, t) {y(\"number\" == typeof e && 0 <= e);var r = e / 26 | 0,n = e % 26;return this._expand(1 + r), this.words[r] = t ? this.words[r] | 1 << n : this.words[r] & ~(1 << n), this.strip();}, m.prototype.iadd = function (e) {var t, r, n;if (0 !== this.negative && 0 === e.negative) return this.negative = 0, t = this.isub(e), this.negative ^= 1, this._normSign();if (0 === this.negative && 0 !== e.negative) return e.negative = 0, t = this.isub(e), e.negative = 1, t._normSign();n = this.length > e.length ? (r = this, e) : (r = e, this);for (var i = 0, o = 0; o < n.length; o++) {t = (0 | r.words[o]) + (0 | n.words[o]) + i, this.words[o] = 67108863 & t, i = t >>> 26;}for (; 0 !== i && o < r.length; o++) {t = (0 | r.words[o]) + i, this.words[o] = 67108863 & t, i = t >>> 26;}if (this.length = r.length, 0 !== i) this.words[this.length] = i, this.length++;else if (r !== this) for (; o < r.length; o++) {this.words[o] = r.words[o];}return this;}, m.prototype.add = function (e) {var t;return 0 !== e.negative && 0 === this.negative ? (e.negative = 0, t = this.sub(e), e.negative ^= 1, t) : 0 === e.negative && 0 !== this.negative ? (this.negative = 0, t = e.sub(this), this.negative = 1, t) : this.length > e.length ? this.clone().iadd(e) : e.clone().iadd(this);}, m.prototype.isub = function (e) {if (0 !== e.negative) {e.negative = 0;var t = this.iadd(e);return e.negative = 1, t._normSign();}if (0 !== this.negative) return this.negative = 0, this.iadd(e), this.negative = 1, this._normSign();var r,n,i = this.cmp(e);if (0 === i) return this.negative = 0, this.length = 1, this.words[0] = 0, this;n = 0 < i ? (r = this, e) : (r = e, this);for (var o = 0, s = 0; s < n.length; s++) {o = (t = (0 | r.words[s]) - (0 | n.words[s]) + o) >> 26, this.words[s] = 67108863 & t;}for (; 0 !== o && s < r.length; s++) {o = (t = (0 | r.words[s]) + o) >> 26, this.words[s] = 67108863 & t;}if (0 === o && s < r.length && r !== this) for (; s < r.length; s++) {this.words[s] = r.words[s];}return this.length = Math.max(this.length, s), r !== this && (this.negative = 1), this.strip();}, m.prototype.sub = function (e) {return this.clone().isub(e);};var o = function o(e, t, r) {var n,i,o,s = e.words,a = t.words,u = r.words,l = 0,h = 0 | s[0],f = 8191 & h,c = h >>> 13,d = 0 | s[1],p = 8191 & d,v = d >>> 13,y = 0 | s[2],m = 8191 & y,g = y >>> 13,b = 0 | s[3],w = 8191 & b,_ = b >>> 13,M = 0 | s[4],A = 8191 & M,E = M >>> 13,S = 0 | s[5],k = 8191 & S,N = S >>> 13,P = 0 | s[6],x = 8191 & P,I = P >>> 13,T = 0 | s[7],R = 8191 & T,O = T >>> 13,C = 0 | s[8],B = 8191 & C,D = C >>> 13,L = 0 | s[9],U = 8191 & L,F = L >>> 13,j = 0 | a[0],G = 8191 & j,H = j >>> 13,z = 0 | a[1],V = 8191 & z,K = z >>> 13,q = 0 | a[2],W = 8191 & q,Z = q >>> 13,J = 0 | a[3],X = 8191 & J,$ = J >>> 13,Q = 0 | a[4],Y = 8191 & Q,ee = Q >>> 13,te = 0 | a[5],re = 8191 & te,ne = te >>> 13,ie = 0 | a[6],oe = 8191 & ie,se = ie >>> 13,ae = 0 | a[7],ue = 8191 & ae,le = ae >>> 13,he = 0 | a[8],fe = 8191 & he,ce = he >>> 13,de = 0 | a[9],pe = 8191 & de,ve = de >>> 13;r.negative = e.negative ^ t.negative, r.length = 19;var ye = (l + (n = Math.imul(f, G)) | 0) + ((8191 & (i = (i = Math.imul(f, H)) + Math.imul(c, G) | 0)) << 13) | 0;l = ((o = Math.imul(c, H)) + (i >>> 13) | 0) + (ye >>> 26) | 0, ye &= 67108863, n = Math.imul(p, G), i = (i = Math.imul(p, H)) + Math.imul(v, G) | 0, o = Math.imul(v, H);var me = (l + (n = n + Math.imul(f, V) | 0) | 0) + ((8191 & (i = (i = i + Math.imul(f, K) | 0) + Math.imul(c, V) | 0)) << 13) | 0;l = ((o = o + Math.imul(c, K) | 0) + (i >>> 13) | 0) + (me >>> 26) | 0, me &= 67108863, n = Math.imul(m, G), i = (i = Math.imul(m, H)) + Math.imul(g, G) | 0, o = Math.imul(g, H), n = n + Math.imul(p, V) | 0, i = (i = i + Math.imul(p, K) | 0) + Math.imul(v, V) | 0, o = o + Math.imul(v, K) | 0;var ge = (l + (n = n + Math.imul(f, W) | 0) | 0) + ((8191 & (i = (i = i + Math.imul(f, Z) | 0) + Math.imul(c, W) | 0)) << 13) | 0;l = ((o = o + Math.imul(c, Z) | 0) + (i >>> 13) | 0) + (ge >>> 26) | 0, ge &= 67108863, n = Math.imul(w, G), i = (i = Math.imul(w, H)) + Math.imul(_, G) | 0, o = Math.imul(_, H), n = n + Math.imul(m, V) | 0, i = (i = i + Math.imul(m, K) | 0) + Math.imul(g, V) | 0, o = o + Math.imul(g, K) | 0, n = n + Math.imul(p, W) | 0, i = (i = i + Math.imul(p, Z) | 0) + Math.imul(v, W) | 0, o = o + Math.imul(v, Z) | 0;var be = (l + (n = n + Math.imul(f, X) | 0) | 0) + ((8191 & (i = (i = i + Math.imul(f, $) | 0) + Math.imul(c, X) | 0)) << 13) | 0;l = ((o = o + Math.imul(c, $) | 0) + (i >>> 13) | 0) + (be >>> 26) | 0, be &= 67108863, n = Math.imul(A, G), i = (i = Math.imul(A, H)) + Math.imul(E, G) | 0, o = Math.imul(E, H), n = n + Math.imul(w, V) | 0, i = (i = i + Math.imul(w, K) | 0) + Math.imul(_, V) | 0, o = o + Math.imul(_, K) | 0, n = n + Math.imul(m, W) | 0, i = (i = i + Math.imul(m, Z) | 0) + Math.imul(g, W) | 0, o = o + Math.imul(g, Z) | 0, n = n + Math.imul(p, X) | 0, i = (i = i + Math.imul(p, $) | 0) + Math.imul(v, X) | 0, o = o + Math.imul(v, $) | 0;var we = (l + (n = n + Math.imul(f, Y) | 0) | 0) + ((8191 & (i = (i = i + Math.imul(f, ee) | 0) + Math.imul(c, Y) | 0)) << 13) | 0;l = ((o = o + Math.imul(c, ee) | 0) + (i >>> 13) | 0) + (we >>> 26) | 0, we &= 67108863, n = Math.imul(k, G), i = (i = Math.imul(k, H)) + Math.imul(N, G) | 0, o = Math.imul(N, H), n = n + Math.imul(A, V) | 0, i = (i = i + Math.imul(A, K) | 0) + Math.imul(E, V) | 0, o = o + Math.imul(E, K) | 0, n = n + Math.imul(w, W) | 0, i = (i = i + Math.imul(w, Z) | 0) + Math.imul(_, W) | 0, o = o + Math.imul(_, Z) | 0, n = n + Math.imul(m, X) | 0, i = (i = i + Math.imul(m, $) | 0) + Math.imul(g, X) | 0, o = o + Math.imul(g, $) | 0, n = n + Math.imul(p, Y) | 0, i = (i = i + Math.imul(p, ee) | 0) + Math.imul(v, Y) | 0, o = o + Math.imul(v, ee) | 0;var _e = (l + (n = n + Math.imul(f, re) | 0) | 0) + ((8191 & (i = (i = i + Math.imul(f, ne) | 0) + Math.imul(c, re) | 0)) << 13) | 0;l = ((o = o + Math.imul(c, ne) | 0) + (i >>> 13) | 0) + (_e >>> 26) | 0, _e &= 67108863, n = Math.imul(x, G), i = (i = Math.imul(x, H)) + Math.imul(I, G) | 0, o = Math.imul(I, H), n = n + Math.imul(k, V) | 0, i = (i = i + Math.imul(k, K) | 0) + Math.imul(N, V) | 0, o = o + Math.imul(N, K) | 0, n = n + Math.imul(A, W) | 0, i = (i = i + Math.imul(A, Z) | 0) + Math.imul(E, W) | 0, o = o + Math.imul(E, Z) | 0, n = n + Math.imul(w, X) | 0, i = (i = i + Math.imul(w, $) | 0) + Math.imul(_, X) | 0, o = o + Math.imul(_, $) | 0, n = n + Math.imul(m, Y) | 0, i = (i = i + Math.imul(m, ee) | 0) + Math.imul(g, Y) | 0, o = o + Math.imul(g, ee) | 0, n = n + Math.imul(p, re) | 0, i = (i = i + Math.imul(p, ne) | 0) + Math.imul(v, re) | 0, o = o + Math.imul(v, ne) | 0;var Me = (l + (n = n + Math.imul(f, oe) | 0) | 0) + ((8191 & (i = (i = i + Math.imul(f, se) | 0) + Math.imul(c, oe) | 0)) << 13) | 0;l = ((o = o + Math.imul(c, se) | 0) + (i >>> 13) | 0) + (Me >>> 26) | 0, Me &= 67108863, n = Math.imul(R, G), i = (i = Math.imul(R, H)) + Math.imul(O, G) | 0, o = Math.imul(O, H), n = n + Math.imul(x, V) | 0, i = (i = i + Math.imul(x, K) | 0) + Math.imul(I, V) | 0, o = o + Math.imul(I, K) | 0, n = n + Math.imul(k, W) | 0, i = (i = i + Math.imul(k, Z) | 0) + Math.imul(N, W) | 0, o = o + Math.imul(N, Z) | 0, n = n + Math.imul(A, X) | 0, i = (i = i + Math.imul(A, $) | 0) + Math.imul(E, X) | 0, o = o + Math.imul(E, $) | 0, n = n + Math.imul(w, Y) | 0, i = (i = i + Math.imul(w, ee) | 0) + Math.imul(_, Y) | 0, o = o + Math.imul(_, ee) | 0, n = n + Math.imul(m, re) | 0, i = (i = i + Math.imul(m, ne) | 0) + Math.imul(g, re) | 0, o = o + Math.imul(g, ne) | 0, n = n + Math.imul(p, oe) | 0, i = (i = i + Math.imul(p, se) | 0) + Math.imul(v, oe) | 0, o = o + Math.imul(v, se) | 0;var Ae = (l + (n = n + Math.imul(f, ue) | 0) | 0) + ((8191 & (i = (i = i + Math.imul(f, le) | 0) + Math.imul(c, ue) | 0)) << 13) | 0;l = ((o = o + Math.imul(c, le) | 0) + (i >>> 13) | 0) + (Ae >>> 26) | 0, Ae &= 67108863, n = Math.imul(B, G), i = (i = Math.imul(B, H)) + Math.imul(D, G) | 0, o = Math.imul(D, H), n = n + Math.imul(R, V) | 0, i = (i = i + Math.imul(R, K) | 0) + Math.imul(O, V) | 0, o = o + Math.imul(O, K) | 0, n = n + Math.imul(x, W) | 0, i = (i = i + Math.imul(x, Z) | 0) + Math.imul(I, W) | 0, o = o + Math.imul(I, Z) | 0, n = n + Math.imul(k, X) | 0, i = (i = i + Math.imul(k, $) | 0) + Math.imul(N, X) | 0, o = o + Math.imul(N, $) | 0, n = n + Math.imul(A, Y) | 0, i = (i = i + Math.imul(A, ee) | 0) + Math.imul(E, Y) | 0, o = o + Math.imul(E, ee) | 0, n = n + Math.imul(w, re) | 0, i = (i = i + Math.imul(w, ne) | 0) + Math.imul(_, re) | 0, o = o + Math.imul(_, ne) | 0, n = n + Math.imul(m, oe) | 0, i = (i = i + Math.imul(m, se) | 0) + Math.imul(g, oe) | 0, o = o + Math.imul(g, se) | 0, n = n + Math.imul(p, ue) | 0, i = (i = i + Math.imul(p, le) | 0) + Math.imul(v, ue) | 0, o = o + Math.imul(v, le) | 0;var Ee = (l + (n = n + Math.imul(f, fe) | 0) | 0) + ((8191 & (i = (i = i + Math.imul(f, ce) | 0) + Math.imul(c, fe) | 0)) << 13) | 0;l = ((o = o + Math.imul(c, ce) | 0) + (i >>> 13) | 0) + (Ee >>> 26) | 0, Ee &= 67108863, n = Math.imul(U, G), i = (i = Math.imul(U, H)) + Math.imul(F, G) | 0, o = Math.imul(F, H), n = n + Math.imul(B, V) | 0, i = (i = i + Math.imul(B, K) | 0) + Math.imul(D, V) | 0, o = o + Math.imul(D, K) | 0, n = n + Math.imul(R, W) | 0, i = (i = i + Math.imul(R, Z) | 0) + Math.imul(O, W) | 0, o = o + Math.imul(O, Z) | 0, n = n + Math.imul(x, X) | 0, i = (i = i + Math.imul(x, $) | 0) + Math.imul(I, X) | 0, o = o + Math.imul(I, $) | 0, n = n + Math.imul(k, Y) | 0, i = (i = i + Math.imul(k, ee) | 0) + Math.imul(N, Y) | 0, o = o + Math.imul(N, ee) | 0, n = n + Math.imul(A, re) | 0, i = (i = i + Math.imul(A, ne) | 0) + Math.imul(E, re) | 0, o = o + Math.imul(E, ne) | 0, n = n + Math.imul(w, oe) | 0, i = (i = i + Math.imul(w, se) | 0) + Math.imul(_, oe) | 0, o = o + Math.imul(_, se) | 0, n = n + Math.imul(m, ue) | 0, i = (i = i + Math.imul(m, le) | 0) + Math.imul(g, ue) | 0, o = o + Math.imul(g, le) | 0, n = n + Math.imul(p, fe) | 0, i = (i = i + Math.imul(p, ce) | 0) + Math.imul(v, fe) | 0, o = o + Math.imul(v, ce) | 0;var Se = (l + (n = n + Math.imul(f, pe) | 0) | 0) + ((8191 & (i = (i = i + Math.imul(f, ve) | 0) + Math.imul(c, pe) | 0)) << 13) | 0;l = ((o = o + Math.imul(c, ve) | 0) + (i >>> 13) | 0) + (Se >>> 26) | 0, Se &= 67108863, n = Math.imul(U, V), i = (i = Math.imul(U, K)) + Math.imul(F, V) | 0, o = Math.imul(F, K), n = n + Math.imul(B, W) | 0, i = (i = i + Math.imul(B, Z) | 0) + Math.imul(D, W) | 0, o = o + Math.imul(D, Z) | 0, n = n + Math.imul(R, X) | 0, i = (i = i + Math.imul(R, $) | 0) + Math.imul(O, X) | 0, o = o + Math.imul(O, $) | 0, n = n + Math.imul(x, Y) | 0, i = (i = i + Math.imul(x, ee) | 0) + Math.imul(I, Y) | 0, o = o + Math.imul(I, ee) | 0, n = n + Math.imul(k, re) | 0, i = (i = i + Math.imul(k, ne) | 0) + Math.imul(N, re) | 0, o = o + Math.imul(N, ne) | 0, n = n + Math.imul(A, oe) | 0, i = (i = i + Math.imul(A, se) | 0) + Math.imul(E, oe) | 0, o = o + Math.imul(E, se) | 0, n = n + Math.imul(w, ue) | 0, i = (i = i + Math.imul(w, le) | 0) + Math.imul(_, ue) | 0, o = o + Math.imul(_, le) | 0, n = n + Math.imul(m, fe) | 0, i = (i = i + Math.imul(m, ce) | 0) + Math.imul(g, fe) | 0, o = o + Math.imul(g, ce) | 0;var ke = (l + (n = n + Math.imul(p, pe) | 0) | 0) + ((8191 & (i = (i = i + Math.imul(p, ve) | 0) + Math.imul(v, pe) | 0)) << 13) | 0;l = ((o = o + Math.imul(v, ve) | 0) + (i >>> 13) | 0) + (ke >>> 26) | 0, ke &= 67108863, n = Math.imul(U, W), i = (i = Math.imul(U, Z)) + Math.imul(F, W) | 0, o = Math.imul(F, Z), n = n + Math.imul(B, X) | 0, i = (i = i + Math.imul(B, $) | 0) + Math.imul(D, X) | 0, o = o + Math.imul(D, $) | 0, n = n + Math.imul(R, Y) | 0, i = (i = i + Math.imul(R, ee) | 0) + Math.imul(O, Y) | 0, o = o + Math.imul(O, ee) | 0, n = n + Math.imul(x, re) | 0, i = (i = i + Math.imul(x, ne) | 0) + Math.imul(I, re) | 0, o = o + Math.imul(I, ne) | 0, n = n + Math.imul(k, oe) | 0, i = (i = i + Math.imul(k, se) | 0) + Math.imul(N, oe) | 0, o = o + Math.imul(N, se) | 0, n = n + Math.imul(A, ue) | 0, i = (i = i + Math.imul(A, le) | 0) + Math.imul(E, ue) | 0, o = o + Math.imul(E, le) | 0, n = n + Math.imul(w, fe) | 0, i = (i = i + Math.imul(w, ce) | 0) + Math.imul(_, fe) | 0, o = o + Math.imul(_, ce) | 0;var Ne = (l + (n = n + Math.imul(m, pe) | 0) | 0) + ((8191 & (i = (i = i + Math.imul(m, ve) | 0) + Math.imul(g, pe) | 0)) << 13) | 0;l = ((o = o + Math.imul(g, ve) | 0) + (i >>> 13) | 0) + (Ne >>> 26) | 0, Ne &= 67108863, n = Math.imul(U, X), i = (i = Math.imul(U, $)) + Math.imul(F, X) | 0, o = Math.imul(F, $), n = n + Math.imul(B, Y) | 0, i = (i = i + Math.imul(B, ee) | 0) + Math.imul(D, Y) | 0, o = o + Math.imul(D, ee) | 0, n = n + Math.imul(R, re) | 0, i = (i = i + Math.imul(R, ne) | 0) + Math.imul(O, re) | 0, o = o + Math.imul(O, ne) | 0, n = n + Math.imul(x, oe) | 0, i = (i = i + Math.imul(x, se) | 0) + Math.imul(I, oe) | 0, o = o + Math.imul(I, se) | 0, n = n + Math.imul(k, ue) | 0, i = (i = i + Math.imul(k, le) | 0) + Math.imul(N, ue) | 0, o = o + Math.imul(N, le) | 0, n = n + Math.imul(A, fe) | 0, i = (i = i + Math.imul(A, ce) | 0) + Math.imul(E, fe) | 0, o = o + Math.imul(E, ce) | 0;var Pe = (l + (n = n + Math.imul(w, pe) | 0) | 0) + ((8191 & (i = (i = i + Math.imul(w, ve) | 0) + Math.imul(_, pe) | 0)) << 13) | 0;l = ((o = o + Math.imul(_, ve) | 0) + (i >>> 13) | 0) + (Pe >>> 26) | 0, Pe &= 67108863, n = Math.imul(U, Y), i = (i = Math.imul(U, ee)) + Math.imul(F, Y) | 0, o = Math.imul(F, ee), n = n + Math.imul(B, re) | 0, i = (i = i + Math.imul(B, ne) | 0) + Math.imul(D, re) | 0, o = o + Math.imul(D, ne) | 0, n = n + Math.imul(R, oe) | 0, i = (i = i + Math.imul(R, se) | 0) + Math.imul(O, oe) | 0, o = o + Math.imul(O, se) | 0, n = n + Math.imul(x, ue) | 0, i = (i = i + Math.imul(x, le) | 0) + Math.imul(I, ue) | 0, o = o + Math.imul(I, le) | 0, n = n + Math.imul(k, fe) | 0, i = (i = i + Math.imul(k, ce) | 0) + Math.imul(N, fe) | 0, o = o + Math.imul(N, ce) | 0;var xe = (l + (n = n + Math.imul(A, pe) | 0) | 0) + ((8191 & (i = (i = i + Math.imul(A, ve) | 0) + Math.imul(E, pe) | 0)) << 13) | 0;l = ((o = o + Math.imul(E, ve) | 0) + (i >>> 13) | 0) + (xe >>> 26) | 0, xe &= 67108863, n = Math.imul(U, re), i = (i = Math.imul(U, ne)) + Math.imul(F, re) | 0, o = Math.imul(F, ne), n = n + Math.imul(B, oe) | 0, i = (i = i + Math.imul(B, se) | 0) + Math.imul(D, oe) | 0, o = o + Math.imul(D, se) | 0, n = n + Math.imul(R, ue) | 0, i = (i = i + Math.imul(R, le) | 0) + Math.imul(O, ue) | 0, o = o + Math.imul(O, le) | 0, n = n + Math.imul(x, fe) | 0, i = (i = i + Math.imul(x, ce) | 0) + Math.imul(I, fe) | 0, o = o + Math.imul(I, ce) | 0;var Ie = (l + (n = n + Math.imul(k, pe) | 0) | 0) + ((8191 & (i = (i = i + Math.imul(k, ve) | 0) + Math.imul(N, pe) | 0)) << 13) | 0;l = ((o = o + Math.imul(N, ve) | 0) + (i >>> 13) | 0) + (Ie >>> 26) | 0, Ie &= 67108863, n = Math.imul(U, oe), i = (i = Math.imul(U, se)) + Math.imul(F, oe) | 0, o = Math.imul(F, se), n = n + Math.imul(B, ue) | 0, i = (i = i + Math.imul(B, le) | 0) + Math.imul(D, ue) | 0, o = o + Math.imul(D, le) | 0, n = n + Math.imul(R, fe) | 0, i = (i = i + Math.imul(R, ce) | 0) + Math.imul(O, fe) | 0, o = o + Math.imul(O, ce) | 0;var Te = (l + (n = n + Math.imul(x, pe) | 0) | 0) + ((8191 & (i = (i = i + Math.imul(x, ve) | 0) + Math.imul(I, pe) | 0)) << 13) | 0;l = ((o = o + Math.imul(I, ve) | 0) + (i >>> 13) | 0) + (Te >>> 26) | 0, Te &= 67108863, n = Math.imul(U, ue), i = (i = Math.imul(U, le)) + Math.imul(F, ue) | 0, o = Math.imul(F, le), n = n + Math.imul(B, fe) | 0, i = (i = i + Math.imul(B, ce) | 0) + Math.imul(D, fe) | 0, o = o + Math.imul(D, ce) | 0;var Re = (l + (n = n + Math.imul(R, pe) | 0) | 0) + ((8191 & (i = (i = i + Math.imul(R, ve) | 0) + Math.imul(O, pe) | 0)) << 13) | 0;l = ((o = o + Math.imul(O, ve) | 0) + (i >>> 13) | 0) + (Re >>> 26) | 0, Re &= 67108863, n = Math.imul(U, fe), i = (i = Math.imul(U, ce)) + Math.imul(F, fe) | 0, o = Math.imul(F, ce);var Oe = (l + (n = n + Math.imul(B, pe) | 0) | 0) + ((8191 & (i = (i = i + Math.imul(B, ve) | 0) + Math.imul(D, pe) | 0)) << 13) | 0;l = ((o = o + Math.imul(D, ve) | 0) + (i >>> 13) | 0) + (Oe >>> 26) | 0, Oe &= 67108863;var Ce = (l + (n = Math.imul(U, pe)) | 0) + ((8191 & (i = (i = Math.imul(U, ve)) + Math.imul(F, pe) | 0)) << 13) | 0;return l = ((o = Math.imul(F, ve)) + (i >>> 13) | 0) + (Ce >>> 26) | 0, Ce &= 67108863, u[0] = ye, u[1] = me, u[2] = ge, u[3] = be, u[4] = we, u[5] = _e, u[6] = Me, u[7] = Ae, u[8] = Ee, u[9] = Se, u[10] = ke, u[11] = Ne, u[12] = Pe, u[13] = xe, u[14] = Ie, u[15] = Te, u[16] = Re, u[17] = Oe, u[18] = Ce, 0 !== l && (u[19] = l, r.length++), r;};function a(e, t, r) {return new u().mulp(e, t, r);}function u(e, t) {this.x = e, this.y = t;}Math.imul || (o = i), m.prototype.mulTo = function (e, t) {var r = this.length + e.length;return 10 === this.length && 10 === e.length ? o(this, e, t) : r < 63 ? i(this, e, t) : r < 1024 ? function (e, t, r) {r.negative = t.negative ^ e.negative, r.length = e.length + t.length;for (var n = 0, i = 0, o = 0; o < r.length - 1; o++) {var s = i;i = 0;for (var a = 67108863 & n, u = Math.min(o, t.length - 1), l = Math.max(0, o - e.length + 1); l <= u; l++) {var h = o - l,f = (0 | e.words[h]) * (0 | t.words[l]),c = 67108863 & f;a = 67108863 & (c = c + a | 0), i += (s = (s = s + (f / 67108864 | 0) | 0) + (c >>> 26) | 0) >>> 26, s &= 67108863;}r.words[o] = a, n = s, s = i;}return 0 !== n ? r.words[o] = n : r.length--, r.strip();}(this, e, t) : a(this, e, t);}, u.prototype.makeRBT = function (e) {for (var t = new Array(e), r = m.prototype._countBits(e) - 1, n = 0; n < e; n++) {t[n] = this.revBin(n, r, e);}return t;}, u.prototype.revBin = function (e, t, r) {if (0 === e || e === r - 1) return e;for (var n = 0, i = 0; i < t; i++) {n |= (1 & e) << t - i - 1, e >>= 1;}return n;}, u.prototype.permute = function (e, t, r, n, i, o) {for (var s = 0; s < o; s++) {n[s] = t[e[s]], i[s] = r[e[s]];}}, u.prototype.transform = function (e, t, r, n, i, o) {this.permute(o, e, t, r, n, i);for (var s = 1; s < i; s <<= 1) {for (var a = s << 1, u = Math.cos(2 * Math.PI / a), l = Math.sin(2 * Math.PI / a), h = 0; h < i; h += a) {for (var f = u, c = l, d = 0; d < s; d++) {var p = r[h + d],v = n[h + d],y = r[h + d + s],m = n[h + d + s],g = f * y - c * m;m = f * m + c * y, y = g, r[h + d] = p + y, n[h + d] = v + m, r[h + d + s] = p - y, n[h + d + s] = v - m, d !== a && (g = u * f - l * c, c = u * c + l * f, f = g);}}}}, u.prototype.guessLen13b = function (e, t) {var r = 1 | Math.max(t, e),n = 1 & r,i = 0;for (r = r / 2 | 0; r; r >>>= 1) {i++;}return 1 << i + 1 + n;}, u.prototype.conjugate = function (e, t, r) {if (!(r <= 1)) for (var n = 0; n < r / 2; n++) {var i = e[n];e[n] = e[r - n - 1], e[r - n - 1] = i, i = t[n], t[n] = -t[r - n - 1], t[r - n - 1] = -i;}}, u.prototype.normalize13b = function (e, t) {for (var r = 0, n = 0; n < t / 2; n++) {var i = 8192 * Math.round(e[2 * n + 1] / t) + Math.round(e[2 * n] / t) + r;e[n] = 67108863 & i, r = i < 67108864 ? 0 : i / 67108864 | 0;}return e;}, u.prototype.convert13b = function (e, t, r, n) {for (var i = 0, o = 0; o < t; o++) {i += 0 | e[o], r[2 * o] = 8191 & i, i >>>= 13, r[2 * o + 1] = 8191 & i, i >>>= 13;}for (o = 2 * t; o < n; ++o) {r[o] = 0;}y(0 === i), y(0 == (-8192 & i));}, u.prototype.stub = function (e) {for (var t = new Array(e), r = 0; r < e; r++) {t[r] = 0;}return t;}, u.prototype.mulp = function (e, t, r) {var n = 2 * this.guessLen13b(e.length, t.length),i = this.makeRBT(n),o = this.stub(n),s = new Array(n),a = new Array(n),u = new Array(n),l = new Array(n),h = new Array(n),f = new Array(n),c = r.words;c.length = n, this.convert13b(e.words, e.length, s, n), this.convert13b(t.words, t.length, l, n), this.transform(s, o, a, u, n, i), this.transform(l, o, h, f, n, i);for (var d = 0; d < n; d++) {var p = a[d] * h[d] - u[d] * f[d];u[d] = a[d] * f[d] + u[d] * h[d], a[d] = p;}return this.conjugate(a, u, n), this.transform(a, u, c, o, n, i), this.conjugate(c, o, n), this.normalize13b(c, n), r.negative = e.negative ^ t.negative, r.length = e.length + t.length, r.strip();}, m.prototype.mul = function (e) {var t = new m(null);return t.words = new Array(this.length + e.length), this.mulTo(e, t);}, m.prototype.mulf = function (e) {var t = new m(null);return t.words = new Array(this.length + e.length), a(this, e, t);}, m.prototype.imul = function (e) {return this.clone().mulTo(e, this);}, m.prototype.imuln = function (e) {y(\"number\" == typeof e), y(e < 67108864);for (var t = 0, r = 0; r < this.length; r++) {var n = (0 | this.words[r]) * e,i = (67108863 & n) + (67108863 & t);t >>= 26, t += n / 67108864 | 0, t += i >>> 26, this.words[r] = 67108863 & i;}return 0 !== t && (this.words[r] = t, this.length++), this;}, m.prototype.muln = function (e) {return this.clone().imuln(e);}, m.prototype.sqr = function () {return this.mul(this);}, m.prototype.isqr = function () {return this.imul(this.clone());}, m.prototype.pow = function (e) {var t = function (e) {for (var t = new Array(e.bitLength()), r = 0; r < t.length; r++) {var n = r / 26 | 0,i = r % 26;t[r] = (e.words[n] & 1 << i) >>> i;}return t;}(e);if (0 === t.length) return new m(1);for (var r = this, n = 0; n < t.length && 0 === t[n]; n++, r = r.sqr()) {;}if (++n < t.length) for (var i = r.sqr(); n < t.length; n++, i = i.sqr()) {0 !== t[n] && (r = r.mul(i));}return r;}, m.prototype.iushln = function (e) {y(\"number\" == typeof e && 0 <= e);var t,r = e % 26,n = (e - r) / 26,i = 67108863 >>> 26 - r << 26 - r;if (0 != r) {var o = 0;for (t = 0; t < this.length; t++) {var s = this.words[t] & i,a = (0 | this.words[t]) - s << r;this.words[t] = a | o, o = s >>> 26 - r;}o && (this.words[t] = o, this.length++);}if (0 != n) {for (t = this.length - 1; 0 <= t; t--) {this.words[t + n] = this.words[t];}for (t = 0; t < n; t++) {this.words[t] = 0;}this.length += n;}return this.strip();}, m.prototype.ishln = function (e) {return y(0 === this.negative), this.iushln(e);}, m.prototype.iushrn = function (e, t, r) {var n;y(\"number\" == typeof e && 0 <= e), n = t ? (t - t % 26) / 26 : 0;var i = e % 26,o = Math.min((e - i) / 26, this.length),s = 67108863 ^ 67108863 >>> i << i,a = r;if (n -= o, n = Math.max(0, n), a) {for (var u = 0; u < o; u++) {a.words[u] = this.words[u];}a.length = o;}if (0 === o) ;else if (this.length > o) for (this.length -= o, u = 0; u < this.length; u++) {this.words[u] = this.words[u + o];} else this.words[0] = 0, this.length = 1;var l = 0;for (u = this.length - 1; 0 <= u && (0 !== l || n <= u); u--) {var h = 0 | this.words[u];this.words[u] = l << 26 - i | h >>> i, l = h & s;}return a && 0 !== l && (a.words[a.length++] = l), 0 === this.length && (this.words[0] = 0, this.length = 1), this.strip();}, m.prototype.ishrn = function (e, t, r) {return y(0 === this.negative), this.iushrn(e, t, r);}, m.prototype.shln = function (e) {return this.clone().ishln(e);}, m.prototype.ushln = function (e) {return this.clone().iushln(e);}, m.prototype.shrn = function (e) {return this.clone().ishrn(e);}, m.prototype.ushrn = function (e) {return this.clone().iushrn(e);}, m.prototype.testn = function (e) {y(\"number\" == typeof e && 0 <= e);var t = e % 26,r = (e - t) / 26,n = 1 << t;return !(this.length <= r) && !!(this.words[r] & n);}, m.prototype.imaskn = function (e) {y(\"number\" == typeof e && 0 <= e);var t = e % 26,r = (e - t) / 26;if (y(0 === this.negative, \"imaskn works only with positive numbers\"), this.length <= r) return this;if (0 != t && r++, this.length = Math.min(r, this.length), 0 != t) {var n = 67108863 ^ 67108863 >>> t << t;this.words[this.length - 1] &= n;}return this.strip();}, m.prototype.maskn = function (e) {return this.clone().imaskn(e);}, m.prototype.iaddn = function (e) {return y(\"number\" == typeof e), y(e < 67108864), e < 0 ? this.isubn(-e) : 0 !== this.negative ? (1 === this.length && (0 | this.words[0]) < e ? (this.words[0] = e - (0 | this.words[0]), this.negative = 0) : (this.negative = 0, this.isubn(e), this.negative = 1), this) : this._iaddn(e);}, m.prototype._iaddn = function (e) {this.words[0] += e;for (var t = 0; t < this.length && 67108864 <= this.words[t]; t++) {this.words[t] -= 67108864, t === this.length - 1 ? this.words[t + 1] = 1 : this.words[t + 1]++;}return this.length = Math.max(this.length, t + 1), this;}, m.prototype.isubn = function (e) {if (y(\"number\" == typeof e), y(e < 67108864), e < 0) return this.iaddn(-e);if (0 !== this.negative) return this.negative = 0, this.iaddn(e), this.negative = 1, this;if (this.words[0] -= e, 1 === this.length && this.words[0] < 0) this.words[0] = -this.words[0], this.negative = 1;else for (var t = 0; t < this.length && this.words[t] < 0; t++) {this.words[t] += 67108864, this.words[t + 1] -= 1;}return this.strip();}, m.prototype.addn = function (e) {return this.clone().iaddn(e);}, m.prototype.subn = function (e) {return this.clone().isubn(e);}, m.prototype.iabs = function () {return this.negative = 0, this;}, m.prototype.abs = function () {return this.clone().iabs();}, m.prototype._ishlnsubmul = function (e, t, r) {var n,i,o = e.length + r;this._expand(o);var s = 0;for (n = 0; n < e.length; n++) {i = (0 | this.words[n + r]) + s;var a = (0 | e.words[n]) * t;s = ((i -= 67108863 & a) >> 26) - (a / 67108864 | 0), this.words[n + r] = 67108863 & i;}for (; n < this.length - r; n++) {s = (i = (0 | this.words[n + r]) + s) >> 26, this.words[n + r] = 67108863 & i;}if (0 === s) return this.strip();for (y(-1 === s), n = s = 0; n < this.length; n++) {s = (i = -(0 | this.words[n]) + s) >> 26, this.words[n] = 67108863 & i;}return this.negative = 1, this.strip();}, m.prototype._wordDiv = function (e, t) {var r = (this.length, e.length),n = this.clone(),i = e,o = 0 | i.words[i.length - 1];0 != (r = 26 - this._countBits(o)) && (i = i.ushln(r), n.iushln(r), o = 0 | i.words[i.length - 1]);var s,a = n.length - i.length;if (\"mod\" !== t) {(s = new m(null)).length = 1 + a, s.words = new Array(s.length);for (var u = 0; u < s.length; u++) {s.words[u] = 0;}}var l = n.clone()._ishlnsubmul(i, 1, a);0 === l.negative && (n = l, s && (s.words[a] = 1));for (var h = a - 1; 0 <= h; h--) {var f = 67108864 * (0 | n.words[i.length + h]) + (0 | n.words[i.length + h - 1]);for (f = Math.min(f / o | 0, 67108863), n._ishlnsubmul(i, f, h); 0 !== n.negative;) {f--, n.negative = 0, n._ishlnsubmul(i, 1, h), n.isZero() || (n.negative ^= 1);}s && (s.words[h] = f);}return s && s.strip(), n.strip(), \"div\" !== t && 0 != r && n.iushrn(r), { div: s || null, mod: n };}, m.prototype.divmod = function (e, t, r) {return y(!e.isZero()), this.isZero() ? { div: new m(0), mod: new m(0) } : 0 !== this.negative && 0 === e.negative ? (o = this.neg().divmod(e, t), \"mod\" !== t && (n = o.div.neg()), \"div\" !== t && (i = o.mod.neg(), r && 0 !== i.negative && i.iadd(e)), { div: n, mod: i }) : 0 === this.negative && 0 !== e.negative ? (o = this.divmod(e.neg(), t), \"mod\" !== t && (n = o.div.neg()), { div: n, mod: o.mod }) : 0 != (this.negative & e.negative) ? (o = this.neg().divmod(e.neg(), t), \"div\" !== t && (i = o.mod.neg(), r && 0 !== i.negative && i.isub(e)), { div: o.div, mod: i }) : e.length > this.length || this.cmp(e) < 0 ? { div: new m(0), mod: this } : 1 === e.length ? \"div\" === t ? { div: this.divn(e.words[0]), mod: null } : \"mod\" === t ? { div: null, mod: new m(this.modn(e.words[0])) } : { div: this.divn(e.words[0]), mod: new m(this.modn(e.words[0])) } : this._wordDiv(e, t);var n, i, o;}, m.prototype.div = function (e) {return this.divmod(e, \"div\", !1).div;}, m.prototype.mod = function (e) {return this.divmod(e, \"mod\", !1).mod;}, m.prototype.umod = function (e) {return this.divmod(e, \"mod\", !0).mod;}, m.prototype.divRound = function (e) {var t = this.divmod(e);if (t.mod.isZero()) return t.div;var r = 0 !== t.div.negative ? t.mod.isub(e) : t.mod,n = e.ushrn(1),i = e.andln(1),o = r.cmp(n);return o < 0 || 1 === i && 0 === o ? t.div : 0 !== t.div.negative ? t.div.isubn(1) : t.div.iaddn(1);}, m.prototype.modn = function (e) {y(e <= 67108863);for (var t = (1 << 26) % e, r = 0, n = this.length - 1; 0 <= n; n--) {r = (t * r + (0 | this.words[n])) % e;}return r;}, m.prototype.idivn = function (e) {y(e <= 67108863);for (var t = 0, r = this.length - 1; 0 <= r; r--) {var n = (0 | this.words[r]) + 67108864 * t;this.words[r] = n / e | 0, t = n % e;}return this.strip();}, m.prototype.divn = function (e) {return this.clone().idivn(e);}, m.prototype.egcd = function (e) {y(0 === e.negative), y(!e.isZero());var t = this,r = e.clone();t = 0 !== t.negative ? t.umod(e) : t.clone();for (var n = new m(1), i = new m(0), o = new m(0), s = new m(1), a = 0; t.isEven() && r.isEven();) {t.iushrn(1), r.iushrn(1), ++a;}for (var u = r.clone(), l = t.clone(); !t.isZero();) {for (var h = 0, f = 1; 0 == (t.words[0] & f) && h < 26; ++h, f <<= 1) {;}if (0 < h) for (t.iushrn(h); 0 < h--;) {(n.isOdd() || i.isOdd()) && (n.iadd(u), i.isub(l)), n.iushrn(1), i.iushrn(1);}for (var c = 0, d = 1; 0 == (r.words[0] & d) && c < 26; ++c, d <<= 1) {;}if (0 < c) for (r.iushrn(c); 0 < c--;) {(o.isOdd() || s.isOdd()) && (o.iadd(u), s.isub(l)), o.iushrn(1), s.iushrn(1);}0 <= t.cmp(r) ? (t.isub(r), n.isub(o), i.isub(s)) : (r.isub(t), o.isub(n), s.isub(i));}return { a: o, b: s, gcd: r.iushln(a) };}, m.prototype._invmp = function (e) {y(0 === e.negative), y(!e.isZero());var t = this,r = e.clone();t = 0 !== t.negative ? t.umod(e) : t.clone();for (var n, i = new m(1), o = new m(0), s = r.clone(); 0 < t.cmpn(1) && 0 < r.cmpn(1);) {for (var a = 0, u = 1; 0 == (t.words[0] & u) && a < 26; ++a, u <<= 1) {;}if (0 < a) for (t.iushrn(a); 0 < a--;) {i.isOdd() && i.iadd(s), i.iushrn(1);}for (var l = 0, h = 1; 0 == (r.words[0] & h) && l < 26; ++l, h <<= 1) {;}if (0 < l) for (r.iushrn(l); 0 < l--;) {o.isOdd() && o.iadd(s), o.iushrn(1);}0 <= t.cmp(r) ? (t.isub(r), i.isub(o)) : (r.isub(t), o.isub(i));}return (n = 0 === t.cmpn(1) ? i : o).cmpn(0) < 0 && n.iadd(e), n;}, m.prototype.gcd = function (e) {if (this.isZero()) return e.abs();if (e.isZero()) return this.abs();var t = this.clone(),r = e.clone();t.negative = 0;for (var n = r.negative = 0; t.isEven() && r.isEven(); n++) {t.iushrn(1), r.iushrn(1);}for (;;) {for (; t.isEven();) {t.iushrn(1);}for (; r.isEven();) {r.iushrn(1);}var i = t.cmp(r);if (i < 0) {var o = t;t = r, r = o;} else if (0 === i || 0 === r.cmpn(1)) break;t.isub(r);}return r.iushln(n);}, m.prototype.invm = function (e) {return this.egcd(e).a.umod(e);}, m.prototype.isEven = function () {return 0 == (1 & this.words[0]);}, m.prototype.isOdd = function () {return 1 == (1 & this.words[0]);}, m.prototype.andln = function (e) {return this.words[0] & e;}, m.prototype.bincn = function (e) {y(\"number\" == typeof e);var t = e % 26,r = (e - t) / 26,n = 1 << t;if (this.length <= r) return this._expand(1 + r), this.words[r] |= n, this;for (var i = n, o = r; 0 !== i && o < this.length; o++) {var s = 0 | this.words[o];i = (s += i) >>> 26, s &= 67108863, this.words[o] = s;}return 0 !== i && (this.words[o] = i, this.length++), this;}, m.prototype.isZero = function () {return 1 === this.length && 0 === this.words[0];}, m.prototype.cmpn = function (e) {var t,r = e < 0;if (0 !== this.negative && !r) return -1;if (0 === this.negative && r) return 1;if (this.strip(), 1 < this.length) t = 1;else {r && (e = -e), y(e <= 67108863, \"Number is too big\");var n = 0 | this.words[0];t = n === e ? 0 : n < e ? -1 : 1;}return 0 !== this.negative ? 0 | -t : t;}, m.prototype.cmp = function (e) {if (0 !== this.negative && 0 === e.negative) return -1;if (0 === this.negative && 0 !== e.negative) return 1;var t = this.ucmp(e);return 0 !== this.negative ? 0 | -t : t;}, m.prototype.ucmp = function (e) {if (this.length > e.length) return 1;if (this.length < e.length) return -1;for (var t = 0, r = this.length - 1; 0 <= r; r--) {var n = 0 | this.words[r],i = 0 | e.words[r];if (n != i) {n < i ? t = -1 : i < n && (t = 1);break;}}return t;}, m.prototype.gtn = function (e) {return 1 === this.cmpn(e);}, m.prototype.gt = function (e) {return 1 === this.cmp(e);}, m.prototype.gten = function (e) {return 0 <= this.cmpn(e);}, m.prototype.gte = function (e) {return 0 <= this.cmp(e);}, m.prototype.ltn = function (e) {return -1 === this.cmpn(e);}, m.prototype.lt = function (e) {return -1 === this.cmp(e);}, m.prototype.lten = function (e) {return this.cmpn(e) <= 0;}, m.prototype.lte = function (e) {return this.cmp(e) <= 0;}, m.prototype.eqn = function (e) {return 0 === this.cmpn(e);}, m.prototype.eq = function (e) {return 0 === this.cmp(e);}, m.red = function (e) {return new _(e);}, m.prototype.toRed = function (e) {return y(!this.red, \"Already a number in reduction context\"), y(0 === this.negative, \"red works only with positives\"), e.convertTo(this)._forceRed(e);}, m.prototype.fromRed = function () {return y(this.red, \"fromRed works only with numbers in reduction context\"), this.red.convertFrom(this);}, m.prototype._forceRed = function (e) {return this.red = e, this;}, m.prototype.forceRed = function (e) {return y(!this.red, \"Already a number in reduction context\"), this._forceRed(e);}, m.prototype.redAdd = function (e) {return y(this.red, \"redAdd works only with red numbers\"), this.red.add(this, e);}, m.prototype.redIAdd = function (e) {return y(this.red, \"redIAdd works only with red numbers\"), this.red.iadd(this, e);}, m.prototype.redSub = function (e) {return y(this.red, \"redSub works only with red numbers\"), this.red.sub(this, e);}, m.prototype.redISub = function (e) {return y(this.red, \"redISub works only with red numbers\"), this.red.isub(this, e);}, m.prototype.redShl = function (e) {return y(this.red, \"redShl works only with red numbers\"), this.red.shl(this, e);}, m.prototype.redMul = function (e) {return y(this.red, \"redMul works only with red numbers\"), this.red._verify2(this, e), this.red.mul(this, e);}, m.prototype.redIMul = function (e) {return y(this.red, \"redMul works only with red numbers\"), this.red._verify2(this, e), this.red.imul(this, e);}, m.prototype.redSqr = function () {return y(this.red, \"redSqr works only with red numbers\"), this.red._verify1(this), this.red.sqr(this);}, m.prototype.redISqr = function () {return y(this.red, \"redISqr works only with red numbers\"), this.red._verify1(this), this.red.isqr(this);}, m.prototype.redSqrt = function () {return y(this.red, \"redSqrt works only with red numbers\"), this.red._verify1(this), this.red.sqrt(this);}, m.prototype.redInvm = function () {return y(this.red, \"redInvm works only with red numbers\"), this.red._verify1(this), this.red.invm(this);}, m.prototype.redNeg = function () {return y(this.red, \"redNeg works only with red numbers\"), this.red._verify1(this), this.red.neg(this);}, m.prototype.redPow = function (e) {return y(this.red && !e.red, \"redPow(normalNum)\"), this.red._verify1(this), this.red.pow(this, e);};var l = { k256: null, p224: null, p192: null, p25519: null };function h(e, t) {this.name = e, this.p = new m(t, 16), this.n = this.p.bitLength(), this.k = new m(1).iushln(this.n).isub(this.p), this.tmp = this._tmp();}function v() {h.call(this, \"k256\", \"ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f\");}function g() {h.call(this, \"p224\", \"ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001\");}function b() {h.call(this, \"p192\", \"ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff\");}function w() {h.call(this, \"25519\", \"7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed\");}function _(e) {if (\"string\" == typeof e) {var t = m._prime(e);this.m = t.p, this.prime = t;} else y(e.gtn(1), \"modulus must be greater than 1\"), this.m = e, this.prime = null;}function M(e) {_.call(this, e), this.shift = this.m.bitLength(), this.shift % 26 != 0 && (this.shift += 26 - this.shift % 26), this.r = new m(1).iushln(this.shift), this.r2 = this.imod(this.r.sqr()), this.rinv = this.r._invmp(this.m), this.minv = this.rinv.mul(this.r).isubn(1).div(this.m), this.minv = this.minv.umod(this.r), this.minv = this.r.sub(this.minv);}h.prototype._tmp = function () {var e = new m(null);return e.words = new Array(Math.ceil(this.n / 13)), e;}, h.prototype.ireduce = function (e) {for (var t, r = e; this.split(r, this.tmp), (t = (r = (r = this.imulK(r)).iadd(this.tmp)).bitLength()) > this.n;) {;}var n = t < this.n ? -1 : r.ucmp(this.p);return 0 === n ? (r.words[0] = 0, r.length = 1) : 0 < n ? r.isub(this.p) : r.strip(), r;}, h.prototype.split = function (e, t) {e.iushrn(this.n, 0, t);}, h.prototype.imulK = function (e) {return e.imul(this.k);}, r(v, h), v.prototype.split = function (e, t) {for (var r = Math.min(e.length, 9), n = 0; n < r; n++) {t.words[n] = e.words[n];}if (t.length = r, e.length <= 9) return e.words[0] = 0, void (e.length = 1);var i = e.words[9];for (t.words[t.length++] = 4194303 & i, n = 10; n < e.length; n++) {var o = 0 | e.words[n];e.words[n - 10] = (4194303 & o) << 4 | i >>> 22, i = o;}i >>>= 22, 0 === (e.words[n - 10] = i) && 10 < e.length ? e.length -= 10 : e.length -= 9;}, v.prototype.imulK = function (e) {e.words[e.length] = 0, e.words[e.length + 1] = 0, e.length += 2;for (var t = 0, r = 0; r < e.length; r++) {var n = 0 | e.words[r];t += 977 * n, e.words[r] = 67108863 & t, t = 64 * n + (t / 67108864 | 0);}return 0 === e.words[e.length - 1] && (e.length--, 0 === e.words[e.length - 1] && e.length--), e;}, r(g, h), r(b, h), r(w, h), w.prototype.imulK = function (e) {for (var t = 0, r = 0; r < e.length; r++) {var n = 19 * (0 | e.words[r]) + t,i = 67108863 & n;n >>>= 26, e.words[r] = i, t = n;}return 0 !== t && (e.words[e.length++] = t), e;}, m._prime = function (e) {if (l[e]) return l[e];var t;if (\"k256\" === e) t = new v();else if (\"p224\" === e) t = new g();else if (\"p192\" === e) t = new b();else {if (\"p25519\" !== e) throw new Error(\"Unknown prime \" + e);t = new w();}return l[e] = t;}, _.prototype._verify1 = function (e) {y(0 === e.negative, \"red works only with positives\"), y(e.red, \"red works only with red numbers\");}, _.prototype._verify2 = function (e, t) {y(0 == (e.negative | t.negative), \"red works only with positives\"), y(e.red && e.red === t.red, \"red works only with red numbers\");}, _.prototype.imod = function (e) {return this.prime ? this.prime.ireduce(e)._forceRed(this) : e.umod(this.m)._forceRed(this);}, _.prototype.neg = function (e) {return e.isZero() ? e.clone() : this.m.sub(e)._forceRed(this);}, _.prototype.add = function (e, t) {this._verify2(e, t);var r = e.add(t);return 0 <= r.cmp(this.m) && r.isub(this.m), r._forceRed(this);}, _.prototype.iadd = function (e, t) {this._verify2(e, t);var r = e.iadd(t);return 0 <= r.cmp(this.m) && r.isub(this.m), r;}, _.prototype.sub = function (e, t) {this._verify2(e, t);var r = e.sub(t);return r.cmpn(0) < 0 && r.iadd(this.m), r._forceRed(this);}, _.prototype.isub = function (e, t) {this._verify2(e, t);var r = e.isub(t);return r.cmpn(0) < 0 && r.iadd(this.m), r;}, _.prototype.shl = function (e, t) {return this._verify1(e), this.imod(e.ushln(t));}, _.prototype.imul = function (e, t) {return this._verify2(e, t), this.imod(e.imul(t));}, _.prototype.mul = function (e, t) {return this._verify2(e, t), this.imod(e.mul(t));}, _.prototype.isqr = function (e) {return this.imul(e, e.clone());}, _.prototype.sqr = function (e) {return this.mul(e, e);}, _.prototype.sqrt = function (e) {if (e.isZero()) return e.clone();var t = this.m.andln(3);if (y(t % 2 == 1), 3 === t) {var r = this.m.add(new m(1)).iushrn(2);return this.pow(e, r);}for (var n = this.m.subn(1), i = 0; !n.isZero() && 0 === n.andln(1);) {i++, n.iushrn(1);}y(!n.isZero());var o = new m(1).toRed(this),s = o.redNeg(),a = this.m.subn(1).iushrn(1),u = this.m.bitLength();for (u = new m(2 * u * u).toRed(this); 0 !== this.pow(u, a).cmp(s);) {u.redIAdd(s);}for (var l = this.pow(u, n), h = this.pow(e, n.addn(1).iushrn(1)), f = this.pow(e, n), c = i; 0 !== f.cmp(o);) {for (var d = f, p = 0; 0 !== d.cmp(o); p++) {d = d.redSqr();}y(p < c);var v = this.pow(l, new m(1).iushln(c - p - 1));h = h.redMul(v), l = v.redSqr(), f = f.redMul(l), c = p;}return h;}, _.prototype.invm = function (e) {var t = e._invmp(this.m);return 0 !== t.negative ? (t.negative = 0, this.imod(t).redNeg()) : this.imod(t);}, _.prototype.pow = function (e, t) {if (t.isZero()) return new m(1).toRed(this);if (0 === t.cmpn(1)) return e.clone();var r = new Array(16);r[0] = new m(1).toRed(this), r[1] = e;for (var n = 2; n < r.length; n++) {r[n] = this.mul(r[n - 1], e);}var i = r[0],o = 0,s = 0,a = t.bitLength() % 26;for (0 === a && (a = 26), n = t.length - 1; 0 <= n; n--) {for (var u = t.words[n], l = a - 1; 0 <= l; l--) {var h = u >> l & 1;i !== r[0] && (i = this.sqr(i)), 0 != h || 0 !== o ? (o <<= 1, o |= h, (4 === ++s || 0 === n && 0 === l) && (i = this.mul(i, r[o]), o = s = 0)) : s = 0;}a = 26;}return i;}, _.prototype.convertTo = function (e) {var t = e.umod(this.m);return t === e ? t.clone() : t;}, _.prototype.convertFrom = function (e) {var t = e.clone();return t.red = null, t;}, m.mont = function (e) {return new M(e);}, r(M, _), M.prototype.convertTo = function (e) {return this.imod(e.ushln(this.shift));}, M.prototype.convertFrom = function (e) {var t = this.imod(e.mul(this.rinv));return t.red = null, t;}, M.prototype.imul = function (e, t) {if (e.isZero() || t.isZero()) return e.words[0] = 0, e.length = 1, e;var r = e.imul(t),n = r.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m),i = r.isub(n).iushrn(this.shift),o = i;return 0 <= i.cmp(this.m) ? o = i.isub(this.m) : i.cmpn(0) < 0 && (o = i.iadd(this.m)), o._forceRed(this);}, M.prototype.mul = function (e, t) {if (e.isZero() || t.isZero()) return new m(0)._forceRed(this);var r = e.mul(t),n = r.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m),i = r.isub(n).iushrn(this.shift),o = i;return 0 <= i.cmp(this.m) ? o = i.isub(this.m) : i.cmpn(0) < 0 && (o = i.iadd(this.m)), o._forceRed(this);}, M.prototype.invm = function (e) {return this.imod(e._invmp(this.m).mul(this.r2))._forceRed(this);};}(void 0 === e || e, this);}, { buffer: 11 }], 10: [function (e, t, r) {(function (r) {t.exports = function (e) {var t = new Uint8Array(e);return (r.crypto || r.msCrypto).getRandomValues(t), t;};}).call(this, \"undefined\" != typeof global ? global : \"undefined\" != typeof self ? self : \"undefined\" != typeof window ? window : {});}, {}], 11: [function (e, t, r) {}, {}], 12: [function (e, t, r) {\"use strict\";var n = r;n.version = e(\"../package.json\").version, n.utils = e(\"./elliptic/utils\"), n.rand = e(\"brorand\"), n.hmacDRBG = e(\"./elliptic/hmac-drbg\"), n.curve = e(\"./elliptic/curve\"), n.curves = e(\"./elliptic/curves\"), n.ec = e(\"./elliptic/ec\"), n.eddsa = e(\"./elliptic/eddsa\");}, { \"../package.json\": 26, \"./elliptic/curve\": 15, \"./elliptic/curves\": 18, \"./elliptic/ec\": 19, \"./elliptic/eddsa\": 22, \"./elliptic/hmac-drbg\": 23, \"./elliptic/utils\": 25, brorand: 10 }], 13: [function (e, t, r) {\"use strict\";var n = e(\"bn.js\"),i = e(\"../../elliptic\").utils,S = i.getNAF,k = i.getJSF,f = i.assert;function o(e, t) {this.type = e, this.p = new n(t.p, 16), this.red = t.prime ? n.red(t.prime) : n.mont(this.p), this.zero = new n(0).toRed(this.red), this.one = new n(1).toRed(this.red), this.two = new n(2).toRed(this.red), this.n = t.n && new n(t.n, 16), this.g = t.g && this.pointFromJSON(t.g, t.gRed), this._wnafT1 = new Array(4), this._wnafT2 = new Array(4), this._wnafT3 = new Array(4), this._wnafT4 = new Array(4);var r = this.n && this.p.div(this.n);!r || 0 < r.cmpn(100) ? this.redN = null : (this._maxwellTrick = !0, this.redN = this.n.toRed(this.red));}function s(e, t) {this.curve = e, this.type = t, this.precomputed = null;}(t.exports = o).prototype.point = function () {throw new Error(\"Not implemented\");}, o.prototype.validate = function () {throw new Error(\"Not implemented\");}, o.prototype._fixedNafMul = function (e, t) {f(e.precomputed);var r = e._getDoubles(),n = S(t, 1),i = (1 << r.step + 1) - (r.step % 2 == 0 ? 2 : 1);i /= 3;for (var o = [], s = 0; s < n.length; s += r.step) {var a = 0;for (t = s + r.step - 1; s <= t; t--) {a = (a << 1) + n[t];}o.push(a);}for (var u = this.jpoint(null, null, null), l = this.jpoint(null, null, null), h = i; 0 < h; h--) {for (s = 0; s < o.length; s++) {(a = o[s]) === h ? l = l.mixedAdd(r.points[s]) : a === -h && (l = l.mixedAdd(r.points[s].neg()));}u = u.add(l);}return u.toP();}, o.prototype._wnafMul = function (e, t) {var r = 4,n = e._getNAFPoints(r);r = n.wnd;for (var i = n.points, o = S(t, r), s = this.jpoint(null, null, null), a = o.length - 1; 0 <= a; a--) {for (t = 0; 0 <= a && 0 === o[a]; a--) {t++;}if (0 <= a && t++, s = s.dblp(t), a < 0) break;var u = o[a];f(0 !== u), s = \"affine\" === e.type ? 0 < u ? s.mixedAdd(i[u - 1 >> 1]) : s.mixedAdd(i[-u - 1 >> 1].neg()) : 0 < u ? s.add(i[u - 1 >> 1]) : s.add(i[-u - 1 >> 1].neg());}return \"affine\" === e.type ? s.toP() : s;}, o.prototype._wnafMulAdd = function (e, t, r, n, i) {for (var o = this._wnafT1, s = this._wnafT2, a = this._wnafT3, u = 0, l = 0; l < n; l++) {var h = (A = t[l])._getNAFPoints(e);o[l] = h.wnd, s[l] = h.points;}for (l = n - 1; 1 <= l; l -= 2) {var f = l - 1,c = l;if (1 === o[f] && 1 === o[c]) {var d = [t[f], null, null, t[c]];0 === t[f].y.cmp(t[c].y) ? (d[1] = t[f].add(t[c]), d[2] = t[f].toJ().mixedAdd(t[c].neg())) : 0 === t[f].y.cmp(t[c].y.redNeg()) ? (d[1] = t[f].toJ().mixedAdd(t[c]), d[2] = t[f].add(t[c].neg())) : (d[1] = t[f].toJ().mixedAdd(t[c]), d[2] = t[f].toJ().mixedAdd(t[c].neg()));var p = [-3, -1, -5, -7, 0, 7, 5, 1, 3],v = k(r[f], r[c]);u = Math.max(v[0].length, u), a[f] = new Array(u), a[c] = new Array(u);for (var y = 0; y < u; y++) {var m = 0 | v[0][y],g = 0 | v[1][y];a[f][y] = p[3 * (1 + m) + (1 + g)], a[c][y] = 0, s[f] = d;}} else a[f] = S(r[f], o[f]), a[c] = S(r[c], o[c]), u = Math.max(a[f].length, u), u = Math.max(a[c].length, u);}var b = this.jpoint(null, null, null),w = this._wnafT4;for (l = u; 0 <= l; l--) {for (var _ = 0; 0 <= l;) {var M = !0;for (y = 0; y < n; y++) {w[y] = 0 | a[y][l], 0 !== w[y] && (M = !1);}if (!M) break;_++, l--;}if (0 <= l && _++, b = b.dblp(_), l < 0) break;for (y = 0; y < n; y++) {var A,E = w[y];0 !== E && (0 < E ? A = s[y][E - 1 >> 1] : E < 0 && (A = s[y][-E - 1 >> 1].neg()), b = \"affine\" === A.type ? b.mixedAdd(A) : b.add(A));}}for (l = 0; l < n; l++) {s[l] = null;}return i ? b : b.toP();}, (o.BasePoint = s).prototype.eq = function () {throw new Error(\"Not implemented\");}, s.prototype.validate = function () {return this.curve.validate(this);}, o.prototype.decodePoint = function (e, t) {e = i.toArray(e, t);var r = this.p.byteLength();if ((4 === e[0] || 6 === e[0] || 7 === e[0]) && e.length - 1 == 2 * r) return 6 === e[0] ? f(e[e.length - 1] % 2 == 0) : 7 === e[0] && f(e[e.length - 1] % 2 == 1), this.point(e.slice(1, 1 + r), e.slice(1 + r, 1 + 2 * r));if ((2 === e[0] || 3 === e[0]) && e.length - 1 === r) return this.pointFromX(e.slice(1, 1 + r), 3 === e[0]);throw new Error(\"Unknown point format\");}, s.prototype.encodeCompressed = function (e) {return this.encode(e, !0);}, s.prototype._encode = function (e) {var t = this.curve.p.byteLength(),r = this.getX().toArray(\"be\", t);return e ? [this.getY().isEven() ? 2 : 3].concat(r) : [4].concat(r, this.getY().toArray(\"be\", t));}, s.prototype.encode = function (e, t) {return i.encode(this._encode(t), e);}, s.prototype.precompute = function (e) {if (this.precomputed) return this;var t = { doubles: null, naf: null, beta: null };return t.naf = this._getNAFPoints(8), t.doubles = this._getDoubles(4, e), t.beta = this._getBeta(), this.precomputed = t, this;}, s.prototype._hasDoubles = function (e) {if (!this.precomputed) return !1;var t = this.precomputed.doubles;return !!t && t.points.length >= Math.ceil((e.bitLength() + 1) / t.step);}, s.prototype._getDoubles = function (e, t) {if (this.precomputed && this.precomputed.doubles) return this.precomputed.doubles;for (var r = [this], n = this, i = 0; i < t; i += e) {for (var o = 0; o < e; o++) {n = n.dbl();}r.push(n);}return { step: e, points: r };}, s.prototype._getNAFPoints = function (e) {if (this.precomputed && this.precomputed.naf) return this.precomputed.naf;for (var t = [this], r = (1 << e) - 1, n = 1 == r ? null : this.dbl(), i = 1; i < r; i++) {t[i] = t[i - 1].add(n);}return { wnd: e, points: t };}, s.prototype._getBeta = function () {return null;}, s.prototype.dblp = function (e) {for (var t = this, r = 0; r < e; r++) {t = t.dbl();}return t;};}, { \"../../elliptic\": 12, \"bn.js\": 9 }], 14: [function (e, t, r) {t.exports = {};}, {}], 15: [function (e, t, r) {\"use strict\";var n = r;n.base = e(\"./base\"), n.short = e(\"./short\"), n.mont = e(\"./mont\"), n.edwards = e(\"./edwards\");}, { \"./base\": 13, \"./edwards\": 14, \"./mont\": 16, \"./short\": 17 }], 16: [function (e, t, r) {arguments[4][14][0].apply(r, arguments);}, { dup: 14 }], 17: [function (e, t, r) {\"use strict\";var n = e(\"../curve\"),i = e(\"../../elliptic\"),_ = e(\"bn.js\"),o = e(\"inherits\"),s = n.base,a = i.utils.assert;function u(e) {s.call(this, \"short\", e), this.a = new _(e.a, 16).toRed(this.red), this.b = new _(e.b, 16).toRed(this.red), this.tinv = this.two.redInvm(), this.zeroA = 0 === this.a.fromRed().cmpn(0), this.threeA = 0 === this.a.fromRed().sub(this.p).cmpn(-3), this.endo = this._getEndomorphism(e), this._endoWnafT1 = new Array(4), this._endoWnafT2 = new Array(4);}function l(e, t, r, n) {s.BasePoint.call(this, e, \"affine\"), null === t && null === r ? (this.x = null, this.y = null, this.inf = !0) : (this.x = new _(t, 16), this.y = new _(r, 16), n && (this.x.forceRed(this.curve.red), this.y.forceRed(this.curve.red)), this.x.red || (this.x = this.x.toRed(this.curve.red)), this.y.red || (this.y = this.y.toRed(this.curve.red)), this.inf = !1);}function h(e, t, r, n) {s.BasePoint.call(this, e, \"jacobian\"), null === t && null === r && null === n ? (this.x = this.curve.one, this.y = this.curve.one, this.z = new _(0)) : (this.x = new _(t, 16), this.y = new _(r, 16), this.z = new _(n, 16)), this.x.red || (this.x = this.x.toRed(this.curve.red)), this.y.red || (this.y = this.y.toRed(this.curve.red)), this.z.red || (this.z = this.z.toRed(this.curve.red)), this.zOne = this.z === this.curve.one;}o(u, s), (t.exports = u).prototype._getEndomorphism = function (e) {if (this.zeroA && this.g && this.n && 1 === this.p.modn(3)) {var t, r;if (e.beta) t = new _(e.beta, 16).toRed(this.red);else {var n = this._getEndoRoots(this.p);t = (t = n[0].cmp(n[1]) < 0 ? n[0] : n[1]).toRed(this.red);}if (e.lambda) r = new _(e.lambda, 16);else {var i = this._getEndoRoots(this.n);0 === this.g.mul(i[0]).x.cmp(this.g.x.redMul(t)) ? r = i[0] : (r = i[1], a(0 === this.g.mul(r).x.cmp(this.g.x.redMul(t))));}return { beta: t, lambda: r, basis: e.basis ? e.basis.map(function (e) {return { a: new _(e.a, 16), b: new _(e.b, 16) };}) : this._getEndoBasis(r) };}}, u.prototype._getEndoRoots = function (e) {var t = e === this.p ? this.red : _.mont(e),r = new _(2).toRed(t).redInvm(),n = r.redNeg(),i = new _(3).toRed(t).redNeg().redSqrt().redMul(r);return [n.redAdd(i).fromRed(), n.redSub(i).fromRed()];}, u.prototype._getEndoBasis = function (e) {for (var t, r, n, i, o, s, a, u, l, h = this.n.ushrn(Math.floor(this.n.bitLength() / 2)), f = e, c = this.n.clone(), d = new _(1), p = new _(0), v = new _(0), y = new _(1), m = 0; 0 !== f.cmpn(0);) {var g = c.div(f);u = c.sub(g.mul(f)), l = v.sub(g.mul(d));var b = y.sub(g.mul(p));if (!n && u.cmp(h) < 0) t = a.neg(), r = d, n = u.neg(), i = l;else if (n && 2 == ++m) break;c = f, f = a = u, v = d, d = l, y = p, p = b;}o = u.neg(), s = l;var w = n.sqr().add(i.sqr());return 0 <= o.sqr().add(s.sqr()).cmp(w) && (o = t, s = r), n.negative && (n = n.neg(), i = i.neg()), o.negative && (o = o.neg(), s = s.neg()), [{ a: n, b: i }, { a: o, b: s }];}, u.prototype._endoSplit = function (e) {var t = this.endo.basis,r = t[0],n = t[1],i = n.b.mul(e).divRound(this.n),o = r.b.neg().mul(e).divRound(this.n),s = i.mul(r.a),a = o.mul(n.a),u = i.mul(r.b),l = o.mul(n.b);return { k1: e.sub(s).sub(a), k2: u.add(l).neg() };}, u.prototype.pointFromX = function (e, t) {(e = new _(e, 16)).red || (e = e.toRed(this.red));var r = e.redSqr().redMul(e).redIAdd(e.redMul(this.a)).redIAdd(this.b),n = r.redSqrt();if (0 !== n.redSqr().redSub(r).cmp(this.zero)) throw new Error(\"invalid point\");var i = n.fromRed().isOdd();return (t && !i || !t && i) && (n = n.redNeg()), this.point(e, n);}, u.prototype.validate = function (e) {if (e.inf) return !0;var t = e.x,r = e.y,n = this.a.redMul(t),i = t.redSqr().redMul(t).redIAdd(n).redIAdd(this.b);return 0 === r.redSqr().redISub(i).cmpn(0);}, u.prototype._endoWnafMulAdd = function (e, t, r) {for (var n = this._endoWnafT1, i = this._endoWnafT2, o = 0; o < e.length; o++) {var s = this._endoSplit(t[o]),a = e[o],u = a._getBeta();s.k1.negative && (s.k1.ineg(), a = a.neg(!0)), s.k2.negative && (s.k2.ineg(), u = u.neg(!0)), n[2 * o] = a, n[2 * o + 1] = u, i[2 * o] = s.k1, i[2 * o + 1] = s.k2;}for (var l = this._wnafMulAdd(1, n, i, 2 * o, r), h = 0; h < 2 * o; h++) {n[h] = null, i[h] = null;}return l;}, o(l, s.BasePoint), u.prototype.point = function (e, t, r) {return new l(this, e, t, r);}, u.prototype.pointFromJSON = function (e, t) {return l.fromJSON(this, e, t);}, l.prototype._getBeta = function () {if (this.curve.endo) {var e = this.precomputed;if (e && e.beta) return e.beta;var t = this.curve.point(this.x.redMul(this.curve.endo.beta), this.y);if (e) {var r = this.curve,n = function n(e) {return r.point(e.x.redMul(r.endo.beta), e.y);};(e.beta = t).precomputed = { beta: null, naf: e.naf && { wnd: e.naf.wnd, points: e.naf.points.map(n) }, doubles: e.doubles && { step: e.doubles.step, points: e.doubles.points.map(n) } };}return t;}}, l.prototype.toJSON = function () {return this.precomputed ? [this.x, this.y, this.precomputed && { doubles: this.precomputed.doubles && { step: this.precomputed.doubles.step, points: this.precomputed.doubles.points.slice(1) }, naf: this.precomputed.naf && { wnd: this.precomputed.naf.wnd, points: this.precomputed.naf.points.slice(1) } }] : [this.x, this.y];}, l.fromJSON = function (t, e, r) {\"string\" == typeof e && (e = JSON.parse(e));var n = t.point(e[0], e[1], r);if (!e[2]) return n;function i(e) {return t.point(e[0], e[1], r);}var o = e[2];return n.precomputed = { beta: null, doubles: o.doubles && { step: o.doubles.step, points: [n].concat(o.doubles.points.map(i)) }, naf: o.naf && { wnd: o.naf.wnd, points: [n].concat(o.naf.points.map(i)) } }, n;}, l.prototype.inspect = function () {return this.isInfinity() ? \"<EC Point Infinity>\" : \"<EC Point x: \" + this.x.fromRed().toString(16, 2) + \" y: \" + this.y.fromRed().toString(16, 2) + \">\";}, l.prototype.isInfinity = function () {return this.inf;}, l.prototype.add = function (e) {if (this.inf) return e;if (e.inf) return this;if (this.eq(e)) return this.dbl();if (this.neg().eq(e)) return this.curve.point(null, null);if (0 === this.x.cmp(e.x)) return this.curve.point(null, null);var t = this.y.redSub(e.y);0 !== t.cmpn(0) && (t = t.redMul(this.x.redSub(e.x).redInvm()));var r = t.redSqr().redISub(this.x).redISub(e.x),n = t.redMul(this.x.redSub(r)).redISub(this.y);return this.curve.point(r, n);}, l.prototype.dbl = function () {if (this.inf) return this;var e = this.y.redAdd(this.y);if (0 === e.cmpn(0)) return this.curve.point(null, null);var t = this.curve.a,r = this.x.redSqr(),n = e.redInvm(),i = r.redAdd(r).redIAdd(r).redIAdd(t).redMul(n),o = i.redSqr().redISub(this.x.redAdd(this.x)),s = i.redMul(this.x.redSub(o)).redISub(this.y);return this.curve.point(o, s);}, l.prototype.getX = function () {return this.x.fromRed();}, l.prototype.getY = function () {return this.y.fromRed();}, l.prototype.mul = function (e) {return e = new _(e, 16), this._hasDoubles(e) ? this.curve._fixedNafMul(this, e) : this.curve.endo ? this.curve._endoWnafMulAdd([this], [e]) : this.curve._wnafMul(this, e);}, l.prototype.mulAdd = function (e, t, r) {var n = [this, t],i = [e, r];return this.curve.endo ? this.curve._endoWnafMulAdd(n, i) : this.curve._wnafMulAdd(1, n, i, 2);}, l.prototype.jmulAdd = function (e, t, r) {var n = [this, t],i = [e, r];return this.curve.endo ? this.curve._endoWnafMulAdd(n, i, !0) : this.curve._wnafMulAdd(1, n, i, 2, !0);}, l.prototype.eq = function (e) {return this === e || this.inf === e.inf && (this.inf || 0 === this.x.cmp(e.x) && 0 === this.y.cmp(e.y));}, l.prototype.neg = function (e) {if (this.inf) return this;var t = this.curve.point(this.x, this.y.redNeg());if (e && this.precomputed) {var r = this.precomputed,n = function n(e) {return e.neg();};t.precomputed = { naf: r.naf && { wnd: r.naf.wnd, points: r.naf.points.map(n) }, doubles: r.doubles && { step: r.doubles.step, points: r.doubles.points.map(n) } };}return t;}, l.prototype.toJ = function () {return this.inf ? this.curve.jpoint(null, null, null) : this.curve.jpoint(this.x, this.y, this.curve.one);}, o(h, s.BasePoint), u.prototype.jpoint = function (e, t, r) {return new h(this, e, t, r);}, h.prototype.toP = function () {if (this.isInfinity()) return this.curve.point(null, null);var e = this.z.redInvm(),t = e.redSqr(),r = this.x.redMul(t),n = this.y.redMul(t).redMul(e);return this.curve.point(r, n);}, h.prototype.neg = function () {return this.curve.jpoint(this.x, this.y.redNeg(), this.z);}, h.prototype.add = function (e) {if (this.isInfinity()) return e;if (e.isInfinity()) return this;var t = e.z.redSqr(),r = this.z.redSqr(),n = this.x.redMul(t),i = e.x.redMul(r),o = this.y.redMul(t.redMul(e.z)),s = e.y.redMul(r.redMul(this.z)),a = n.redSub(i),u = o.redSub(s);if (0 === a.cmpn(0)) return 0 !== u.cmpn(0) ? this.curve.jpoint(null, null, null) : this.dbl();var l = a.redSqr(),h = l.redMul(a),f = n.redMul(l),c = u.redSqr().redIAdd(h).redISub(f).redISub(f),d = u.redMul(f.redISub(c)).redISub(o.redMul(h)),p = this.z.redMul(e.z).redMul(a);return this.curve.jpoint(c, d, p);}, h.prototype.mixedAdd = function (e) {if (this.isInfinity()) return e.toJ();if (e.isInfinity()) return this;var t = this.z.redSqr(),r = this.x,n = e.x.redMul(t),i = this.y,o = e.y.redMul(t).redMul(this.z),s = r.redSub(n),a = i.redSub(o);if (0 === s.cmpn(0)) return 0 !== a.cmpn(0) ? this.curve.jpoint(null, null, null) : this.dbl();var u = s.redSqr(),l = u.redMul(s),h = r.redMul(u),f = a.redSqr().redIAdd(l).redISub(h).redISub(h),c = a.redMul(h.redISub(f)).redISub(i.redMul(l)),d = this.z.redMul(s);return this.curve.jpoint(f, c, d);}, h.prototype.dblp = function (e) {if (0 === e) return this;if (this.isInfinity()) return this;if (!e) return this.dbl();if (this.curve.zeroA || this.curve.threeA) {for (var t = this, r = 0; r < e; r++) {t = t.dbl();}return t;}var n = this.curve.a,i = this.curve.tinv,o = this.x,s = this.y,a = this.z,u = a.redSqr().redSqr(),l = s.redAdd(s);for (r = 0; r < e; r++) {var h = o.redSqr(),f = l.redSqr(),c = f.redSqr(),d = h.redAdd(h).redIAdd(h).redIAdd(n.redMul(u)),p = o.redMul(f),v = d.redSqr().redISub(p.redAdd(p)),y = p.redISub(v),m = d.redMul(y);m = m.redIAdd(m).redISub(c);var g = l.redMul(a);r + 1 < e && (u = u.redMul(c)), o = v, a = g, l = m;}return this.curve.jpoint(o, l.redMul(i), a);}, h.prototype.dbl = function () {return this.isInfinity() ? this : this.curve.zeroA ? this._zeroDbl() : this.curve.threeA ? this._threeDbl() : this._dbl();}, h.prototype._zeroDbl = function () {var e, t, r;if (this.zOne) {var n = this.x.redSqr(),i = this.y.redSqr(),o = i.redSqr(),s = this.x.redAdd(i).redSqr().redISub(n).redISub(o);s = s.redIAdd(s);var a = n.redAdd(n).redIAdd(n),u = a.redSqr().redISub(s).redISub(s),l = o.redIAdd(o);l = (l = l.redIAdd(l)).redIAdd(l), e = u, t = a.redMul(s.redISub(u)).redISub(l), r = this.y.redAdd(this.y);} else {var h = this.x.redSqr(),f = this.y.redSqr(),c = f.redSqr(),d = this.x.redAdd(f).redSqr().redISub(h).redISub(c);d = d.redIAdd(d);var p = h.redAdd(h).redIAdd(h),v = p.redSqr(),y = c.redIAdd(c);y = (y = y.redIAdd(y)).redIAdd(y), e = v.redISub(d).redISub(d), t = p.redMul(d.redISub(e)).redISub(y), r = (r = this.y.redMul(this.z)).redIAdd(r);}return this.curve.jpoint(e, t, r);}, h.prototype._threeDbl = function () {var e, t, r;if (this.zOne) {var n = this.x.redSqr(),i = this.y.redSqr(),o = i.redSqr(),s = this.x.redAdd(i).redSqr().redISub(n).redISub(o);s = s.redIAdd(s);var a = n.redAdd(n).redIAdd(n).redIAdd(this.curve.a),u = a.redSqr().redISub(s).redISub(s);e = u;var l = o.redIAdd(o);l = (l = l.redIAdd(l)).redIAdd(l), t = a.redMul(s.redISub(u)).redISub(l), r = this.y.redAdd(this.y);} else {var h = this.z.redSqr(),f = this.y.redSqr(),c = this.x.redMul(f),d = this.x.redSub(h).redMul(this.x.redAdd(h));d = d.redAdd(d).redIAdd(d);var p = c.redIAdd(c),v = (p = p.redIAdd(p)).redAdd(p);e = d.redSqr().redISub(v), r = this.y.redAdd(this.z).redSqr().redISub(f).redISub(h);var y = f.redSqr();y = (y = (y = y.redIAdd(y)).redIAdd(y)).redIAdd(y), t = d.redMul(p.redISub(e)).redISub(y);}return this.curve.jpoint(e, t, r);}, h.prototype._dbl = function () {var e = this.curve.a,t = this.x,r = this.y,n = this.z,i = n.redSqr().redSqr(),o = t.redSqr(),s = r.redSqr(),a = o.redAdd(o).redIAdd(o).redIAdd(e.redMul(i)),u = t.redAdd(t),l = (u = u.redIAdd(u)).redMul(s),h = a.redSqr().redISub(l.redAdd(l)),f = l.redISub(h),c = s.redSqr();c = (c = (c = c.redIAdd(c)).redIAdd(c)).redIAdd(c);var d = a.redMul(f).redISub(c),p = r.redAdd(r).redMul(n);return this.curve.jpoint(h, d, p);}, h.prototype.trpl = function () {if (!this.curve.zeroA) return this.dbl().add(this);var e = this.x.redSqr(),t = this.y.redSqr(),r = this.z.redSqr(),n = t.redSqr(),i = e.redAdd(e).redIAdd(e),o = i.redSqr(),s = this.x.redAdd(t).redSqr().redISub(e).redISub(n),a = (s = (s = (s = s.redIAdd(s)).redAdd(s).redIAdd(s)).redISub(o)).redSqr(),u = n.redIAdd(n);u = (u = (u = u.redIAdd(u)).redIAdd(u)).redIAdd(u);var l = i.redIAdd(s).redSqr().redISub(o).redISub(a).redISub(u),h = t.redMul(l);h = (h = h.redIAdd(h)).redIAdd(h);var f = this.x.redMul(a).redISub(h);f = (f = f.redIAdd(f)).redIAdd(f);var c = this.y.redMul(l.redMul(u.redISub(l)).redISub(s.redMul(a)));c = (c = (c = c.redIAdd(c)).redIAdd(c)).redIAdd(c);var d = this.z.redAdd(s).redSqr().redISub(r).redISub(a);return this.curve.jpoint(f, c, d);}, h.prototype.mul = function (e, t) {return e = new _(e, t), this.curve._wnafMul(this, e);}, h.prototype.eq = function (e) {if (\"affine\" === e.type) return this.eq(e.toJ());if (this === e) return !0;var t = this.z.redSqr(),r = e.z.redSqr();if (0 !== this.x.redMul(r).redISub(e.x.redMul(t)).cmpn(0)) return !1;var n = t.redMul(this.z),i = r.redMul(e.z);return 0 === this.y.redMul(i).redISub(e.y.redMul(n)).cmpn(0);}, h.prototype.eqXToP = function (e) {var t = this.z.redSqr(),r = e.toRed(this.curve.red).redMul(t);if (0 === this.x.cmp(r)) return !0;for (var n = e.clone(), i = this.curve.redN.redMul(t);;) {if (n.iadd(this.curve.n), 0 <= n.cmp(this.curve.p)) return !1;if (r.redIAdd(i), 0 === this.x.cmp(r)) return !0;}return !1;}, h.prototype.inspect = function () {return this.isInfinity() ? \"<EC JPoint Infinity>\" : \"<EC JPoint x: \" + this.x.toString(16, 2) + \" y: \" + this.y.toString(16, 2) + \" z: \" + this.z.toString(16, 2) + \">\";}, h.prototype.isInfinity = function () {return 0 === this.z.cmpn(0);};}, { \"../../elliptic\": 12, \"../curve\": 15, \"bn.js\": 9, inherits: 39 }], 18: [function (e, t, r) {\"use strict\";var n,i = r,o = e(\"hash.js\"),s = e(\"../elliptic\"),a = s.utils.assert;function u(e) {\"short\" === e.type ? this.curve = new s.curve.short(e) : \"edwards\" === e.type ? this.curve = new s.curve.edwards(e) : this.curve = new s.curve.mont(e), this.g = this.curve.g, this.n = this.curve.n, this.hash = e.hash, a(this.g.validate(), \"Invalid curve\"), a(this.g.mul(this.n).isInfinity(), \"Invalid curve, G*N != O\");}function l(t, r) {Object.defineProperty(i, t, { configurable: !0, enumerable: !0, get: function get() {var e = new u(r);return Object.defineProperty(i, t, { configurable: !0, enumerable: !0, value: e }), e;} });}i.PresetCurve = u, l(\"p192\", { type: \"short\", prime: \"p192\", p: \"ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff\", a: \"ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc\", b: \"64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1\", n: \"ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831\", hash: o.sha256, gRed: !1, g: [\"188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012\", \"07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811\"] }), l(\"p224\", { type: \"short\", prime: \"p224\", p: \"ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001\", a: \"ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe\", b: \"b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4\", n: \"ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d\", hash: o.sha256, gRed: !1, g: [\"b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21\", \"bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34\"] }), l(\"p256\", { type: \"short\", prime: null, p: \"ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff\", a: \"ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc\", b: \"5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b\", n: \"ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551\", hash: o.sha256, gRed: !1, g: [\"6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296\", \"4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5\"] }), l(\"p384\", { type: \"short\", prime: null, p: \"ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 ffffffff\", a: \"ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 fffffffc\", b: \"b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f 5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef\", n: \"ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 f4372ddf 581a0db2 48b0a77a ecec196a ccc52973\", hash: o.sha384, gRed: !1, g: [\"aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 5502f25d bf55296c 3a545e38 72760ab7\", \"3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 0a60b1ce 1d7e819d 7a431d7c 90ea0e5f\"] }), l(\"p521\", { type: \"short\", prime: null, p: \"000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff\", a: \"000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffc\", b: \"00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b 99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd 3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00\", n: \"000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409\", hash: o.sha512, gRed: !1, g: [\"000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66\", \"00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 3fad0761 353c7086 a272c240 88be9476 9fd16650\"] }), l(\"curve25519\", { type: \"mont\", prime: \"p25519\", p: \"7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed\", a: \"76d06\", b: \"1\", n: \"1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed\", hash: o.sha256, gRed: !1, g: [\"9\"] }), l(\"ed25519\", { type: \"edwards\", prime: \"p25519\", p: \"7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed\", a: \"-1\", c: \"1\", d: \"52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3\", n: \"1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed\", hash: o.sha256, gRed: !1, g: [\"216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a\", \"6666666666666666666666666666666666666666666666666666666666666658\"] });try {n = e(\"./precomputed/secp256k1\");} catch (e) {n = void 0;}l(\"secp256k1\", { type: \"short\", prime: \"k256\", p: \"ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f\", a: \"0\", b: \"7\", n: \"ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141\", h: \"1\", hash: o.sha256, beta: \"7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee\", lambda: \"5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72\", basis: [{ a: \"3086d221a7d46bcde86c90e49284eb15\", b: \"-e4437ed6010e88286f547fa90abfe4c3\" }, { a: \"114ca50f7a8e2f3f657c1108d9d44cfd8\", b: \"3086d221a7d46bcde86c90e49284eb15\" }], gRed: !1, g: [\"79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798\", \"483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8\", n] });}, { \"../elliptic\": 12, \"./precomputed/secp256k1\": 24, \"hash.js\": 27 }], 19: [function (e, t, r) {\"use strict\";var y = e(\"bn.js\"),m = e(\"../../elliptic\"),d = m.utils.assert,n = e(\"./key\"),g = e(\"./signature\");function i(e) {if (!(this instanceof i)) return new i(e);\"string\" == typeof e && (d(m.curves.hasOwnProperty(e), \"Unknown curve \" + e), e = m.curves[e]), e instanceof m.curves.PresetCurve && (e = { curve: e }), this.curve = e.curve.curve, this.n = this.curve.n, this.nh = this.n.ushrn(1), this.g = this.curve.g, this.g = e.curve.g, this.g.precompute(e.curve.n.bitLength() + 1), this.hash = e.hash || e.curve.hash;}(t.exports = i).prototype.keyPair = function (e) {return new n(this, e);}, i.prototype.keyFromPrivate = function (e, t) {return n.fromPrivate(this, e, t);}, i.prototype.keyFromPublic = function (e, t) {return n.fromPublic(this, e, t);}, i.prototype.genKeyPair = function (e) {e = e || {};for (var t = new m.hmacDRBG({ hash: this.hash, pers: e.pers, entropy: e.entropy || m.rand(this.hash.hmacStrength), nonce: this.n.toArray() }), r = this.n.byteLength(), n = this.n.sub(new y(2));;) {var i = new y(t.generate(r));if (!(0 < i.cmp(n))) return i.iaddn(1), this.keyFromPrivate(i);}}, i.prototype._truncateToN = function (e, t) {var r = 8 * e.byteLength() - this.n.bitLength();return 0 < r && (e = e.ushrn(r)), !t && 0 <= e.cmp(this.n) ? e.sub(this.n) : e;}, i.prototype.sign = function (e, t, r, n) {\"object\" == typeof r && (n = r, r = null), n = n || {}, t = this.keyFromPrivate(t, r), e = this._truncateToN(new y(e, 16));for (var i = this.n.byteLength(), o = t.getPrivate().toArray(\"be\", i), s = e.toArray(\"be\", i), a = new m.hmacDRBG({ hash: this.hash, entropy: o, nonce: s, pers: n.pers, persEnc: n.persEnc }), u = this.n.sub(new y(1)), l = 0;; l++) {var h = n.k ? n.k(l) : new y(a.generate(this.n.byteLength()));if (!((h = this._truncateToN(h, !0)).cmpn(1) <= 0 || 0 <= h.cmp(u))) {var f = this.g.mul(h);if (!f.isInfinity()) {var c = f.getX(),d = c.umod(this.n);if (0 !== d.cmpn(0)) {var p = h.invm(this.n).mul(d.mul(t.getPrivate()).iadd(e));if (0 !== (p = p.umod(this.n)).cmpn(0)) {var v = (f.getY().isOdd() ? 1 : 0) | (0 !== c.cmp(d) ? 2 : 0);return n.canonical && 0 < p.cmp(this.nh) && (p = this.n.sub(p), v ^= 1), new g({ r: d, s: p, recoveryParam: v });}}}}}}, i.prototype.verify = function (e, t, r, n) {e = this._truncateToN(new y(e, 16)), r = this.keyFromPublic(r, n);var i = (t = new g(t, \"hex\")).r,o = t.s;if (i.cmpn(1) < 0 || 0 <= i.cmp(this.n)) return !1;if (o.cmpn(1) < 0 || 0 <= o.cmp(this.n)) return !1;var s,a = o.invm(this.n),u = a.mul(e).umod(this.n),l = a.mul(i).umod(this.n);return this.curve._maxwellTrick ? !(s = this.g.jmulAdd(u, r.getPublic(), l)).isInfinity() && s.eqXToP(i) : !(s = this.g.mulAdd(u, r.getPublic(), l)).isInfinity() && 0 === s.getX().umod(this.n).cmp(i);}, i.prototype.recoverPubKey = function (e, t, r, n) {d((3 & r) === r, \"The recovery param is more than two bits\"), t = new g(t, n);var i = this.n,o = new y(e),s = t.r,a = t.s,u = 1 & r,l = r >> 1;if (0 <= s.cmp(this.curve.p.umod(this.curve.n)) && l) throw new Error(\"Unable to find sencond key candinate\");s = l ? this.curve.pointFromX(s.add(this.curve.n), u) : this.curve.pointFromX(s, u);var h = t.r.invm(i),f = i.sub(o).mul(h).umod(i),c = a.mul(h).umod(i);return this.g.mulAdd(f, s, c);}, i.prototype.getKeyRecoveryParam = function (e, t, r, n) {if (null !== (t = new g(t, n)).recoveryParam) return t.recoveryParam;for (var i = 0; i < 4; i++) {var o;try {o = this.recoverPubKey(e, t, i);} catch (e) {continue;}if (o.eq(r)) return i;}throw new Error(\"Unable to find valid recovery factor\");};}, { \"../../elliptic\": 12, \"./key\": 20, \"./signature\": 21, \"bn.js\": 9 }], 20: [function (e, t, r) {\"use strict\";var n = e(\"bn.js\"),i = e(\"../../elliptic\").utils.assert;function o(e, t) {this.ec = e, this.priv = null, this.pub = null, t.priv && this._importPrivate(t.priv, t.privEnc), t.pub && this._importPublic(t.pub, t.pubEnc);}(t.exports = o).fromPublic = function (e, t, r) {return t instanceof o ? t : new o(e, { pub: t, pubEnc: r });}, o.fromPrivate = function (e, t, r) {return t instanceof o ? t : new o(e, { priv: t, privEnc: r });}, o.prototype.validate = function () {var e = this.getPublic();return e.isInfinity() ? { result: !1, reason: \"Invalid public key\" } : e.validate() ? e.mul(this.ec.curve.n).isInfinity() ? { result: !0, reason: null } : { result: !1, reason: \"Public key * N != O\" } : { result: !1, reason: \"Public key is not a point\" };}, o.prototype.getPublic = function (e, t) {return \"string\" == typeof e && (t = e, e = null), this.pub || (this.pub = this.ec.g.mul(this.priv)), t ? this.pub.encode(t, e) : this.pub;}, o.prototype.getPrivate = function (e) {return \"hex\" === e ? this.priv.toString(16, 2) : this.priv;}, o.prototype._importPrivate = function (e, t) {this.priv = new n(e, t || 16), this.priv = this.priv.umod(this.ec.curve.n);}, o.prototype._importPublic = function (e, t) {if (e.x || e.y) return \"mont\" === this.ec.curve.type ? i(e.x, \"Need x coordinate\") : \"short\" !== this.ec.curve.type && \"edwards\" !== this.ec.curve.type || i(e.x && e.y, \"Need both x and y coordinate\"), void (this.pub = this.ec.curve.point(e.x, e.y));this.pub = this.ec.curve.decodePoint(e, t);}, o.prototype.derive = function (e) {return e.mul(this.priv).getX();}, o.prototype.sign = function (e, t, r) {return this.ec.sign(e, this, t, r);}, o.prototype.verify = function (e, t) {return this.ec.verify(e, t, this);}, o.prototype.inspect = function () {return \"<Key priv: \" + (this.priv && this.priv.toString(16, 2)) + \" pub: \" + (this.pub && this.pub.inspect()) + \" >\";};}, { \"../../elliptic\": 12, \"bn.js\": 9 }], 21: [function (e, t, r) {\"use strict\";var a = e(\"bn.js\"),u = e(\"../../elliptic\").utils,n = u.assert;function i(e, t) {if (e instanceof i) return e;this._importDER(e, t) || (n(e.r && e.s, \"Signature without r or s\"), this.r = new a(e.r, 16), this.s = new a(e.s, 16), void 0 === e.recoveryParam ? this.recoveryParam = null : this.recoveryParam = e.recoveryParam);}function l() {this.place = 0;}function h(e, t) {var r = e[t.place++];if (!(128 & r)) return r;for (var n = 15 & r, i = 0, o = 0, s = t.place; o < n; o++, s++) {i <<= 8, i |= e[s];}return t.place = s, i;}function s(e) {for (var t = 0, r = e.length - 1; !e[t] && !(128 & e[t + 1]) && t < r;) {t++;}return 0 === t ? e : e.slice(t);}function f(e, t) {if (t < 128) e.push(t);else {var r = 1 + (Math.log(t) / Math.LN2 >>> 3);for (e.push(128 | r); --r;) {e.push(t >>> (r << 3) & 255);}e.push(t);}}(t.exports = i).prototype._importDER = function (e, t) {e = u.toArray(e, t);var r = new l();if (48 !== e[r.place++]) return !1;if (h(e, r) + r.place !== e.length) return !1;if (2 !== e[r.place++]) return !1;var n = h(e, r),i = e.slice(r.place, n + r.place);if (r.place += n, 2 !== e[r.place++]) return !1;var o = h(e, r);if (e.length !== o + r.place) return !1;var s = e.slice(r.place, o + r.place);return 0 === i[0] && 128 & i[1] && (i = i.slice(1)), 0 === s[0] && 128 & s[1] && (s = s.slice(1)), this.r = new a(i), this.s = new a(s), !(this.recoveryParam = null);}, i.prototype.toDER = function (e) {var t = this.r.toArray(),r = this.s.toArray();for (128 & t[0] && (t = [0].concat(t)), 128 & r[0] && (r = [0].concat(r)), t = s(t), r = s(r); !(r[0] || 128 & r[1]);) {r = r.slice(1);}var n = [2];f(n, t.length), (n = n.concat(t)).push(2), f(n, r.length);var i = n.concat(r),o = [48];return f(o, i.length), o = o.concat(i), u.encode(o, e);};}, { \"../../elliptic\": 12, \"bn.js\": 9 }], 22: [function (e, t, r) {arguments[4][14][0].apply(r, arguments);}, { dup: 14 }], 23: [function (e, t, r) {\"use strict\";var n = e(\"hash.js\"),s = e(\"../elliptic\").utils,i = s.assert;function o(e) {if (!(this instanceof o)) return new o(e);this.hash = e.hash, this.predResist = !!e.predResist, this.outLen = this.hash.outSize, this.minEntropy = e.minEntropy || this.hash.hmacStrength, this.reseed = null, this.reseedInterval = null, this.K = null, this.V = null;var t = s.toArray(e.entropy, e.entropyEnc),r = s.toArray(e.nonce, e.nonceEnc),n = s.toArray(e.pers, e.persEnc);i(t.length >= this.minEntropy / 8, \"Not enough entropy. Minimum is: \" + this.minEntropy + \" bits\"), this._init(t, r, n);}(t.exports = o).prototype._init = function (e, t, r) {var n = e.concat(t).concat(r);this.K = new Array(this.outLen / 8), this.V = new Array(this.outLen / 8);for (var i = 0; i < this.V.length; i++) {this.K[i] = 0, this.V[i] = 1;}this._update(n), this.reseed = 1, this.reseedInterval = 281474976710656;}, o.prototype._hmac = function () {return new n.hmac(this.hash, this.K);}, o.prototype._update = function (e) {var t = this._hmac().update(this.V).update([0]);e && (t = t.update(e)), this.K = t.digest(), this.V = this._hmac().update(this.V).digest(), e && (this.K = this._hmac().update(this.V).update([1]).update(e).digest(), this.V = this._hmac().update(this.V).digest());}, o.prototype.reseed = function (e, t, r, n) {\"string\" != typeof t && (n = r, r = t, t = null), e = s.toBuffer(e, t), r = s.toBuffer(r, n), i(e.length >= this.minEntropy / 8, \"Not enough entropy. Minimum is: \" + this.minEntropy + \" bits\"), this._update(e.concat(r || [])), this.reseed = 1;}, o.prototype.generate = function (e, t, r, n) {if (this.reseed > this.reseedInterval) throw new Error(\"Reseed is required\");\"string\" != typeof t && (n = r, r = t, t = null), r && (r = s.toArray(r, n), this._update(r));for (var i = []; i.length < e;) {this.V = this._hmac().update(this.V).digest(), i = i.concat(this.V);}var o = i.slice(0, e);return this._update(r), this.reseed++, s.encode(o, t);};}, { \"../elliptic\": 12, \"hash.js\": 27 }], 24: [function (e, t, r) {t.exports = void 0;}, {}], 25: [function (e, t, r) {\"use strict\";var n = r,i = e(\"bn.js\");function o(e) {return 1 === e.length ? \"0\" + e : e;}function s(e) {for (var t = \"\", r = 0; r < e.length; r++) {t += o(e[r].toString(16));}return t;}n.assert = function (e, t) {if (!e) throw new Error(t || \"Assertion failed\");}, n.toArray = function (e, t) {if (Array.isArray(e)) return e.slice();if (!e) return [];var r = [];if (\"string\" != typeof e) {for (var n = 0; n < e.length; n++) {r[n] = 0 | e[n];}return r;}if (t) {if (\"hex\" === t) {(e = e.replace(/[^a-z0-9]+/gi, \"\")).length % 2 != 0 && (e = \"0\" + e);for (n = 0; n < e.length; n += 2) {r.push(parseInt(e[n] + e[n + 1], 16));}}} else for (var n = 0; n < e.length; n++) {var i = e.charCodeAt(n),o = i >> 8,s = 255 & i;o ? r.push(o, s) : r.push(s);}return r;}, n.zero2 = o, n.toHex = s, n.encode = function (e, t) {return \"hex\" === t ? s(e) : e;}, n.getNAF = function (e, t) {for (var r = [], n = 1 << t + 1, i = e.clone(); 0 <= i.cmpn(1);) {var o;if (i.isOdd()) {var s = i.andln(n - 1);o = (n >> 1) - 1 < s ? (n >> 1) - s : s, i.isubn(o);} else o = 0;r.push(o);for (var a = 0 !== i.cmpn(0) && 0 === i.andln(n - 1) ? t + 1 : 1, u = 1; u < a; u++) {r.push(0);}i.iushrn(a);}return r;}, n.getJSF = function (e, t) {var r = [[], []];e = e.clone(), t = t.clone();for (var n = 0, i = 0; 0 < e.cmpn(-n) || 0 < t.cmpn(-i);) {var o,s,a,u = e.andln(3) + n & 3,l = t.andln(3) + i & 3;if (3 === u && (u = -1), 3 === l && (l = -1), 0 == (1 & u)) o = 0;else o = 3 !== (a = e.andln(7) + n & 7) && 5 !== a || 2 !== l ? u : -u;if (r[0].push(o), 0 == (1 & l)) s = 0;else s = 3 !== (a = t.andln(7) + i & 7) && 5 !== a || 2 !== u ? l : -l;r[1].push(s), 2 * n === o + 1 && (n = 1 - n), 2 * i === s + 1 && (i = 1 - i), e.iushrn(1), t.iushrn(1);}return r;}, n.cachedProperty = function (e, t, r) {var n = \"_\" + t;e.prototype[t] = function () {return void 0 !== this[n] ? this[n] : this[n] = r.call(this);};}, n.parseBytes = function (e) {return \"string\" == typeof e ? n.toArray(e, \"hex\") : e;}, n.intFromLE = function (e) {return new i(e, \"hex\", \"le\");};}, { \"bn.js\": 9 }], 26: [function (e, t, r) {t.exports = { version: \"6.3.3\" };}, {}], 27: [function (e, t, r) {var n = r;n.utils = e(\"./hash/utils\"), n.common = e(\"./hash/common\"), n.sha = e(\"./hash/sha\"), n.ripemd = e(\"./hash/ripemd\"), n.hmac = e(\"./hash/hmac\"), n.sha1 = n.sha.sha1, n.sha256 = n.sha.sha256, n.sha224 = n.sha.sha224, n.sha384 = n.sha.sha384, n.sha512 = n.sha.sha512, n.ripemd160 = n.ripemd.ripemd160;}, { \"./hash/common\": 28, \"./hash/hmac\": 29, \"./hash/ripemd\": 30, \"./hash/sha\": 31, \"./hash/utils\": 38 }], 28: [function (e, t, r) {\"use strict\";var i = e(\"./utils\"),n = e(\"minimalistic-assert\");function o() {this.pending = null, this.pendingTotal = 0, this.blockSize = this.constructor.blockSize, this.outSize = this.constructor.outSize, this.hmacStrength = this.constructor.hmacStrength, this.padLength = this.constructor.padLength / 8, this.endian = \"big\", this._delta8 = this.blockSize / 8, this._delta32 = this.blockSize / 32;}(r.BlockHash = o).prototype.update = function (e, t) {if (e = i.toArray(e, t), this.pending ? this.pending = this.pending.concat(e) : this.pending = e, this.pendingTotal += e.length, this.pending.length >= this._delta8) {var r = (e = this.pending).length % this._delta8;this.pending = e.slice(e.length - r, e.length), 0 === this.pending.length && (this.pending = null), e = i.join32(e, 0, e.length - r, this.endian);for (var n = 0; n < e.length; n += this._delta32) {this._update(e, n, n + this._delta32);}}return this;}, o.prototype.digest = function (e) {return this.update(this._pad()), n(null === this.pending), this._digest(e);}, o.prototype._pad = function () {var e = this.pendingTotal,t = this._delta8,r = t - (e + this.padLength) % t,n = new Array(r + this.padLength);n[0] = 128;for (var i = 1; i < r; i++) {n[i] = 0;}if (e <<= 3, \"big\" === this.endian) {for (var o = 8; o < this.padLength; o++) {n[i++] = 0;}n[i++] = 0, n[i++] = 0, n[i++] = 0, n[i++] = 0, n[i++] = e >>> 24 & 255, n[i++] = e >>> 16 & 255, n[i++] = e >>> 8 & 255, n[i++] = 255 & e;} else for (n[i++] = 255 & e, n[i++] = e >>> 8 & 255, n[i++] = e >>> 16 & 255, n[i++] = e >>> 24 & 255, n[i++] = 0, n[i++] = 0, n[i++] = 0, n[i++] = 0, o = 8; o < this.padLength; o++) {n[i++] = 0;}return n;};}, { \"./utils\": 38, \"minimalistic-assert\": 41 }], 29: [function (e, t, r) {\"use strict\";var n = e(\"./utils\"),i = e(\"minimalistic-assert\");function o(e, t, r) {if (!(this instanceof o)) return new o(e, t, r);this.Hash = e, this.blockSize = e.blockSize / 8, this.outSize = e.outSize / 8, this.inner = null, this.outer = null, this._init(n.toArray(t, r));}(t.exports = o).prototype._init = function (e) {e.length > this.blockSize && (e = new this.Hash().update(e).digest()), i(e.length <= this.blockSize);for (var t = e.length; t < this.blockSize; t++) {e.push(0);}for (t = 0; t < e.length; t++) {e[t] ^= 54;}for (this.inner = new this.Hash().update(e), t = 0; t < e.length; t++) {e[t] ^= 106;}this.outer = new this.Hash().update(e);}, o.prototype.update = function (e, t) {return this.inner.update(e, t), this;}, o.prototype.digest = function (e) {return this.outer.update(this.inner.digest()), this.outer.digest(e);};}, { \"./utils\": 38, \"minimalistic-assert\": 41 }], 30: [function (e, t, r) {\"use strict\";var n = e(\"./utils\"),i = e(\"./common\"),p = n.rotl32,v = n.sum32,y = n.sum32_3,m = n.sum32_4,o = i.BlockHash;function s() {if (!(this instanceof s)) return new s();o.call(this), this.h = [1732584193, 4023233417, 2562383102, 271733878, 3285377520], this.endian = \"little\";}function g(e, t, r, n) {return e <= 15 ? t ^ r ^ n : e <= 31 ? t & r | ~t & n : e <= 47 ? (t | ~r) ^ n : e <= 63 ? t & n | r & ~n : t ^ (r | ~n);}function b(e) {return e <= 15 ? 0 : e <= 31 ? 1518500249 : e <= 47 ? 1859775393 : e <= 63 ? 2400959708 : 2840853838;}function w(e) {return e <= 15 ? 1352829926 : e <= 31 ? 1548603684 : e <= 47 ? 1836072691 : e <= 63 ? 2053994217 : 0;}n.inherits(s, o), (r.ripemd160 = s).blockSize = 512, s.outSize = 160, s.hmacStrength = 192, s.padLength = 64, s.prototype._update = function (e, t) {for (var r = this.h[0], n = this.h[1], i = this.h[2], o = this.h[3], s = this.h[4], a = r, u = n, l = i, h = o, f = s, c = 0; c < 80; c++) {var d = v(p(m(r, g(c, n, i, o), e[_[c] + t], b(c)), A[c]), s);r = s, s = o, o = p(i, 10), i = n, n = d, d = v(p(m(a, g(79 - c, u, l, h), e[M[c] + t], w(c)), E[c]), f), a = f, f = h, h = p(l, 10), l = u, u = d;}d = y(this.h[1], i, h), this.h[1] = y(this.h[2], o, f), this.h[2] = y(this.h[3], s, a), this.h[3] = y(this.h[4], r, u), this.h[4] = y(this.h[0], n, l), this.h[0] = d;}, s.prototype._digest = function (e) {return \"hex\" === e ? n.toHex32(this.h, \"little\") : n.split32(this.h, \"little\");};var _ = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8, 3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12, 1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2, 4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13],M = [5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12, 6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2, 15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13, 8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14, 12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11],A = [11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8, 7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12, 11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5, 11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12, 9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6],E = [8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6, 9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11, 9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5, 15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8, 8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11];}, { \"./common\": 28, \"./utils\": 38 }], 31: [function (e, t, r) {\"use strict\";r.sha1 = e(\"./sha/1\"), r.sha224 = e(\"./sha/224\"), r.sha256 = e(\"./sha/256\"), r.sha384 = e(\"./sha/384\"), r.sha512 = e(\"./sha/512\");}, { \"./sha/1\": 32, \"./sha/224\": 33, \"./sha/256\": 34, \"./sha/384\": 35, \"./sha/512\": 36 }], 32: [function (e, t, r) {arguments[4][14][0].apply(r, arguments);}, { dup: 14 }], 33: [function (e, t, r) {arguments[4][14][0].apply(r, arguments);}, { dup: 14 }], 34: [function (e, t, r) {\"use strict\";var n = e(\"../utils\"),i = e(\"../common\"),o = e(\"./common\"),p = e(\"minimalistic-assert\"),v = n.sum32,y = n.sum32_4,m = n.sum32_5,g = o.ch32,b = o.maj32,w = o.s0_256,_ = o.s1_256,M = o.g0_256,A = o.g1_256,s = i.BlockHash,a = [1116352408, 1899447441, 3049323471, 3921009573, 961987163, 1508970993, 2453635748, 2870763221, 3624381080, 310598401, 607225278, 1426881987, 1925078388, 2162078206, 2614888103, 3248222580, 3835390401, 4022224774, 264347078, 604807628, 770255983, 1249150122, 1555081692, 1996064986, 2554220882, 2821834349, 2952996808, 3210313671, 3336571891, 3584528711, 113926993, 338241895, 666307205, 773529912, 1294757372, 1396182291, 1695183700, 1986661051, 2177026350, 2456956037, 2730485921, 2820302411, 3259730800, 3345764771, 3516065817, 3600352804, 4094571909, 275423344, 430227734, 506948616, 659060556, 883997877, 958139571, 1322822218, 1537002063, 1747873779, 1955562222, 2024104815, 2227730452, 2361852424, 2428436474, 2756734187, 3204031479, 3329325298];function u() {if (!(this instanceof u)) return new u();s.call(this), this.h = [1779033703, 3144134277, 1013904242, 2773480762, 1359893119, 2600822924, 528734635, 1541459225], this.k = a, this.W = new Array(64);}n.inherits(u, s), (t.exports = u).blockSize = 512, u.outSize = 256, u.hmacStrength = 192, u.padLength = 64, u.prototype._update = function (e, t) {for (var r = this.W, n = 0; n < 16; n++) {r[n] = e[t + n];}for (; n < r.length; n++) {r[n] = y(A(r[n - 2]), r[n - 7], M(r[n - 15]), r[n - 16]);}var i = this.h[0],o = this.h[1],s = this.h[2],a = this.h[3],u = this.h[4],l = this.h[5],h = this.h[6],f = this.h[7];for (p(this.k.length === r.length), n = 0; n < r.length; n++) {var c = m(f, _(u), g(u, l, h), this.k[n], r[n]),d = v(w(i), b(i, o, s));f = h, h = l, l = u, u = v(a, c), a = s, s = o, o = i, i = v(c, d);}this.h[0] = v(this.h[0], i), this.h[1] = v(this.h[1], o), this.h[2] = v(this.h[2], s), this.h[3] = v(this.h[3], a), this.h[4] = v(this.h[4], u), this.h[5] = v(this.h[5], l), this.h[6] = v(this.h[6], h), this.h[7] = v(this.h[7], f);}, u.prototype._digest = function (e) {return \"hex\" === e ? n.toHex32(this.h, \"big\") : n.split32(this.h, \"big\");};}, { \"../common\": 28, \"../utils\": 38, \"./common\": 37, \"minimalistic-assert\": 41 }], 35: [function (e, t, r) {arguments[4][14][0].apply(r, arguments);}, { dup: 14 }], 36: [function (e, t, r) {\"use strict\";var n = e(\"../utils\"),i = e(\"../common\"),C = e(\"minimalistic-assert\"),o = n.rotr64_hi,s = n.rotr64_lo,a = n.shr64_hi,u = n.shr64_lo,B = n.sum64,D = n.sum64_hi,L = n.sum64_lo,c = n.sum64_4_hi,d = n.sum64_4_lo,U = n.sum64_5_hi,F = n.sum64_5_lo,l = i.BlockHash,h = [1116352408, 3609767458, 1899447441, 602891725, 3049323471, 3964484399, 3921009573, 2173295548, 961987163, 4081628472, 1508970993, 3053834265, 2453635748, 2937671579, 2870763221, 3664609560, 3624381080, 2734883394, 310598401, 1164996542, 607225278, 1323610764, 1426881987, 3590304994, 1925078388, 4068182383, 2162078206, 991336113, 2614888103, 633803317, 3248222580, 3479774868, 3835390401, 2666613458, 4022224774, 944711139, 264347078, 2341262773, 604807628, 2007800933, 770255983, 1495990901, 1249150122, 1856431235, 1555081692, 3175218132, 1996064986, 2198950837, 2554220882, 3999719339, 2821834349, 766784016, 2952996808, 2566594879, 3210313671, 3203337956, 3336571891, 1034457026, 3584528711, 2466948901, 113926993, 3758326383, 338241895, 168717936, 666307205, 1188179964, 773529912, 1546045734, 1294757372, 1522805485, 1396182291, 2643833823, 1695183700, 2343527390, 1986661051, 1014477480, 2177026350, 1206759142, 2456956037, 344077627, 2730485921, 1290863460, 2820302411, 3158454273, 3259730800, 3505952657, 3345764771, 106217008, 3516065817, 3606008344, 3600352804, 1432725776, 4094571909, 1467031594, 275423344, 851169720, 430227734, 3100823752, 506948616, 1363258195, 659060556, 3750685593, 883997877, 3785050280, 958139571, 3318307427, 1322822218, 3812723403, 1537002063, 2003034995, 1747873779, 3602036899, 1955562222, 1575990012, 2024104815, 1125592928, 2227730452, 2716904306, 2361852424, 442776044, 2428436474, 593698344, 2756734187, 3733110249, 3204031479, 2999351573, 3329325298, 3815920427, 3391569614, 3928383900, 3515267271, 566280711, 3940187606, 3454069534, 4118630271, 4000239992, 116418474, 1914138554, 174292421, 2731055270, 289380356, 3203993006, 460393269, 320620315, 685471733, 587496836, 852142971, 1086792851, 1017036298, 365543100, 1126000580, 2618297676, 1288033470, 3409855158, 1501505948, 4234509866, 1607167915, 987167468, 1816402316, 1246189591];function f() {if (!(this instanceof f)) return new f();l.call(this), this.h = [1779033703, 4089235720, 3144134277, 2227873595, 1013904242, 4271175723, 2773480762, 1595750129, 1359893119, 2917565137, 2600822924, 725511199, 528734635, 4215389547, 1541459225, 327033209], this.k = h, this.W = new Array(160);}function j(e, t, r, n, i) {var o = e & r ^ ~e & i;return o < 0 && (o += 4294967296), o;}function G(e, t, r, n, i, o) {var s = t & n ^ ~t & o;return s < 0 && (s += 4294967296), s;}function H(e, t, r, n, i) {var o = e & r ^ e & i ^ r & i;return o < 0 && (o += 4294967296), o;}function z(e, t, r, n, i, o) {var s = t & n ^ t & o ^ n & o;return s < 0 && (s += 4294967296), s;}function V(e, t) {var r = o(e, t, 28) ^ o(t, e, 2) ^ o(t, e, 7);return r < 0 && (r += 4294967296), r;}function K(e, t) {var r = s(e, t, 28) ^ s(t, e, 2) ^ s(t, e, 7);return r < 0 && (r += 4294967296), r;}function q(e, t) {var r = o(e, t, 14) ^ o(e, t, 18) ^ o(t, e, 9);return r < 0 && (r += 4294967296), r;}function W(e, t) {var r = s(e, t, 14) ^ s(e, t, 18) ^ s(t, e, 9);return r < 0 && (r += 4294967296), r;}function p(e, t) {var r = o(e, t, 1) ^ o(e, t, 8) ^ a(e, t, 7);return r < 0 && (r += 4294967296), r;}function v(e, t) {var r = s(e, t, 1) ^ s(e, t, 8) ^ u(e, t, 7);return r < 0 && (r += 4294967296), r;}function y(e, t) {var r = o(e, t, 19) ^ o(t, e, 29) ^ a(e, t, 6);return r < 0 && (r += 4294967296), r;}function m(e, t) {var r = s(e, t, 19) ^ s(t, e, 29) ^ u(e, t, 6);return r < 0 && (r += 4294967296), r;}n.inherits(f, l), (t.exports = f).blockSize = 1024, f.outSize = 512, f.hmacStrength = 192, f.padLength = 128, f.prototype._prepareBlock = function (e, t) {for (var r = this.W, n = 0; n < 32; n++) {r[n] = e[t + n];}for (; n < r.length; n += 2) {var i = y(r[n - 4], r[n - 3]),o = m(r[n - 4], r[n - 3]),s = r[n - 14],a = r[n - 13],u = p(r[n - 30], r[n - 29]),l = v(r[n - 30], r[n - 29]),h = r[n - 32],f = r[n - 31];r[n] = c(i, o, s, a, u, l, h, f), r[n + 1] = d(i, o, s, a, u, l, h, f);}}, f.prototype._update = function (e, t) {this._prepareBlock(e, t);var r = this.W,n = this.h[0],i = this.h[1],o = this.h[2],s = this.h[3],a = this.h[4],u = this.h[5],l = this.h[6],h = this.h[7],f = this.h[8],c = this.h[9],d = this.h[10],p = this.h[11],v = this.h[12],y = this.h[13],m = this.h[14],g = this.h[15];C(this.k.length === r.length);for (var b = 0; b < r.length; b += 2) {var w = m,_ = g,M = q(f, c),A = W(f, c),E = j(f, c, d, p, v),S = G(f, c, d, p, v, y),k = this.k[b],N = this.k[b + 1],P = r[b],x = r[b + 1],I = U(w, _, M, A, E, S, k, N, P, x),T = F(w, _, M, A, E, S, k, N, P, x);w = V(n, i), _ = K(n, i), M = H(n, i, o, s, a), A = z(n, i, o, s, a, u);var R = D(w, _, M, A),O = L(w, _, M, A);m = v, g = y, v = d, y = p, d = f, p = c, f = D(l, h, I, T), c = L(h, h, I, T), l = a, h = u, a = o, u = s, o = n, s = i, n = D(I, T, R, O), i = L(I, T, R, O);}B(this.h, 0, n, i), B(this.h, 2, o, s), B(this.h, 4, a, u), B(this.h, 6, l, h), B(this.h, 8, f, c), B(this.h, 10, d, p), B(this.h, 12, v, y), B(this.h, 14, m, g);}, f.prototype._digest = function (e) {return \"hex\" === e ? n.toHex32(this.h, \"big\") : n.split32(this.h, \"big\");};}, { \"../common\": 28, \"../utils\": 38, \"minimalistic-assert\": 41 }], 37: [function (e, t, r) {\"use strict\";var n = e(\"../utils\").rotr32;function i(e, t, r) {return e & t ^ ~e & r;}function o(e, t, r) {return e & t ^ e & r ^ t & r;}function s(e, t, r) {return e ^ t ^ r;}r.ft_1 = function (e, t, r, n) {return 0 === e ? i(t, r, n) : 1 === e || 3 === e ? s(t, r, n) : 2 === e ? o(t, r, n) : void 0;}, r.ch32 = i, r.maj32 = o, r.p32 = s, r.s0_256 = function (e) {return n(e, 2) ^ n(e, 13) ^ n(e, 22);}, r.s1_256 = function (e) {return n(e, 6) ^ n(e, 11) ^ n(e, 25);}, r.g0_256 = function (e) {return n(e, 7) ^ n(e, 18) ^ e >>> 3;}, r.g1_256 = function (e) {return n(e, 17) ^ n(e, 19) ^ e >>> 10;};}, { \"../utils\": 38 }], 38: [function (e, t, r) {\"use strict\";var l = e(\"minimalistic-assert\"),n = e(\"inherits\");function o(e) {return (e >>> 24 | e >>> 8 & 65280 | e << 8 & 16711680 | (255 & e) << 24) >>> 0;}function i(e) {return 1 === e.length ? \"0\" + e : e;}function s(e) {return 7 === e.length ? \"0\" + e : 6 === e.length ? \"00\" + e : 5 === e.length ? \"000\" + e : 4 === e.length ? \"0000\" + e : 3 === e.length ? \"00000\" + e : 2 === e.length ? \"000000\" + e : 1 === e.length ? \"0000000\" + e : e;}r.inherits = n, r.toArray = function (e, t) {if (Array.isArray(e)) return e.slice();if (!e) return [];var r = [];if (\"string\" == typeof e) {if (t) {if (\"hex\" === t) for ((e = e.replace(/[^a-z0-9]+/gi, \"\")).length % 2 != 0 && (e = \"0\" + e), n = 0; n < e.length; n += 2) {r.push(parseInt(e[n] + e[n + 1], 16));}} else for (var n = 0; n < e.length; n++) {var i = e.charCodeAt(n),o = i >> 8,s = 255 & i;o ? r.push(o, s) : r.push(s);}} else for (n = 0; n < e.length; n++) {r[n] = 0 | e[n];}return r;}, r.toHex = function (e) {for (var t = \"\", r = 0; r < e.length; r++) {t += i(e[r].toString(16));}return t;}, r.htonl = o, r.toHex32 = function (e, t) {for (var r = \"\", n = 0; n < e.length; n++) {var i = e[n];\"little\" === t && (i = o(i)), r += s(i.toString(16));}return r;}, r.zero2 = i, r.zero8 = s, r.join32 = function (e, t, r, n) {var i = r - t;l(i % 4 == 0);for (var o = new Array(i / 4), s = 0, a = t; s < o.length; s++, a += 4) {var u;u = \"big\" === n ? e[a] << 24 | e[a + 1] << 16 | e[a + 2] << 8 | e[a + 3] : e[a + 3] << 24 | e[a + 2] << 16 | e[a + 1] << 8 | e[a], o[s] = u >>> 0;}return o;}, r.split32 = function (e, t) {for (var r = new Array(4 * e.length), n = 0, i = 0; n < e.length; n++, i += 4) {var o = e[n];\"big\" === t ? (r[i] = o >>> 24, r[i + 1] = o >>> 16 & 255, r[i + 2] = o >>> 8 & 255, r[i + 3] = 255 & o) : (r[i + 3] = o >>> 24, r[i + 2] = o >>> 16 & 255, r[i + 1] = o >>> 8 & 255, r[i] = 255 & o);}return r;}, r.rotr32 = function (e, t) {return e >>> t | e << 32 - t;}, r.rotl32 = function (e, t) {return e << t | e >>> 32 - t;}, r.sum32 = function (e, t) {return e + t >>> 0;}, r.sum32_3 = function (e, t, r) {return e + t + r >>> 0;}, r.sum32_4 = function (e, t, r, n) {return e + t + r + n >>> 0;}, r.sum32_5 = function (e, t, r, n, i) {return e + t + r + n + i >>> 0;}, r.sum64 = function (e, t, r, n) {var i = e[t],o = n + e[t + 1] >>> 0,s = (o < n ? 1 : 0) + r + i;e[t] = s >>> 0, e[t + 1] = o;}, r.sum64_hi = function (e, t, r, n) {return (t + n >>> 0 < t ? 1 : 0) + e + r >>> 0;}, r.sum64_lo = function (e, t, r, n) {return t + n >>> 0;}, r.sum64_4_hi = function (e, t, r, n, i, o, s, a) {var u = 0,l = t;return u += (l = l + n >>> 0) < t ? 1 : 0, u += (l = l + o >>> 0) < o ? 1 : 0, e + r + i + s + (u += (l = l + a >>> 0) < a ? 1 : 0) >>> 0;}, r.sum64_4_lo = function (e, t, r, n, i, o, s, a) {return t + n + o + a >>> 0;}, r.sum64_5_hi = function (e, t, r, n, i, o, s, a, u, l) {var h = 0,f = t;return h += (f = f + n >>> 0) < t ? 1 : 0, h += (f = f + o >>> 0) < o ? 1 : 0, h += (f = f + a >>> 0) < a ? 1 : 0, e + r + i + s + u + (h += (f = f + l >>> 0) < l ? 1 : 0) >>> 0;}, r.sum64_5_lo = function (e, t, r, n, i, o, s, a, u, l) {return t + n + o + a + l >>> 0;}, r.rotr64_hi = function (e, t, r) {return (t << 32 - r | e >>> r) >>> 0;}, r.rotr64_lo = function (e, t, r) {return (e << 32 - r | t >>> r) >>> 0;}, r.shr64_hi = function (e, t, r) {return e >>> r;}, r.shr64_lo = function (e, t, r) {return (e << 32 - r | t >>> r) >>> 0;};}, { inherits: 39, \"minimalistic-assert\": 41 }], 39: [function (e, t, r) {\"function\" == typeof Object.create ? t.exports = function (e, t) {t && (e.super_ = t, e.prototype = Object.create(t.prototype, { constructor: { value: e, enumerable: !1, writable: !0, configurable: !0 } }));} : t.exports = function (e, t) {if (t) {var _r = function _r() {};e.super_ = t;_r.prototype = t.prototype, e.prototype = new _r(), e.prototype.constructor = e;}};}, {}], 40: [function (e, _, t) {(function (b, w) {!function () {\"use strict\";var e = \"object\" == typeof window ? window : {};!e.JS_SHA3_NO_NODE_JS && \"object\" == typeof b && b.versions && b.versions.node && (e = w);for (var t = !e.JS_SHA3_NO_COMMON_JS && \"object\" == typeof _ && _.exports, u = \"0123456789abcdef\".split(\"\"), h = [0, 8, 16, 24], he = [1, 0, 32898, 0, 32906, 2147483648, 2147516416, 2147483648, 32907, 0, 2147483649, 0, 2147516545, 2147483648, 32777, 2147483648, 138, 0, 136, 0, 2147516425, 0, 2147483658, 0, 2147516555, 0, 139, 2147483648, 32905, 2147483648, 32771, 2147483648, 32770, 2147483648, 128, 2147483648, 32778, 0, 2147483658, 2147483648, 2147516545, 2147483648, 32896, 2147483648, 2147483649, 0, 2147516424, 2147483648], r = [224, 256, 384, 512], o = [\"hex\", \"buffer\", \"arrayBuffer\", \"array\"], s = function s(t, r, n) {return function (e) {return new m(t, r, t).update(e)[n]();};}, a = function a(r, n, i) {return function (e, t) {return new m(r, n, t).update(e)[i]();};}, n = function n(e, t) {var r = s(e, t, \"hex\");r.create = function () {return new m(e, t, e);}, r.update = function (e) {return r.create().update(e);};for (var n = 0; n < o.length; ++n) {var i = o[n];r[i] = s(e, t, i);}return r;}, i = [{ name: \"keccak\", padding: [1, 256, 65536, 16777216], bits: r, createMethod: n }, { name: \"sha3\", padding: [6, 1536, 393216, 100663296], bits: r, createMethod: n }, { name: \"shake\", padding: [31, 7936, 2031616, 520093696], bits: [128, 256], createMethod: function createMethod(t, r) {var n = a(t, r, \"hex\");n.create = function (e) {return new m(t, r, e);}, n.update = function (e, t) {return n.create(t).update(e);};for (var e = 0; e < o.length; ++e) {var i = o[e];n[i] = a(t, r, i);}return n;} }], l = {}, f = [], c = 0; c < i.length; ++c) {for (var d = i[c], p = d.bits, v = 0; v < p.length; ++v) {var y = d.name + \"_\" + p[v];f.push(y), l[y] = d.createMethod(p[v], d.padding);}}function m(e, t, r) {this.blocks = [], this.s = [], this.padding = t, this.outputBits = r, this.reset = !0, this.block = 0, this.start = 0, this.blockCount = 1600 - (e << 1) >> 5, this.byteCount = this.blockCount << 2, this.outputBlocks = r >> 5, this.extraBytes = (31 & r) >> 3;for (var n = 0; n < 50; ++n) {this.s[n] = 0;}}m.prototype.update = function (e) {var t = \"string\" != typeof e;t && e.constructor === ArrayBuffer && (e = new Uint8Array(e));for (var r, n, i = e.length, o = this.blocks, s = this.byteCount, a = this.blockCount, u = 0, l = this.s; u < i;) {if (this.reset) for (this.reset = !1, o[0] = this.block, r = 1; r < a + 1; ++r) {o[r] = 0;}if (t) for (r = this.start; u < i && r < s; ++u) {o[r >> 2] |= e[u] << h[3 & r++];} else for (r = this.start; u < i && r < s; ++u) {(n = e.charCodeAt(u)) < 128 ? o[r >> 2] |= n << h[3 & r++] : (n < 2048 ? o[r >> 2] |= (192 | n >> 6) << h[3 & r++] : (n < 55296 || 57344 <= n ? o[r >> 2] |= (224 | n >> 12) << h[3 & r++] : (n = 65536 + ((1023 & n) << 10 | 1023 & e.charCodeAt(++u)), o[r >> 2] |= (240 | n >> 18) << h[3 & r++], o[r >> 2] |= (128 | n >> 12 & 63) << h[3 & r++]), o[r >> 2] |= (128 | n >> 6 & 63) << h[3 & r++]), o[r >> 2] |= (128 | 63 & n) << h[3 & r++]);}if (s <= (this.lastByteIndex = r)) {for (this.start = r - s, this.block = o[a], r = 0; r < a; ++r) {l[r] ^= o[r];}g(l), this.reset = !0;} else this.start = r;}return this;}, m.prototype.finalize = function () {var e = this.blocks,t = this.lastByteIndex,r = this.blockCount,n = this.s;if (e[t >> 2] |= this.padding[3 & t], this.lastByteIndex === this.byteCount) for (e[0] = e[r], t = 1; t < r + 1; ++t) {e[t] = 0;}for (e[r - 1] |= 2147483648, t = 0; t < r; ++t) {n[t] ^= e[t];}g(n);}, m.prototype.toString = m.prototype.hex = function () {this.finalize();for (var e, t = this.blockCount, r = this.s, n = this.outputBlocks, i = this.extraBytes, o = 0, s = 0, a = \"\"; s < n;) {for (o = 0; o < t && s < n; ++o, ++s) {e = r[o], a += u[e >> 4 & 15] + u[15 & e] + u[e >> 12 & 15] + u[e >> 8 & 15] + u[e >> 20 & 15] + u[e >> 16 & 15] + u[e >> 28 & 15] + u[e >> 24 & 15];}s % t == 0 && (g(r), o = 0);}return i && (e = r[o], 0 < i && (a += u[e >> 4 & 15] + u[15 & e]), 1 < i && (a += u[e >> 12 & 15] + u[e >> 8 & 15]), 2 < i && (a += u[e >> 20 & 15] + u[e >> 16 & 15])), a;}, m.prototype.buffer = m.prototype.arrayBuffer = function () {this.finalize();var e,t = this.blockCount,r = this.s,n = this.outputBlocks,i = this.extraBytes,o = 0,s = 0,a = this.outputBits >> 3;e = i ? new ArrayBuffer(n + 1 << 2) : new ArrayBuffer(a);for (var u = new Uint32Array(e); s < n;) {for (o = 0; o < t && s < n; ++o, ++s) {u[s] = r[o];}s % t == 0 && g(r);}return i && (u[o] = r[o], e = e.slice(0, a)), e;}, m.prototype.digest = m.prototype.array = function () {this.finalize();for (var e, t, r = this.blockCount, n = this.s, i = this.outputBlocks, o = this.extraBytes, s = 0, a = 0, u = []; a < i;) {for (s = 0; s < r && a < i; ++s, ++a) {e = a << 2, t = n[s], u[e] = 255 & t, u[e + 1] = t >> 8 & 255, u[e + 2] = t >> 16 & 255, u[e + 3] = t >> 24 & 255;}a % r == 0 && g(n);}return o && (e = a << 2, t = n[s], 0 < o && (u[e] = 255 & t), 1 < o && (u[e + 1] = t >> 8 & 255), 2 < o && (u[e + 2] = t >> 16 & 255)), u;};var g = function g(e) {var t, r, n, i, o, s, a, u, l, h, f, c, d, p, v, y, m, g, b, w, _, M, A, E, S, k, N, P, x, I, T, R, O, C, B, D, L, U, F, j, G, H, z, V, K, q, W, Z, J, X, $, Q, Y, ee, te, re, ne, ie, oe, se, ae, ue, le;for (n = 0; n < 48; n += 2) {i = e[0] ^ e[10] ^ e[20] ^ e[30] ^ e[40], o = e[1] ^ e[11] ^ e[21] ^ e[31] ^ e[41], s = e[2] ^ e[12] ^ e[22] ^ e[32] ^ e[42], a = e[3] ^ e[13] ^ e[23] ^ e[33] ^ e[43], u = e[4] ^ e[14] ^ e[24] ^ e[34] ^ e[44], l = e[5] ^ e[15] ^ e[25] ^ e[35] ^ e[45], h = e[6] ^ e[16] ^ e[26] ^ e[36] ^ e[46], f = e[7] ^ e[17] ^ e[27] ^ e[37] ^ e[47], t = (c = e[8] ^ e[18] ^ e[28] ^ e[38] ^ e[48]) ^ (s << 1 | a >>> 31), r = (d = e[9] ^ e[19] ^ e[29] ^ e[39] ^ e[49]) ^ (a << 1 | s >>> 31), e[0] ^= t, e[1] ^= r, e[10] ^= t, e[11] ^= r, e[20] ^= t, e[21] ^= r, e[30] ^= t, e[31] ^= r, e[40] ^= t, e[41] ^= r, t = i ^ (u << 1 | l >>> 31), r = o ^ (l << 1 | u >>> 31), e[2] ^= t, e[3] ^= r, e[12] ^= t, e[13] ^= r, e[22] ^= t, e[23] ^= r, e[32] ^= t, e[33] ^= r, e[42] ^= t, e[43] ^= r, t = s ^ (h << 1 | f >>> 31), r = a ^ (f << 1 | h >>> 31), e[4] ^= t, e[5] ^= r, e[14] ^= t, e[15] ^= r, e[24] ^= t, e[25] ^= r, e[34] ^= t, e[35] ^= r, e[44] ^= t, e[45] ^= r, t = u ^ (c << 1 | d >>> 31), r = l ^ (d << 1 | c >>> 31), e[6] ^= t, e[7] ^= r, e[16] ^= t, e[17] ^= r, e[26] ^= t, e[27] ^= r, e[36] ^= t, e[37] ^= r, e[46] ^= t, e[47] ^= r, t = h ^ (i << 1 | o >>> 31), r = f ^ (o << 1 | i >>> 31), e[8] ^= t, e[9] ^= r, e[18] ^= t, e[19] ^= r, e[28] ^= t, e[29] ^= r, e[38] ^= t, e[39] ^= r, e[48] ^= t, e[49] ^= r, p = e[0], v = e[1], q = e[11] << 4 | e[10] >>> 28, W = e[10] << 4 | e[11] >>> 28, P = e[20] << 3 | e[21] >>> 29, x = e[21] << 3 | e[20] >>> 29, se = e[31] << 9 | e[30] >>> 23, ae = e[30] << 9 | e[31] >>> 23, H = e[40] << 18 | e[41] >>> 14, z = e[41] << 18 | e[40] >>> 14, C = e[2] << 1 | e[3] >>> 31, B = e[3] << 1 | e[2] >>> 31, y = e[13] << 12 | e[12] >>> 20, m = e[12] << 12 | e[13] >>> 20, Z = e[22] << 10 | e[23] >>> 22, J = e[23] << 10 | e[22] >>> 22, I = e[33] << 13 | e[32] >>> 19, T = e[32] << 13 | e[33] >>> 19, ue = e[42] << 2 | e[43] >>> 30, le = e[43] << 2 | e[42] >>> 30, ee = e[5] << 30 | e[4] >>> 2, te = e[4] << 30 | e[5] >>> 2, D = e[14] << 6 | e[15] >>> 26, L = e[15] << 6 | e[14] >>> 26, g = e[25] << 11 | e[24] >>> 21, b = e[24] << 11 | e[25] >>> 21, X = e[34] << 15 | e[35] >>> 17, $ = e[35] << 15 | e[34] >>> 17, R = e[45] << 29 | e[44] >>> 3, O = e[44] << 29 | e[45] >>> 3, E = e[6] << 28 | e[7] >>> 4, S = e[7] << 28 | e[6] >>> 4, re = e[17] << 23 | e[16] >>> 9, ne = e[16] << 23 | e[17] >>> 9, U = e[26] << 25 | e[27] >>> 7, F = e[27] << 25 | e[26] >>> 7, w = e[36] << 21 | e[37] >>> 11, _ = e[37] << 21 | e[36] >>> 11, Q = e[47] << 24 | e[46] >>> 8, Y = e[46] << 24 | e[47] >>> 8, V = e[8] << 27 | e[9] >>> 5, K = e[9] << 27 | e[8] >>> 5, k = e[18] << 20 | e[19] >>> 12, N = e[19] << 20 | e[18] >>> 12, ie = e[29] << 7 | e[28] >>> 25, oe = e[28] << 7 | e[29] >>> 25, j = e[38] << 8 | e[39] >>> 24, G = e[39] << 8 | e[38] >>> 24, M = e[48] << 14 | e[49] >>> 18, A = e[49] << 14 | e[48] >>> 18, e[0] = p ^ ~y & g, e[1] = v ^ ~m & b, e[10] = E ^ ~k & P, e[11] = S ^ ~N & x, e[20] = C ^ ~D & U, e[21] = B ^ ~L & F, e[30] = V ^ ~q & Z, e[31] = K ^ ~W & J, e[40] = ee ^ ~re & ie, e[41] = te ^ ~ne & oe, e[2] = y ^ ~g & w, e[3] = m ^ ~b & _, e[12] = k ^ ~P & I, e[13] = N ^ ~x & T, e[22] = D ^ ~U & j, e[23] = L ^ ~F & G, e[32] = q ^ ~Z & X, e[33] = W ^ ~J & $, e[42] = re ^ ~ie & se, e[43] = ne ^ ~oe & ae, e[4] = g ^ ~w & M, e[5] = b ^ ~_ & A, e[14] = P ^ ~I & R, e[15] = x ^ ~T & O, e[24] = U ^ ~j & H, e[25] = F ^ ~G & z, e[34] = Z ^ ~X & Q, e[35] = J ^ ~$ & Y, e[44] = ie ^ ~se & ue, e[45] = oe ^ ~ae & le, e[6] = w ^ ~M & p, e[7] = _ ^ ~A & v, e[16] = I ^ ~R & E, e[17] = T ^ ~O & S, e[26] = j ^ ~H & C, e[27] = G ^ ~z & B, e[36] = X ^ ~Q & V, e[37] = $ ^ ~Y & K, e[46] = se ^ ~ue & ee, e[47] = ae ^ ~le & te, e[8] = M ^ ~p & y, e[9] = A ^ ~v & m, e[18] = R ^ ~E & k, e[19] = O ^ ~S & N, e[28] = H ^ ~C & D, e[29] = z ^ ~B & L, e[38] = Q ^ ~V & q, e[39] = Y ^ ~K & W, e[48] = ue ^ ~ee & re, e[49] = le ^ ~te & ne, e[0] ^= he[n], e[1] ^= he[n + 1];}};if (t) _.exports = l;else for (c = 0; c < f.length; ++c) {e[f[c]] = l[f[c]];}}();}).call(this, e(\"_process\"), \"undefined\" != typeof global ? global : \"undefined\" != typeof self ? self : \"undefined\" != typeof window ? window : {});}, { _process: 42 }], 41: [function (e, t, r) {function n(e, t) {if (!e) throw new Error(t || \"Assertion failed\");}(t.exports = n).equal = function (e, t, r) {if (e != t) throw new Error(r || \"Assertion failed: \" + e + \" != \" + t);};}, {}], 42: [function (e, t, r) {t.exports = { browser: !0 };}, {}], 43: [function (e, r, o) {(function (n) {\"use strict\";function l(e) {var y = [1116352408, 1899447441, 3049323471, 3921009573, 961987163, 1508970993, 2453635748, 2870763221, 3624381080, 310598401, 607225278, 1426881987, 1925078388, 2162078206, 2614888103, 3248222580, 3835390401, 4022224774, 264347078, 604807628, 770255983, 1249150122, 1555081692, 1996064986, 2554220882, 2821834349, 2952996808, 3210313671, 3336571891, 3584528711, 113926993, 338241895, 666307205, 773529912, 1294757372, 1396182291, 1695183700, 1986661051, 2177026350, 2456956037, 2730485921, 2820302411, 3259730800, 3345764771, 3516065817, 3600352804, 4094571909, 275423344, 430227734, 506948616, 659060556, 883997877, 958139571, 1322822218, 1537002063, 1747873779, 1955562222, 2024104815, 2227730452, 2361852424, 2428436474, 2756734187, 3204031479, 3329325298],m = 1779033703,g = 3144134277,b = 1013904242,w = 2773480762,_ = 1359893119,M = 2600822924,A = 528734635,E = 1541459225,S = new Array(64);function t(e) {for (var t = 0, r = e.length; 64 <= r;) {var n,i,o,s,a,u = m,l = g,h = b,f = w,c = _,d = M,p = A,v = E;for (i = 0; i < 16; i++) {o = t + 4 * i, S[i] = (255 & e[o]) << 24 | (255 & e[o + 1]) << 16 | (255 & e[o + 2]) << 8 | 255 & e[o + 3];}for (i = 16; i < 64; i++) {s = ((n = S[i - 2]) >>> 17 | n << 15) ^ (n >>> 19 | n << 13) ^ n >>> 10, a = ((n = S[i - 15]) >>> 7 | n << 25) ^ (n >>> 18 | n << 14) ^ n >>> 3, S[i] = (s + S[i - 7] | 0) + (a + S[i - 16] | 0) | 0;}for (i = 0; i < 64; i++) {s = (((c >>> 6 | c << 26) ^ (c >>> 11 | c << 21) ^ (c >>> 25 | c << 7)) + (c & d ^ ~c & p) | 0) + (v + (y[i] + S[i] | 0) | 0) | 0, a = ((u >>> 2 | u << 30) ^ (u >>> 13 | u << 19) ^ (u >>> 22 | u << 10)) + (u & l ^ u & h ^ l & h) | 0, v = p, p = d, d = c, c = f + s | 0, f = h, h = l, l = u, u = s + a | 0;}m = m + u | 0, g = g + l | 0, b = b + h | 0, w = w + f | 0, _ = _ + c | 0, M = M + d | 0, A = A + p | 0, E = E + v | 0, t += 64, r -= 64;}}t(e);var r,n = e.length % 64,i = e.length / 536870912 | 0,o = e.length << 3,s = n < 56 ? 56 : 120,a = e.slice(e.length - n, e.length);for (a.push(128), r = 1 + n; r < s; r++) {a.push(0);}return a.push(i >>> 24 & 255), a.push(i >>> 16 & 255), a.push(i >>> 8 & 255), a.push(i >>> 0 & 255), a.push(o >>> 24 & 255), a.push(o >>> 16 & 255), a.push(o >>> 8 & 255), a.push(o >>> 0 & 255), t(a), [m >>> 24 & 255, m >>> 16 & 255, m >>> 8 & 255, m >>> 0 & 255, g >>> 24 & 255, g >>> 16 & 255, g >>> 8 & 255, g >>> 0 & 255, b >>> 24 & 255, b >>> 16 & 255, b >>> 8 & 255, b >>> 0 & 255, w >>> 24 & 255, w >>> 16 & 255, w >>> 8 & 255, w >>> 0 & 255, _ >>> 24 & 255, _ >>> 16 & 255, _ >>> 8 & 255, _ >>> 0 & 255, M >>> 24 & 255, M >>> 16 & 255, M >>> 8 & 255, M >>> 0 & 255, A >>> 24 & 255, A >>> 16 & 255, A >>> 8 & 255, A >>> 0 & 255, E >>> 24 & 255, E >>> 16 & 255, E >>> 8 & 255, E >>> 0 & 255];}function x(e, t, r) {var n;e = e.length <= 64 ? e : l(e);var i = 64 + t.length + 4,o = new Array(i),s = new Array(64),a = [];for (n = 0; n < 64; n++) {o[n] = 54;}for (n = 0; n < e.length; n++) {o[n] ^= e[n];}for (n = 0; n < t.length; n++) {o[64 + n] = t[n];}for (n = i - 4; n < i; n++) {o[n] = 0;}for (n = 0; n < 64; n++) {s[n] = 92;}for (n = 0; n < e.length; n++) {s[n] ^= e[n];}function u() {for (var e = i - 1; i - 4 <= e; e--) {if (o[e]++, o[e] <= 255) return;o[e] = 0;}}for (; 32 <= r;) {u(), a = a.concat(l(s.concat(l(o)))), r -= 32;}return 0 < r && (u(), a = a.concat(l(s.concat(l(o))).slice(0, r))), a;}function I(e, t, r, n, i) {var o;for (R(e, 16 * (2 * r - 1), i, 0, 16), o = 0; o < 2 * r; o++) {T(e, 16 * o, i, 16), s(i, n), R(i, 0, e, t + 16 * o, 16);}for (o = 0; o < r; o++) {R(e, t + 2 * o * 16, e, 16 * o, 16);}for (o = 0; o < r; o++) {R(e, t + 16 * (2 * o + 1), e, 16 * (o + r), 16);}}function i(e, t) {return e << t | e >>> 32 - t;}function s(e, t) {R(e, 0, t, 0, 16);for (var r = 8; 0 < r; r -= 2) {t[4] ^= i(t[0] + t[12], 7), t[8] ^= i(t[4] + t[0], 9), t[12] ^= i(t[8] + t[4], 13), t[0] ^= i(t[12] + t[8], 18), t[9] ^= i(t[5] + t[1], 7), t[13] ^= i(t[9] + t[5], 9), t[1] ^= i(t[13] + t[9], 13), t[5] ^= i(t[1] + t[13], 18), t[14] ^= i(t[10] + t[6], 7), t[2] ^= i(t[14] + t[10], 9), t[6] ^= i(t[2] + t[14], 13), t[10] ^= i(t[6] + t[2], 18), t[3] ^= i(t[15] + t[11], 7), t[7] ^= i(t[3] + t[15], 9), t[11] ^= i(t[7] + t[3], 13), t[15] ^= i(t[11] + t[7], 18), t[1] ^= i(t[0] + t[3], 7), t[2] ^= i(t[1] + t[0], 9), t[3] ^= i(t[2] + t[1], 13), t[0] ^= i(t[3] + t[2], 18), t[6] ^= i(t[5] + t[4], 7), t[7] ^= i(t[6] + t[5], 9), t[4] ^= i(t[7] + t[6], 13), t[5] ^= i(t[4] + t[7], 18), t[11] ^= i(t[10] + t[9], 7), t[8] ^= i(t[11] + t[10], 9), t[9] ^= i(t[8] + t[11], 13), t[10] ^= i(t[9] + t[8], 18), t[12] ^= i(t[15] + t[14], 7), t[13] ^= i(t[12] + t[15], 9), t[14] ^= i(t[13] + t[12], 13), t[15] ^= i(t[14] + t[13], 18);}for (r = 0; r < 16; ++r) {e[r] += t[r];}}function T(e, t, r, n) {for (var i = 0; i < n; i++) {r[i] ^= e[t + i];}}function R(e, t, r, n, i) {for (; i--;) {r[n++] = e[t++];}}function O(e) {if (!e || \"number\" != typeof e.length) return !1;for (var t = 0; t < e.length; t++) {if (\"number\" != typeof e[t]) return !1;var r = parseInt(e[t]);if (r != e[t] || r < 0 || 256 <= r) return !1;}return !0;}function C(e, t) {var r = parseInt(e);if (e != r) throw new Error(\"invalid \" + t);return r;}function e(o, e, s, a, u, l, h) {if (!h) throw new Error(\"missing callback\");if (s = C(s, \"N\"), a = C(a, \"r\"), u = C(u, \"p\"), l = C(l, \"dkLen\"), 0 === s || 0 != (s & s - 1)) throw new Error(\"N must be power of 2\");if (B / 128 / a < s) throw new Error(\"N too large\");if (B / 128 / u < a) throw new Error(\"r too large\");if (!O(o)) throw new Error(\"password must be an array or buffer\");if (o = Array.prototype.slice.call(o), !O(e)) throw new Error(\"salt must be an array or buffer\");e = Array.prototype.slice.call(e);for (var f = x(o, e, 128 * u * a), c = new Uint32Array(32 * u * a), t = 0; t < c.length; t++) {var r = 4 * t;c[t] = (255 & f[3 + r]) << 24 | (255 & f[2 + r]) << 16 | (255 & f[1 + r]) << 8 | (255 & f[0 + r]) << 0;}var d,p,v = new Uint32Array(64 * a),y = new Uint32Array(32 * a * s),m = 32 * a,g = new Uint32Array(16),b = new Uint32Array(16),w = u * s * 2,_ = 0,M = null,A = !1,E = 0,S = 0,k = parseInt(1e3 / a),N = void 0 !== n ? n : setTimeout,P = function P() {if (A) return h(new Error(\"cancelled\"), _ / w);switch (E) {case 0:R(c, p = 32 * S * a, v, 0, m), E = 1, d = 0;case 1:k < (t = s - d) && (t = k);for (var e = 0; e < t; e++) {R(v, 0, y, (d + e) * m, m), I(v, m, a, g, b);}if (d += t, _ += t, (r = parseInt(1e3 * _ / w)) !== M) {if (A = h(null, _ / w)) break;M = r;}if (d < s) break;d = 0, E = 2;case 2:var t, r;k < (t = s - d) && (t = k);for (e = 0; e < t; e++) {var n = v[16 * (2 * a - 1)] & s - 1;T(y, n * m, v, m), I(v, m, a, g, b);}if (d += t, _ += t, (r = parseInt(1e3 * _ / w)) !== M) {if (A = h(null, _ / w)) break;M = r;}if (d < s) break;if (R(v, 0, c, p, m), ++S < u) {E = 0;break;}f = [];for (e = 0; e < c.length; e++) {f.push(c[e] >> 0 & 255), f.push(c[e] >> 8 & 255), f.push(c[e] >> 16 & 255), f.push(c[e] >> 24 & 255);}var i = x(o, f, l);return h(null, 1, i);}N(P);};P();}var t, B;t = this, B = 2147483647, void 0 !== o ? r.exports = e : t && (t.scrypt && (t._scrypt = t.scrypt), t.scrypt = e);}).call(this, e(\"timers\").setImmediate);}, { timers: 45 }], 44: [function (e, t, r) {(function (y, e, t) {!function (r, n) {\"use strict\";if (!r.setImmediate) {var e,i,t,o,s = 1,a = {},u = !1,l = r.document,h = Object.getPrototypeOf && Object.getPrototypeOf(r);h = h && h.setTimeout ? h : r, e = \"[object process]\" === {}.toString.call(r.process) ? function () {var e = f(arguments);return y.nextTick(c(d, e)), e;} : function () {if (r.postMessage && !r.importScripts) {var e = !0,t = r.onmessage;return r.onmessage = function () {e = !1;}, r.postMessage(\"\", \"*\"), r.onmessage = t, e;}}() ? (o = \"setImmediate$\" + Math.random() + \"$\", r.addEventListener ? r.addEventListener(\"message\", v, !1) : r.attachEvent(\"onmessage\", v), function () {var e = f(arguments);return r.postMessage(o + e, \"*\"), e;}) : r.MessageChannel ? ((t = new MessageChannel()).port1.onmessage = function (e) {d(e.data);}, function () {var e = f(arguments);return t.port2.postMessage(e), e;}) : l && \"onreadystatechange\" in l.createElement(\"script\") ? (i = l.documentElement, function () {var e = f(arguments),t = l.createElement(\"script\");return t.onreadystatechange = function () {d(e), t.onreadystatechange = null, i.removeChild(t), t = null;}, i.appendChild(t), e;}) : function () {var e = f(arguments);return setTimeout(c(d, e), 0), e;}, h.setImmediate = e, h.clearImmediate = p;}function f(e) {return a[s] = c.apply(n, e), s++;}function c(e) {var t = [].slice.call(arguments, 1);return function () {\"function\" == typeof e ? e.apply(n, t) : new Function(\"\" + e)();};}function d(e) {if (u) setTimeout(c(d, e), 0);else {var t = a[e];if (t) {u = !0;try {t();} finally {p(e), u = !1;}}}}function p(e) {delete a[e];}function v(e) {e.source === r && \"string\" == typeof e.data && 0 === e.data.indexOf(o) && d(+e.data.slice(o.length));}}(\"undefined\" == typeof self ? void 0 === e ? this : e : self);}).call(this, e(\"_process\"), \"undefined\" != typeof global ? global : \"undefined\" != typeof self ? self : \"undefined\" != typeof window ? window : {}, e(\"timers\").clearImmediate);}, { _process: 42, timers: 45 }], 45: [function (e, t, r) {(function (e) {t.exports = { setImmediate: e.setImmediate };}).call(this, \"undefined\" != typeof global ? global : \"undefined\" != typeof self ? self : \"undefined\" != typeof window ? window : {});}, {}], 46: [function (e, i, t) {(function (e) {var t;if (e.crypto && crypto.getRandomValues) {var r = new Uint8Array(16);t = function t() {return crypto.getRandomValues(r), r;};}if (!t) {var n = new Array(16);t = function t() {for (var e, t = 0; t < 16; t++) {0 == (3 & t) && (e = 4294967296 * Math.random()), n[t] = e >>> ((3 & t) << 3) & 255;}return n;};}i.exports = t;}).call(this, \"undefined\" != typeof global ? global : \"undefined\" != typeof self ? self : \"undefined\" != typeof window ? window : {});}, {}], 47: [function (e, t, r) {for (var s = e(\"./rng\"), i = [], o = {}, n = 0; n < 256; n++) {i[n] = (n + 256).toString(16).substr(1), o[i[n]] = n;}function d(e, t) {var r = t || 0,n = i;return n[e[r++]] + n[e[r++]] + n[e[r++]] + n[e[r++]] + \"-\" + n[e[r++]] + n[e[r++]] + \"-\" + n[e[r++]] + n[e[r++]] + \"-\" + n[e[r++]] + n[e[r++]] + \"-\" + n[e[r++]] + n[e[r++]] + n[e[r++]] + n[e[r++]] + n[e[r++]] + n[e[r++]];}var a = s(),p = [1 | a[0], a[1], a[2], a[3], a[4], a[5]],v = 16383 & (a[6] << 8 | a[7]),y = 0,m = 0;function u(e, t, r) {var n = t && r || 0;\"string\" == typeof e && (t = \"binary\" == e ? new Array(16) : null, e = null);var i = (e = e || {}).random || (e.rng || s)();if (i[6] = 15 & i[6] | 64, i[8] = 63 & i[8] | 128, t) for (var o = 0; o < 16; o++) {t[n + o] = i[o];}return t || d(i);}var l = u;l.v1 = function (e, t, r) {var n = t && r || 0,i = t || [],o = void 0 !== (e = e || {}).clockseq ? e.clockseq : v,s = void 0 !== e.msecs ? e.msecs : new Date().getTime(),a = void 0 !== e.nsecs ? e.nsecs : m + 1,u = s - y + (a - m) / 1e4;if (u < 0 && void 0 === e.clockseq && (o = o + 1 & 16383), (u < 0 || y < s) && void 0 === e.nsecs && (a = 0), 1e4 <= a) throw new Error(\"uuid.v1(): Can't create more than 10M uuids/sec\");y = s, v = o;var l = (1e4 * (268435455 & (s += 122192928e5)) + (m = a)) % 4294967296;i[n++] = l >>> 24 & 255, i[n++] = l >>> 16 & 255, i[n++] = l >>> 8 & 255, i[n++] = 255 & l;var h = s / 4294967296 * 1e4 & 268435455;i[n++] = h >>> 8 & 255, i[n++] = 255 & h, i[n++] = h >>> 24 & 15 | 16, i[n++] = h >>> 16 & 255, i[n++] = o >>> 8 | 128, i[n++] = 255 & o;for (var f = e.node || p, c = 0; c < 6; c++) {i[n + c] = f[c];}return t || d(i);}, l.v4 = u, l.parse = function (e, t, r) {var n = t && r || 0,i = 0;for (t = t || [], e.toLowerCase().replace(/[0-9a-f]{2}/g, function (e) {i < 16 && (t[n + i++] = o[e]);}); i < 16;) {t[n + i++] = 0;}return t;}, l.unparse = d, t.exports = l;}, { \"./rng\": 46 }], 48: [function (e, t, r) {\"use strict\";Object.defineProperty(r, \"__esModule\", { value: !0 });try {t.exports.XMLHttpRequest = XMLHttpRequest;} catch (e) {console.log(__f__(\"Warning: XMLHttpRequest is not defined\", \" at common\\\\js\\\\ethers.min.js:1\")), t.exports.XMLHttpRequest = null;}}, {}], 49: [function (e, t, r) {\"use strict\";Object.defineProperty(r, \"__esModule\", { value: !0 });var n = e(\"../utils/properties\"),i = (o.isProvider = function (e) {return n.isType(e, \"Provider\");}, o);function o() {n.setType(this, \"Provider\");}r.Provider = i;}, { \"../utils/properties\": 73 }], 50: [function (e, t, r) {\"use strict\";var n,i = this && this.__extends || (n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (e, t) {e.__proto__ = t;} || function (e, t) {for (var r in t) {t.hasOwnProperty(r) && (e[r] = t[r]);}}, function (e, t) {function r() {this.constructor = e;}n(e, t), e.prototype = null === t ? Object.create(t) : (r.prototype = t.prototype, new r());}),o = this && this.__importStar || function (e) {if (e && e.__esModule) return e;var t = {};if (null != e) for (var r in e) {Object.hasOwnProperty.call(e, r) && (t[r] = e[r]);}return t.default = e, t;};Object.defineProperty(r, \"__esModule\", { value: !0 });var s = e(\"../utils/address\"),a = e(\"../utils/bignumber\"),u = e(\"../utils/bytes\"),l = e(\"../constants\"),h = e(\"../utils/hash\"),f = e(\"../utils/networks\"),c = e(\"../utils/properties\"),d = e(\"../utils/rlp\"),p = e(\"../utils/transaction\"),v = e(\"../utils/utf8\"),y = e(\"../utils/web\"),m = o(e(\"../errors\")),g = e(\"./abstract-provider\");function b(e, t) {var r = {};for (var n in e) {try {var i = e[n](t[n]);void 0 !== i && (r[n] = i);} catch (e) {throw e.checkKey = n, e.checkValue = t[n], e;}}return r;}function w(t, r) {return function (e) {return null == e ? r : t(e);};}function _(r) {return function (e) {if (!Array.isArray(e)) throw new Error(\"not an array\");var t = [];return e.forEach(function (e) {t.push(r(e));}), t;};}function M(e, t) {return \"string\" == typeof e && (t || \"0x\" === e.substring(0, 2) || (e = \"0x\" + e), 32 === u.hexDataLength(e)) ? e.toLowerCase() : (m.throwError(\"invalid hash\", m.INVALID_ARGUMENT, { arg: \"hash\", value: e }), null);}function A(e) {return a.bigNumberify(e).toNumber();}function E(e) {if (!u.isHexString(e)) throw new Error(\"invalid uint256\");for (; e.length < 66;) {e = \"0x0\" + e.substring(2);}return e;}function S(e) {if (null == e) return \"latest\";if (\"earliest\" === e) return \"0x0\";if (\"latest\" === e || \"pending\" === e) return e;if (\"number\" == typeof e) return u.hexStripZeros(u.hexlify(e));if (u.isHexString(e)) return u.hexStripZeros(e);throw new Error(\"invalid blockTag\");}var k = { hash: M, blockHash: w(M, null), blockNumber: w(A, null), transactionIndex: w(A, null), confirmations: w(A, null), from: s.getAddress, gasPrice: a.bigNumberify, gasLimit: a.bigNumberify, to: w(s.getAddress, null), value: a.bigNumberify, nonce: A, data: u.hexlify, r: w(E), s: w(E), v: w(A), creates: w(s.getAddress, null), raw: w(u.hexlify) };function N(e) {if (null != e.gas && null == e.gasLimit && (e.gasLimit = e.gas), e.to && a.bigNumberify(e.to).isZero() && (e.to = \"0x0000000000000000000000000000000000000000\"), null != e.input && null == e.data && (e.data = e.input), null == e.to && null == e.creates && (e.creates = s.getContractAddress(e)), !e.raw && e.v && e.r && e.s) {var t = [u.stripZeros(u.hexlify(e.nonce)), u.stripZeros(u.hexlify(e.gasPrice)), u.stripZeros(u.hexlify(e.gasLimit)), e.to || \"0x\", u.stripZeros(u.hexlify(e.value || \"0x\")), u.hexlify(e.data || \"0x\"), u.stripZeros(u.hexlify(e.v || \"0x\")), u.stripZeros(u.hexlify(e.r)), u.stripZeros(u.hexlify(e.s))];e.raw = d.encode(t);}var r = b(k, e),n = e.networkId;return null != e.chainId && null == n && null == r.v && (n = e.chainId), u.isHexString(n) && (n = a.bigNumberify(n).toNumber()), \"number\" != typeof n && null != r.v && ((n = (r.v - 35) / 2) < 0 && (n = 0), n = parseInt(n)), \"number\" != typeof n && (n = 0), r.networkId = n, r.blockHash && \"x\" === r.blockHash.replace(/0/g, \"\") && (r.blockHash = null), r;}var P = { hash: M, parentHash: M, number: A, timestamp: A, nonce: w(u.hexlify), difficulty: function difficulty(e) {var t = a.bigNumberify(e);try {return t.toNumber();} catch (e) {}return null;}, gasLimit: a.bigNumberify, gasUsed: a.bigNumberify, miner: s.getAddress, extraData: u.hexlify, transactions: w(_(M)) },x = c.shallowCopy(P);function I(e, t) {return null != e.author && null == e.miner && (e.miner = e.author), b(t ? x : P, e);}x.transactions = w(_(N));var T = { from: w(s.getAddress), nonce: w(A), gasLimit: w(a.bigNumberify), gasPrice: w(a.bigNumberify), to: w(s.getAddress), value: w(a.bigNumberify), data: w(u.hexlify) };function R(e) {return b(T, e);}var O = { transactionLogIndex: w(A), transactionIndex: A, blockNumber: A, transactionHash: M, address: s.getAddress, topics: _(M), data: u.hexlify, logIndex: A, blockHash: M };var C = { to: w(s.getAddress, null), from: w(s.getAddress, null), contractAddress: w(s.getAddress, null), transactionIndex: A, root: w(M), gasUsed: a.bigNumberify, logsBloom: w(u.hexlify), blockHash: M, transactionHash: M, logs: _(function (e) {return b(O, e);}), blockNumber: A, confirmations: w(A, null), cumulativeGasUsed: a.bigNumberify, status: w(A) };function B(e) {return Array.isArray(e) ? e.forEach(function (e) {B(e);}) : null != e && M(e), e;}var D = { fromBlock: w(S, void 0), toBlock: w(S, void 0), address: w(s.getAddress, void 0), topics: w(B, void 0) },L = { blockHash: w(M, void 0), address: w(s.getAddress, void 0), topics: w(B, void 0) };var U,F,j = { blockNumber: w(A), blockHash: w(M), transactionIndex: A, removed: w(function (e) {if (\"boolean\" == typeof e) return e;if (\"string\" == typeof e) {if (\"true\" === e) return !0;if (\"false\" === e) return !1;}throw new Error(\"invaid boolean - \" + e);}), address: s.getAddress, data: (U = u.hexlify, F = \"0x\", function (e) {return e ? U(e) : F;}), topics: _(M), transactionHash: M, logIndex: A };function G(e) {return b(j, e);}function H(e) {return e.map(function (e) {return \"string\" == typeof e ? e : Array.isArray(e) ? (e.forEach(function (e) {null !== e && 32 !== u.hexDataLength(e) && m.throwError(\"invalid topic\", m.INVALID_ARGUMENT, { argument: \"topic\", value: e });}), e.join(\",\")) : null === e ? \"\" : m.throwError(\"invalid topic value\", m.INVALID_ARGUMENT, { argument: \"topic\", value: e });}).join(\"&\");}function z(e) {if (\"string\" == typeof e) {if (20 === u.hexDataLength(e)) return \"address:\" + s.getAddress(e);if (e = e.toLowerCase(), 32 === u.hexDataLength(e)) return \"tx:\" + e;if (-1 === e.indexOf(\":\")) return e;} else {if (Array.isArray(e)) return \"filter::\" + H(e);if (e && \"object\" == typeof e) return \"filter:\" + (e.address || \"\") + \":\" + H(e.topics || []);}throw new Error(\"invalid event - \" + e);}function V() {return new Date().getTime();}var K,q = (K = g.Provider, i(W, K), W.prototype._doPoll = function () {var u = this;this.getBlockNumber().then(function (s) {if (u._setFastBlockNumber(s), s !== u._lastBlockNumber) {-2 === u._emitted.block && (u._emitted.block = s - 1);for (var e = u._emitted.block + 1; e <= s; e++) {u.emit(\"block\", e);}u._emitted.block !== s && (u._emitted.block = s, Object.keys(u._emitted).forEach(function (e) {if (\"block\" !== e) {var t = u._emitted[e];\"pending\" !== t && 12 < s - t && delete u._emitted[e];}})), -2 === u._lastBlockNumber && (u._lastBlockNumber = s - 1);var a = {},t = {};return u._events.forEach(function (e) {t[e.tag] = !0;}), Object.keys(t).forEach(function (e) {var t = e.split(\":\");switch (t[0]) {case \"tx\":var r = t[1];u.getTransactionReceipt(r).then(function (e) {return e && null != e.blockNumber && (u._emitted[\"t:\" + r] = e.blockNumber, u.emit(r, e)), null;}).catch(function (e) {u.emit(\"error\", e);});break;case \"address\":var n = t[1];u._balances[n] && (a[n] = u._balances[n]), u.getBalance(n, \"latest\").then(function (e) {var t = u._balances[n];if (!t || !e.eq(t)) return u._balances[n] = e, u.emit(n, e), null;}).catch(function (e) {u.emit(\"error\", e);});break;case \"filter\":var i = function (e) {return e.split(/&/g).map(function (e) {var t = e.split(\",\");return 1 === t.length ? \"\" === t[0] ? null : e : t.map(function (e) {return \"\" === e ? null : e;});});}(t[2]),o = { address: t[1], fromBlock: u._lastBlockNumber + 1, toBlock: s, topics: i };o.address || delete o.address, u.getLogs(o).then(function (e) {if (0 !== e.length) return e.forEach(function (e) {u._emitted[\"b:\" + e.blockHash] = e.blockNumber, u._emitted[\"t:\" + e.transactionHash] = e.blockNumber, u.emit(o, e);}), null;}).catch(function (e) {u.emit(\"error\", e);});}}), u._lastBlockNumber = s, u._balances = a, null;}}).catch(function (e) {}), this.doPoll();}, W.prototype.resetEventsBlock = function (e) {this._lastBlockNumber = e - 1, this.polling && this._doPoll();}, Object.defineProperty(W.prototype, \"network\", { get: function get() {return this._network;}, enumerable: !0, configurable: !0 }), W.prototype.getNetwork = function () {return this.ready;}, Object.defineProperty(W.prototype, \"blockNumber\", { get: function get() {return this._fastBlockNumber;}, enumerable: !0, configurable: !0 }), Object.defineProperty(W.prototype, \"polling\", { get: function get() {return null != this._poller;}, set: function set(e) {var t = this;setTimeout(function () {e && !t._poller ? t._poller = setInterval(t._doPoll.bind(t), t.pollingInterval) : !e && t._poller && (clearInterval(t._poller), t._poller = null);}, 0);}, enumerable: !0, configurable: !0 }), Object.defineProperty(W.prototype, \"pollingInterval\", { get: function get() {return this._pollingInterval;}, set: function set(e) {var t = this;if (\"number\" != typeof e || e <= 0 || parseInt(String(e)) != e) throw new Error(\"invalid polling interval\");this._pollingInterval = e, this._poller && (clearInterval(this._poller), this._poller = setInterval(function () {t._doPoll();}, this._pollingInterval));}, enumerable: !0, configurable: !0 }), W.prototype._getFastBlockNumber = function () {var t = this,e = V();return e - this._fastQueryDate > 2 * this._pollingInterval && (this._fastQueryDate = e, this._fastBlockNumberPromise = this.getBlockNumber().then(function (e) {return (null == t._fastBlockNumber || e > t._fastBlockNumber) && (t._fastBlockNumber = e), t._fastBlockNumber;})), this._fastBlockNumberPromise;}, W.prototype._setFastBlockNumber = function (e) {null != this._fastBlockNumber && e < this._fastBlockNumber || (this._fastQueryDate = V(), (null == this._fastBlockNumber || e > this._fastBlockNumber) && (this._fastBlockNumber = e, this._fastBlockNumberPromise = Promise.resolve(e)));}, W.prototype.waitForTransaction = function (n, i) {var o = this;return null == i && (i = 1), this.getTransactionReceipt(n).then(function (e) {return 0 === i || e && e.confirmations >= i ? e : new Promise(function (t) {var r = function r(e) {e.confirmations < i || (o.removeListener(n, r), t(e));};o.on(n, r);});});}, W.prototype.getBlockNumber = function () {var r = this;return this.ready.then(function () {return r.perform(\"getBlockNumber\", {}).then(function (e) {var t = parseInt(e);if (t != e) throw new Error(\"invalid response - getBlockNumber\");return r._setFastBlockNumber(t), t;});});}, W.prototype.getGasPrice = function () {var e = this;return this.ready.then(function () {return e.perform(\"getGasPrice\", {}).then(function (e) {return a.bigNumberify(e);});});}, W.prototype.getBalance = function (e, t) {var n = this;return this.ready.then(function () {return c.resolveProperties({ addressOrName: e, blockTag: t }).then(function (e) {var t = e.addressOrName,r = e.blockTag;return n._getAddress(t).then(function (e) {var t = { address: e, blockTag: S(r) };return n.perform(\"getBalance\", t).then(function (e) {return a.bigNumberify(e);});});});});}, W.prototype.getTransactionCount = function (e, t) {var n = this;return this.ready.then(function () {return c.resolveProperties({ addressOrName: e, blockTag: t }).then(function (e) {var t = e.addressOrName,r = e.blockTag;return n._getAddress(t).then(function (e) {var t = { address: e, blockTag: S(r) };return n.perform(\"getTransactionCount\", t).then(function (e) {return a.bigNumberify(e).toNumber();});});});});}, W.prototype.getCode = function (e, t) {var n = this;return this.ready.then(function () {return c.resolveProperties({ addressOrName: e, blockTag: t }).then(function (e) {var t = e.addressOrName,r = e.blockTag;return n._getAddress(t).then(function (e) {var t = { address: e, blockTag: S(r) };return n.perform(\"getCode\", t).then(function (e) {return u.hexlify(e);});});});});}, W.prototype.getStorageAt = function (e, t, r) {var i = this;return this.ready.then(function () {return c.resolveProperties({ addressOrName: e, position: t, blockTag: r }).then(function (e) {var t = e.addressOrName,r = e.position,n = e.blockTag;return i._getAddress(t).then(function (e) {var t = { address: e, blockTag: S(n), position: u.hexStripZeros(u.hexlify(r)) };return i.perform(\"getStorageAt\", t).then(function (e) {return u.hexlify(e);});});});});}, W.prototype.sendTransaction = function (e) {var n = this;return this.ready.then(function () {return c.resolveProperties({ signedTransaction: e }).then(function (e) {var t = e.signedTransaction,r = { signedTransaction: u.hexlify(t) };return n.perform(\"sendTransaction\", r).then(function (e) {return n._wrapTransaction(p.parse(t), e);}, function (e) {throw e.transaction = p.parse(t), e.transaction.hash && (e.transactionHash = e.transaction.hash), e;});});});}, W.prototype._wrapTransaction = function (r, e) {var n = this;if (null != e && 32 !== u.hexDataLength(e)) throw new Error(\"invalid response - sendTransaction\");var t = r;return null != e && r.hash !== e && m.throwError(\"Transaction hash mismatch from Provider.sendTransaction.\", m.UNKNOWN_ERROR, { expectedHash: r.hash, returnedHash: e }), t.wait = function (t) {return 0 !== t && (n._emitted[\"t:\" + r.hash] = \"pending\"), n.waitForTransaction(r.hash, t).then(function (e) {return null == e && 0 === t ? null : (n._emitted[\"t:\" + r.hash] = e.blockNumber, 0 === e.status && m.throwError(\"transaction failed\", m.CALL_EXCEPTION, { transactionHash: r.hash, transaction: r }), e);});}, t;}, W.prototype.call = function (e, t) {var n = this,r = c.shallowCopy(e);return this.ready.then(function () {return c.resolveProperties({ blockTag: t, tx: r }).then(function (e) {var r = e.blockTag,t = e.tx;return n._resolveNames(t, [\"to\", \"from\"]).then(function (e) {var t = { blockTag: S(r), transaction: R(e) };return n.perform(\"call\", t).then(function (e) {return u.hexlify(e);});});});});}, W.prototype.estimateGas = function (e) {var r = this,t = { to: e.to, from: e.from, data: e.data, gasPrice: e.gasPrice, value: e.value };return this.ready.then(function () {return c.resolveProperties(t).then(function (e) {return r._resolveNames(e, [\"to\", \"from\"]).then(function (e) {var t = { transaction: R(e) };return r.perform(\"estimateGas\", t).then(function (e) {return a.bigNumberify(e);});});});});}, W.prototype.getBlock = function (e, o) {var s = this;return this.ready.then(function () {return c.resolveProperties({ blockHashOrBlockTag: e }).then(function (e) {var t = e.blockHashOrBlockTag;try {var r = u.hexlify(t);if (32 === u.hexDataLength(r)) return y.poll(function () {return s.perform(\"getBlock\", { blockHash: r, includeTransactions: !!o }).then(function (e) {return null == e ? null == s._emitted[\"b:\" + r] ? null : void 0 : I(e, o);});}, { onceBlock: s });} catch (e) {}try {var n = -128,i = S(t);return u.isHexString(i) && (n = parseInt(i.substring(2), 16)), y.poll(function () {return s.perform(\"getBlock\", { blockTag: i, includeTransactions: !!o }).then(function (e) {return null != e ? I(e, o) : n <= s._emitted.block ? void 0 : null;});}, { onceBlock: s });} catch (e) {}throw new Error(\"invalid block hash or block tag\");});});}, W.prototype.getTransaction = function (e) {var n = this;return this.ready.then(function () {return c.resolveProperties({ transactionHash: e }).then(function (e) {var t = e.transactionHash,r = { transactionHash: M(t, !0) };return y.poll(function () {return n.perform(\"getTransaction\", r).then(function (e) {if (null == e) return null == n._emitted[\"t:\" + t] ? null : void 0;var r = W.checkTransactionResponse(e);if (null == r.blockNumber) r.confirmations = 0;else if (null == r.confirmations) return n._getFastBlockNumber().then(function (e) {var t = e - r.blockNumber + 1;return t <= 0 && (t = 1), r.confirmations = t, n._wrapTransaction(r);});return n._wrapTransaction(r);});}, { onceBlock: n });});});}, W.prototype.getTransactionReceipt = function (e) {var n = this;return this.ready.then(function () {return c.resolveProperties({ transactionHash: e }).then(function (e) {var t = e.transactionHash,r = { transactionHash: M(t, !0) };return y.poll(function () {return n.perform(\"getTransactionReceipt\", r).then(function (e) {if (null == e) return null == n._emitted[\"t:\" + t] ? null : void 0;if (null != e.blockHash) {var r = function (e) {var t = b(C, e);return t.logs.forEach(function (e, t) {null == e.transactionLogIndex && (e.transactionLogIndex = t);}), null != e.status && (t.byzantium = !0), t;}(e);if (null == r.blockNumber) r.confirmations = 0;else if (null == r.confirmations) return n._getFastBlockNumber().then(function (e) {var t = e - r.blockNumber + 1;return t <= 0 && (t = 1), r.confirmations = t, r;});return r;}});}, { onceBlock: n });});});}, W.prototype.getLogs = function (e) {var r = this;return this.ready.then(function () {return c.resolveProperties(e).then(function (e) {return r._resolveNames(e, [\"address\"]).then(function (e) {var t = { filter: function (e) {return e && e.blockHash ? b(L, e) : b(D, e);}(e) };return r.perform(\"getLogs\", t).then(function (e) {return _(G)(e);});});});});}, W.prototype.getEtherPrice = function () {var e = this;return this.ready.then(function () {return e.perform(\"getEtherPrice\", {}).then(function (e) {return e;});});}, W.prototype._getAddress = function (t) {return this.resolveName(t).then(function (e) {return null == e && m.throwError(\"ENS name not configured\", m.UNSUPPORTED_OPERATION, { operation: \"resolveName(\" + JSON.stringify(t) + \")\" }), e;});}, W.prototype._resolveNames = function (e, t) {var r = [],n = c.shallowCopy(e);return t.forEach(function (t) {null != n[t] && r.push(this._getAddress(n[t]).then(function (e) {n[t] = e;}));}, this), Promise.all(r).then(function () {return n;});}, W.prototype._getResolver = function (n) {var i = this;return this.getNetwork().then(function (e) {e.ensAddress || m.throwError(\"network does not support ENS\", m.UNSUPPORTED_OPERATION, { operation: \"ENS\", network: e.name });var t = \"0x0178b8bf\" + h.namehash(n).substring(2),r = { to: e.ensAddress, data: t };return i.call(r).then(function (e) {if (32 !== u.hexDataLength(e)) return null;var t = s.getAddress(u.hexDataSlice(e, 12));return t === l.AddressZero ? null : t;});});}, W.prototype.resolveName = function (e) {var t = this;if (e instanceof Promise) return e.then(function (e) {return t.resolveName(e);});try {return Promise.resolve(s.getAddress(e));} catch (e) {}var r = this,n = h.namehash(e);return this._getResolver(e).then(function (e) {if (null == e) return null;var t = { to: e, data: \"0x3b3b57de\" + n.substring(2) };return r.call(t);}).then(function (e) {if (32 !== u.hexDataLength(e)) return null;var t = s.getAddress(u.hexDataSlice(e, 12));return t === l.AddressZero ? null : t;});}, W.prototype.lookupAddress = function (n) {var t = this;if (n instanceof Promise) return n.then(function (e) {return t.lookupAddress(e);});var e = (n = s.getAddress(n)).substring(2) + \".addr.reverse\",r = h.namehash(e),i = this;return this._getResolver(e).then(function (e) {if (!e) return null;var t = { to: e, data: \"0x691f3431\" + r.substring(2) };return i.call(t);}).then(function (e) {if (null == e) return null;if ((e = e.substring(2)).length < 64) return null;if ((e = e.substring(64)).length < 64) return null;var t = a.bigNumberify(\"0x\" + e.substring(0, 64)).toNumber();if (2 * t > (e = e.substring(64)).length) return null;var r = v.toUtf8String(\"0x\" + e.substring(0, 2 * t));return i.resolveName(r).then(function (e) {return e != n ? null : r;});});}, W.checkTransactionResponse = function (e) {return N(e);}, W.prototype.doPoll = function () {}, W.prototype.perform = function (e, t) {return m.throwError(e + \" not implemented\", m.NOT_IMPLEMENTED, { operation: e }), null;}, W.prototype._startPending = function () {m.warn(\"WARNING: this provider does not support pending events\");}, W.prototype._stopPending = function () {}, W.prototype._addEventListener = function (e, t, r) {this._events.push({ tag: z(e), listener: t, once: r }), \"pending\" === e && this._startPending(), this.polling = !0;}, W.prototype.on = function (e, t) {return this._addEventListener(e, t, !1), this;}, W.prototype.once = function (e, t) {return this._addEventListener(e, t, !0), this;}, W.prototype.addEventListener = function (e, t) {return this.on(e, t);}, W.prototype.emit = function (e) {for (var t = this, r = [], n = 1; n < arguments.length; n++) {r[n - 1] = arguments[n];}var i = !1,o = z(e);return this._events = this._events.filter(function (e) {return e.tag !== o || (setTimeout(function () {e.listener.apply(t, r);}, 0), i = !0, !e.once);}), 0 === this.listenerCount() && (this.polling = !1), i;}, W.prototype.listenerCount = function (e) {if (!e) return this._events.length;var t = z(e);return this._events.filter(function (e) {return e.tag === t;}).length;}, W.prototype.listeners = function (e) {var t = z(e);return this._events.filter(function (e) {return e.tag === t;}).map(function (e) {return e.listener;});}, W.prototype.removeAllListeners = function (e) {if (null == e) this._events = [], this._stopPending();else {var t = z(e);this._events = this._events.filter(function (e) {return e.tag !== t;}), \"pending\" === e && this._stopPending();}return 0 === this._events.length && (this.polling = !1), this;}, W.prototype.removeListener = function (e, t) {var r = !1,n = z(e);return this._events = this._events.filter(function (e) {return e.tag !== n || e.listener != t || !!r || !(r = !0);}), \"pending\" === e && 0 === this.listenerCount(\"pending\") && this._stopPending(), 0 === this.listenerCount() && (this.polling = !1), this;}, W);function W(e) {var t = K.call(this) || this;if (m.checkNew(t, g.Provider), e instanceof Promise) c.defineReadOnly(t, \"ready\", e.then(function (e) {return c.defineReadOnly(t, \"_network\", e), e;})), t.ready.catch(function (e) {});else {var r = f.getNetwork(null == e ? \"homestead\" : e);r ? (c.defineReadOnly(t, \"_network\", r), c.defineReadOnly(t, \"ready\", Promise.resolve(t._network))) : m.throwError(\"invalid network\", m.INVALID_ARGUMENT, { arg: \"network\", value: e });}return t._lastBlockNumber = -2, t._balances = {}, t._events = [], t._pollingInterval = 4e3, t._emitted = { block: -2 }, t._fastQueryDate = 0, t;}r.BaseProvider = q, c.defineReadOnly(g.Provider, \"inherits\", c.inheritable(g.Provider));}, { \"../constants\": 3, \"../errors\": 5, \"../utils/address\": 59, \"../utils/bignumber\": 62, \"../utils/bytes\": 63, \"../utils/hash\": 64, \"../utils/networks\": 71, \"../utils/properties\": 73, \"../utils/rlp\": 75, \"../utils/transaction\": 82, \"../utils/utf8\": 84, \"../utils/web\": 85, \"./abstract-provider\": 49 }], 51: [function (e, t, r) {\"use strict\";var n,i = this && this.__extends || (n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (e, t) {e.__proto__ = t;} || function (e, t) {for (var r in t) {t.hasOwnProperty(r) && (e[r] = t[r]);}}, function (e, t) {function r() {this.constructor = e;}n(e, t), e.prototype = null === t ? Object.create(t) : (r.prototype = t.prototype, new r());}),o = this && this.__importStar || function (e) {if (e && e.__esModule) return e;var t = {};if (null != e) for (var r in e) {Object.hasOwnProperty.call(e, r) && (t[r] = e[r]);}return t.default = e, t;};Object.defineProperty(r, \"__esModule\", { value: !0 });var s = e(\"./base-provider\"),a = e(\"../utils/bytes\"),u = e(\"../utils/properties\"),l = e(\"../utils/web\"),h = o(e(\"../errors\"));function f(e) {var t = [];for (var r in e) {if (null != e[r]) {var n = a.hexlify(e[r]);!{ gasLimit: !0, gasPrice: !0, nonce: !0, value: !0 }[r] || (n = a.hexStripZeros(n)), t.push(r + \"=\" + n);}}return t.join(\"&\");}function c(e) {if (0 == e.status && (\"No records found\" === e.message || \"No transactions found\" === e.message)) return e.result;if (1 == e.status && \"OK\" == e.message) return e.result;var t = new Error(\"invalid response\");throw t.result = JSON.stringify(e), t;}function d(e) {if (\"2.0\" != e.jsonrpc) throw (t = new Error(\"invalid response\")).result = JSON.stringify(e), t;if (e.error) {var t = new Error(e.error.message || \"unknown error\");throw e.error.code && (t.code = e.error.code), e.error.data && (t.data = e.error.data), t;}return e.result;}function p(e) {if (\"pending\" === e) throw new Error(\"pending not supported\");return \"latest\" === e ? e : parseInt(e.substring(2), 16);}var v,y = (v = s.BaseProvider, i(m, v), m.prototype.perform = function (e, t) {var r = this,n = this.baseUrl,i = \"\";function o(t, e) {return l.fetchJson(t, null, e || d).then(function (e) {return r.emit(\"debug\", { action: \"perform\", request: t, response: e, provider: r }), e;});}switch (this.apiKey && (i += \"&apikey=\" + this.apiKey), e) {case \"getBlockNumber\":return o(n += \"/api?module=proxy&action=eth_blockNumber\" + i);case \"getGasPrice\":return o(n += \"/api?module=proxy&action=eth_gasPrice\" + i);case \"getBalance\":return n += \"/api?module=account&action=balance&address=\" + t.address, o(n += \"&tag=\" + t.blockTag + i, c);case \"getTransactionCount\":return n += \"/api?module=proxy&action=eth_getTransactionCount&address=\" + t.address, o(n += \"&tag=\" + t.blockTag + i);case \"getCode\":return n += \"/api?module=proxy&action=eth_getCode&address=\" + t.address, o(n += \"&tag=\" + t.blockTag + i, d);case \"getStorageAt\":return n += \"/api?module=proxy&action=eth_getStorageAt&address=\" + t.address, n += \"&position=\" + t.position, o(n += \"&tag=\" + t.blockTag + i, d);case \"sendTransaction\":return n += \"/api?module=proxy&action=eth_sendRawTransaction&hex=\" + t.signedTransaction, o(n += i).catch(function (e) {throw e.responseText && (0 <= e.responseText.toLowerCase().indexOf(\"insufficient funds\") && h.throwError(\"insufficient funds\", h.INSUFFICIENT_FUNDS, {}), 0 <= e.responseText.indexOf(\"same hash was already imported\") && h.throwError(\"nonce has already been used\", h.NONCE_EXPIRED, {}), 0 <= e.responseText.indexOf(\"another transaction with same nonce\") && h.throwError(\"replacement fee too low\", h.REPLACEMENT_UNDERPRICED, {})), e;});case \"getBlock\":if (t.blockTag) return n += \"/api?module=proxy&action=eth_getBlockByNumber&tag=\" + t.blockTag, t.includeTransactions ? n += \"&boolean=true\" : n += \"&boolean=false\", o(n += i);throw new Error(\"getBlock by blockHash not implmeneted\");case \"getTransaction\":return n += \"/api?module=proxy&action=eth_getTransactionByHash&txhash=\" + t.transactionHash, o(n += i);case \"getTransactionReceipt\":return n += \"/api?module=proxy&action=eth_getTransactionReceipt&txhash=\" + t.transactionHash, o(n += i);case \"call\":if (n += \"/api?module=proxy&action=eth_call\" + (s = (s = f(t.transaction)) && \"&\" + s), \"latest\" !== t.blockTag) throw new Error(\"EtherscanProvider does not support blockTag for call\");return o(n += i);case \"estimateGas\":var s;return n += \"/api?module=proxy&action=eth_estimateGas&\" + (s = (s = f(t.transaction)) && \"&\" + s), o(n += i);case \"getLogs\":n += \"/api?module=logs&action=getLogs\";try {if (t.filter.fromBlock && (n += \"&fromBlock=\" + p(t.filter.fromBlock)), t.filter.toBlock && (n += \"&toBlock=\" + p(t.filter.toBlock)), t.filter.blockHash) try {h.throwError(\"Etherscan does not support blockHash filters\", h.UNSUPPORTED_OPERATION, { operation: \"getLogs(blockHash)\" });} catch (e) {return Promise.reject(e);}if (t.filter.address && (n += \"&address=\" + t.filter.address), t.filter.topics && 0 < t.filter.topics.length) {if (1 < t.filter.topics.length) throw new Error(\"unsupported topic format\");var a = t.filter.topics[0];if (\"string\" != typeof a || 66 !== a.length) throw new Error(\"unsupported topic0 format\");n += \"&topic0=\" + a;}} catch (e) {return Promise.reject(e);}var u = this;return o(n += i, c).then(function (e) {var r = {},n = Promise.resolve();return e.forEach(function (t) {n = n.then(function () {return null != t.blockHash ? null : (t.blockHash = r[t.transactionHash], null == t.blockHash ? u.getTransaction(t.transactionHash).then(function (e) {return r[t.transactionHash] = e.blockHash, t.blockHash = e.blockHash, null;}) : null);});}), n.then(function () {return e;});});case \"getEtherPrice\":return \"homestead\" !== this.network.name ? Promise.resolve(0) : (n += \"/api?module=stats&action=ethprice\", o(n += i, c).then(function (e) {return parseFloat(e.ethusd);}));}return v.prototype.perform.call(this, e, t);}, m.prototype.getHistory = function (e, t, r) {var n = this,i = this.baseUrl,o = \"\";return this.apiKey && (o += \"&apikey=\" + this.apiKey), null == t && (t = 0), null == r && (r = 99999999), this.resolveName(e).then(function (e) {return i += \"/api?module=account&action=txlist&address=\" + e, i += \"&startblock=\" + t, i += \"&endblock=\" + r, i += \"&sort=asc\" + o, l.fetchJson(i, null, c).then(function (e) {n.emit(\"debug\", { action: \"getHistory\", request: i, response: e, provider: n });var r = [];return e.forEach(function (t) {[\"contractAddress\", \"to\"].forEach(function (e) {\"\" == t[e] && delete t[e];}), null == t.creates && null != t.contractAddress && (t.creates = t.contractAddress);var e = s.BaseProvider.checkTransactionResponse(t);t.timeStamp && (e.timestamp = parseInt(t.timeStamp)), r.push(e);}), r;});});}, m);function m(e, t) {var r = v.call(this, e) || this;h.checkNew(r, m);var n = \"invalid\";r.network && (n = r.network.name);var i = null;switch (n) {case \"homestead\":i = \"https://api.etherscan.io\";break;case \"ropsten\":i = \"https://api-ropsten.etherscan.io\";break;case \"rinkeby\":i = \"https://api-rinkeby.etherscan.io\";break;case \"kovan\":i = \"https://api-kovan.etherscan.io\";break;case \"goerli\":i = \"https://api-goerli.etherscan.io\";break;default:throw new Error(\"unsupported network\");}return u.defineReadOnly(r, \"baseUrl\", i), u.defineReadOnly(r, \"apiKey\", t), r;}r.EtherscanProvider = y;}, { \"../errors\": 5, \"../utils/bytes\": 63, \"../utils/properties\": 73, \"../utils/web\": 85, \"./base-provider\": 50 }], 52: [function (e, t, r) {\"use strict\";var n,i = this && this.__extends || (n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (e, t) {e.__proto__ = t;} || function (e, t) {for (var r in t) {t.hasOwnProperty(r) && (e[r] = t[r]);}}, function (e, t) {function r() {this.constructor = e;}n(e, t), e.prototype = null === t ? Object.create(t) : (r.prototype = t.prototype, new r());}),o = this && this.__importStar || function (e) {if (e && e.__esModule) return e;var t = {};if (null != e) for (var r in e) {Object.hasOwnProperty.call(e, r) && (t[r] = e[r]);}return t.default = e, t;};Object.defineProperty(r, \"__esModule\", { value: !0 });var s = e(\"./base-provider\"),a = o(e(\"../errors\"));function u(t) {var r = !0,n = null;return t.forEach(function (e) {null != e ? null != n ? n.name === e.name && n.chainId === e.chainId && (n.ensAddress === e.ensAddress || null == n.ensAddress && null == e.ensAddress) || a.throwError(\"provider mismatch\", a.INVALID_ARGUMENT, { arg: \"networks\", value: t }) : n = e : r = !1;}), r;}var l,h = (l = s.BaseProvider, i(f, l), Object.defineProperty(f.prototype, \"providers\", { get: function get() {return this._providers.slice(0);}, enumerable: !0, configurable: !0 }), f.prototype.perform = function (i, o) {var s = this.providers;return new Promise(function (r, e) {var n = null;!function t() {s.length ? s.shift().perform(i, o).then(function (e) {return r(e);}).catch(function (e) {n = n || e, setTimeout(t, 0);}) : e(n);}();});}, f);function f(e) {var t = this;if (0 === e.length) throw new Error(\"no providers\");if (u(e.map(function (e) {return e.network;}))) t = l.call(this, e[0].network) || this;else {var r = Promise.all(e.map(function (e) {return e.getNetwork();})).then(function (e) {return u(e) || a.throwError(\"getNetwork returned null\", a.UNKNOWN_ERROR, {}), e[0];});t = l.call(this, r) || this;}return a.checkNew(t, f), t._providers = e.slice(0), t;}r.FallbackProvider = h;}, { \"../errors\": 5, \"./base-provider\": 50 }], 53: [function (e, t, r) {\"use strict\";Object.defineProperty(r, \"__esModule\", { value: !0 });var n = e(\"./abstract-provider\");r.Provider = n.Provider;var i = e(\"./base-provider\");r.BaseProvider = i.BaseProvider;var o = e(\"./etherscan-provider\");r.EtherscanProvider = o.EtherscanProvider;var s = e(\"./fallback-provider\");r.FallbackProvider = s.FallbackProvider;var a = e(\"./ipc-provider\");r.IpcProvider = a.IpcProvider;var u = e(\"./infura-provider\");r.InfuraProvider = u.InfuraProvider;var l = e(\"./json-rpc-provider\");r.JsonRpcProvider = l.JsonRpcProvider, r.JsonRpcSigner = l.JsonRpcSigner;var h = e(\"./web3-provider\");r.Web3Provider = h.Web3Provider;}, { \"./abstract-provider\": 49, \"./base-provider\": 50, \"./etherscan-provider\": 51, \"./fallback-provider\": 52, \"./infura-provider\": 54, \"./ipc-provider\": 55, \"./json-rpc-provider\": 56, \"./web3-provider\": 57 }], 54: [function (e, t, r) {\"use strict\";var n,i = this && this.__extends || (n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (e, t) {e.__proto__ = t;} || function (e, t) {for (var r in t) {t.hasOwnProperty(r) && (e[r] = t[r]);}}, function (e, t) {function r() {this.constructor = e;}n(e, t), e.prototype = null === t ? Object.create(t) : (r.prototype = t.prototype, new r());}),o = this && this.__importStar || function (e) {if (e && e.__esModule) return e;var t = {};if (null != e) for (var r in e) {Object.hasOwnProperty.call(e, r) && (t[r] = e[r]);}return t.default = e, t;};Object.defineProperty(r, \"__esModule\", { value: !0 });var s,a = e(\"./json-rpc-provider\"),u = e(\"../utils/bytes\"),l = e(\"../utils/networks\"),h = e(\"../utils/properties\"),f = o(e(\"../errors\")),c = (s = a.JsonRpcProvider, i(d, s), d.prototype._startPending = function () {f.warn(\"WARNING: INFURA does not support pending filters\");}, d.prototype.getSigner = function (e) {return f.throwError(\"INFURA does not support signing\", f.UNSUPPORTED_OPERATION, { operation: \"getSigner\" });}, d.prototype.listAccounts = function () {return Promise.resolve([]);}, d);function d(e, t) {var r = this,n = l.getNetwork(null == e ? \"homestead\" : e);null == t && (t = \"7d0d81d0919f4f05b9ab6634be01ee73\");var i = null;switch (n.name) {case \"homestead\":i = \"mainnet.infura.io\";break;case \"ropsten\":i = \"ropsten.infura.io\";break;case \"rinkeby\":i = \"rinkeby.infura.io\";break;case \"goerli\":i = \"goerli.infura.io\";break;case \"kovan\":i = \"kovan.infura.io\";break;default:f.throwError(\"unsupported network\", f.INVALID_ARGUMENT, { argument: \"network\", value: e });}return u.isHexString(\"0x\" + t, 16) ? (r = s.call(this, \"https://\" + i + \"/v3/\" + t, n) || this, h.defineReadOnly(r, \"apiAccessToken\", null), h.defineReadOnly(r, \"projectId\", t)) : (f.warn(\"The legacy INFURA apiAccesToken API is deprecated; please upgrade to a Project ID instead (see INFURA dshboard; https://infura.io)\"), r = s.call(this, \"https://\" + i + \"/\" + t, n) || this, h.defineReadOnly(r, \"apiAccessToken\", t), h.defineReadOnly(r, \"projectId\", null)), f.checkNew(r, d), r;}r.InfuraProvider = c;}, { \"../errors\": 5, \"../utils/bytes\": 63, \"../utils/networks\": 71, \"../utils/properties\": 73, \"./json-rpc-provider\": 56 }], 55: [function (e, t, r) {\"use strict\";Object.defineProperty(r, \"__esModule\", { value: !0 });}, {}], 56: [function (e, t, r) {\"use strict\";var n,i = this && this.__extends || (n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (e, t) {e.__proto__ = t;} || function (e, t) {for (var r in t) {t.hasOwnProperty(r) && (e[r] = t[r]);}}, function (e, t) {function r() {this.constructor = e;}n(e, t), e.prototype = null === t ? Object.create(t) : (r.prototype = t.prototype, new r());}),o = this && this.__importStar || function (e) {if (e && e.__esModule) return e;var t = {};if (null != e) for (var r in e) {Object.hasOwnProperty.call(e, r) && (t[r] = e[r]);}return t.default = e, t;};Object.defineProperty(r, \"__esModule\", { value: !0 });var s = e(\"./base-provider\"),a = e(\"../abstract-signer\"),u = o(e(\"../errors\")),l = e(\"../utils/address\"),h = e(\"../utils/bytes\"),f = e(\"../utils/networks\"),c = e(\"../utils/properties\"),d = e(\"../utils/utf8\"),p = e(\"../utils/web\");function v(e) {if (e.error) {var t = new Error(e.error.message);throw t.code = e.error.code, t.data = e.error.data, t;}return e.result;}function y(e) {return e ? e.toLowerCase() : e;}var m,g = {},b = 42,w = (m = a.Signer, i(_, m), _.prototype.getAddress = function () {var t = this;return this._address ? Promise.resolve(this._address) : this.provider.send(\"eth_accounts\", []).then(function (e) {return e.length <= t._index && u.throwError(\"unknown account #\" + t._index, u.UNSUPPORTED_OPERATION, { operation: \"getAddress\" }), t._address = l.getAddress(e[t._index]), t._address;});}, _.prototype.getBalance = function (e) {return this.provider.getBalance(this.getAddress(), e);}, _.prototype.getTransactionCount = function (e) {return this.provider.getTransactionCount(this.getAddress(), e);}, _.prototype.sendUncheckedTransaction = function (e) {var n = this;e = c.shallowCopy(e);var t = this.getAddress().then(function (e) {return e = e && e.toLowerCase();});if (null == e.gasLimit) {var r = c.shallowCopy(e);r.from = t, e.gasLimit = this.provider.estimateGas(r);}return Promise.all([c.resolveProperties(e), t]).then(function (e) {var t = e[0],r = E.hexlifyTransaction(t);return r.from = e[1], n.provider.send(\"eth_sendTransaction\", [r]).then(function (e) {return e;}, function (e) {throw e.responseText && (0 <= e.responseText.indexOf(\"insufficient funds\") && u.throwError(\"insufficient funds\", u.INSUFFICIENT_FUNDS, { transaction: t }), 0 <= e.responseText.indexOf(\"nonce too low\") && u.throwError(\"nonce has already been used\", u.NONCE_EXPIRED, { transaction: t }), 0 <= e.responseText.indexOf(\"replacement transaction underpriced\") && u.throwError(\"replacement fee too low\", u.REPLACEMENT_UNDERPRICED, { transaction: t })), e;});});}, _.prototype.sendTransaction = function (e) {var r = this;return this.sendUncheckedTransaction(e).then(function (t) {return p.poll(function () {return r.provider.getTransaction(t).then(function (e) {if (null !== e) return r.provider._wrapTransaction(e, t);});}, { fastRetry: 250, onceBlock: r.provider }).catch(function (e) {throw e.transactionHash = t, e;});});}, _.prototype.signMessage = function (e) {var t = this,r = \"string\" == typeof e ? d.toUtf8Bytes(e) : e;return this.getAddress().then(function (e) {return t.provider.send(\"eth_sign\", [e.toLowerCase(), h.hexlify(r)]);});}, _.prototype.unlock = function (t) {var r = this.provider;return this.getAddress().then(function (e) {return r.send(\"personal_unlockAccount\", [e.toLowerCase(), t, null]);});}, _);function _(e, t, r) {var n = m.call(this) || this;if (u.checkNew(n, _), e !== g) throw new Error(\"do not call the JsonRpcSigner constructor directly; use provider.getSigner\");return c.defineReadOnly(n, \"provider\", t), r ? \"string\" == typeof r ? c.defineReadOnly(n, \"_address\", l.getAddress(r)) : \"number\" == typeof r ? c.defineReadOnly(n, \"_index\", r) : u.throwError(\"invalid address or index\", u.INVALID_ARGUMENT, { argument: \"addressOrIndex\", value: r }) : c.defineReadOnly(n, \"_index\", 0), n;}r.JsonRpcSigner = w;var M,A = { chainId: !0, data: !0, gasLimit: !0, gasPrice: !0, nonce: !0, to: !0, value: !0 },E = (M = s.BaseProvider, i(S, M), S.prototype.getSigner = function (e) {return new w(g, this, e);}, S.prototype.listAccounts = function () {return this.send(\"eth_accounts\", []).then(function (e) {return e.map(function (e) {return l.getAddress(e);});});}, S.prototype.send = function (e, t) {var r = this,n = { method: e, params: t, id: b++, jsonrpc: \"2.0\" };return p.fetchJson(this.connection, JSON.stringify(n), v).then(function (e) {return r.emit(\"debug\", { action: \"send\", request: n, response: e, provider: r }), e;});}, S.prototype.perform = function (e, t) {switch (e) {case \"getBlockNumber\":return this.send(\"eth_blockNumber\", []);case \"getGasPrice\":return this.send(\"eth_gasPrice\", []);case \"getBalance\":return this.send(\"eth_getBalance\", [y(t.address), t.blockTag]);case \"getTransactionCount\":return this.send(\"eth_getTransactionCount\", [y(t.address), t.blockTag]);case \"getCode\":return this.send(\"eth_getCode\", [y(t.address), t.blockTag]);case \"getStorageAt\":return this.send(\"eth_getStorageAt\", [y(t.address), t.position, t.blockTag]);case \"sendTransaction\":return this.send(\"eth_sendRawTransaction\", [t.signedTransaction]).catch(function (e) {throw e.responseText && (0 < e.responseText.indexOf(\"insufficient funds\") && u.throwError(\"insufficient funds\", u.INSUFFICIENT_FUNDS, {}), 0 < e.responseText.indexOf(\"nonce too low\") && u.throwError(\"nonce has already been used\", u.NONCE_EXPIRED, {}), 0 < e.responseText.indexOf(\"replacement transaction underpriced\") && u.throwError(\"replacement fee too low\", u.REPLACEMENT_UNDERPRICED, {})), e;});case \"getBlock\":return t.blockTag ? this.send(\"eth_getBlockByNumber\", [t.blockTag, !!t.includeTransactions]) : t.blockHash ? this.send(\"eth_getBlockByHash\", [t.blockHash, !!t.includeTransactions]) : Promise.reject(new Error(\"invalid block tag or block hash\"));case \"getTransaction\":return this.send(\"eth_getTransactionByHash\", [t.transactionHash]);case \"getTransactionReceipt\":return this.send(\"eth_getTransactionReceipt\", [t.transactionHash]);case \"call\":return this.send(\"eth_call\", [S.hexlifyTransaction(t.transaction, { from: !0 }), t.blockTag]);case \"estimateGas\":return this.send(\"eth_estimateGas\", [S.hexlifyTransaction(t.transaction, { from: !0 })]);case \"getLogs\":return t.filter && null != t.filter.address && (t.filter.address = y(t.filter.address)), this.send(\"eth_getLogs\", [t.filter]);}return u.throwError(e + \" not implemented\", u.NOT_IMPLEMENTED, { operation: e }), null;}, S.prototype._startPending = function () {if (null == this._pendingFilter) {var r = this,n = this.send(\"eth_newPendingTransactionFilter\", []);(this._pendingFilter = n).then(function (t) {return function e() {r.send(\"eth_getFilterChanges\", [t]).then(function (e) {if (r._pendingFilter != n) return null;var t = Promise.resolve();return e.forEach(function (e) {r._emitted[\"t:\" + e.toLowerCase()] = \"pending\", t = t.then(function () {return r.getTransaction(e).then(function (e) {return r.emit(\"pending\", e), null;});});}), t.then(function () {return function (t) {return new Promise(function (e) {setTimeout(function () {e();}, t);});}(1e3);});}).then(function () {if (r._pendingFilter == n) return setTimeout(function () {e();}, 0), null;r.send(\"eth_uninstallFilter\", [t]);}).catch(function (e) {});}(), t;}).catch(function (e) {});}}, S.prototype._stopPending = function () {this._pendingFilter = null;}, S.hexlifyTransaction = function (r, e) {var t = c.shallowCopy(A);if (e) for (var n in e) {e[n] && (t[n] = !0);}c.checkProperties(r, t);var i = {};return [\"gasLimit\", \"gasPrice\", \"nonce\", \"value\"].forEach(function (e) {if (null != r[e]) {var t = h.hexStripZeros(h.hexlify(r[e]));\"gasLimit\" === e && (e = \"gas\"), i[e] = t;}}), [\"from\", \"to\", \"data\"].forEach(function (e) {null != r[e] && (i[e] = h.hexlify(r[e]));}), i;}, S);function S(e, t) {var n = this;if (\"string\" == typeof e && null === t && f.getNetwork(e) && (t = e, e = null), t) n = M.call(this, t) || this;else {var r = new Promise(function (t, r) {setTimeout(function () {n.send(\"net_version\", []).then(function (e) {return t(f.getNetwork(parseInt(e)));}).catch(function (e) {r(e);});});});n = M.call(this, r) || this;}return u.checkNew(n, S), e = e || \"http://localhost:8545\", n.connection = \"string\" == typeof e ? { url: e } : e, n;}r.JsonRpcProvider = E;}, { \"../abstract-signer\": 2, \"../errors\": 5, \"../utils/address\": 59, \"../utils/bytes\": 63, \"../utils/networks\": 71, \"../utils/properties\": 73, \"../utils/utf8\": 84, \"../utils/web\": 85, \"./base-provider\": 50 }], 57: [function (e, t, r) {\"use strict\";var n,i = this && this.__extends || (n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (e, t) {e.__proto__ = t;} || function (e, t) {for (var r in t) {t.hasOwnProperty(r) && (e[r] = t[r]);}}, function (e, t) {function r() {this.constructor = e;}n(e, t), e.prototype = null === t ? Object.create(t) : (r.prototype = t.prototype, new r());}),o = this && this.__importStar || function (e) {if (e && e.__esModule) return e;var t = {};if (null != e) for (var r in e) {Object.hasOwnProperty.call(e, r) && (t[r] = e[r]);}return t.default = e, t;};Object.defineProperty(r, \"__esModule\", { value: !0 });var s,a = e(\"./json-rpc-provider\"),u = e(\"../utils/properties\"),l = o(e(\"../errors\")),h = 42,f = (s = a.JsonRpcProvider, i(c, s), c.prototype.send = function (t, r) {var o = this;return \"eth_sign\" == t && this._web3Provider.isMetaMask && (t = \"personal_sign\", r = [r[1], r[0]]), new Promise(function (n, i) {var e = { method: t, params: r, id: h++, jsonrpc: \"2.0\" };o._sendAsync(e, function (e, t) {if (e) i(e);else {if (t.error) {var r = new Error(t.error.message);return r.code = t.error.code, r.data = t.error.data, void i(r);}n(t.result);}});});}, c);function c(e, t) {var r = s.call(this, e.host || e.path || \"\", t) || this;return l.checkNew(r, c), e && (e.sendAsync ? r._sendAsync = e.sendAsync.bind(e) : e.send && (r._sendAsync = e.send.bind(e))), e && r._sendAsync || l.throwError(\"invalid web3Provider\", l.INVALID_ARGUMENT, { arg: \"web3Provider\", value: e }), u.defineReadOnly(r, \"_web3Provider\", e), r;}r.Web3Provider = f;}, { \"../errors\": 5, \"../utils/properties\": 73, \"./json-rpc-provider\": 56 }], 58: [function (e, t, r) {\"use strict\";var n,i = this && this.__extends || (n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (e, t) {e.__proto__ = t;} || function (e, t) {for (var r in t) {t.hasOwnProperty(r) && (e[r] = t[r]);}}, function (e, t) {function r() {this.constructor = e;}n(e, t), e.prototype = null === t ? Object.create(t) : (r.prototype = t.prototype, new r());}),o = this && this.__importStar || function (e) {if (e && e.__esModule) return e;var t = {};if (null != e) for (var r in e) {Object.hasOwnProperty.call(e, r) && (t[r] = e[r]);}return t.default = e, t;};Object.defineProperty(r, \"__esModule\", { value: !0 });var s = e(\"../constants\"),l = o(e(\"../errors\")),a = e(\"./address\"),u = e(\"./bignumber\"),h = e(\"./bytes\"),f = e(\"./utf8\"),c = e(\"./properties\"),d = new RegExp(/^bytes([0-9]*)$/),p = new RegExp(/^(u?int)([0-9]*)$/),v = new RegExp(/^(.*)\\[([0-9]*)\\]$/);r.defaultCoerceFunc = function (e, t) {var r = e.match(p);return r && parseInt(r[2]) <= 48 ? t.toNumber() : t;};var y = new RegExp(\"^([^)(]*)\\\\((.*)\\\\)([^)(]*)$\"),m = new RegExp(\"^[A-Za-z_][A-Za-z0-9_]*$\");function g(e) {return e.match(/^uint($|[^1-9])/) ? e = \"uint256\" + e.substring(4) : e.match(/^int($|[^1-9])/) && (e = \"int256\" + e.substring(3)), e;}function b(e, t) {var r = e;function n(e) {throw new Error('unexpected character \"' + r[e] + '\" at position ' + e + ' in \"' + r + '\"');}e = e.replace(/\\s/g, \" \");for (var i = { type: \"\", name: \"\", state: { allowType: !0 } }, o = i, s = 0; s < e.length; s++) {var a = e[s];switch (a) {case \"(\":o.state.allowParams || n(s), o.state.allowType = !1, o.type = g(o.type), o.components = [{ type: \"\", name: \"\", parent: o, state: { allowType: !0 } }], o = o.components[0];break;case \")\":delete o.state, t && \"indexed\" === o.name && (o.indexed = !0, o.name = \"\"), o.type = g(o.type);var u = o;(o = o.parent) || n(s), delete u.parent, o.state.allowParams = !1, o.state.allowName = !0, o.state.allowArray = !0;break;case \",\":delete o.state, t && \"indexed\" === o.name && (o.indexed = !0, o.name = \"\"), o.type = g(o.type);var l = { type: \"\", name: \"\", parent: o.parent, state: { allowType: !0 } };o.parent.components.push(l), delete o.parent, o = l;break;case \" \":o.state.allowType && \"\" !== o.type && (o.type = g(o.type), delete o.state.allowType, o.state.allowName = !0, o.state.allowParams = !0), o.state.allowName && \"\" !== o.name && (t && \"indexed\" === o.name ? (o.indexed = !0, o.name = \"\") : o.state.allowName = !1);break;case \"[\":o.state.allowArray || n(s), o.type += a, o.state.allowArray = !1, o.state.allowName = !1, o.state.readArray = !0;break;case \"]\":o.state.readArray || n(s), o.type += a, o.state.readArray = !1, o.state.allowArray = !0, o.state.allowName = !0;break;default:o.state.allowType ? (o.type += a, o.state.allowParams = !0, o.state.allowArray = !0) : o.state.allowName ? (o.name += a, delete o.state.allowArray) : o.state.readArray ? o.type += a : n(s);}}if (o.parent) throw new Error(\"unexpected eof\");return delete i.state, t && \"indexed\" === o.name && (o.indexed = !0, o.name = \"\"), i.type = g(i.type), i;}function w(e) {return se(r.defaultCoerceFunc, e).type;}r.parseParamType = function (e) {return b(e, !0);}, r.formatParamType = w, r.formatSignature = function (e) {return e.name + \"(\" + e.inputs.map(function (e) {return w(e);}).join(\",\") + \")\";}, r.parseSignature = function (e) {if (\"string\" == typeof e) return \"event \" === (e = (e = (e = e.replace(/\\s/g, \" \")).replace(/\\(/g, \" (\").replace(/\\)/g, \") \").replace(/\\s+/g, \" \")).trim()).substring(0, 6) ? function (e) {var t = { anonymous: !1, inputs: [], name: \"\", type: \"event\" },r = e.match(y);if (!r) throw new Error(\"invalid event: \" + e);if (t.name = r[1].trim(), ie(r[2]).forEach(function (e) {(e = b(e, !0)).indexed = !!e.indexed, t.inputs.push(e);}), r[3].split(\" \").forEach(function (e) {switch (e) {case \"anonymous\":t.anonymous = !0;break;case \"\":break;default:l.info(\"unknown modifier: \" + e);}}), t.name && !t.name.match(m)) throw new Error('invalid identifier: \"' + t.name + '\"');return t;}(e.substring(6).trim()) : (\"function \" === e.substring(0, 9) && (e = e.substring(9)), function (e) {var t = { constant: !1, gas: null, inputs: [], name: \"\", outputs: [], payable: !1, stateMutability: null, type: \"function\" },r = e.split(\"@\");if (1 !== r.length) {if (2 < r.length) throw new Error(\"invalid signature\");if (!r[1].match(/^[0-9]+$/)) throw new Error(\"invalid signature gas\");t.gas = u.bigNumberify(r[1]), e = r[0];}var n = (r = e.split(\" returns \"))[0].match(y);if (!n) throw new Error(\"invalid signature\");if (t.name = n[1].trim(), !t.name.match(m)) throw new Error('invalid identifier: \"' + n[1] + '\"');if (ie(n[2]).forEach(function (e) {t.inputs.push(b(e));}), n[3].split(\" \").forEach(function (e) {switch (e) {case \"constant\":t.constant = !0;break;case \"payable\":t.payable = !0, t.stateMutability = \"payable\";break;case \"pure\":t.constant = !0, t.stateMutability = \"pure\";break;case \"view\":t.constant = !0, t.stateMutability = \"view\";break;case \"external\":case \"public\":case \"\":break;default:l.info(\"unknown modifier: \" + e);}}), 1 < r.length) {var i = r[1].match(y);if (\"\" != i[1].trim() || \"\" != i[3].trim()) throw new Error(\"unexpected tokens\");ie(i[2]).forEach(function (e) {t.outputs.push(b(e));});}if (\"constructor\" === t.name) {if (t.type = \"constructor\", t.outputs.length) throw new Error(\"constructor may not have outputs\");delete t.name, delete t.outputs;}return t;}(e.trim()));throw new Error(\"unknown signature\");};function _(e, t, r, n, i) {this.coerceFunc = e, this.name = t, this.type = r, this.localName = n, this.dynamic = i;}var M,A = (i(E, M = _), E.prototype.encode = function (e) {return this.coder.encode(e);}, E.prototype.decode = function (e, t) {return this.coder.decode(e, t);}, E);function E(e) {var t = M.call(this, e.coerceFunc, e.name, e.type, void 0, e.dynamic) || this;return c.defineReadOnly(t, \"coder\", e), t;}var S,k = (i(N, S = _), N.prototype.encode = function (e) {return h.arrayify([]);}, N.prototype.decode = function (e, t) {if (t > e.length) throw new Error(\"invalid null\");return { consumed: 0, value: this.coerceFunc(\"null\", void 0) };}, N);function N(e, t) {return S.call(this, e, \"null\", \"\", t, !1) || this;}var P,x = (i(I, P = _), I.prototype.encode = function (t) {try {var e = u.bigNumberify(t);if (this.signed) {var r = s.MaxUint256.maskn(8 * this.size - 1);if (e.gt(r)) throw new Error(\"out-of-bounds\");if (r = r.add(s.One).mul(s.NegativeOne), e.lt(r)) throw new Error(\"out-of-bounds\");} else if (e.lt(s.Zero) || e.gt(s.MaxUint256.maskn(8 * this.size))) throw new Error(\"out-of-bounds\");return e = e.toTwos(8 * this.size).maskn(8 * this.size), this.signed && (e = e.fromTwos(8 * this.size).toTwos(256)), h.padZeros(h.arrayify(e), 32);} catch (e) {l.throwError(\"invalid number value\", l.INVALID_ARGUMENT, { arg: this.localName, coderType: this.name, value: t });}return null;}, I.prototype.decode = function (e, t) {e.length < t + 32 && l.throwError(\"insufficient data for \" + this.name + \" type\", l.INVALID_ARGUMENT, { arg: this.localName, coderType: this.name, value: h.hexlify(e.slice(t, t + 32)) });var r = 32 - this.size,n = u.bigNumberify(e.slice(t + r, t + 32));return n = this.signed ? n.fromTwos(8 * this.size) : n.maskn(8 * this.size), { consumed: 32, value: this.coerceFunc(this.name, n) };}, I);function I(e, t, r, n) {var i = this,o = (r ? \"int\" : \"uint\") + 8 * t;return (i = P.call(this, e, o, o, n, !1) || this).size = t, i.signed = r, i;}var T,R = new x(function (e, t) {return t;}, 32, !1, \"none\"),O = (i(C, T = _), C.prototype.encode = function (e) {return R.encode(e ? 1 : 0);}, C.prototype.decode = function (e, t) {try {var r = R.decode(e, t);} catch (e) {throw \"insufficient data for uint256 type\" === e.reason && l.throwError(\"insufficient data for boolean type\", l.INVALID_ARGUMENT, { arg: this.localName, coderType: \"boolean\", value: e.value }), e;}return { consumed: r.consumed, value: this.coerceFunc(\"bool\", !r.value.isZero()) };}, C);function C(e, t) {return T.call(this, e, \"bool\", \"bool\", t, !1) || this;}var B,D = (i(L, B = _), L.prototype.encode = function (t) {var e = new Uint8Array(32);try {var r = h.arrayify(t);if (r.length !== this.length) throw new Error(\"incorrect data length\");e.set(r);} catch (e) {l.throwError(\"invalid \" + this.name + \" value\", l.INVALID_ARGUMENT, { arg: this.localName, coderType: this.name, value: e.value || t });}return e;}, L.prototype.decode = function (e, t) {return e.length < t + 32 && l.throwError(\"insufficient data for \" + this.name + \" type\", l.INVALID_ARGUMENT, { arg: this.localName, coderType: this.name, value: h.hexlify(e.slice(t, t + 32)) }), { consumed: 32, value: this.coerceFunc(this.name, h.hexlify(e.slice(t, t + this.length))) };}, L);function L(e, t, r) {var n = this,i = \"bytes\" + t;return (n = B.call(this, e, i, i, r, !1) || this).length = t, n;}var U,F = (i(j, U = _), j.prototype.encode = function (t) {var e = new Uint8Array(32);try {e.set(h.arrayify(a.getAddress(t)), 12);} catch (e) {l.throwError(\"invalid address\", l.INVALID_ARGUMENT, { arg: this.localName, coderType: \"address\", value: t });}return e;}, j.prototype.decode = function (e, t) {return e.length < t + 32 && l.throwError(\"insufficuent data for address type\", l.INVALID_ARGUMENT, { arg: this.localName, coderType: \"address\", value: h.hexlify(e.slice(t, t + 32)) }), { consumed: 32, value: this.coerceFunc(\"address\", a.getAddress(h.hexlify(e.slice(t + 12, t + 32)))) };}, j);function j(e, t) {return U.call(this, e, \"address\", \"address\", t, !1) || this;}function G(e) {var t = 32 * Math.ceil(e.length / 32),r = new Uint8Array(t - e.length);return h.concat([R.encode(e.length), e, r]);}function H(e, t, r) {e.length < t + 32 && l.throwError(\"insufficient data for dynamicBytes length\", l.INVALID_ARGUMENT, { arg: r, coderType: \"dynamicBytes\", value: h.hexlify(e.slice(t, t + 32)) });var n = R.decode(e, t).value;try {n = n.toNumber();} catch (e) {l.throwError(\"dynamic bytes count too large\", l.INVALID_ARGUMENT, { arg: r, coderType: \"dynamicBytes\", value: n.toString() });}return e.length < t + 32 + n && l.throwError(\"insufficient data for dynamicBytes type\", l.INVALID_ARGUMENT, { arg: r, coderType: \"dynamicBytes\", value: h.hexlify(e.slice(t, t + 32 + n)) }), { consumed: 32 + 32 * Math.ceil(n / 32), value: e.slice(t + 32, t + 32 + n) };}var z,V = (i(K, z = _), K.prototype.encode = function (e) {try {return G(h.arrayify(e));} catch (e) {l.throwError(\"invalid bytes value\", l.INVALID_ARGUMENT, { arg: this.localName, coderType: \"bytes\", value: e.value });}return null;}, K.prototype.decode = function (e, t) {var r = H(e, t, this.localName);return r.value = this.coerceFunc(\"bytes\", h.hexlify(r.value)), r;}, K);function K(e, t) {return z.call(this, e, \"bytes\", \"bytes\", t, !0) || this;}var q,W = (i(Z, q = _), Z.prototype.encode = function (e) {return \"string\" != typeof e && l.throwError(\"invalid string value\", l.INVALID_ARGUMENT, { arg: this.localName, coderType: \"string\", value: e }), G(f.toUtf8Bytes(e));}, Z.prototype.decode = function (e, t) {var r = H(e, t, this.localName);return r.value = this.coerceFunc(\"string\", f.toUtf8String(r.value)), r;}, Z);function Z(e, t) {return q.call(this, e, \"string\", \"string\", t, !0) || this;}function J(e) {return 32 * Math.ceil(e / 32);}function X(e, r) {if (Array.isArray(r)) ;else if (r && \"object\" == typeof r) {var t = [];e.forEach(function (e) {t.push(r[e.localName]);}), r = t;} else l.throwError(\"invalid tuple value\", l.INVALID_ARGUMENT, { coderType: \"tuple\", value: r });e.length !== r.length && l.throwError(\"types/value length mismatch\", l.INVALID_ARGUMENT, { coderType: \"tuple\", value: r });var n = [];e.forEach(function (e, t) {n.push({ dynamic: e.dynamic, value: e.encode(r[t]) });});var i = 0,o = 0;n.forEach(function (e) {e.dynamic ? (i += 32, o += J(e.value.length)) : i += J(e.value.length);});var s = 0,a = i,u = new Uint8Array(i + o);return n.forEach(function (e) {e.dynamic ? (u.set(R.encode(a), s), s += 32, u.set(e.value, a), a += J(e.value.length)) : (u.set(e.value, s), s += J(e.value.length));}), u;}function $(e, n, i) {var o = i,s = 0,a = [];return e.forEach(function (e) {if (e.dynamic) {var t = R.decode(n, i);(r = e.decode(n, o + t.value.toNumber())).consumed = t.consumed;} else var r = e.decode(n, i);null != r.value && a.push(r.value), i += r.consumed, s += r.consumed;}), e.forEach(function (e, t) {var r = e.localName;r && (\"length\" === r && (r = \"_length\"), null == a[r] && (a[r] = a[t]));}), { value: a, consumed: s };}var Q,Y = (i(ee, Q = _), ee.prototype.encode = function (e) {Array.isArray(e) || l.throwError(\"expected array value\", l.INVALID_ARGUMENT, { arg: this.localName, coderType: \"array\", value: e });var t = this.length,r = new Uint8Array(0);-1 === t && (t = e.length, r = R.encode(t)), l.checkArgumentCount(t, e.length, \" in coder array\" + (this.localName ? \" \" + this.localName : \"\"));for (var n = [], i = 0; i < e.length; i++) {n.push(this.coder);}return h.concat([r, X(n, e)]);}, ee.prototype.decode = function (e, t) {var r = 0,n = this.length;if (-1 === n) {try {var i = R.decode(e, t);} catch (e) {l.throwError(\"insufficient data for dynamic array length\", l.INVALID_ARGUMENT, { arg: this.localName, coderType: \"array\", value: e.value });}try {n = i.value.toNumber();} catch (e) {l.throwError(\"array count too large\", l.INVALID_ARGUMENT, { arg: this.localName, coderType: \"array\", value: i.value.toString() });}r += i.consumed, t += i.consumed;}for (var o = [], s = 0; s < n; s++) {o.push(new A(this.coder));}var a = $(o, e, t);return a.consumed += r, a.value = this.coerceFunc(this.type, a.value), a;}, ee);function ee(e, t, r, n) {var i = this,o = t.type + \"[\" + (0 <= r ? r : \"\") + \"]\",s = -1 === r || t.dynamic;return (i = Q.call(this, e, \"array\", o, n, s) || this).coder = t, i.length = r, i;}var te,re = (i(ne, te = _), ne.prototype.encode = function (e) {return X(this.coders, e);}, ne.prototype.decode = function (e, t) {var r = $(this.coders, e, t);return r.value = this.coerceFunc(this.type, r.value), r;}, ne);function ne(e, t, r) {var n = this,i = !1,o = [];t.forEach(function (e) {e.dynamic && (i = !0), o.push(e.type);});var s = \"tuple(\" + o.join(\",\") + \")\";return (n = te.call(this, e, \"tuple\", s, r, i) || this).coders = t, n;}function ie(e) {e = e.trim();for (var t = [], r = \"\", n = 0, i = 0; i < e.length; i++) {var o = e[i];if (\",\" === o && 0 === n) t.push(r), r = \"\";else if (r += o, \"(\" === o) n++;else if (\")\" === o && -1 === --n) throw new Error(\"unbalanced parenthsis\");}return r && t.push(r), t;}var oe = { address: F, bool: O, string: W, bytes: V };function se(e, t) {var r,n = oe[t.type];if (n) return new n(e, t.name);if (r = t.type.match(p)) return (0 === (i = parseInt(r[2] || \"256\")) || 256 < i || i % 8 != 0) && l.throwError(\"invalid \" + r[1] + \" bit length\", l.INVALID_ARGUMENT, { arg: \"param\", value: t }), new x(e, i / 8, \"int\" === r[1], t.name);if (r = t.type.match(d)) return (0 === (i = parseInt(r[1])) || 32 < i) && l.throwError(\"invalid bytes length\", l.INVALID_ARGUMENT, { arg: \"param\", value: t }), new D(e, i, t.name);if (r = t.type.match(v)) {var i = parseInt(r[2] || \"-1\");return (t = c.shallowCopy(t)).type = r[1], t = c.deepCopy(t), new Y(e, se(e, t), i, t.name);}return \"tuple\" === t.type.substring(0, 5) ? function (t, e, r) {var n = [];return (e = e || []).forEach(function (e) {n.push(se(t, e));}), new re(t, n, r);}(e, t.components, t.name) : \"\" === t.type ? new k(e, t.name) : (l.throwError(\"invalid type\", l.INVALID_ARGUMENT, { arg: \"type\", value: t.type }), null);}var ae = (ue.prototype.encode = function (e, t) {e.length !== t.length && l.throwError(\"types/values length mismatch\", l.INVALID_ARGUMENT, { count: { types: e.length, values: t.length }, value: { types: e, values: t } });var r = [];return e.forEach(function (e) {var t = null;t = \"string\" == typeof e ? b(e) : e, r.push(se(this.coerceFunc, t));}, this), h.hexlify(new re(this.coerceFunc, r, \"_\").encode(t));}, ue.prototype.decode = function (e, t) {var r = [];return e.forEach(function (e) {var t = null;t = \"string\" == typeof e ? b(e) : c.deepCopy(e), r.push(se(this.coerceFunc, t));}, this), new re(this.coerceFunc, r, \"_\").decode(h.arrayify(t), 0).value;}, ue);function ue(e) {l.checkNew(this, ue), e = e || r.defaultCoerceFunc, c.defineReadOnly(this, \"coerceFunc\", e);}r.AbiCoder = ae, r.defaultAbiCoder = new ae();}, { \"../constants\": 3, \"../errors\": 5, \"./address\": 59, \"./bignumber\": 62, \"./bytes\": 63, \"./properties\": 73, \"./utf8\": 84 }], 59: [function (e, t, r) {\"use strict\";var n = this && this.__importDefault || function (e) {return e && e.__esModule ? e : { default: e };};Object.defineProperty(r, \"__esModule\", { value: !0 });var i = n(e(\"bn.js\")),o = e(\"./bytes\"),s = e(\"./keccak256\"),a = e(\"./rlp\"),u = e(\"../errors\");function l(e) {\"string\" == typeof e && e.match(/^0x[0-9A-Fa-f]{40}$/) || u.throwError(\"invalid address\", u.INVALID_ARGUMENT, { arg: \"address\", value: e });for (var t = (e = e.toLowerCase()).substring(2).split(\"\"), r = new Uint8Array(40), n = 0; n < 40; n++) {r[n] = t[n].charCodeAt(0);}r = o.arrayify(s.keccak256(r));for (var i = 0; i < 40; i += 2) {8 <= r[i >> 1] >> 4 && (t[i] = t[i].toUpperCase()), 8 <= (15 & r[i >> 1]) && (t[i + 1] = t[i + 1].toUpperCase());}return \"0x\" + t.join(\"\");}for (var h = {}, f = 0; f < 10; f++) {h[String(f)] = String(f);}for (f = 0; f < 26; f++) {h[String.fromCharCode(65 + f)] = String(10 + f);}var c,d = Math.floor((c = 9007199254740991, Math.log10 ? Math.log10(c) : Math.log(c) / Math.LN10));function p(e) {e = (e = e.toUpperCase()).substring(4) + e.substring(0, 2) + \"00\";var t = \"\";for (e.split(\"\").forEach(function (e) {t += h[e];}); t.length >= d;) {var r = t.substring(0, d);t = parseInt(r, 10) % 97 + t.substring(r.length);}for (var n = String(98 - parseInt(t, 10) % 97); n.length < 2;) {n = \"0\" + n;}return n;}function v(e) {var t = null;if (\"string\" != typeof e && u.throwError(\"invalid address\", u.INVALID_ARGUMENT, { arg: \"address\", value: e }), e.match(/^(0x)?[0-9a-fA-F]{40}$/)) \"0x\" !== e.substring(0, 2) && (e = \"0x\" + e), t = l(e), e.match(/([A-F].*[a-f])|([a-f].*[A-F])/) && t !== e && u.throwError(\"bad address checksum\", u.INVALID_ARGUMENT, { arg: \"address\", value: e });else if (e.match(/^XE[0-9]{2}[0-9A-Za-z]{30,31}$/)) {for (e.substring(2, 4) !== p(e) && u.throwError(\"bad icap checksum\", u.INVALID_ARGUMENT, { arg: \"address\", value: e }), t = new i.default.BN(e.substring(4), 36).toString(16); t.length < 40;) {t = \"0\" + t;}t = l(\"0x\" + t);} else u.throwError(\"invalid address\", u.INVALID_ARGUMENT, { arg: \"address\", value: e });return t;}r.getAddress = v, r.getIcapAddress = function (e) {for (var t = new i.default.BN(v(e).substring(2), 16).toString(36).toUpperCase(); t.length < 30;) {t = \"0\" + t;}return \"XE\" + p(\"XE00\" + t) + t;}, r.getContractAddress = function (e) {if (!e.from) throw new Error(\"missing from address\");var t = e.nonce;return v(\"0x\" + s.keccak256(a.encode([v(e.from), o.stripZeros(o.hexlify(t))])).substring(26));};}, { \"../errors\": 5, \"./bytes\": 63, \"./keccak256\": 70, \"./rlp\": 75, \"bn.js\": 9 }], 60: [function (e, t, r) {\"use strict\";Object.defineProperty(r, \"__esModule\", { value: !0 });var n = e(\"../utils/bytes\");t.exports = { decode: function decode(e) {e = atob(e);for (var t = [], r = 0; r < e.length; r++) {t.push(e.charCodeAt(r));}return n.arrayify(t);}, encode: function encode(e) {e = n.arrayify(e);for (var t = \"\", r = 0; r < e.length; r++) {t += String.fromCharCode(e[r]);}return btoa(t);} };}, { \"../utils/bytes\": 63 }], 61: [function (e, t, r) {\"use strict\";Object.defineProperty(r, \"__esModule\", { value: !0 });var l = e(\"./bytes\"),n = e(\"./properties\"),i = (o.prototype.encode = function (e) {var t = l.arrayify(e);if (0 === t.length) return \"\";for (var r = [0], n = 0; n < t.length; ++n) {for (var i = t[n], o = 0; o < r.length; ++o) {i += r[o] << 8, r[o] = i % this.base, i = i / this.base | 0;}for (; 0 < i;) {r.push(i % this.base), i = i / this.base | 0;}}for (var s = \"\", a = 0; 0 === t[a] && a < t.length - 1; ++a) {s += this._leader;}for (var u = r.length - 1; 0 <= u; --u) {s += this.alphabet[r[u]];}return s;}, o.prototype.decode = function (e) {if (\"string\" != typeof e) throw new TypeError(\"Expected String\");var t = [];if (0 === e.length) return new Uint8Array(t);t.push(0);for (var r = 0; r < e.length; r++) {var n = this._alphabetMap[e[r]];if (void 0 === n) throw new Error(\"Non-base\" + this.base + \" character\");for (var i = n, o = 0; o < t.length; ++o) {i += t[o] * this.base, t[o] = 255 & i, i >>= 8;}for (; 0 < i;) {t.push(255 & i), i >>= 8;}}for (var s = 0; e[s] === this._leader && s < e.length - 1; ++s) {t.push(0);}return l.arrayify(new Uint8Array(t.reverse()));}, o);function o(e) {n.defineReadOnly(this, \"alphabet\", e), n.defineReadOnly(this, \"base\", e.length), n.defineReadOnly(this, \"_alphabetMap\", {}), n.defineReadOnly(this, \"_leader\", e.charAt(0));for (var t = 0; t < e.length; t++) {this._alphabetMap[e.charAt(t)] = t;}}var s = new (r.BaseX = i)(\"abcdefghijklmnopqrstuvwxyz234567\");r.Base32 = s;var a = new i(\"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\");r.Base58 = a;}, { \"./bytes\": 63, \"./properties\": 73 }], 62: [function (e, t, r) {\"use strict\";var n = this && this.__importDefault || function (e) {return e && e.__esModule ? e : { default: e };},i = this && this.__importStar || function (e) {if (e && e.__esModule) return e;var t = {};if (null != e) for (var r in e) {Object.hasOwnProperty.call(e, r) && (t[r] = e[r]);}return t.default = e, t;};Object.defineProperty(r, \"__esModule\", { value: !0 });var o = n(e(\"bn.js\")),s = e(\"./bytes\"),a = e(\"./properties\"),u = i(e(\"../errors\")),l = new o.default.BN(-1);function h(e) {var t = e.toString(16);return \"-\" === t[0] ? t.length % 2 == 0 ? \"-0x0\" + t.substring(1) : \"-0x\" + t.substring(1) : t.length % 2 == 1 ? \"0x0\" + t : \"0x\" + t;}function f(e) {return d(y(e));}function c(e) {return new p(h(e));}function d(e) {var t = e._hex;return \"-\" === t[0] ? new o.default.BN(t.substring(3), 16).mul(l) : new o.default.BN(t.substring(2), 16);}var p = (v.prototype.fromTwos = function (e) {return c(d(this).fromTwos(e));}, v.prototype.toTwos = function (e) {return c(d(this).toTwos(e));}, v.prototype.abs = function () {return \"-\" === this._hex[0] ? c(d(this).mul(l)) : this;}, v.prototype.add = function (e) {return c(d(this).add(f(e)));}, v.prototype.sub = function (e) {return c(d(this).sub(f(e)));}, v.prototype.div = function (e) {return y(e).isZero() && u.throwError(\"division by zero\", u.NUMERIC_FAULT, { operation: \"divide\", fault: \"division by zero\" }), c(d(this).div(f(e)));}, v.prototype.mul = function (e) {return c(d(this).mul(f(e)));}, v.prototype.mod = function (e) {return c(d(this).mod(f(e)));}, v.prototype.pow = function (e) {return c(d(this).pow(f(e)));}, v.prototype.maskn = function (e) {return c(d(this).maskn(e));}, v.prototype.eq = function (e) {return d(this).eq(f(e));}, v.prototype.lt = function (e) {return d(this).lt(f(e));}, v.prototype.lte = function (e) {return d(this).lte(f(e));}, v.prototype.gt = function (e) {return d(this).gt(f(e));}, v.prototype.gte = function (e) {return d(this).gte(f(e));}, v.prototype.isZero = function () {return d(this).isZero();}, v.prototype.toNumber = function () {try {return d(this).toNumber();} catch (e) {u.throwError(\"overflow\", u.NUMERIC_FAULT, { operation: \"setValue\", fault: \"overflow\", details: e.message });}return null;}, v.prototype.toString = function () {return d(this).toString(10);}, v.prototype.toHexString = function () {return this._hex;}, v.isBigNumber = function (e) {return a.isType(e, \"BigNumber\");}, v);function v(e) {if (u.checkNew(this, v), a.setType(this, \"BigNumber\"), \"string\" == typeof e) s.isHexString(e) ? (\"0x\" == e && (e = \"0x0\"), a.defineReadOnly(this, \"_hex\", e)) : \"-\" === e[0] && s.isHexString(e.substring(1)) ? a.defineReadOnly(this, \"_hex\", e) : e.match(/^-?[0-9]*$/) ? (\"\" == e && (e = \"0\"), a.defineReadOnly(this, \"_hex\", h(new o.default.BN(e)))) : u.throwError(\"invalid BigNumber string value\", u.INVALID_ARGUMENT, { arg: \"value\", value: e });else if (\"number\" == typeof e) {parseInt(String(e)) !== e && u.throwError(\"underflow\", u.NUMERIC_FAULT, { operation: \"setValue\", fault: \"underflow\", value: e, outputValue: parseInt(String(e)) });try {a.defineReadOnly(this, \"_hex\", h(new o.default.BN(e)));} catch (e) {u.throwError(\"overflow\", u.NUMERIC_FAULT, { operation: \"setValue\", fault: \"overflow\", details: e.message });}} else e instanceof v ? a.defineReadOnly(this, \"_hex\", e._hex) : e.toHexString ? a.defineReadOnly(this, \"_hex\", h(f(e.toHexString()))) : e._hex && s.isHexString(e._hex) ? a.defineReadOnly(this, \"_hex\", e._hex) : s.isArrayish(e) ? a.defineReadOnly(this, \"_hex\", h(new o.default.BN(s.hexlify(e).substring(2), 16))) : u.throwError(\"invalid BigNumber value\", u.INVALID_ARGUMENT, { arg: \"value\", value: e });}function y(e) {return p.isBigNumber(e) ? e : new p(e);}r.BigNumber = p, r.bigNumberify = y;}, { \"../errors\": 5, \"./bytes\": 63, \"./properties\": 73, \"bn.js\": 9 }], 63: [function (e, t, r) {\"use strict\";var n = this && this.__importStar || function (e) {if (e && e.__esModule) return e;var t = {};if (null != e) for (var r in e) {Object.hasOwnProperty.call(e, r) && (t[r] = e[r]);}return t.default = e, t;};Object.defineProperty(r, \"__esModule\", { value: !0 });var s = n(e(\"../errors\"));function a(e) {return !!e.toHexString;}function u(t) {return t.slice || (t.slice = function () {var e = Array.prototype.slice.call(arguments);return u(new Uint8Array(Array.prototype.slice.apply(t, e)));}), t;}function l(e) {if (!e || parseInt(String(e.length)) != e.length || \"string\" == typeof e) return !1;for (var t = 0; t < e.length; t++) {var r = e[t];if (r < 0 || 256 <= r || parseInt(String(r)) != r) return !1;}return !0;}function h(e) {if (null == e && s.throwError(\"cannot convert null value to array\", s.INVALID_ARGUMENT, { arg: \"value\", value: e }), a(e) && (e = e.toHexString()), \"string\" != typeof e) return l(e) ? u(new Uint8Array(e)) : (s.throwError(\"invalid arrayify value\", null, { arg: \"value\", value: e, type: typeof e }), null);var t = e.match(/^(0x)?[0-9a-fA-F]*$/);t || s.throwError(\"invalid hexidecimal string\", s.INVALID_ARGUMENT, { arg: \"value\", value: e }), \"0x\" !== t[1] && s.throwError(\"hex string must have 0x prefix\", s.INVALID_ARGUMENT, { arg: \"value\", value: e }), (e = e.substring(2)).length % 2 && (e = \"0\" + e);for (var r = [], n = 0; n < e.length; n += 2) {r.push(parseInt(e.substr(n, 2), 16));}return u(new Uint8Array(r));}function i(e) {for (var t = [], r = 0, n = 0; n < e.length; n++) {var i = h(e[n]);t.push(i), r += i.length;}var o = new Uint8Array(r),s = 0;for (n = 0; n < t.length; n++) {o.set(t[n], s), s += t[n].length;}return u(o);}function o(e, t) {return !(\"string\" != typeof e || !e.match(/^0x[0-9A-Fa-f]*$/)) && (!t || e.length === 2 + 2 * t);}r.isHexable = a, r.isArrayish = l, r.arrayify = h, r.concat = i, r.stripZeros = function (e) {var t = h(e);if (0 === t.length) return t;for (var r = 0; 0 === t[r];) {r++;}return r && (t = t.slice(r)), t;}, r.padZeros = function (e, t) {if (t < (e = h(e)).length) throw new Error(\"cannot pad\");var r = new Uint8Array(t);return r.set(e, t - e.length), u(r);}, r.isHexString = o;var f = \"0123456789abcdef\";function c(e) {if (a(e)) return e.toHexString();if (\"number\" == typeof e) {e < 0 && s.throwError(\"cannot hexlify negative value\", s.INVALID_ARGUMENT, { arg: \"value\", value: e }), 9007199254740991 <= e && s.throwError(\"out-of-range\", s.NUMERIC_FAULT, { operartion: \"hexlify\", fault: \"out-of-safe-range\" });for (var t = \"\"; e;) {t = f[15 & e] + t, e = Math.floor(e / 16);}return t.length ? (t.length % 2 && (t = \"0\" + t), \"0x\" + t) : \"0x00\";}if (\"string\" == typeof e) {var r = e.match(/^(0x)?[0-9a-fA-F]*$/);return r || s.throwError(\"invalid hexidecimal string\", s.INVALID_ARGUMENT, { arg: \"value\", value: e }), \"0x\" !== r[1] && s.throwError(\"hex string must have 0x prefix\", s.INVALID_ARGUMENT, { arg: \"value\", value: e }), e.length % 2 && (e = \"0x0\" + e.substring(2)), e;}if (l(e)) {for (var n = [], i = 0; i < e.length; i++) {var o = e[i];n.push(f[(240 & o) >> 4] + f[15 & o]);}return \"0x\" + n.join(\"\");}return s.throwError(\"invalid hexlify value\", null, { arg: \"value\", value: e }), \"never\";}function d(e, t) {for (o(e) || s.throwError(\"invalid hex string\", s.INVALID_ARGUMENT, { arg: \"value\", value: e }); e.length < 2 * t + 2;) {e = \"0x0\" + e.substring(2);}return e;}function p(e) {var t = 0,r = \"0x\",n = \"0x\";if (function (e) {return e && null != e.r && null != e.s;}(e)) {null == e.v && null == e.recoveryParam && s.throwError(\"at least on of recoveryParam or v must be specified\", s.INVALID_ARGUMENT, { argument: \"signature\", value: e }), r = d(e.r, 32), n = d(e.s, 32), \"string\" == typeof (t = e.v) && (t = parseInt(t, 16));var i = e.recoveryParam;null == i && null != e.v && (i = 1 - t % 2), t = 27 + i;} else {var o = h(e);if (65 !== o.length) throw new Error(\"invalid signature\");r = c(o.slice(0, 32)), n = c(o.slice(32, 64)), 27 !== (t = o[64]) && 28 !== t && (t = 27 + t % 2);}return { r: r, s: n, recoveryParam: t - 27, v: t };}r.hexlify = c, r.hexDataLength = function (e) {return o(e) && e.length % 2 == 0 ? (e.length - 2) / 2 : null;}, r.hexDataSlice = function (e, t, r) {return o(e) || s.throwError(\"invalid hex data\", s.INVALID_ARGUMENT, { arg: \"value\", value: e }), e.length % 2 != 0 && s.throwError(\"hex data length must be even\", s.INVALID_ARGUMENT, { arg: \"value\", value: e }), t = 2 + 2 * t, null != r ? \"0x\" + e.substring(t, 2 + 2 * r) : \"0x\" + e.substring(t);}, r.hexStripZeros = function (e) {for (o(e) || s.throwError(\"invalid hex string\", s.INVALID_ARGUMENT, { arg: \"value\", value: e }); 3 < e.length && \"0x0\" === e.substring(0, 3);) {e = \"0x\" + e.substring(3);}return e;}, r.hexZeroPad = d, r.splitSignature = p, r.joinSignature = function (e) {return c(i([(e = p(e)).r, e.s, e.recoveryParam ? \"0x1c\" : \"0x1b\"]));};}, { \"../errors\": 5 }], 64: [function (e, t, r) {\"use strict\";var n = this && this.__importStar || function (e) {if (e && e.__esModule) return e;var t = {};if (null != e) for (var r in e) {Object.hasOwnProperty.call(e, r) && (t[r] = e[r]);}return t.default = e, t;};Object.defineProperty(r, \"__esModule\", { value: !0 });var i = n(e(\"../errors\")),o = e(\"./bytes\"),s = e(\"./utf8\"),a = e(\"./keccak256\"),u = new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]),l = new RegExp(\"^((.*)\\\\.)?([^.]+)$\"),h = new RegExp(\"^[a-z0-9.-]*$\");r.namehash = function (e) {\"string\" != typeof e && i.throwError(\"invalid address - \" + String(e), i.INVALID_ARGUMENT, { argument: \"name\", value: e }), (e = e.toLowerCase()).match(h) || i.throwError(\"contains invalid UseSTD3ASCIIRules characters\", i.INVALID_ARGUMENT, { argument: \"name\", value: e });for (var t = u; e.length;) {var r = e.match(l),n = s.toUtf8Bytes(r[3]);t = a.keccak256(o.concat([t, a.keccak256(n)])), e = r[2] || \"\";}return o.hexlify(t);}, r.id = function (e) {return a.keccak256(s.toUtf8Bytes(e));}, r.hashMessage = function (e) {return a.keccak256(o.concat([s.toUtf8Bytes(\"\\x19Ethereum Signed Message:\\n\"), s.toUtf8Bytes(String(e.length)), \"string\" == typeof e ? s.toUtf8Bytes(e) : e]));};}, { \"../errors\": 5, \"./bytes\": 63, \"./keccak256\": 70, \"./utf8\": 84 }], 65: [function (e, t, r) {\"use strict\";var n = this && this.__importStar || function (e) {if (e && e.__esModule) return e;var t = {};if (null != e) for (var r in e) {Object.hasOwnProperty.call(e, r) && (t[r] = e[r]);}return t.default = e, t;};Object.defineProperty(r, \"__esModule\", { value: !0 });var f = n(e(\"../errors\")),c = e(\"../wordlists/lang-en\"),a = e(\"./basex\"),d = e(\"./bytes\"),l = e(\"./bignumber\"),i = e(\"./utf8\"),o = e(\"./pbkdf2\"),h = e(\"./hmac\"),p = e(\"./properties\"),v = e(\"./secp256k1\"),y = e(\"./sha2\"),m = l.bigNumberify(\"0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141\"),s = i.toUtf8Bytes(\"Bitcoin seed\"),g = 2147483648;function b(e) {return (1 << e) - 1 << 8 - e;}function w(e) {return d.hexZeroPad(d.hexlify(e), 32);}function u(e) {var t = d.hexDataSlice(y.sha256(y.sha256(e)), 0, 4);return a.Base58.encode(d.concat([e, t]));}var _ = {};r.defaultPath = \"m/44'/60'/0'/0/0\";var M = (Object.defineProperty(A.prototype, \"extendedKey\", { get: function get() {if (256 <= this.depth) throw new Error(\"Depth too large!\");return u(d.concat([null != this.privateKey ? \"0x0488ADE4\" : \"0x0488B21E\", d.hexlify(this.depth), this.parentFingerprint, d.hexZeroPad(d.hexlify(this.index), 4), this.chainCode, null != this.privateKey ? d.concat([\"0x00\", this.privateKey]) : this.publicKey]));}, enumerable: !0, configurable: !0 }), A.prototype.neuter = function () {return new A(_, null, this.publicKey, this.parentFingerprint, this.chainCode, this.index, this.depth, null, this.path);}, A.prototype._derive = function (e) {if (4294967295 < e) throw new Error(\"invalid index - \" + String(e));var t = this.path;t && (t += \"/\" + (e & ~g));var r = new Uint8Array(37);if (e & g) {if (!this.privateKey) throw new Error(\"cannot derive child of neutered node\");r.set(d.arrayify(this.privateKey), 1), t && (t += \"'\");} else r.set(d.arrayify(this.publicKey));for (var n = 24; 0 <= n; n -= 8) {r[33 + (n >> 3)] = e >> 24 - n & 255;}var i = h.computeHmac(h.SupportedAlgorithms.sha512, this.chainCode, r),o = i.slice(0, 32),s = i.slice(32),a = null,u = null;return this.privateKey ? a = w(l.bigNumberify(o).add(this.privateKey).mod(m)) : u = new v.KeyPair(d.hexlify(o))._addPoint(this.publicKey), new A(_, a, u, this.fingerprint, w(s), e, this.depth + 1, this.mnemonic, t);}, A.prototype.derivePath = function (e) {var t = e.split(\"/\");if (0 === t.length || \"m\" === t[0] && 0 !== this.depth) throw new Error(\"invalid path - \" + e);\"m\" === t[0] && t.shift();for (var r = this, n = 0; n < t.length; n++) {var i = t[n];if (i.match(/^[0-9]+'$/)) {var o = parseInt(i.substring(0, i.length - 1));if (g <= o) throw new Error(\"invalid path index - \" + i);r = r._derive(g + o);} else {if (!i.match(/^[0-9]+$/)) throw new Error(\"invalid path component - \" + i);if (o = parseInt(i), g <= o) throw new Error(\"invalid path index - \" + i);r = r._derive(o);}}return r;}, A.isHDNode = function (e) {return p.isType(e, \"HDNode\");}, A);function A(e, t, r, n, i, o, s, a, u) {if (f.checkNew(this, A), e !== _) throw new Error(\"HDNode constructor cannot be called directly\");if (t) {var l = new v.KeyPair(t);p.defineReadOnly(this, \"privateKey\", l.privateKey), p.defineReadOnly(this, \"publicKey\", l.compressedPublicKey);} else p.defineReadOnly(this, \"privateKey\", null), p.defineReadOnly(this, \"publicKey\", d.hexlify(r));p.defineReadOnly(this, \"parentFingerprint\", n), p.defineReadOnly(this, \"fingerprint\", d.hexDataSlice(y.ripemd160(y.sha256(this.publicKey)), 0, 4)), p.defineReadOnly(this, \"address\", v.computeAddress(this.publicKey)), p.defineReadOnly(this, \"chainCode\", i), p.defineReadOnly(this, \"index\", o), p.defineReadOnly(this, \"depth\", s), p.defineReadOnly(this, \"mnemonic\", a), p.defineReadOnly(this, \"path\", u), p.setType(this, \"HDNode\");}function E(e, t) {var r = d.arrayify(e);if (r.length < 16 || 64 < r.length) throw new Error(\"invalid seed\");var n = d.arrayify(h.computeHmac(h.SupportedAlgorithms.sha512, s, r));return new M(_, w(n.slice(0, 32)), null, \"0x00000000\", w(n.slice(32)), 0, 0, t, \"m\");}function S(e, t) {t = t || \"\";var r = i.toUtf8Bytes(\"mnemonic\" + t, i.UnicodeNormalizationForm.NFKD);return d.hexlify(o.pbkdf2(i.toUtf8Bytes(e, i.UnicodeNormalizationForm.NFKD), r, 2048, 64, \"sha512\"));}function k(e, t) {t = t || c.langEn, f.checkNormalize();var r = t.split(e);if (r.length % 3 != 0) throw new Error(\"invalid mnemonic\");for (var n = d.arrayify(new Uint8Array(Math.ceil(11 * r.length / 8))), i = 0, o = 0; o < r.length; o++) {var s = t.getWordIndex(r[o].normalize(\"NFKD\"));if (-1 === s) throw new Error(\"invalid mnemonic\");for (var a = 0; a < 11; a++) {s & 1 << 10 - a && (n[i >> 3] |= 1 << 7 - i % 8), i++;}}var u = 32 * r.length / 3,l = b(r.length / 3),h = d.arrayify(y.sha256(n.slice(0, u / 8)))[0];if ((h &= l) != (n[n.length - 1] & l)) throw new Error(\"invalid checksum\");return d.hexlify(n.slice(0, u / 8));}function N(e, t) {if ((e = d.arrayify(e)).length % 4 != 0 || e.length < 16 || 32 < e.length) throw new Error(\"invalid entropy\");for (var r = [0], n = 11, i = 0; i < e.length; i++) {8 < n ? (r[r.length - 1] <<= 8, r[r.length - 1] |= e[i], n -= 8) : (r[r.length - 1] <<= n, r[r.length - 1] |= e[i] >> 8 - n, r.push(e[i] & (1 << 8 - n) - 1), n += 3);}var o = d.arrayify(y.sha256(e))[0],s = e.length / 4;return o &= b(s), r[r.length - 1] <<= s, r[r.length - 1] |= o >> 8 - s, (t = t || c.langEn).join(r.map(function (e) {return t.getWord(e);}));}r.HDNode = M, r.fromExtendedKey = function (e) {var t = a.Base58.decode(e);82 === t.length && u(t.slice(0, 78)) === e || f.throwError(\"invalid extended key\", f.INVALID_ARGUMENT, { argument: \"extendedKey\", value: \"[REDACTED]\" });var r = t[4],n = d.hexlify(t.slice(5, 9)),i = parseInt(d.hexlify(t.slice(9, 13)).substring(2), 16),o = d.hexlify(t.slice(13, 45)),s = t.slice(45, 78);switch (d.hexlify(t.slice(0, 4))) {case \"0x0488b21e\":case \"0x043587cf\":return new M(_, null, d.hexlify(s), n, o, i, r, null, null);case \"0x0488ade4\":case \"0x04358394\":if (0 !== s[0]) break;return new M(_, d.hexlify(s.slice(1)), null, n, o, i, r, null, null);}return f.throwError(\"invalid extended key\", f.INVALID_ARGUMENT, { argument: \"extendedKey\", value: \"[REDACTED]\" });}, r.fromMnemonic = function (e, t, r) {return E(S(e = N(k(e, t), t), r), e);}, r.fromSeed = function (e) {return E(e, null);}, r.mnemonicToSeed = S, r.mnemonicToEntropy = k, r.entropyToMnemonic = N, r.isValidMnemonic = function (e, t) {try {return k(e, t), !0;} catch (e) {}return !1;};}, { \"../errors\": 5, \"../wordlists/lang-en\": 89, \"./basex\": 61, \"./bignumber\": 62, \"./bytes\": 63, \"./hmac\": 66, \"./pbkdf2\": 72, \"./properties\": 73, \"./secp256k1\": 76, \"./sha2\": 78, \"./utf8\": 84 }], 66: [function (e, t, r) {\"use strict\";var n = this && this.__importStar || function (e) {if (e && e.__esModule) return e;var t = {};if (null != e) for (var r in e) {Object.hasOwnProperty.call(e, r) && (t[r] = e[r]);}return t.default = e, t;};Object.defineProperty(r, \"__esModule\", { value: !0 });var i,o,s = n(e(\"hash.js\")),a = e(\"../utils/bytes\"),u = n(e(\"../errors\"));(o = i = r.SupportedAlgorithms || (r.SupportedAlgorithms = {})).sha256 = \"sha256\", o.sha512 = \"sha512\", r.computeHmac = function (e, t, r) {return i[e] || u.throwError(\"unsupported algorithm \" + e, u.UNSUPPORTED_OPERATION, { operation: \"hmac\", algorithm: e }), a.arrayify(s.hmac(s[e], a.arrayify(t)).update(a.arrayify(r)).digest());};}, { \"../errors\": 5, \"../utils/bytes\": 63, \"hash.js\": 27 }], 67: [function (e, t, r) {\"use strict\";var n = this && this.__importStar || function (e) {if (e && e.__esModule) return e;var t = {};if (null != e) for (var r in e) {Object.hasOwnProperty.call(e, r) && (t[r] = e[r]);}return t.default = e, t;};Object.defineProperty(r, \"__esModule\", { value: !0 });var i = e(\"./abi-coder\");r.AbiCoder = i.AbiCoder, r.defaultAbiCoder = i.defaultAbiCoder, r.formatSignature = i.formatSignature, r.formatParamType = i.formatParamType, r.parseSignature = i.parseSignature, r.parseParamType = i.parseParamType;var o = e(\"./address\");r.getAddress = o.getAddress, r.getContractAddress = o.getContractAddress, r.getIcapAddress = o.getIcapAddress;var s = n(e(\"./base64\"));r.base64 = s;var a = e(\"./bignumber\");r.BigNumber = a.BigNumber, r.bigNumberify = a.bigNumberify;var u = e(\"./bytes\");r.arrayify = u.arrayify, r.concat = u.concat, r.hexDataSlice = u.hexDataSlice, r.hexDataLength = u.hexDataLength, r.hexlify = u.hexlify, r.hexStripZeros = u.hexStripZeros, r.hexZeroPad = u.hexZeroPad, r.isHexString = u.isHexString, r.joinSignature = u.joinSignature, r.padZeros = u.padZeros, r.splitSignature = u.splitSignature, r.stripZeros = u.stripZeros;var l = e(\"./hash\");r.hashMessage = l.hashMessage, r.id = l.id, r.namehash = l.namehash;var h = n(e(\"./hdnode\"));r.HDNode = h;var f = e(\"./interface\");r.Interface = f.Interface;var c = e(\"./json-wallet\");r.getJsonWalletAddress = c.getJsonWalletAddress;var d = e(\"./keccak256\");r.keccak256 = d.keccak256;var p = e(\"./sha2\");r.sha256 = p.sha256;var v = e(\"./solidity\");r.solidityKeccak256 = v.keccak256, r.solidityPack = v.pack, r.soliditySha256 = v.sha256;var y = e(\"./random-bytes\");r.randomBytes = y.randomBytes;var m = e(\"./networks\");r.getNetwork = m.getNetwork;var g = e(\"./properties\");r.checkProperties = g.checkProperties, r.deepCopy = g.deepCopy, r.defineReadOnly = g.defineReadOnly, r.resolveProperties = g.resolveProperties, r.shallowCopy = g.shallowCopy;var b = n(e(\"./rlp\"));r.RLP = b;var w = e(\"./secp256k1\");r.computeAddress = w.computeAddress, r.computePublicKey = w.computePublicKey, r.recoverAddress = w.recoverAddress, r.recoverPublicKey = w.recoverPublicKey, r.verifyMessage = w.verifyMessage;var _ = e(\"./signing-key\");r.SigningKey = _.SigningKey;var M = e(\"./transaction\");r.populateTransaction = M.populateTransaction;var A = e(\"./transaction\");r.parseTransaction = A.parse, r.serializeTransaction = A.serialize;var E = e(\"./utf8\");r.formatBytes32String = E.formatBytes32String, r.parseBytes32String = E.parseBytes32String, r.toUtf8Bytes = E.toUtf8Bytes, r.toUtf8String = E.toUtf8String;var S = e(\"./units\");r.commify = S.commify, r.formatEther = S.formatEther, r.parseEther = S.parseEther, r.formatUnits = S.formatUnits, r.parseUnits = S.parseUnits;var k = e(\"./web\");r.fetchJson = k.fetchJson, r.poll = k.poll;var N = e(\"./hmac\");r.SupportedAlgorithms = N.SupportedAlgorithms;var P = e(\"./utf8\");r.UnicodeNormalizationForm = P.UnicodeNormalizationForm;var x = e(\"./wordlist\");r.Wordlist = x.Wordlist;}, { \"./abi-coder\": 58, \"./address\": 59, \"./base64\": 60, \"./bignumber\": 62, \"./bytes\": 63, \"./hash\": 64, \"./hdnode\": 65, \"./hmac\": 66, \"./interface\": 68, \"./json-wallet\": 69, \"./keccak256\": 70, \"./networks\": 71, \"./properties\": 73, \"./random-bytes\": 74, \"./rlp\": 75, \"./secp256k1\": 76, \"./sha2\": 78, \"./signing-key\": 80, \"./solidity\": 81, \"./transaction\": 82, \"./units\": 83, \"./utf8\": 84, \"./web\": 85, \"./wordlist\": 86 }], 68: [function (e, t, r) {\"use strict\";var n,i = this && this.__extends || (n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (e, t) {e.__proto__ = t;} || function (e, t) {for (var r in t) {t.hasOwnProperty(r) && (e[r] = t[r]);}}, function (e, t) {function r() {this.constructor = e;}n(e, t), e.prototype = null === t ? Object.create(t) : (r.prototype = t.prototype, new r());}),o = this && this.__importStar || function (e) {if (e && e.__esModule) return e;var t = {};if (null != e) for (var r in e) {Object.hasOwnProperty.call(e, r) && (t[r] = e[r]);}return t.default = e, t;};Object.defineProperty(r, \"__esModule\", { value: !0 });function s(e) {for (var t in p.setType(this, \"Description\"), e) {p.defineReadOnly(this, t, p.deepCopy(e[t], !0));}Object.freeze(this);}var a,u = e(\"./address\"),f = e(\"./abi-coder\"),l = e(\"./bignumber\"),c = e(\"./bytes\"),h = e(\"./hash\"),d = e(\"./keccak256\"),p = e(\"./properties\"),v = o(e(\"../errors\")),y = function y(e) {p.setType(this, \"Indexed\"), p.defineReadOnly(this, \"hash\", e);},m = (i(g, a = s), g.prototype.encode = function (e, t) {c.isHexString(e) || v.throwError(\"invalid contract bytecode\", v.INVALID_ARGUMENT, { arg: \"bytecode\", value: e }), v.checkArgumentCount(t.length, this.inputs.length, \" in Interface constructor\");try {return e + f.defaultAbiCoder.encode(this.inputs, t).substring(2);} catch (e) {v.throwError(\"invalid constructor argument\", v.INVALID_ARGUMENT, { arg: e.arg, reason: e.reason, value: e.value });}return null;}, g);function g() {return null !== a && a.apply(this, arguments) || this;}var b,w = (i(_, b = s), _.prototype.encode = function (e) {v.checkArgumentCount(e.length, this.inputs.length, \" in interface function \" + this.name);try {return this.sighash + f.defaultAbiCoder.encode(this.inputs, e).substring(2);} catch (e) {v.throwError(\"invalid input argument\", v.INVALID_ARGUMENT, { arg: e.arg, reason: e.reason, value: e.value });}return null;}, _.prototype.decode = function (t) {try {return f.defaultAbiCoder.decode(this.outputs, c.arrayify(t));} catch (e) {v.throwError(\"invalid data for function output\", v.INVALID_ARGUMENT, { arg: \"data\", errorArg: e.arg, errorValue: e.value, value: t, reason: e.reason });}}, _);function _() {return null !== b && b.apply(this, arguments) || this;}var M,A = (i(E, M = s), E);function E() {return null !== M && M.apply(this, arguments) || this;}var S,k = (i(N, S = s), N.prototype.encodeTopics = function (e) {var n = this;e.length > this.inputs.length && v.throwError(\"too many arguments for \" + this.name, v.UNEXPECTED_ARGUMENT, { maxCount: e.length, expectedCount: this.inputs.length });var i = [];for (this.anonymous || i.push(this.topic), e.forEach(function (e, t) {var r = n.inputs[t];r.indexed ? null == e ? i.push(null) : \"string\" === r.type ? i.push(h.id(e)) : \"bytes\" === r.type ? i.push(d.keccak256(e)) : -1 !== r.type.indexOf(\"[\") || \"tuple\" === r.type.substring(0, 5) ? v.throwError(\"filtering with tuples or arrays not implemented yet; bug us on GitHub\", v.NOT_IMPLEMENTED, { operation: \"filter(array|tuple)\" }) : (\"address\" === r.type && u.getAddress(e), i.push(c.hexZeroPad(c.hexlify(e), 32).toLowerCase())) : null != e && v.throwError(\"cannot filter non-indexed parameters; must be null\", v.INVALID_ARGUMENT, { argument: r.name || t, value: e });}); i.length && null === i[i.length - 1];) {i.pop();}return i;}, N.prototype.decode = function (e, r) {null == r || this.anonymous || (r = r.slice(1));var n = [],i = [],o = [];if (this.inputs.forEach(function (e, t) {e.indexed ? \"string\" === e.type || \"bytes\" === e.type || 0 <= e.type.indexOf(\"[\") || \"tuple\" === e.type.substring(0, 5) ? (n.push({ type: \"bytes32\", name: e.name || \"\" }), o.push(!0)) : (n.push(e), o.push(!1)) : (i.push(e), o.push(!1));}), null != r) var s = f.defaultAbiCoder.decode(n, c.concat(r));var a = f.defaultAbiCoder.decode(i, c.arrayify(e)),u = {},l = 0,h = 0;return this.inputs.forEach(function (e, t) {e.indexed ? null == r ? u[t] = new y(null) : o[t] ? u[t] = new y(s[h++]) : u[t] = s[h++] : u[t] = a[l++], e.name && (u[e.name] = u[t]);}), u.length = this.inputs.length, new A(u);}, N);function N() {return null !== S && S.apply(this, arguments) || this;}var P,x = (i(I, P = s), I);function I() {return null !== P && P.apply(this, arguments) || this;}var T,R = (i(O, T = s), O);function O() {return null !== T && T.apply(this, arguments) || this;}function C(e) {switch (e.type) {case \"constructor\":var t = new m({ inputs: e.inputs, payable: null == e.payable || !!e.payable });this.deployFunction || (this.deployFunction = t);break;case \"function\":var r = f.formatSignature(e).replace(/tuple/g, \"\"),n = h.id(r).substring(0, 10);t = new w({ inputs: e.inputs, outputs: e.outputs, gas: e.gas, payable: null == e.payable || !!e.payable, type: e.constant ? \"call\" : \"transaction\", name: e.name, signature: r, sighash: n });e.name && (null == this.functions[e.name] ? p.defineReadOnly(this.functions, e.name, t) : v.warn(\"WARNING: Multiple definitions for \" + e.name)), null == this.functions[t.signature] && p.defineReadOnly(this.functions, t.signature, t);break;case \"event\":r = f.formatSignature(e).replace(/tuple/g, \"\"), t = new k({ name: e.name, signature: r, inputs: e.inputs, topic: h.id(r), anonymous: !!e.anonymous });e.name && null == this.events[e.name] && p.defineReadOnly(this.events, e.name, t), null == this.events[t.signature] && p.defineReadOnly(this.events, t.signature, t);break;case \"fallback\":break;default:v.warn(\"WARNING: unsupported ABI type - \" + e.type);}}var B = (D.prototype.parseTransaction = function (e) {var t = e.data.substring(0, 10).toLowerCase();for (var r in this.functions) {if (-1 !== r.indexOf(\"(\")) {var n = this.functions[r];if (n.sighash === t) {var i = f.defaultAbiCoder.decode(n.inputs, \"0x\" + e.data.substring(10));return new x({ args: i, decode: n.decode, name: n.name, signature: n.signature, sighash: n.sighash, value: l.bigNumberify(e.value || \"0\") });}}}return null;}, D.prototype.parseLog = function (e) {for (var t in this.events) {if (-1 !== t.indexOf(\"(\")) {var r = this.events[t];if (!r.anonymous && r.topic === e.topics[0]) return new R({ decode: r.decode, name: r.name, signature: r.signature, topic: r.topic, values: r.decode(e.data, e.topics) });}}return null;}, D.isInterface = function (e) {return p.isType(e, \"Interface\");}, D.isIndexed = function (e) {return p.isType(e, \"Indexed\");}, D);function D(t) {if (v.checkNew(this, D), \"string\" == typeof t) {try {t = JSON.parse(t);} catch (e) {v.throwError(\"could not parse ABI JSON\", v.INVALID_ARGUMENT, { arg: \"abi\", errorMessage: e.message, value: t });}if (!Array.isArray(t)) return v.throwError(\"invalid abi\", v.INVALID_ARGUMENT, { arg: \"abi\", value: t }), null;}p.defineReadOnly(this, \"functions\", {}), p.defineReadOnly(this, \"events\", {});var r = [];t.forEach(function (e) {\"string\" == typeof e && (e = f.parseSignature(e)), r.push(e);}), p.defineReadOnly(this, \"abi\", p.deepCopy(r, !0)), r.forEach(C, this), this.deployFunction || C.call(this, { type: \"constructor\", inputs: [] }), p.setType(this, \"Interface\");}r.Interface = B;}, { \"../errors\": 5, \"./abi-coder\": 58, \"./address\": 59, \"./bignumber\": 62, \"./bytes\": 63, \"./hash\": 64, \"./keccak256\": 70, \"./properties\": 73 }], 69: [function (e, t, r) {\"use strict\";Object.defineProperty(r, \"__esModule\", { value: !0 });var n = e(\"./address\");function i(e) {try {var t = JSON.parse(e);} catch (e) {return !1;}return t.encseed && t.ethaddr;}function o(e) {try {var t = JSON.parse(e);} catch (e) {return !1;}return !(!t.version || parseInt(t.version) !== t.version || 3 !== parseInt(t.version));}r.isCrowdsaleWallet = i, r.isSecretStorageWallet = o, r.getJsonWalletAddress = function (e) {if (i(e)) try {return n.getAddress(JSON.parse(e).ethaddr);} catch (e) {return null;}if (o(e)) try {return n.getAddress(JSON.parse(e).address);} catch (e) {return null;}return null;};}, { \"./address\": 59 }], 70: [function (e, t, r) {\"use strict\";Object.defineProperty(r, \"__esModule\", { value: !0 });var n = e(\"js-sha3\"),i = e(\"./bytes\");r.keccak256 = function (e) {return \"0x\" + n.keccak_256(i.arrayify(e));};}, { \"./bytes\": 63, \"js-sha3\": 40 }], 71: [function (e, t, r) {\"use strict\";var n = this && this.__importStar || function (e) {if (e && e.__esModule) return e;var t = {};if (null != e) for (var r in e) {Object.hasOwnProperty.call(e, r) && (t[r] = e[r]);}return t.default = e, t;};Object.defineProperty(r, \"__esModule\", { value: !0 });var o = n(e(\"../errors\"));function i(r) {return function (e) {var t = [];return e.InfuraProvider && t.push(new e.InfuraProvider(r)), e.EtherscanProvider && t.push(new e.EtherscanProvider(r)), 0 === t.length ? null : e.FallbackProvider ? new e.FallbackProvider(t) : t[0];};}function s(t, r) {return function (e) {return e.JsonRpcProvider ? new e.JsonRpcProvider(t, r) : null;};}var a = { chainId: 1, ensAddress: \"0x314159265dd8dbb310642f98f50c066173c1259b\", name: \"homestead\", _defaultProvider: i(\"homestead\") },u = { chainId: 3, ensAddress: \"0x112234455c3a32fd11230c42e7bccd4a84e02010\", name: \"ropsten\", _defaultProvider: i(\"ropsten\") },l = { unspecified: { chainId: 0, name: \"unspecified\" }, homestead: a, mainnet: a, morden: { chainId: 2, name: \"morden\" }, ropsten: u, testnet: u, rinkeby: { chainId: 4, ensAddress: \"0xe7410170f87102DF0055eB195163A03B7F2Bff4A\", name: \"rinkeby\", _defaultProvider: i(\"rinkeby\") }, goerli: { chainId: 5, ensAddress: \"0x112234455c3a32fd11230c42e7bccd4a84e02010\", name: \"goerli\", _defaultProvider: i(\"goerli\") }, kovan: { chainId: 42, name: \"kovan\", _defaultProvider: i(\"kovan\") }, classic: { chainId: 61, name: \"classic\", _defaultProvider: s(\"https://web3.gastracker.io\", \"classic\") }, classicTestnet: { chainId: 62, name: \"classicTestnet\", _defaultProvider: s(\"https://web3.gastracker.io/morden\", \"classicTestnet\") } };r.getNetwork = function (e) {if (null == e) return null;if (\"number\" == typeof e) {for (var t in l) {var r = l[t];if (r.chainId === e) return { name: r.name, chainId: r.chainId, ensAddress: r.ensAddress || null, _defaultProvider: r._defaultProvider || null };}return { chainId: e, name: \"unknown\" };}if (\"string\" == typeof e) {var n = l[e];return null == n ? null : { name: n.name, chainId: n.chainId, ensAddress: n.ensAddress, _defaultProvider: n._defaultProvider || null };}var i = l[e.name];return i ? (0 !== e.chainId && e.chainId !== i.chainId && o.throwError(\"network chainId mismatch\", o.INVALID_ARGUMENT, { arg: \"network\", value: e }), { name: e.name, chainId: i.chainId, ensAddress: e.ensAddress || i.ensAddress || null, _defaultProvider: e._defaultProvider || i._defaultProvider || null }) : (\"number\" != typeof e.chainId && o.throwError(\"invalid network chainId\", o.INVALID_ARGUMENT, { arg: \"network\", value: e }), e);};}, { \"../errors\": 5 }], 72: [function (e, t, r) {\"use strict\";Object.defineProperty(r, \"__esModule\", { value: !0 });var m = e(\"../utils/bytes\"),g = e(\"./hmac\");r.pbkdf2 = function (e, t, r, n, i) {var o;e = m.arrayify(e), t = m.arrayify(t);var s,a,u = 1,l = new Uint8Array(n),h = new Uint8Array(t.length + 4);h.set(t);for (var f = 1; f <= u; f++) {h[t.length] = f >> 24 & 255, h[t.length + 1] = f >> 16 & 255, h[t.length + 2] = f >> 8 & 255, h[t.length + 3] = 255 & f;var c = g.computeHmac(i, e, h);o || (o = c.length, a = new Uint8Array(o), s = n - ((u = Math.ceil(n / o)) - 1) * o), a.set(c);for (var d = 1; d < r; d++) {c = g.computeHmac(i, e, c);for (var p = 0; p < o; p++) {a[p] ^= c[p];}}var v = (f - 1) * o,y = f === u ? s : o;l.set(m.arrayify(a).slice(0, y), v);}return m.arrayify(l);};}, { \"../utils/bytes\": 63, \"./hmac\": 66 }], 73: [function (e, t, r) {\"use strict\";var n = this && this.__importStar || function (e) {if (e && e.__esModule) return e;var t = {};if (null != e) for (var r in e) {Object.hasOwnProperty.call(e, r) && (t[r] = e[r]);}return t.default = e, t;};Object.defineProperty(r, \"__esModule\", { value: !0 });var i = n(e(\"../errors\"));function s(e, t, r) {Object.defineProperty(e, t, { enumerable: !0, value: r, writable: !1 });}function a(e, t) {return e && e._ethersType === t;}r.defineReadOnly = s, r.setType = function (e, t) {Object.defineProperty(e, \"_ethersType\", { configurable: !1, value: t, writable: !1 });}, r.isType = a, r.resolveProperties = function (r) {var n = {},i = [];return Object.keys(r).forEach(function (t) {var e = r[t];e instanceof Promise ? i.push(e.then(function (e) {return n[t] = e, null;})) : n[t] = e;}), Promise.all(i).then(function () {return n;});}, r.checkProperties = function (t, r) {t && \"object\" == typeof t || i.throwError(\"invalid object\", i.INVALID_ARGUMENT, { argument: \"object\", value: t }), Object.keys(t).forEach(function (e) {r[e] || i.throwError(\"invalid object key - \" + e, i.INVALID_ARGUMENT, { argument: \"transaction\", value: t, key: e });});}, r.shallowCopy = function (e) {var t = {};for (var r in e) {t[r] = e[r];}return t;};var u = { boolean: !0, number: !0, string: !0 };r.deepCopy = function t(e, r) {if (null == e || u[typeof e]) return e;if (Array.isArray(e)) {var n = e.map(function (e) {return t(e, r);});return r && Object.freeze(n), n;}if (\"object\" == typeof e) {if (a(e, \"BigNumber\")) return e;if (a(e, \"Description\")) return e;if (a(e, \"Indexed\")) return e;for (var i in n = {}, e) {var o = e[i];void 0 !== o && s(n, i, t(o, r));}return r && Object.freeze(n), n;}if (\"function\" == typeof e) return e;throw new Error(\"Cannot deepCopy \" + typeof e);}, r.inheritable = function t(r) {return function (e) {!function (e, t) {e.super_ = t, e.prototype = Object.create(t.prototype, { constructor: { value: e, enumerable: !1, writable: !0, configurable: !0 } });}(e, r), s(e, \"inherits\", t(e));};};}, { \"../errors\": 5 }], 74: [function (o, e, s) {(function (e) {\"use strict\";Object.defineProperty(s, \"__esModule\", { value: !0 });var r = o(\"../utils/bytes\"),t = o(\"../utils/properties\"),n = e.crypto || e.msCrypto;function i(e) {if (e <= 0 || 1024 < e || parseInt(String(e)) != e) throw new Error(\"invalid length\");var t = new Uint8Array(e);return n.getRandomValues(t), r.arrayify(t);}n && n.getRandomValues || (console.log(__f__(\"WARNING: Missing strong random number source; using weak randomBytes\", \" at common\\\\js\\\\ethers.min.js:1\")), n = { getRandomValues: function getRandomValues(e) {for (var t = 0; t < 20; t++) {for (var r = 0; r < e.length; r++) {t ? e[r] ^= Math.trunc(256 * Math.random()) : e[r] = Math.trunc(256 * Math.random());}}return e;}, _weakCrypto: !0 }), s.randomBytes = i, !0 === n._weakCrypto && t.defineReadOnly(i, \"_weakCrypto\", !0);}).call(this, \"undefined\" != typeof global ? global : \"undefined\" != typeof self ? self : \"undefined\" != typeof window ? window : {});}, { \"../utils/bytes\": 63, \"../utils/properties\": 73 }], 75: [function (e, t, r) {\"use strict\";Object.defineProperty(r, \"__esModule\", { value: !0 });var o = e(\"./bytes\");function s(e) {for (var t = []; e;) {t.unshift(255 & e), e >>= 8;}return t;}function i(e, t, r) {for (var n = 0, i = 0; i < r; i++) {n = 256 * n + e[t + i];}return n;}function a(e, t, r, n) {for (var i = []; r < t + 1 + n;) {var o = u(e, r);if (i.push(o.result), t + 1 + n < (r += o.consumed)) throw new Error(\"invalid rlp\");}return { consumed: 1 + n, result: i };}function u(e, t) {if (0 === e.length) throw new Error(\"invalid rlp data\");if (248 <= e[t]) {if (t + 1 + (r = e[t] - 247) > e.length) throw new Error(\"too short\");if (t + 1 + r + (n = i(e, t + 1, r)) > e.length) throw new Error(\"to short\");return a(e, t, t + 1 + r, r + n);}if (192 <= e[t]) {if (t + 1 + (n = e[t] - 192) > e.length) throw new Error(\"invalid rlp data\");return a(e, t, t + 1, n);}if (184 <= e[t]) {var r;if (t + 1 + (r = e[t] - 183) > e.length) throw new Error(\"invalid rlp data\");if (t + 1 + r + (n = i(e, t + 1, r)) > e.length) throw new Error(\"invalid rlp data\");return { consumed: 1 + r + n, result: o.hexlify(e.slice(t + 1 + r, t + 1 + r + n)) };}if (128 <= e[t]) {var n;if (t + 1 + (n = e[t] - 128) > e.length) throw new Error(\"invalid rlp data\");return { consumed: 1 + n, result: o.hexlify(e.slice(t + 1, t + 1 + n)) };}return { consumed: 1, result: o.hexlify(e[t]) };}r.encode = function (e) {return o.hexlify(function t(e) {if (Array.isArray(e)) {var r = [];return e.forEach(function (e) {r = r.concat(t(e));}), r.length <= 55 ? (r.unshift(192 + r.length), r) : ((n = s(r.length)).unshift(247 + n.length), n.concat(r));}var n,i = Array.prototype.slice.call(o.arrayify(e));return 1 === i.length && i[0] <= 127 ? i : i.length <= 55 ? (i.unshift(128 + i.length), i) : ((n = s(i.length)).unshift(183 + n.length), n.concat(i));}(e));}, r.decode = function (e) {var t = o.arrayify(e),r = u(t, 0);if (r.consumed !== t.length) throw new Error(\"invalid rlp data\");return r.result;};}, { \"./bytes\": 63 }], 76: [function (e, t, r) {\"use strict\";var n = this && this.__importStar || function (e) {if (e && e.__esModule) return e;var t = {};if (null != e) for (var r in e) {Object.hasOwnProperty.call(e, r) && (t[r] = e[r]);}return t.default = e, t;};Object.defineProperty(r, \"__esModule\", { value: !0 });var i = e(\"elliptic\"),o = e(\"./address\"),s = e(\"./bytes\"),a = e(\"./hash\"),u = e(\"./keccak256\"),l = e(\"./properties\"),h = n(e(\"../errors\")),f = null;function c() {return f = f || new i.ec(\"secp256k1\");}var d = (p.prototype.sign = function (e) {var t = c().keyFromPrivate(s.arrayify(this.privateKey)).sign(s.arrayify(e), { canonical: !0 });return { recoveryParam: t.recoveryParam, r: s.hexZeroPad(\"0x\" + t.r.toString(16), 32), s: s.hexZeroPad(\"0x\" + t.s.toString(16), 32), v: 27 + t.recoveryParam };}, p.prototype.computeSharedSecret = function (e) {var t = c().keyFromPrivate(s.arrayify(this.privateKey)),r = c().keyFromPublic(s.arrayify(v(e)));return s.hexZeroPad(\"0x\" + t.derive(r.getPublic()).toString(16), 32);}, p.prototype._addPoint = function (e) {var t = c().keyFromPublic(s.arrayify(this.publicKey)),r = c().keyFromPublic(s.arrayify(e));return \"0x\" + t.pub.add(r.pub).encodeCompressed(\"hex\");}, p);function p(e) {var t = c().keyFromPrivate(s.arrayify(e));l.defineReadOnly(this, \"privateKey\", s.hexlify(t.priv.toArray(\"be\", 32))), l.defineReadOnly(this, \"publicKey\", \"0x\" + t.getPublic(!1, \"hex\")), l.defineReadOnly(this, \"compressedPublicKey\", \"0x\" + t.getPublic(!0, \"hex\")), l.defineReadOnly(this, \"publicKeyBytes\", t.getPublic().encode(null, !0));}function v(e, t) {var r = s.arrayify(e);if (32 !== r.length) return 33 === r.length ? t ? s.hexlify(r) : \"0x\" + c().keyFromPublic(r).getPublic(!1, \"hex\") : 65 === r.length ? t ? \"0x\" + c().keyFromPublic(r).getPublic(!0, \"hex\") : s.hexlify(r) : (h.throwError(\"invalid public or private key\", h.INVALID_ARGUMENT, { arg: \"key\", value: \"[REDACTED]\" }), null);var n = new d(r);return t ? n.compressedPublicKey : n.publicKey;}function y(e) {var t = \"0x\" + v(e).slice(4);return o.getAddress(\"0x\" + u.keccak256(t).substring(26));}function m(e, t) {var r = s.splitSignature(t),n = { r: s.arrayify(r.r), s: s.arrayify(r.s) };return \"0x\" + c().recoverPubKey(s.arrayify(e), n, r.recoveryParam).encode(\"hex\", !1);}function g(e, t) {return y(m(s.arrayify(e), t));}r.KeyPair = d, r.computePublicKey = v, r.computeAddress = y, r.recoverPublicKey = m, r.recoverAddress = g, r.verifyMessage = function (e, t) {return g(a.hashMessage(e), t);};}, { \"../errors\": 5, \"./address\": 59, \"./bytes\": 63, \"./hash\": 64, \"./keccak256\": 70, \"./properties\": 73, elliptic: 12 }], 77: [function (e, t, r) {\"use strict\";var n = this && this.__importDefault || function (e) {return e && e.__esModule ? e : { default: e };},i = this && this.__importStar || function (e) {if (e && e.__esModule) return e;var t = {};if (null != e) for (var r in e) {Object.hasOwnProperty.call(e, r) && (t[r] = e[r]);}return t.default = e, t;};Object.defineProperty(r, \"__esModule\", { value: !0 });var T = n(e(\"aes-js\")),m = n(e(\"scrypt-js\")),R = n(e(\"uuid\")),O = e(\"./signing-key\"),g = i(e(\"./hdnode\")),b = e(\"./address\"),C = e(\"./bytes\"),w = e(\"./pbkdf2\"),B = e(\"./keccak256\"),p = e(\"./utf8\"),D = e(\"./random-bytes\");function _(e) {return \"string\" == typeof e && \"0x\" !== e.substring(0, 2) && (e = \"0x\" + e), C.arrayify(e);}function L(e, t) {for (e = String(e); e.length < t;) {e = \"0\" + e;}return e;}function U(e) {return \"string\" == typeof e ? p.toUtf8Bytes(e, p.UnicodeNormalizationForm.NFKC) : C.arrayify(e);}function M(e, t) {for (var r = e, n = t.toLowerCase().split(\"/\"), i = 0; i < n.length; i++) {var o = null;for (var s in r) {if (s.toLowerCase() === n[i]) {o = r[s];break;}}if (null === o) return null;r = o;}return r;}r.decryptCrowdsale = function (e, t) {var r = JSON.parse(e);t = U(t);var n = b.getAddress(M(r, \"ethaddr\")),i = _(M(r, \"encseed\"));if (!i || i.length % 16 != 0) throw new Error(\"invalid encseed\");var o = w.pbkdf2(t, t, 2e3, 32, \"sha256\").slice(0, 16),s = i.slice(0, 16),a = i.slice(16),u = new T.default.ModeOfOperation.cbc(o, s),l = C.arrayify(u.decrypt(a));l = T.default.padding.pkcs7.strip(l);for (var h = \"\", f = 0; f < l.length; f++) {h += String.fromCharCode(l[f]);}var c = p.toUtf8Bytes(h),d = new O.SigningKey(B.keccak256(c));if (d.address !== n) throw new Error(\"corrupt crowdsale wallet\");return d;}, r.decrypt = function (e, t, d) {function p(e, t) {var r = _(M(v, \"crypto/ciphertext\"));if (C.hexlify(function (e, t) {return B.keccak256(C.concat([e, t]));}(e.slice(16, 32), r)).substring(2) !== M(v, \"crypto/mac\").toLowerCase()) return t(new Error(\"invalid password\")), null;var n = function (e, t) {if (\"aes-128-ctr\" !== M(v, \"crypto/cipher\")) return null;var r = _(M(v, \"crypto/cipherparams/iv\")),n = new T.default.Counter(r),i = new T.default.ModeOfOperation.ctr(e, n);return C.arrayify(i.decrypt(t));}(e.slice(0, 16), r),i = e.slice(32, 64);if (!n) return t(new Error(\"unsupported cipher\")), null;var o = new O.SigningKey(n);if (v.address && o.address !== b.getAddress(v.address)) return t(new Error(\"address mismatch\")), null;if (\"0.1\" === M(v, \"x-ethers/version\")) {var s = _(M(v, \"x-ethers/mnemonicCiphertext\")),a = _(M(v, \"x-ethers/mnemonicCounter\")),u = new T.default.Counter(a),l = new T.default.ModeOfOperation.ctr(i, u),h = M(v, \"x-ethers/path\") || g.defaultPath,f = C.arrayify(l.decrypt(s)),c = g.entropyToMnemonic(f),d = g.fromMnemonic(c).derivePath(h);if (d.privateKey != C.hexlify(n)) return t(new Error(\"mnemonic mismatch\")), null;o = new O.SigningKey(d);}return o;}var v = JSON.parse(e),y = U(t);return new Promise(function (i, o) {var e = M(v, \"crypto/kdf\");if (e && \"string\" == typeof e) {if (\"scrypt\" === e.toLowerCase()) {var t = _(M(v, \"crypto/kdfparams/salt\")),r = parseInt(M(v, \"crypto/kdfparams/n\")),n = parseInt(M(v, \"crypto/kdfparams/r\")),s = parseInt(M(v, \"crypto/kdfparams/p\"));if (!r || !n || !s) return void o(new Error(\"unsupported key-derivation function parameters\"));if (0 != (r & r - 1)) return void o(new Error(\"unsupported key-derivation function parameter value for N\"));if (32 !== (l = parseInt(M(v, \"crypto/kdfparams/dklen\")))) return void o(new Error(\"unsupported key-derivation derived-key length\"));d && d(0), m.default(y, t, r, n, s, 64, function (e, t, r) {if (e) e.progress = t, o(e);else if (r) {r = C.arrayify(r);var n = p(r, o);if (!n) return;d && d(1), i(n);} else if (d) return d(t);});} else if (\"pbkdf2\" === e.toLowerCase()) {t = _(M(v, \"crypto/kdfparams/salt\"));var a = null,u = M(v, \"crypto/kdfparams/prf\");if (\"hmac-sha256\" === u) a = \"sha256\";else {if (\"hmac-sha512\" !== u) return void o(new Error(\"unsupported prf\"));a = \"sha512\";}var l,h = parseInt(M(v, \"crypto/kdfparams/c\"));if (32 !== (l = parseInt(M(v, \"crypto/kdfparams/dklen\")))) return void o(new Error(\"unsupported key-derivation derived-key length\"));var f = w.pbkdf2(y, t, h, l, a),c = p(f, o);if (!c) return;i(c);} else o(new Error(\"unsupported key-derivation function\"));} else o(new Error(\"unsupported key-derivation function\"));});}, r.encrypt = function (e, t, r, w) {\"function\" != typeof r || w || (w = r, r = {}), r = r || {};var _ = null;if (32 !== (_ = O.SigningKey.isSigningKey(e) ? C.arrayify(e.privateKey) : C.arrayify(e)).length) throw new Error(\"invalid private key\");var n = U(t),M = null;if (r.entropy && (M = C.arrayify(r.entropy)), r.mnemonic) if (M) {if (g.entropyToMnemonic(M) !== r.mnemonic) throw new Error(\"entropy and mnemonic mismatch\");} else M = C.arrayify(g.mnemonicToEntropy(r.mnemonic));var A = r.path;M && !A && (A = g.defaultPath);var E = r.client;E = E || \"ethers.js\";var S = null;S = r.salt ? C.arrayify(r.salt) : D.randomBytes(32);var k = null;if (r.iv) {if (16 !== (k = C.arrayify(r.iv)).length) throw new Error(\"invalid iv\");} else k = D.randomBytes(16);var N = null;if (r.uuid) {if (16 !== (N = C.arrayify(r.uuid)).length) throw new Error(\"invalid uuid\");} else N = D.randomBytes(16);var P = 1 << 17,x = 8,I = 1;return r.scrypt && (r.scrypt.N && (P = r.scrypt.N), r.scrypt.r && (x = r.scrypt.r), r.scrypt.p && (I = r.scrypt.p)), new Promise(function (g, b) {w && w(0), m.default(n, S, P, x, I, 64, function (e, t, r) {if (e) e.progress = t, b(e);else if (r) {var n = (r = C.arrayify(r)).slice(0, 16),i = r.slice(16, 32),o = r.slice(32, 64),s = new O.SigningKey(_).address,a = new T.default.Counter(k),u = new T.default.ModeOfOperation.ctr(n, a),l = C.arrayify(u.encrypt(_)),h = B.keccak256(C.concat([i, l])),f = { address: s.substring(2).toLowerCase(), id: R.default.v4({ random: N }), version: 3, Crypto: { cipher: \"aes-128-ctr\", cipherparams: { iv: C.hexlify(k).substring(2) }, ciphertext: C.hexlify(l).substring(2), kdf: \"scrypt\", kdfparams: { salt: C.hexlify(S).substring(2), n: P, dklen: 32, p: I, r: x }, mac: h.substring(2) } };if (M) {var c = D.randomBytes(16),d = new T.default.Counter(c),p = new T.default.ModeOfOperation.ctr(o, d),v = C.arrayify(p.encrypt(M)),y = new Date(),m = y.getUTCFullYear() + \"-\" + L(y.getUTCMonth() + 1, 2) + \"-\" + L(y.getUTCDate(), 2) + \"T\" + L(y.getUTCHours(), 2) + \"-\" + L(y.getUTCMinutes(), 2) + \"-\" + L(y.getUTCSeconds(), 2) + \".0Z\";f[\"x-ethers\"] = { client: E, gethFilename: \"UTC--\" + m + \"--\" + f.address, mnemonicCounter: C.hexlify(c).substring(2), mnemonicCiphertext: C.hexlify(v).substring(2), path: A, version: \"0.1\" };}w && w(1), g(JSON.stringify(f));} else if (w) return w(t);});});};}, { \"./address\": 59, \"./bytes\": 63, \"./hdnode\": 65, \"./keccak256\": 70, \"./pbkdf2\": 72, \"./random-bytes\": 74, \"./signing-key\": 80, \"./utf8\": 84, \"aes-js\": 8, \"scrypt-js\": 43, uuid: 47 }], 78: [function (e, t, r) {\"use strict\";var n = this && this.__importDefault || function (e) {return e && e.__esModule ? e : { default: e };};Object.defineProperty(r, \"__esModule\", { value: !0 });var i = n(e(\"hash.js\")),o = e(\"./bytes\");r.ripemd160 = function (e) {return \"0x\" + i.default.ripemd160().update(o.arrayify(e)).digest(\"hex\");}, r.sha256 = function (e) {return \"0x\" + i.default.sha256().update(o.arrayify(e)).digest(\"hex\");}, r.sha512 = function (e) {return \"0x\" + i.default.sha512().update(o.arrayify(e)).digest(\"hex\");};}, { \"./bytes\": 63, \"hash.js\": 27 }], 79: [function (e, t, r) {\"use strict\";Object.defineProperty(r, \"__esModule\", { value: !0 }), e(\"setimmediate\"), r.platform = \"browser\";}, { setimmediate: 44 }], 80: [function (e, t, r) {\"use strict\";var n = this && this.__importStar || function (e) {if (e && e.__esModule) return e;var t = {};if (null != e) for (var r in e) {Object.hasOwnProperty.call(e, r) && (t[r] = e[r]);}return t.default = e, t;};Object.defineProperty(r, \"__esModule\", { value: !0 });var i = e(\"./hdnode\"),o = e(\"./bytes\"),s = e(\"./properties\"),a = e(\"./secp256k1\"),u = n(e(\"../errors\")),l = (h.prototype.signDigest = function (e) {return this.keyPair.sign(e);}, h.prototype.computeSharedSecret = function (e) {return this.keyPair.computeSharedSecret(o.arrayify(e));}, h.isSigningKey = function (e) {return s.isType(e, \"SigningKey\");}, h);function h(e) {u.checkNew(this, h);var t = null;t = i.HDNode.isHDNode(e) ? (s.defineReadOnly(this, \"mnemonic\", e.mnemonic), s.defineReadOnly(this, \"path\", e.path), o.arrayify(e.privateKey)) : (\"string\" == typeof e && e.match(/^[0-9a-f]*$/i) && 64 === e.length && (e = \"0x\" + e), o.arrayify(e));try {32 !== t.length && u.throwError(\"exactly 32 bytes required\", u.INVALID_ARGUMENT, { arg: \"privateKey\", value: \"[REDACTED]\" });} catch (e) {var r = { arg: \"privateKey\", reason: e.reason, value: \"[REDACTED]\" };e.value && (\"number\" == typeof e.value.length && (r.length = e.value.length), r.type = typeof e.value), u.throwError(\"invalid private key\", e.code, r);}s.defineReadOnly(this, \"privateKey\", o.hexlify(t)), s.defineReadOnly(this, \"keyPair\", new a.KeyPair(t)), s.defineReadOnly(this, \"publicKey\", this.keyPair.publicKey), s.defineReadOnly(this, \"address\", a.computeAddress(this.keyPair.publicKey)), s.setType(this, \"SigningKey\");}r.SigningKey = l;}, { \"../errors\": 5, \"./bytes\": 63, \"./hdnode\": 65, \"./properties\": 73, \"./secp256k1\": 76 }], 81: [function (e, t, r) {\"use strict\";Object.defineProperty(r, \"__esModule\", { value: !0 });var u = e(\"./bignumber\"),l = e(\"./bytes\"),h = e(\"./utf8\"),n = e(\"./keccak256\"),i = e(\"./sha2\"),f = new RegExp(\"^bytes([0-9]+)$\"),c = new RegExp(\"^(u?int)([0-9]*)$\"),d = new RegExp(\"^(.*)\\\\[([0-9]*)\\\\]$\"),p = \"0000000000000000000000000000000000000000000000000000000000000000\";function o(e, r) {if (e.length != r.length) throw new Error(\"type/value count mismatch\");var n = [];return e.forEach(function (e, t) {n.push(function t(e, r, n) {switch (e) {case \"address\":return n ? l.padZeros(r, 32) : l.arrayify(r);case \"string\":return h.toUtf8Bytes(r);case \"bytes\":return l.arrayify(r);case \"bool\":return r = r ? \"0x01\" : \"0x00\", n ? l.padZeros(r, 32) : l.arrayify(r);}var i = e.match(c);if (i) {if ((o = parseInt(i[2] || \"256\")) % 8 != 0 || 0 === o || 256 < o) throw new Error(\"invalid number type - \" + e);return n && (o = 256), r = u.bigNumberify(r).toTwos(o), l.padZeros(r, o / 8);}if (i = e.match(f)) {var o = parseInt(i[1]);if (String(o) != i[1] || 0 === o || 32 < o) throw new Error(\"invalid number type - \" + e);if (l.arrayify(r).byteLength !== o) throw new Error(\"invalid value for \" + e);return n ? l.arrayify((r + p).substring(0, 66)) : r;}if ((i = e.match(d)) && Array.isArray(r)) {var s = i[1];if (parseInt(i[2] || String(r.length)) != r.length) throw new Error(\"invalid value for \" + e);var a = [];return r.forEach(function (e) {a.push(t(s, e, !0));}), l.concat(a);}throw new Error(\"unknown type - \" + e);}(e, r[t]));}), l.hexlify(l.concat(n));}r.pack = o, r.keccak256 = function (e, t) {return n.keccak256(o(e, t));}, r.sha256 = function (e, t) {return i.sha256(o(e, t));};}, { \"./bignumber\": 62, \"./bytes\": 63, \"./keccak256\": 70, \"./sha2\": 78, \"./utf8\": 84 }], 82: [function (e, t, r) {\"use strict\";var n = this && this.__importStar || function (e) {if (e && e.__esModule) return e;var t = {};if (null != e) for (var r in e) {Object.hasOwnProperty.call(e, r) && (t[r] = e[r]);}return t.default = e, t;};Object.defineProperty(r, \"__esModule\", { value: !0 });var i = e(\"../constants\"),s = n(e(\"../errors\")),a = e(\"./secp256k1\"),u = e(\"./address\"),l = e(\"./bignumber\"),h = e(\"./bytes\"),f = e(\"./keccak256\"),c = e(\"./properties\"),d = n(e(\"./rlp\")),o = e(\"../providers/abstract-provider\");function p(e) {return \"0x\" === e ? i.Zero : l.bigNumberify(e);}var v = [{ name: \"nonce\", maxLength: 32 }, { name: \"gasPrice\", maxLength: 32 }, { name: \"gasLimit\", maxLength: 32 }, { name: \"to\", length: 20 }, { name: \"value\", maxLength: 32 }, { name: \"data\" }],y = { chainId: !0, data: !0, gasLimit: !0, gasPrice: !0, nonce: !0, to: !0, value: !0 };r.serialize = function (r, e) {c.checkProperties(r, y);var n = [];v.forEach(function (e) {var t = r[e.name] || [];t = h.arrayify(h.hexlify(t)), e.length && t.length !== e.length && 0 < t.length && s.throwError(\"invalid length for \" + e.name, s.INVALID_ARGUMENT, { arg: \"transaction\" + e.name, value: t }), e.maxLength && (t = h.stripZeros(t)).length > e.maxLength && s.throwError(\"invalid length for \" + e.name, s.INVALID_ARGUMENT, { arg: \"transaction\" + e.name, value: t }), n.push(h.hexlify(t));}), null != r.chainId && 0 !== r.chainId && (n.push(h.hexlify(r.chainId)), n.push(\"0x\"), n.push(\"0x\"));var t = d.encode(n);if (!e) return t;var i = h.splitSignature(e),o = 27 + i.recoveryParam;return 9 === n.length && (n.pop(), n.pop(), n.pop(), o += 2 * r.chainId + 8), n.push(h.hexlify(o)), n.push(h.stripZeros(h.arrayify(i.r))), n.push(h.stripZeros(h.arrayify(i.s))), d.encode(n);}, r.parse = function (e) {var t = d.decode(e);9 !== t.length && 6 !== t.length && s.throwError(\"invalid raw transaction\", s.INVALID_ARGUMENT, { arg: \"rawTransactin\", value: e });var r = { nonce: p(t[0]).toNumber(), gasPrice: p(t[1]), gasLimit: p(t[2]), to: function (e) {return \"0x\" === e ? null : u.getAddress(e);}(t[3]), value: p(t[4]), data: t[5], chainId: 0 };if (6 === t.length) return r;try {r.v = l.bigNumberify(t[6]).toNumber();} catch (e) {return s.info(e), r;}if (r.r = h.hexZeroPad(t[7], 32), r.s = h.hexZeroPad(t[8], 32), l.bigNumberify(r.r).isZero() && l.bigNumberify(r.s).isZero()) r.chainId = r.v, r.v = 0;else {r.chainId = Math.floor((r.v - 35) / 2), r.chainId < 0 && (r.chainId = 0);var n = r.v - 27,i = t.slice(0, 6);0 !== r.chainId && (i.push(h.hexlify(r.chainId)), i.push(\"0x\"), i.push(\"0x\"), n -= 2 * r.chainId + 8);var o = f.keccak256(d.encode(i));try {r.from = a.recoverAddress(o, { r: h.hexlify(r.r), s: h.hexlify(r.s), recoveryParam: n });} catch (e) {s.info(e);}r.hash = f.keccak256(e);}return r;}, r.populateTransaction = function (e, t, r) {o.Provider.isProvider(t) || s.throwError(\"missing provider\", s.INVALID_ARGUMENT, { argument: \"provider\", value: t }), c.checkProperties(e, y);var n = c.shallowCopy(e);if (null != n.to && (n.to = t.resolveName(n.to)), null == n.gasPrice && (n.gasPrice = t.getGasPrice()), null == n.nonce && (n.nonce = t.getTransactionCount(r)), null == n.gasLimit) {var i = c.shallowCopy(n);i.from = r, n.gasLimit = t.estimateGas(i);}return null == n.chainId && (n.chainId = t.getNetwork().then(function (e) {return e.chainId;})), c.resolveProperties(n);};}, { \"../constants\": 3, \"../errors\": 5, \"../providers/abstract-provider\": 49, \"./address\": 59, \"./bignumber\": 62, \"./bytes\": 63, \"./keccak256\": 70, \"./properties\": 73, \"./rlp\": 75, \"./secp256k1\": 76 }], 83: [function (e, t, r) {\"use strict\";var n = this && this.__importStar || function (e) {if (e && e.__esModule) return e;var t = {};if (null != e) for (var r in e) {Object.hasOwnProperty.call(e, r) && (t[r] = e[r]);}return t.default = e, t;};Object.defineProperty(r, \"__esModule\", { value: !0 });var i,h = e(\"../constants\"),f = n(e(\"../errors\")),c = e(\"./bignumber\"),o = {};function s(e) {return { decimals: e.length - 1, tenPower: c.bigNumberify(e) };}function d(e) {var t = o[String(e).toLowerCase()];if (!t && \"number\" == typeof e && parseInt(String(e)) == e && 0 <= e && e <= 256) {for (var r = \"1\", n = 0; n < e; n++) {r += \"0\";}t = s(r);}return t || f.throwError(\"invalid unitType\", f.INVALID_ARGUMENT, { argument: \"name\", value: e }), t;}function a(e, t) {var r = d(t),n = (e = c.bigNumberify(e)).lt(h.Zero);n && (e = e.mul(h.NegativeOne));for (var i = e.mod(r.tenPower).toString(); i.length < r.decimals;) {i = \"0\" + i;}return i = i.match(/^([0-9]*[1-9]|0)(0*)/)[1], e = e.div(r.tenPower).toString() + \".\" + i, n && (e = \"-\" + e), e;}function u(e, t) {null == t && (t = 18);var r = d(t);if (\"string\" == typeof e && e.match(/^-?[0-9.,]+$/) || f.throwError(\"invalid decimal value\", f.INVALID_ARGUMENT, { arg: \"value\", value: e }), 0 === r.decimals) return c.bigNumberify(e);var n = \"-\" === e.substring(0, 1);n && (e = e.substring(1)), \".\" === e && f.throwError(\"missing value\", f.INVALID_ARGUMENT, { arg: \"value\", value: e });var i = e.split(\".\");2 < i.length && f.throwError(\"too many decimal points\", f.INVALID_ARGUMENT, { arg: \"value\", value: e });var o = i[0],s = i[1];for (o = o || \"0\", (s = s || \"0\").length > r.decimals && f.throwError(\"underflow occurred\", f.NUMERIC_FAULT, { operation: \"division\", fault: \"underflow\" }); s.length < r.decimals;) {s += \"0\";}var a = c.bigNumberify(o),u = c.bigNumberify(s),l = a.mul(r.tenPower).add(u);return n && (l = l.mul(h.NegativeOne)), l;}i = \"1\", [\"wei\", \"kwei\", \"Mwei\", \"Gwei\", \"szabo\", \"finney\", \"ether\"].forEach(function (e) {var t = s(i);o[e.toLowerCase()] = t, o[String(t.decimals)] = t, i += \"000\";}), r.commify = function (e) {var t = String(e).split(\".\");(2 < t.length || !t[0].match(/^-?[0-9]*$/) || t[1] && !t[1].match(/^[0-9]*$/) || \".\" === e || \"-.\" === e) && f.throwError(\"invalid value\", f.INVALID_ARGUMENT, { argument: \"value\", value: e });var r = t[0],n = \"\";for (\"-\" === r.substring(0, 1) && (n = \"-\", r = r.substring(1)); \"0\" === r.substring(0, 1);) {r = r.substring(1);}\"\" === r && (r = \"0\");var i = \"\";2 === t.length && (i = \".\" + (t[1] || \"0\"));for (var o = []; r.length;) {if (r.length <= 3) {o.unshift(r);break;}var s = r.length - 3;o.unshift(r.substring(s)), r = r.substring(0, s);}return n + o.join(\",\") + i;}, r.formatUnits = a, r.parseUnits = u, r.formatEther = function (e) {return a(e, 18);}, r.parseEther = function (e) {return u(e, 18);};}, { \"../constants\": 3, \"../errors\": 5, \"./bignumber\": 62 }], 84: [function (e, t, r) {\"use strict\";Object.defineProperty(r, \"__esModule\", { value: !0 });var s,n,i = e(\"../constants\"),a = e(\"../errors\"),h = e(\"./bytes\");function o(e, t) {void 0 === t && (t = s.current), t != s.current && (a.checkNormalize(), e = e.normalize(t));for (var r = [], n = 0; n < e.length; n++) {var i = e.charCodeAt(n);if (i < 128) r.push(i);else if (i < 2048) r.push(i >> 6 | 192), r.push(63 & i | 128);else if (55296 == (64512 & i)) {n++;var o = e.charCodeAt(n);if (n >= e.length || 56320 != (64512 & o)) throw new Error(\"invalid utf-8 string\");i = 65536 + ((1023 & i) << 10) + (1023 & o), r.push(i >> 18 | 240), r.push(i >> 12 & 63 | 128), r.push(i >> 6 & 63 | 128), r.push(63 & i | 128);} else r.push(i >> 12 | 224), r.push(i >> 6 & 63 | 128), r.push(63 & i | 128);}return h.arrayify(r);}function u(e, t) {e = h.arrayify(e);for (var r = \"\", n = 0; n < e.length;) {var i = e[n++];if (i >> 7 != 0) {var o = null,s = null;if (192 == (224 & i)) o = 1, s = 127;else if (224 == (240 & i)) o = 2, s = 2047;else {if (240 != (248 & i)) {if (t) continue;if (128 == (192 & i)) throw new Error(\"invalid utf8 byte sequence; unexpected continuation byte\");throw new Error(\"invalid utf8 byte sequence; invalid prefix\");}o = 3, s = 65535;}if (n + o > e.length) {if (!t) throw new Error(\"invalid utf8 byte sequence; too short\");for (; n < e.length && e[n] >> 6 == 2; n++) {;}} else {for (var a = i & (1 << 8 - o - 1) - 1, u = 0; u < o; u++) {var l = e[n];if (128 != (192 & l)) {a = null;break;}a = a << 6 | 63 & l, n++;}if (null !== a) {if (a <= s) {if (!t) throw new Error(\"invalid utf8 byte sequence; overlong\");} else if (1114111 < a) {if (!t) throw new Error(\"invalid utf8 byte sequence; out-of-range\");} else if (55296 <= a && a <= 57343) {if (!t) throw new Error(\"invalid utf8 byte sequence; utf-16 surrogate\");} else a <= 65535 ? r += String.fromCharCode(a) : (a -= 65536, r += String.fromCharCode(55296 + (a >> 10 & 1023), 56320 + (1023 & a)));} else if (!t) throw new Error(\"invalid utf8 byte sequence; invalid continuation byte\");}} else r += String.fromCharCode(i);}return r;}(n = s = r.UnicodeNormalizationForm || (r.UnicodeNormalizationForm = {})).current = \"\", n.NFC = \"NFC\", n.NFD = \"NFD\", n.NFKC = \"NFKC\", n.NFKD = \"NFKD\", r.toUtf8Bytes = o, r.toUtf8String = u, r.formatBytes32String = function (e) {var t = o(e);if (31 < t.length) throw new Error(\"bytes32 string must be less than 32 bytes\");return h.hexlify(h.concat([t, i.HashZero]).slice(0, 32));}, r.parseBytes32String = function (e) {var t = h.arrayify(e);if (32 !== t.length) throw new Error(\"invalid bytes32 - not 32 bytes long\");if (0 !== t[31]) throw new Error(\"invalid bytes32 string - no null terminator\");for (var r = 31; 0 === t[r - 1];) {r--;}return u(t.slice(0, r));};}, { \"../constants\": 3, \"../errors\": 5, \"./bytes\": 63 }], 85: [function (e, t, r) {\"use strict\";var n = this && this.__importStar || function (e) {if (e && e.__esModule) return e;var t = {};if (null != e) for (var r in e) {Object.hasOwnProperty.call(e, r) && (t[r] = e[r]);}return t.default = e, t;};Object.defineProperty(r, \"__esModule\", { value: !0 });\n      var f = {},i = e(\"./base64\"),o = e(\"./properties\"),s = e(\"./utf8\"),c = n(e(\"../errors\"));\n      f.XMLHttpRequest = plus.net.XMLHttpRequest;\n      r.fetchJson = function (e, a, u) {var r = {},l = null,h = 12e4;if (\"string\" == typeof e) l = e;else if (\"object\" == typeof e) {if (null == e.url && c.throwError(\"missing URL\", c.MISSING_ARGUMENT, { arg: \"url\" }), l = e.url, \"number\" == typeof e.timeout && 0 < e.timeout && (h = e.timeout), e.headers) for (var t in e.headers) {r[t.toLowerCase()] = { key: t, value: String(e.headers[t]) };}if (null != e.user && null != e.password) {\"https:\" !== l.substring(0, 6) && !0 !== e.allowInsecure && c.throwError(\"basic authentication requires a secure https url\", c.INVALID_ARGUMENT, { arg: \"url\", url: l, user: e.user, password: \"[REDACTED]\" });var n = e.user + \":\" + e.password;r.authorization = { key: \"Authorization\", value: \"Basic \" + i.encode(s.toUtf8Bytes(n)) };}}return new Promise(function (n, i) {var o = new f.XMLHttpRequest(),e = null;e = setTimeout(function () {null != e && (e = null, i(new Error(\"timeout\")), setTimeout(function () {o.abort();}, 0));}, h);function s() {null != e && (clearTimeout(e), e = null);}a ? (o.open(\"POST\", l, !0), r[\"content-type\"] = { key: \"Content-Type\", value: \"application/json\" }) : o.open(\"GET\", l, !0), Object.keys(r).forEach(function (e) {var t = r[e];o.setRequestHeader(t.key, t.value);}), o.onreadystatechange = function () {if (4 === o.readyState) {if (200 != o.status) {s();var e = new Error(\"invalid response - \" + o.status);return e.statusCode = o.status, o.responseText && (e.responseText = o.responseText), void i(e);}var t = null;try {t = JSON.parse(o.responseText);} catch (e) {s();var r = new Error(\"invalid json response\");return r.orginialError = e, r.responseText = o.responseText, null != a && (r.requestBody = a), r.url = l, void i(r);}if (u) try {t = u(t);} catch (e) {return s(), e.url = l, e.body = a, e.responseText = o.responseText, void i(e);}s(), n(t);}}, o.onerror = function (e) {s(), i(e);};try {null != a ? o.send(a) : o.send();} catch (e) {s();var t = new Error(\"connection error\");t.error = e, i(t);}});}, r.poll = function (u, l) {return l = l || {}, null == (l = o.shallowCopy(l)).floor && (l.floor = 0), null == l.ceiling && (l.ceiling = 1e4), null == l.interval && (l.interval = 250), new Promise(function (n, t) {var e = null,i = !1,o = function o() {return !i && (i = !0, e && clearTimeout(e), !0);};l.timeout && (e = setTimeout(function () {o() && t(new Error(\"timeout\"));}, l.timeout));var s = l.fastRetry || null,a = 0;!function r() {return u().then(function (e) {if (void 0 !== e) o() && n(e);else if (l.onceBlock) l.onceBlock.once(\"block\", r);else if (!i) {a++;var t = l.interval * parseInt(String(Math.random() * Math.pow(2, a)));t < l.floor && (t = l.floor), t > l.ceiling && (t = l.ceiling), s && (a--, t = s, s = null), setTimeout(r, t);}return null;}, function (e) {o() && t(e);});}();});};}, { \"../errors\": 5, \"./base64\": 60, \"./properties\": 73, \"./utf8\": 84, xmlhttprequest: 48 }], 86: [function (o, e, s) {(function (e) {\"use strict\";Object.defineProperty(s, \"__esModule\", { value: !0 });var i = o(\"../utils/hash\"),t = o(\"../utils/properties\");s.check = function (e) {for (var t = [], r = 0; r < 2048; r++) {var n = e.getWord(r);if (r !== e.getWordIndex(n)) return \"0x\";t.push(n);}return i.id(t.join(\"\\n\") + \"\\n\");};var r = (n.prototype.split = function (e) {return e.toLowerCase().split(/ +/g);}, n.prototype.join = function (e) {return e.join(\" \");}, n);function n(e) {t.defineReadOnly(this, \"locale\", e);}s.Wordlist = r, s.register = function (e, t) {t = t || e.locale;};}).call(this, \"undefined\" != typeof global ? global : \"undefined\" != typeof self ? self : \"undefined\" != typeof window ? window : {});}, { \"../utils/hash\": 64, \"../utils/properties\": 73 }], 87: [function (e, t, r) {\"use strict\";var n,i = this && this.__extends || (n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (e, t) {e.__proto__ = t;} || function (e, t) {for (var r in t) {t.hasOwnProperty(r) && (e[r] = t[r]);}}, function (e, t) {function r() {this.constructor = e;}n(e, t), e.prototype = null === t ? Object.create(t) : (r.prototype = t.prototype, new r());}),o = this && this.__importStar || function (e) {if (e && e.__esModule) return e;var t = {};if (null != e) for (var r in e) {Object.hasOwnProperty.call(e, r) && (t[r] = e[r]);}return t.default = e, t;};Object.defineProperty(r, \"__esModule\", { value: !0 });var s,a = e(\"./utils/bytes\"),u = e(\"./utils/hash\"),l = e(\"./utils/hdnode\"),h = e(\"./utils/json-wallet\"),f = e(\"./utils/keccak256\"),c = e(\"./utils/properties\"),d = e(\"./utils/random-bytes\"),p = o(e(\"./utils/secret-storage\")),v = e(\"./utils/signing-key\"),y = e(\"./utils/transaction\"),m = e(\"./abstract-signer\"),g = e(\"./providers/abstract-provider\"),b = o(e(\"./errors\")),w = (s = m.Signer, i(_, s), Object.defineProperty(_.prototype, \"address\", { get: function get() {return this.signingKey.address;}, enumerable: !0, configurable: !0 }), Object.defineProperty(_.prototype, \"mnemonic\", { get: function get() {return this.signingKey.mnemonic;}, enumerable: !0, configurable: !0 }), Object.defineProperty(_.prototype, \"path\", { get: function get() {return this.signingKey.path;}, enumerable: !0, configurable: !0 }), Object.defineProperty(_.prototype, \"privateKey\", { get: function get() {return this.signingKey.privateKey;}, enumerable: !0, configurable: !0 }), _.prototype.connect = function (e) {return g.Provider.isProvider(e) || b.throwError(\"invalid provider\", b.INVALID_ARGUMENT, { argument: \"provider\", value: e }), new _(this.signingKey, e);}, _.prototype.getAddress = function () {return Promise.resolve(this.address);}, _.prototype.sign = function (e) {var n = this;return c.resolveProperties(e).then(function (e) {var t = y.serialize(e),r = n.signingKey.signDigest(f.keccak256(t));return y.serialize(e, r);});}, _.prototype.signMessage = function (e) {return Promise.resolve(a.joinSignature(this.signingKey.signDigest(u.hashMessage(e))));}, _.prototype.getBalance = function (e) {if (!this.provider) throw new Error(\"missing provider\");return this.provider.getBalance(this.address, e);}, _.prototype.getTransactionCount = function (e) {if (!this.provider) throw new Error(\"missing provider\");return this.provider.getTransactionCount(this.address, e);}, _.prototype.sendTransaction = function (e) {var t = this;if (!this.provider) throw new Error(\"missing provider\");return null == e.nonce && ((e = c.shallowCopy(e)).nonce = this.getTransactionCount(\"pending\")), y.populateTransaction(e, this.provider, this.address).then(function (e) {return t.sign(e).then(function (e) {return t.provider.sendTransaction(e);});});}, _.prototype.encrypt = function (e, t, r) {if (\"function\" != typeof t || r || (r = t, t = {}), r && \"function\" != typeof r) throw new Error(\"invalid callback\");return t = t || {}, this.mnemonic && ((t = c.shallowCopy(t)).mnemonic = this.mnemonic, t.path = this.path), p.encrypt(this.privateKey, e, t, r);}, _.createRandom = function (e) {var t = d.randomBytes(16);(e = e || {}).extraEntropy && (t = a.arrayify(f.keccak256(a.concat([t, e.extraEntropy])).substring(0, 34)));var r = l.entropyToMnemonic(t, e.locale);return _.fromMnemonic(r, e.path, e.locale);}, _.fromEncryptedJson = function (e, t, r) {if (h.isCrowdsaleWallet(e)) try {r && r(0);var n = p.decryptCrowdsale(e, t);return r && r(1), Promise.resolve(new _(n));} catch (e) {return Promise.reject(e);} else if (h.isSecretStorageWallet(e)) return p.decrypt(e, t, r).then(function (e) {return new _(e);});return Promise.reject(\"invalid wallet JSON\");}, _.fromMnemonic = function (e, t, r) {return t = t || l.defaultPath, new _(l.fromMnemonic(e, r).derivePath(t));}, _);function _(e, t) {var r = s.call(this) || this;return b.checkNew(r, _), v.SigningKey.isSigningKey(e) ? c.defineReadOnly(r, \"signingKey\", e) : c.defineReadOnly(r, \"signingKey\", new v.SigningKey(e)), c.defineReadOnly(r, \"provider\", t), r;}r.Wallet = w;}, { \"./abstract-signer\": 2, \"./errors\": 5, \"./providers/abstract-provider\": 49, \"./utils/bytes\": 63, \"./utils/hash\": 64, \"./utils/hdnode\": 65, \"./utils/json-wallet\": 69, \"./utils/keccak256\": 70, \"./utils/properties\": 73, \"./utils/random-bytes\": 74, \"./utils/secret-storage\": 77, \"./utils/signing-key\": 80, \"./utils/transaction\": 82 }], 88: [function (e, t, r) {\"use strict\";Object.defineProperty(r, \"__esModule\", { value: !0 });var n = e(\"../wordlists/lang-en\").langEn;r.en = n;}, { \"../wordlists/lang-en\": 89 }], 89: [function (e, t, r) {\"use strict\";var n,i = this && this.__extends || (n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (e, t) {e.__proto__ = t;} || function (e, t) {for (var r in t) {t.hasOwnProperty(r) && (e[r] = t[r]);}}, function (e, t) {function r() {this.constructor = e;}n(e, t), e.prototype = null === t ? Object.create(t) : (r.prototype = t.prototype, new r());});Object.defineProperty(r, \"__esModule\", { value: !0 });var o,s = e(\"../utils/wordlist\"),a = \"AbandonAbilityAbleAboutAboveAbsentAbsorbAbstractAbsurdAbuseAccessAccidentAccountAccuseAchieveAcidAcousticAcquireAcrossActActionActorActressActualAdaptAddAddictAddressAdjustAdmitAdultAdvanceAdviceAerobicAffairAffordAfraidAgainAgeAgentAgreeAheadAimAirAirportAisleAlarmAlbumAlcoholAlertAlienAllAlleyAllowAlmostAloneAlphaAlreadyAlsoAlterAlwaysAmateurAmazingAmongAmountAmusedAnalystAnchorAncientAngerAngleAngryAnimalAnkleAnnounceAnnualAnotherAnswerAntennaAntiqueAnxietyAnyApartApologyAppearAppleApproveAprilArchArcticAreaArenaArgueArmArmedArmorArmyAroundArrangeArrestArriveArrowArtArtefactArtistArtworkAskAspectAssaultAssetAssistAssumeAsthmaAthleteAtomAttackAttendAttitudeAttractAuctionAuditAugustAuntAuthorAutoAutumnAverageAvocadoAvoidAwakeAwareAwayAwesomeAwfulAwkwardAxisBabyBachelorBaconBadgeBagBalanceBalconyBallBambooBananaBannerBarBarelyBargainBarrelBaseBasicBasketBattleBeachBeanBeautyBecauseBecomeBeefBeforeBeginBehaveBehindBelieveBelowBeltBenchBenefitBestBetrayBetterBetweenBeyondBicycleBidBikeBindBiologyBirdBirthBitterBlackBladeBlameBlanketBlastBleakBlessBlindBloodBlossomBlouseBlueBlurBlushBoardBoatBodyBoilBombBoneBonusBookBoostBorderBoringBorrowBossBottomBounceBoxBoyBracketBrainBrandBrassBraveBreadBreezeBrickBridgeBriefBrightBringBriskBroccoliBrokenBronzeBroomBrotherBrownBrushBubbleBuddyBudgetBuffaloBuildBulbBulkBulletBundleBunkerBurdenBurgerBurstBusBusinessBusyButterBuyerBuzzCabbageCabinCableCactusCageCakeCallCalmCameraCampCanCanalCancelCandyCannonCanoeCanvasCanyonCapableCapitalCaptainCarCarbonCardCargoCarpetCarryCartCaseCashCasinoCastleCasualCatCatalogCatchCategoryCattleCaughtCauseCautionCaveCeilingCeleryCementCensusCenturyCerealCertainChairChalkChampionChangeChaosChapterChargeChaseChatCheapCheckCheeseChefCherryChestChickenChiefChildChimneyChoiceChooseChronicChuckleChunkChurnCigarCinnamonCircleCitizenCityCivilClaimClapClarifyClawClayCleanClerkCleverClickClientCliffClimbClinicClipClockClogCloseClothCloudClownClubClumpClusterClutchCoachCoastCoconutCodeCoffeeCoilCoinCollectColorColumnCombineComeComfortComicCommonCompanyConcertConductConfirmCongressConnectConsiderControlConvinceCookCoolCopperCopyCoralCoreCornCorrectCostCottonCouchCountryCoupleCourseCousinCoverCoyoteCrackCradleCraftCramCraneCrashCraterCrawlCrazyCreamCreditCreekCrewCricketCrimeCrispCriticCropCrossCrouchCrowdCrucialCruelCruiseCrumbleCrunchCrushCryCrystalCubeCultureCupCupboardCuriousCurrentCurtainCurveCushionCustomCuteCycleDadDamageDampDanceDangerDaringDashDaughterDawnDayDealDebateDebrisDecadeDecemberDecideDeclineDecorateDecreaseDeerDefenseDefineDefyDegreeDelayDeliverDemandDemiseDenialDentistDenyDepartDependDepositDepthDeputyDeriveDescribeDesertDesignDeskDespairDestroyDetailDetectDevelopDeviceDevoteDiagramDialDiamondDiaryDiceDieselDietDifferDigitalDignityDilemmaDinnerDinosaurDirectDirtDisagreeDiscoverDiseaseDishDismissDisorderDisplayDistanceDivertDivideDivorceDizzyDoctorDocumentDogDollDolphinDomainDonateDonkeyDonorDoorDoseDoubleDoveDraftDragonDramaDrasticDrawDreamDressDriftDrillDrinkDripDriveDropDrumDryDuckDumbDuneDuringDustDutchDutyDwarfDynamicEagerEagleEarlyEarnEarthEasilyEastEasyEchoEcologyEconomyEdgeEditEducateEffortEggEightEitherElbowElderElectricElegantElementElephantElevatorEliteElseEmbarkEmbodyEmbraceEmergeEmotionEmployEmpowerEmptyEnableEnactEndEndlessEndorseEnemyEnergyEnforceEngageEngineEnhanceEnjoyEnlistEnoughEnrichEnrollEnsureEnterEntireEntryEnvelopeEpisodeEqualEquipEraEraseErodeErosionErrorEruptEscapeEssayEssenceEstateEternalEthicsEvidenceEvilEvokeEvolveExactExampleExcessExchangeExciteExcludeExcuseExecuteExerciseExhaustExhibitExileExistExitExoticExpandExpectExpireExplainExposeExpressExtendExtraEyeEyebrowFabricFaceFacultyFadeFaintFaithFallFalseFameFamilyFamousFanFancyFantasyFarmFashionFatFatalFatherFatigueFaultFavoriteFeatureFebruaryFederalFeeFeedFeelFemaleFenceFestivalFetchFeverFewFiberFictionFieldFigureFileFilmFilterFinalFindFineFingerFinishFireFirmFirstFiscalFishFitFitnessFixFlagFlameFlashFlatFlavorFleeFlightFlipFloatFlockFloorFlowerFluidFlushFlyFoamFocusFogFoilFoldFollowFoodFootForceForestForgetForkFortuneForumForwardFossilFosterFoundFoxFragileFrameFrequentFreshFriendFringeFrogFrontFrostFrownFrozenFruitFuelFunFunnyFurnaceFuryFutureGadgetGainGalaxyGalleryGameGapGarageGarbageGardenGarlicGarmentGasGaspGateGatherGaugeGazeGeneralGeniusGenreGentleGenuineGestureGhostGiantGiftGiggleGingerGiraffeGirlGiveGladGlanceGlareGlassGlideGlimpseGlobeGloomGloryGloveGlowGlueGoatGoddessGoldGoodGooseGorillaGospelGossipGovernGownGrabGraceGrainGrantGrapeGrassGravityGreatGreenGridGriefGritGroceryGroupGrowGruntGuardGuessGuideGuiltGuitarGunGymHabitHairHalfHammerHamsterHandHappyHarborHardHarshHarvestHatHaveHawkHazardHeadHealthHeartHeavyHedgehogHeightHelloHelmetHelpHenHeroHiddenHighHillHintHipHireHistoryHobbyHockeyHoldHoleHolidayHollowHomeHoneyHoodHopeHornHorrorHorseHospitalHostHotelHourHoverHubHugeHumanHumbleHumorHundredHungryHuntHurdleHurryHurtHusbandHybridIceIconIdeaIdentifyIdleIgnoreIllIllegalIllnessImageImitateImmenseImmuneImpactImposeImproveImpulseInchIncludeIncomeIncreaseIndexIndicateIndoorIndustryInfantInflictInformInhaleInheritInitialInjectInjuryInmateInnerInnocentInputInquiryInsaneInsectInsideInspireInstallIntactInterestIntoInvestInviteInvolveIronIslandIsolateIssueItemIvoryJacketJaguarJarJazzJealousJeansJellyJewelJobJoinJokeJourneyJoyJudgeJuiceJumpJungleJuniorJunkJustKangarooKeenKeepKetchupKeyKickKidKidneyKindKingdomKissKitKitchenKiteKittenKiwiKneeKnifeKnockKnowLabLabelLaborLadderLadyLakeLampLanguageLaptopLargeLaterLatinLaughLaundryLavaLawLawnLawsuitLayerLazyLeaderLeafLearnLeaveLectureLeftLegLegalLegendLeisureLemonLendLengthLensLeopardLessonLetterLevelLiarLibertyLibraryLicenseLifeLiftLightLikeLimbLimitLinkLionLiquidListLittleLiveLizardLoadLoanLobsterLocalLockLogicLonelyLongLoopLotteryLoudLoungeLoveLoyalLuckyLuggageLumberLunarLunchLuxuryLyricsMachineMadMagicMagnetMaidMailMainMajorMakeMammalManManageMandateMangoMansionManualMapleMarbleMarchMarginMarineMarketMarriageMaskMassMasterMatchMaterialMathMatrixMatterMaximumMazeMeadowMeanMeasureMeatMechanicMedalMediaMelodyMeltMemberMemoryMentionMenuMercyMergeMeritMerryMeshMessageMetalMethodMiddleMidnightMilkMillionMimicMindMinimumMinorMinuteMiracleMirrorMiseryMissMistakeMixMixedMixtureMobileModelModifyMomMomentMonitorMonkeyMonsterMonthMoonMoralMoreMorningMosquitoMotherMotionMotorMountainMouseMoveMovieMuchMuffinMuleMultiplyMuscleMuseumMushroomMusicMustMutualMyselfMysteryMythNaiveNameNapkinNarrowNastyNationNatureNearNeckNeedNegativeNeglectNeitherNephewNerveNestNetNetworkNeutralNeverNewsNextNiceNightNobleNoiseNomineeNoodleNormalNorthNoseNotableNoteNothingNoticeNovelNowNuclearNumberNurseNutOakObeyObjectObligeObscureObserveObtainObviousOccurOceanOctoberOdorOffOfferOfficeOftenOilOkayOldOliveOlympicOmitOnceOneOnionOnlineOnlyOpenOperaOpinionOpposeOptionOrangeOrbitOrchardOrderOrdinaryOrganOrientOriginalOrphanOstrichOtherOutdoorOuterOutputOutsideOvalOvenOverOwnOwnerOxygenOysterOzonePactPaddlePagePairPalacePalmPandaPanelPanicPantherPaperParadeParentParkParrotPartyPassPatchPathPatientPatrolPatternPausePavePaymentPeacePeanutPearPeasantPelicanPenPenaltyPencilPeoplePepperPerfectPermitPersonPetPhonePhotoPhrasePhysicalPianoPicnicPicturePiecePigPigeonPillPilotPinkPioneerPipePistolPitchPizzaPlacePlanetPlasticPlatePlayPleasePledgePluckPlugPlungePoemPoetPointPolarPolePolicePondPonyPoolPopularPortionPositionPossiblePostPotatoPotteryPovertyPowderPowerPracticePraisePredictPreferPreparePresentPrettyPreventPricePridePrimaryPrintPriorityPrisonPrivatePrizeProblemProcessProduceProfitProgramProjectPromoteProofPropertyProsperProtectProudProvidePublicPuddingPullPulpPulsePumpkinPunchPupilPuppyPurchasePurityPurposePursePushPutPuzzlePyramidQualityQuantumQuarterQuestionQuickQuitQuizQuoteRabbitRaccoonRaceRackRadarRadioRailRainRaiseRallyRampRanchRandomRangeRapidRareRateRatherRavenRawRazorReadyRealReasonRebelRebuildRecallReceiveRecipeRecordRecycleReduceReflectReformRefuseRegionRegretRegularRejectRelaxReleaseReliefRelyRemainRememberRemindRemoveRenderRenewRentReopenRepairRepeatReplaceReportRequireRescueResembleResistResourceResponseResultRetireRetreatReturnReunionRevealReviewRewardRhythmRibRibbonRiceRichRideRidgeRifleRightRigidRingRiotRippleRiskRitualRivalRiverRoadRoastRobotRobustRocketRomanceRoofRookieRoomRoseRotateRoughRoundRouteRoyalRubberRudeRugRuleRunRunwayRuralSadSaddleSadnessSafeSailSaladSalmonSalonSaltSaluteSameSampleSandSatisfySatoshiSauceSausageSaveSayScaleScanScareScatterSceneSchemeSchoolScienceScissorsScorpionScoutScrapScreenScriptScrubSeaSearchSeasonSeatSecondSecretSectionSecuritySeedSeekSegmentSelectSellSeminarSeniorSenseSentenceSeriesServiceSessionSettleSetupSevenShadowShaftShallowShareShedShellSheriffShieldShiftShineShipShiverShockShoeShootShopShortShoulderShoveShrimpShrugShuffleShySiblingSickSideSiegeSightSignSilentSilkSillySilverSimilarSimpleSinceSingSirenSisterSituateSixSizeSkateSketchSkiSkillSkinSkirtSkullSlabSlamSleepSlenderSliceSlideSlightSlimSloganSlotSlowSlushSmallSmartSmileSmokeSmoothSnackSnakeSnapSniffSnowSoapSoccerSocialSockSodaSoftSolarSoldierSolidSolutionSolveSomeoneSongSoonSorrySortSoulSoundSoupSourceSouthSpaceSpareSpatialSpawnSpeakSpecialSpeedSpellSpendSphereSpiceSpiderSpikeSpinSpiritSplitSpoilSponsorSpoonSportSpotSpraySpreadSpringSpySquareSqueezeSquirrelStableStadiumStaffStageStairsStampStandStartStateStaySteakSteelStemStepStereoStickStillStingStockStomachStoneStoolStoryStoveStrategyStreetStrikeStrongStruggleStudentStuffStumbleStyleSubjectSubmitSubwaySuccessSuchSuddenSufferSugarSuggestSuitSummerSunSunnySunsetSuperSupplySupremeSureSurfaceSurgeSurpriseSurroundSurveySuspectSustainSwallowSwampSwapSwarmSwearSweetSwiftSwimSwingSwitchSwordSymbolSymptomSyrupSystemTableTackleTagTailTalentTalkTankTapeTargetTaskTasteTattooTaxiTeachTeamTellTenTenantTennisTentTermTestTextThankThatThemeThenTheoryThereTheyThingThisThoughtThreeThriveThrowThumbThunderTicketTideTigerTiltTimberTimeTinyTipTiredTissueTitleToastTobaccoTodayToddlerToeTogetherToiletTokenTomatoTomorrowToneTongueTonightToolToothTopTopicToppleTorchTornadoTortoiseTossTotalTouristTowardTowerTownToyTrackTradeTrafficTragicTrainTransferTrapTrashTravelTrayTreatTreeTrendTrialTribeTrickTriggerTrimTripTrophyTroubleTruckTrueTrulyTrumpetTrustTruthTryTubeTuitionTumbleTunaTunnelTurkeyTurnTurtleTwelveTwentyTwiceTwinTwistTwoTypeTypicalUglyUmbrellaUnableUnawareUncleUncoverUnderUndoUnfairUnfoldUnhappyUniformUniqueUnitUniverseUnknownUnlockUntilUnusualUnveilUpdateUpgradeUpholdUponUpperUpsetUrbanUrgeUsageUseUsedUsefulUselessUsualUtilityVacantVacuumVagueValidValleyValveVanVanishVaporVariousVastVaultVehicleVelvetVendorVentureVenueVerbVerifyVersionVeryVesselVeteranViableVibrantViciousVictoryVideoViewVillageVintageViolinVirtualVirusVisaVisitVisualVitalVividVocalVoiceVoidVolcanoVolumeVoteVoyageWageWagonWaitWalkWallWalnutWantWarfareWarmWarriorWashWaspWasteWaterWaveWayWealthWeaponWearWeaselWeatherWebWeddingWeekendWeirdWelcomeWestWetWhaleWhatWheatWheelWhenWhereWhipWhisperWideWidthWifeWildWillWinWindowWineWingWinkWinnerWinterWireWisdomWiseWishWitnessWolfWomanWonderWoodWoolWordWorkWorldWorryWorthWrapWreckWrestleWristWriteWrongYardYearYellowYouYoungYouthZebraZeroZoneZoo\",u = null;function l(e) {if (null == u && (u = a.replace(/([A-Z])/g, \" $1\").toLowerCase().substring(1).split(\" \"), \"0x3c8acc1e7b08d8e76f9fda015ef48dc8c710a73cb7e0f77b2c18a9b5a7adde60\" !== s.check(e))) throw u = null, new Error(\"BIP39 Wordlist for en (English) FAILED\");}function h() {return o.call(this, \"en\") || this;}var f = new (o = s.Wordlist, i(h, o), h.prototype.getWord = function (e) {return l(this), u[e];}, h.prototype.getWordIndex = function (e) {return l(this), u.indexOf(e);}, h)();r.langEn = f, s.register(f);}, { \"../utils/wordlist\": 86 }] }, {}, [7])(7);});\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../../Downloads/HBuilderX/plugins/uniapp-cli/node_modules/webpack/buildin/global.js */ 2), __webpack_require__(/*! ./node_modules/@dcloudio/vue-cli-plugin-uni/lib/format-log.js */ 12)[\"default\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///27\n");

/***/ }),

/***/ 28:
/*!*********************************************************!*\
  !*** C:/Users/Admin/Desktop/evc.app/common/js/shims.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(global, process, __f__) {var require;var require;!function (t) {if (true) module.exports = t();else {}}(function () {return function i(s, u, a) {function f(e, t) {if (!u[e]) {if (!s[e]) {var r = \"function\" == typeof require && require;if (!t && r) return require(e, !0);if (c) return c(e, !0);var n = new Error(\"Cannot find module '\" + e + \"'\");throw n.code = \"MODULE_NOT_FOUND\", n;}var o = u[e] = { exports: {} };s[e][0].call(o.exports, function (t) {return f(s[e][1][t] || t);}, o, o.exports, i, s, u, a);}return u[e].exports;}for (var c = \"function\" == typeof require && require, t = 0; t < a.length; t++) {f(a[t]);}return f;}({ 1: [function (t, e, r) {(function (e) {if (e.atob) try {e.atob(\" \");} catch (t) {e.atob = function (e) {function t(t) {return e(String(t).replace(/[\\t\\n\\f\\r ]+/g, \"\"));}return t.original = e, t;}(e.atob);} else {var a = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\",s = /^(?:[A-Za-z\\d+\\/]{4})*?(?:[A-Za-z\\d+\\/]{2}(?:==)?|[A-Za-z\\d+\\/]{3}=?)?$/;e.btoa = function (t) {for (var e, r, n, o, i = \"\", s = 0, u = (t = String(t)).length % 3; s < t.length;) {if (255 < (r = t.charCodeAt(s++)) || 255 < (n = t.charCodeAt(s++)) || 255 < (o = t.charCodeAt(s++))) throw new TypeError(\"Failed to execute 'btoa' on 'Window': The string to be encoded contains characters outside of the Latin1 range.\");i += a.charAt((e = r << 16 | n << 8 | o) >> 18 & 63) + a.charAt(e >> 12 & 63) + a.charAt(e >> 6 & 63) + a.charAt(63 & e);}return u ? i.slice(0, u - 3) + \"===\".substring(u) : i;}, e.atob = function (t) {if (t = String(t).replace(/[\\t\\n\\f\\r ]+/g, \"\"), !s.test(t)) throw new TypeError(\"Failed to execute 'atob' on 'Window': The string to be decoded is not correctly encoded.\");t += \"==\".slice(2 - (3 & t.length));for (var e, r, n, o = \"\", i = 0; i < t.length;) {e = a.indexOf(t.charAt(i++)) << 18 | a.indexOf(t.charAt(i++)) << 12 | (r = a.indexOf(t.charAt(i++))) << 6 | (n = a.indexOf(t.charAt(i++))), o += 64 === r ? String.fromCharCode(e >> 16 & 255) : 64 === n ? String.fromCharCode(e >> 16 & 255, e >> 8 & 255) : String.fromCharCode(e >> 16 & 255, e >> 8 & 255, 255 & e);}return o;};}})(void 0 !== r ? r : this);}, {}], 2: [function (V, r, n) {(function (U) {var t, e;t = this, e = function e() {\"use strict\";function f(t) {return \"function\" == typeof t;}var r = Array.isArray ? Array.isArray : function (t) {return \"[object Array]\" === Object.prototype.toString.call(t);},n = 0,e = void 0,o = void 0,u = function u(t, e) {l[n] = t, l[n + 1] = e, 2 === (n += 2) && (o ? o(p) : y());};var t = \"undefined\" != typeof window ? window : void 0,i = t || {},s = i.MutationObserver || i.WebKitMutationObserver,a = \"undefined\" == typeof self && \"undefined\" != typeof process && \"[object process]\" === {}.toString.call(process),c = \"undefined\" != typeof Uint8ClampedArray && \"undefined\" != typeof importScripts && \"undefined\" != typeof MessageChannel;function h() {var t = setTimeout;return function () {return t(p, 1);};}var l = new Array(1e3);function p() {for (var t = 0; t < n; t += 2) {(0, l[t])(l[t + 1]), l[t] = void 0, l[t + 1] = void 0;}n = 0;}var d,v,g,w,y = void 0;function m(t, e) {var r = arguments,n = this,o = new this.constructor(_);void 0 === o[C] && L(o);var i,s = n._state;return s ? (i = r[s - 1], u(function () {return K(s, o, i, n._result);})) : k(n, o, t, e), o;}function b(t) {if (t && \"object\" == typeof t && t.constructor === this) return t;var e = new this(_);return j(e, t), e;}y = a ? function () {return process.nextTick(p);} : s ? (v = 0, g = new s(p), w = document.createTextNode(\"\"), g.observe(w, { characterData: !0 }), function () {w.data = v = ++v % 2;}) : c ? ((d = new MessageChannel()).port1.onmessage = p, function () {return d.port2.postMessage(0);}) : void 0 === t && \"function\" == typeof V ? function () {try {var t = V(\"vertx\");return void 0 !== (e = t.runOnLoop || t.runOnContext) ? function () {e(p);} : h();} catch (t) {return h();}}() : h();var C = Math.random().toString(36).substring(16);function _() {}var A = void 0,S = 1,x = 2,F = new O();function B(t) {try {return t.then;} catch (t) {return F.error = t, F;}}function N(t, e, r) {e.constructor === t.constructor && r === m && e.constructor.resolve === b ? function (e, t) {t._state === S ? T(e, t._result) : t._state === x ? D(e, t._result) : k(t, void 0, function (t) {return j(e, t);}, function (t) {return D(e, t);});}(t, e) : r === F ? (D(t, F.error), F.error = null) : void 0 === r ? T(t, e) : f(r) ? function (t, n, o) {u(function (e) {var r = !1,t = function (t, e, r, n) {try {t.call(e, r, n);} catch (t) {return t;}}(o, n, function (t) {r || (r = !0, n !== t ? j(e, t) : T(e, t));}, function (t) {r || (r = !0, D(e, t));}, e._label);!r && t && (r = !0, D(e, t));}, t);}(t, e, r) : T(t, e);}function j(t, e) {t === e ? D(t, new TypeError(\"You cannot resolve a promise with itself\")) : !function (t) {var e = typeof t;return null !== t && (\"object\" == e || \"function\" == e);}(e) ? T(t, e) : N(t, e, B(e));}function E(t) {t._onerror && t._onerror(t._result), z(t);}function T(t, e) {t._state === A && (t._result = e, t._state = S, 0 !== t._subscribers.length && u(z, t));}function D(t, e) {t._state === A && (t._state = x, t._result = e, u(E, t));}function k(t, e, r, n) {var o = t._subscribers,i = o.length;t._onerror = null, o[i] = e, o[i + S] = r, o[i + x] = n, 0 === i && t._state && u(z, t);}function z(t) {var e = t._subscribers,r = t._state;if (0 !== e.length) {for (var n = void 0, o = void 0, i = t._result, s = 0; s < e.length; s += 3) {n = e[s], o = e[s + r], n ? K(r, n, o, i) : o(i);}t._subscribers.length = 0;}}function O() {this.error = null;}var M = new O();function K(t, e, r, n) {var o = f(r),i = void 0,s = void 0,u = void 0,a = void 0;if (o) {if ((i = function (t, e) {try {return t(e);} catch (t) {return M.error = t, M;}}(r, n)) === M ? (a = !0, s = i.error, i.error = null) : u = !0, e === i) return void D(e, new TypeError(\"A promises callback cannot return that same promise.\"));} else i = n, u = !0;e._state !== A || (o && u ? j(e, i) : a ? D(e, s) : t === S ? T(e, i) : t === x && D(e, i));}var P = 0;function L(t) {t[C] = P++, t._state = void 0, t._result = void 0, t._subscribers = [];}function q(t, e) {this._instanceConstructor = t, this.promise = new t(_), this.promise[C] || L(this.promise), r(e) ? (this.length = e.length, this._remaining = e.length, this._result = new Array(this.length), 0 === this.length ? T(this.promise, this._result) : (this.length = this.length || 0, this._enumerate(e), 0 === this._remaining && T(this.promise, this._result))) : D(this.promise, new Error(\"Array Methods must be provided an Array\"));}function R(t) {this[C] = P++, this._result = this._state = void 0, this._subscribers = [], _ !== t && (\"function\" != typeof t && function () {throw new TypeError(\"You must pass a resolver function as the first argument to the promise constructor\");}(), this instanceof R ? function (e, t) {try {t(function (t) {j(e, t);}, function (t) {D(e, t);});} catch (t) {D(e, t);}}(this, t) : function () {throw new TypeError(\"Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.\");}());}return q.prototype._enumerate = function (t) {for (var e = 0; this._state === A && e < t.length; e++) {this._eachEntry(t[e], e);}}, q.prototype._eachEntry = function (e, t) {var r = this._instanceConstructor,n = r.resolve;if (n === b) {var o = B(e);if (o === m && e._state !== A) this._settledAt(e._state, t, e._result);else if (\"function\" != typeof o) this._remaining--, this._result[t] = e;else if (r === R) {var i = new r(_);N(i, e, o), this._willSettleAt(i, t);} else this._willSettleAt(new r(function (t) {return t(e);}), t);} else this._willSettleAt(n(e), t);}, q.prototype._settledAt = function (t, e, r) {var n = this.promise;n._state === A && (this._remaining--, t === x ? D(n, r) : this._result[e] = r), 0 === this._remaining && T(n, this._result);}, q.prototype._willSettleAt = function (t, e) {var r = this;k(t, void 0, function (t) {return r._settledAt(S, e, t);}, function (t) {return r._settledAt(x, e, t);});}, R.all = function (t) {return new q(this, t).promise;}, R.race = function (o) {var i = this;return r(o) ? new i(function (t, e) {for (var r = o.length, n = 0; n < r; n++) {i.resolve(o[n]).then(t, e);}}) : new i(function (t, e) {return e(new TypeError(\"You must pass an array to race.\"));});}, R.resolve = b, R.reject = function (t) {var e = new this(_);return D(e, t), e;}, R._setScheduler = function (t) {o = t;}, R._setAsap = function (t) {u = t;}, R._asap = u, R.prototype = { constructor: R, then: m, catch: function _catch(t) {return this.then(null, t);} }, R.polyfill = function () {var t = void 0;if (void 0 !== U) t = U;else if (\"undefined\" != typeof self) t = self;else try {t = Function(\"return this\")();} catch (t) {throw new Error(\"polyfill failed because global object is unavailable in this environment\");}var e = t.Promise;if (e) {var r = null;try {r = Object.prototype.toString.call(e.resolve());} catch (t) {}if (\"[object Promise]\" === r && !e.cast) return;}t.Promise = R;}, (R.Promise = R).polyfill(), R;}, \"object\" == typeof n && void 0 !== r ? r.exports = e() : t.ES6Promise = e();}).call(this, \"undefined\" != typeof global ? global : \"undefined\" != typeof self ? self : \"undefined\" != typeof window ? window : {});}, {}], 3: [function (u, t, e) {(function (t) {\"use strict\";var e = [];try {for (var r = [], n = [\"NFD\", \"NFC\", \"NFKD\", \"NFKC\"], o = 0; o < n.length; o++) {try {\"test\".normalize(n[o]);} catch (t) {r.push(n[o]);}}if (r.length) throw e.push(\"String.prototype.normalize (missing: \" + r.join(\", \") + \")\"), new Error(\"bad normalize\");if (String.fromCharCode(233).normalize(\"NFD\") !== String.fromCharCode(101, 769)) throw e.push(\"String.prototype.normalize (broken)\"), new Error(\"bad normalize\");} catch (t) {var i = u(\"./unorm.js\");String.prototype.normalize = function (t) {var e = i[(t || \"NFC\").toLowerCase()];if (!e) throw new RangeError(\"invalid form - \" + t);return e(this);};}var s = u(\"./base64.js\");t.atob || (e.push(\"atob\"), t.atob = s.atob), t.btoa || (e.push(\"btoa\"), t.btoa = s.btoa);u(\"./es6-promise.auto.js\");if (ArrayBuffer.isView || (e.push(\"ArrayBuffer.isView\"), ArrayBuffer.isView = function (t) {return !!t.buffer;}), t.nextTick || (e.push(\"nextTick\"), t.nextTick = function (t) {setTimeout(t, 0);}), e.length) {console.log(__f__(\"Shims Injected:\", \" at common\\\\js\\\\shims.js:1\"));for (o = 0; o < e.length; o++) {console.log(__f__(\"  - \" + e[o], \" at common\\\\js\\\\shims.js:1\"));}}}).call(this, \"undefined\" != typeof global ? global : \"undefined\" != typeof self ? self : \"undefined\" != typeof window ? window : {});}, { \"./base64.js\": 1, \"./es6-promise.auto.js\": 2, \"./unorm.js\": 4 }], 4: [function (t, d, e) {!function (t) {\"use strict\";for (var o = [null, 0, {}], f = 44032, c = 4352, h = function h(t, e) {this.codepoint = t, this.feature = e;}, i = {}, s = [], e = 0; e <= 255; ++e) {s[e] = 0;}h.fromCharCode = [function (t, e, r) {return e < 60 || 13311 < e && e < 42607 ? new h(e, o) : t(e, r);}, function (t, e, r) {var n = i[e];return n || (n = t(e, r)).feature && 10 < ++s[e >> 8 & 255] && (i[e] = n), n;}, function (t, e, r) {return r ? t(e, r) : new h(e, null);}, function (t, e, r) {var n;if (e < c || 4371 <= e && e < f || 55204 < e) return t(e, r);if (c <= e && e < 4371) {var o = {},i = 21 * (e - c);for (n = 0; n < 21; ++n) {o[4449 + n] = f + 28 * (n + i);}return new h(e, [,, o]);}var s = e - f,u = s % 28,a = [];if (0 != u) a[0] = [f + s - u, 4519 + u];else for (a[0] = [c + Math.floor(s / 588), 4449 + Math.floor(s % 588 / 28)], a[2] = {}, n = 1; n < 28; ++n) {a[2][4519 + n] = e + n;}return new h(e, a);}, function (t, e, r) {var n = (h.udata[65280 & e] || {})[e];return new h(e, n || o);}].reduceRight(function (r, n) {return function (t, e) {return n(r, t, e);};}, null), h.isHighSurrogate = function (t) {return 55296 <= t && t <= 56319;}, h.isLowSurrogate = function (t) {return 56320 <= t && t <= 57343;}, h.prototype.prepFeature = function () {this.feature || (this.feature = h.fromCharCode(this.codepoint, !0).feature);}, h.prototype.toString = function () {if (this.codepoint < 65536) return String.fromCharCode(this.codepoint);var t = this.codepoint - 65536;return String.fromCharCode(Math.floor(t / 1024) + 55296, t % 1024 + 56320);}, h.prototype.getDecomp = function () {return this.prepFeature(), this.feature[0] || null;}, h.prototype.isCompatibility = function () {return this.prepFeature(), !!this.feature[1] && 256 & this.feature[1];}, h.prototype.isExclude = function () {return this.prepFeature(), !!this.feature[1] && 512 & this.feature[1];}, h.prototype.getCanonicalClass = function () {return this.prepFeature(), this.feature[1] ? 255 & this.feature[1] : 0;}, h.prototype.getComposite = function (t) {if (this.prepFeature(), !this.feature[2]) return null;var e = this.feature[2][t.codepoint];return e ? h.fromCharCode(e) : null;};function u(t) {this.str = t, this.cursor = 0;}u.prototype.next = function () {if (this.str && this.cursor < this.str.length) {var t,e = this.str.charCodeAt(this.cursor++);return h.isHighSurrogate(e) && this.cursor < this.str.length && h.isLowSurrogate(t = this.str.charCodeAt(this.cursor)) && (e = 1024 * (e - 55296) + (t - 56320) + 65536, ++this.cursor), h.fromCharCode(e);}return this.str = null;};function a(t, e) {this.it = t, this.canonical = e, this.resBuf = [];}a.prototype.next = function () {if (0 === this.resBuf.length) {var t = this.it.next();if (!t) return null;this.resBuf = function t(e, r) {var n = r.getDecomp();if (!n || e && r.isCompatibility()) return [r];for (var o = [], i = 0; i < n.length; ++i) {var s = t(e, h.fromCharCode(n[i]));o = o.concat(s);}return o;}(this.canonical, t);}return this.resBuf.shift();};function l(t) {this.it = t, this.resBuf = [];}l.prototype.next = function () {var t;if (0 === this.resBuf.length) do {var e = this.it.next();if (!e) break;t = e.getCanonicalClass();var r = this.resBuf.length;if (0 !== t) for (; 0 < r; --r) {if (this.resBuf[r - 1].getCanonicalClass() <= t) break;}this.resBuf.splice(r, 0, e);} while (0 !== t);return this.resBuf.shift();};function p(t) {this.it = t, this.procBuf = [], this.resBuf = [], this.lastClass = null;}p.prototype.next = function () {for (; 0 === this.resBuf.length;) {var t = this.it.next();if (!t) {this.resBuf = this.procBuf, this.procBuf = [];break;}if (0 === this.procBuf.length) this.lastClass = t.getCanonicalClass(), this.procBuf.push(t);else {var e = this.procBuf[0].getComposite(t),r = t.getCanonicalClass();e && (this.lastClass < r || 0 === this.lastClass) ? this.procBuf[0] = e : (0 === r && (this.resBuf = this.procBuf, this.procBuf = []), this.lastClass = r, this.procBuf.push(t));}}return this.resBuf.shift();};function r(t, e) {for (var r, n = function (t, e) {switch (t) {case \"NFD\":return new l(new a(new u(e), !0));case \"NFKD\":return new l(new a(new u(e), !1));case \"NFC\":return new p(new l(new a(new u(e), !0)));case \"NFKC\":return new p(new l(new a(new u(e), !1)));}throw t + \" is invalid\";}(t, e), o = \"\"; r = n.next();) {o += r.toString();}return o;}h.udata = { 0: { 60: [,, { 824: 8814 }], 61: [,, { 824: 8800 }], 62: [,, { 824: 8815 }], 65: [,, { 768: 192, 769: 193, 770: 194, 771: 195, 772: 256, 774: 258, 775: 550, 776: 196, 777: 7842, 778: 197, 780: 461, 783: 512, 785: 514, 803: 7840, 805: 7680, 808: 260 }], 66: [,, { 775: 7682, 803: 7684, 817: 7686 }], 67: [,, { 769: 262, 770: 264, 775: 266, 780: 268, 807: 199 }], 68: [,, { 775: 7690, 780: 270, 803: 7692, 807: 7696, 813: 7698, 817: 7694 }], 69: [,, { 768: 200, 769: 201, 770: 202, 771: 7868, 772: 274, 774: 276, 775: 278, 776: 203, 777: 7866, 780: 282, 783: 516, 785: 518, 803: 7864, 807: 552, 808: 280, 813: 7704, 816: 7706 }], 70: [,, { 775: 7710 }], 71: [,, { 769: 500, 770: 284, 772: 7712, 774: 286, 775: 288, 780: 486, 807: 290 }], 72: [,, { 770: 292, 775: 7714, 776: 7718, 780: 542, 803: 7716, 807: 7720, 814: 7722 }], 73: [,, { 768: 204, 769: 205, 770: 206, 771: 296, 772: 298, 774: 300, 775: 304, 776: 207, 777: 7880, 780: 463, 783: 520, 785: 522, 803: 7882, 808: 302, 816: 7724 }], 74: [,, { 770: 308 }], 75: [,, { 769: 7728, 780: 488, 803: 7730, 807: 310, 817: 7732 }], 76: [,, { 769: 313, 780: 317, 803: 7734, 807: 315, 813: 7740, 817: 7738 }], 77: [,, { 769: 7742, 775: 7744, 803: 7746 }], 78: [,, { 768: 504, 769: 323, 771: 209, 775: 7748, 780: 327, 803: 7750, 807: 325, 813: 7754, 817: 7752 }], 79: [,, { 768: 210, 769: 211, 770: 212, 771: 213, 772: 332, 774: 334, 775: 558, 776: 214, 777: 7886, 779: 336, 780: 465, 783: 524, 785: 526, 795: 416, 803: 7884, 808: 490 }], 80: [,, { 769: 7764, 775: 7766 }], 82: [,, { 769: 340, 775: 7768, 780: 344, 783: 528, 785: 530, 803: 7770, 807: 342, 817: 7774 }], 83: [,, { 769: 346, 770: 348, 775: 7776, 780: 352, 803: 7778, 806: 536, 807: 350 }], 84: [,, { 775: 7786, 780: 356, 803: 7788, 806: 538, 807: 354, 813: 7792, 817: 7790 }], 85: [,, { 768: 217, 769: 218, 770: 219, 771: 360, 772: 362, 774: 364, 776: 220, 777: 7910, 778: 366, 779: 368, 780: 467, 783: 532, 785: 534, 795: 431, 803: 7908, 804: 7794, 808: 370, 813: 7798, 816: 7796 }], 86: [,, { 771: 7804, 803: 7806 }], 87: [,, { 768: 7808, 769: 7810, 770: 372, 775: 7814, 776: 7812, 803: 7816 }], 88: [,, { 775: 7818, 776: 7820 }], 89: [,, { 768: 7922, 769: 221, 770: 374, 771: 7928, 772: 562, 775: 7822, 776: 376, 777: 7926, 803: 7924 }], 90: [,, { 769: 377, 770: 7824, 775: 379, 780: 381, 803: 7826, 817: 7828 }], 97: [,, { 768: 224, 769: 225, 770: 226, 771: 227, 772: 257, 774: 259, 775: 551, 776: 228, 777: 7843, 778: 229, 780: 462, 783: 513, 785: 515, 803: 7841, 805: 7681, 808: 261 }], 98: [,, { 775: 7683, 803: 7685, 817: 7687 }], 99: [,, { 769: 263, 770: 265, 775: 267, 780: 269, 807: 231 }], 100: [,, { 775: 7691, 780: 271, 803: 7693, 807: 7697, 813: 7699, 817: 7695 }], 101: [,, { 768: 232, 769: 233, 770: 234, 771: 7869, 772: 275, 774: 277, 775: 279, 776: 235, 777: 7867, 780: 283, 783: 517, 785: 519, 803: 7865, 807: 553, 808: 281, 813: 7705, 816: 7707 }], 102: [,, { 775: 7711 }], 103: [,, { 769: 501, 770: 285, 772: 7713, 774: 287, 775: 289, 780: 487, 807: 291 }], 104: [,, { 770: 293, 775: 7715, 776: 7719, 780: 543, 803: 7717, 807: 7721, 814: 7723, 817: 7830 }], 105: [,, { 768: 236, 769: 237, 770: 238, 771: 297, 772: 299, 774: 301, 776: 239, 777: 7881, 780: 464, 783: 521, 785: 523, 803: 7883, 808: 303, 816: 7725 }], 106: [,, { 770: 309, 780: 496 }], 107: [,, { 769: 7729, 780: 489, 803: 7731, 807: 311, 817: 7733 }], 108: [,, { 769: 314, 780: 318, 803: 7735, 807: 316, 813: 7741, 817: 7739 }], 109: [,, { 769: 7743, 775: 7745, 803: 7747 }], 110: [,, { 768: 505, 769: 324, 771: 241, 775: 7749, 780: 328, 803: 7751, 807: 326, 813: 7755, 817: 7753 }], 111: [,, { 768: 242, 769: 243, 770: 244, 771: 245, 772: 333, 774: 335, 775: 559, 776: 246, 777: 7887, 779: 337, 780: 466, 783: 525, 785: 527, 795: 417, 803: 7885, 808: 491 }], 112: [,, { 769: 7765, 775: 7767 }], 114: [,, { 769: 341, 775: 7769, 780: 345, 783: 529, 785: 531, 803: 7771, 807: 343, 817: 7775 }], 115: [,, { 769: 347, 770: 349, 775: 7777, 780: 353, 803: 7779, 806: 537, 807: 351 }], 116: [,, { 775: 7787, 776: 7831, 780: 357, 803: 7789, 806: 539, 807: 355, 813: 7793, 817: 7791 }], 117: [,, { 768: 249, 769: 250, 770: 251, 771: 361, 772: 363, 774: 365, 776: 252, 777: 7911, 778: 367, 779: 369, 780: 468, 783: 533, 785: 535, 795: 432, 803: 7909, 804: 7795, 808: 371, 813: 7799, 816: 7797 }], 118: [,, { 771: 7805, 803: 7807 }], 119: [,, { 768: 7809, 769: 7811, 770: 373, 775: 7815, 776: 7813, 778: 7832, 803: 7817 }], 120: [,, { 775: 7819, 776: 7821 }], 121: [,, { 768: 7923, 769: 253, 770: 375, 771: 7929, 772: 563, 775: 7823, 776: 255, 777: 7927, 778: 7833, 803: 7925 }], 122: [,, { 769: 378, 770: 7825, 775: 380, 780: 382, 803: 7827, 817: 7829 }], 160: [[32], 256], 168: [[32, 776], 256, { 768: 8173, 769: 901, 834: 8129 }], 170: [[97], 256], 175: [[32, 772], 256], 178: [[50], 256], 179: [[51], 256], 180: [[32, 769], 256], 181: [[956], 256], 184: [[32, 807], 256], 185: [[49], 256], 186: [[111], 256], 188: [[49, 8260, 52], 256], 189: [[49, 8260, 50], 256], 190: [[51, 8260, 52], 256], 192: [[65, 768]], 193: [[65, 769]], 194: [[65, 770],, { 768: 7846, 769: 7844, 771: 7850, 777: 7848 }], 195: [[65, 771]], 196: [[65, 776],, { 772: 478 }], 197: [[65, 778],, { 769: 506 }], 198: [,, { 769: 508, 772: 482 }], 199: [[67, 807],, { 769: 7688 }], 200: [[69, 768]], 201: [[69, 769]], 202: [[69, 770],, { 768: 7872, 769: 7870, 771: 7876, 777: 7874 }], 203: [[69, 776]], 204: [[73, 768]], 205: [[73, 769]], 206: [[73, 770]], 207: [[73, 776],, { 769: 7726 }], 209: [[78, 771]], 210: [[79, 768]], 211: [[79, 769]], 212: [[79, 770],, { 768: 7890, 769: 7888, 771: 7894, 777: 7892 }], 213: [[79, 771],, { 769: 7756, 772: 556, 776: 7758 }], 214: [[79, 776],, { 772: 554 }], 216: [,, { 769: 510 }], 217: [[85, 768]], 218: [[85, 769]], 219: [[85, 770]], 220: [[85, 776],, { 768: 475, 769: 471, 772: 469, 780: 473 }], 221: [[89, 769]], 224: [[97, 768]], 225: [[97, 769]], 226: [[97, 770],, { 768: 7847, 769: 7845, 771: 7851, 777: 7849 }], 227: [[97, 771]], 228: [[97, 776],, { 772: 479 }], 229: [[97, 778],, { 769: 507 }], 230: [,, { 769: 509, 772: 483 }], 231: [[99, 807],, { 769: 7689 }], 232: [[101, 768]], 233: [[101, 769]], 234: [[101, 770],, { 768: 7873, 769: 7871, 771: 7877, 777: 7875 }], 235: [[101, 776]], 236: [[105, 768]], 237: [[105, 769]], 238: [[105, 770]], 239: [[105, 776],, { 769: 7727 }], 241: [[110, 771]], 242: [[111, 768]], 243: [[111, 769]], 244: [[111, 770],, { 768: 7891, 769: 7889, 771: 7895, 777: 7893 }], 245: [[111, 771],, { 769: 7757, 772: 557, 776: 7759 }], 246: [[111, 776],, { 772: 555 }], 248: [,, { 769: 511 }], 249: [[117, 768]], 250: [[117, 769]], 251: [[117, 770]], 252: [[117, 776],, { 768: 476, 769: 472, 772: 470, 780: 474 }], 253: [[121, 769]], 255: [[121, 776]] }, 256: { 256: [[65, 772]], 257: [[97, 772]], 258: [[65, 774],, { 768: 7856, 769: 7854, 771: 7860, 777: 7858 }], 259: [[97, 774],, { 768: 7857, 769: 7855, 771: 7861, 777: 7859 }], 260: [[65, 808]], 261: [[97, 808]], 262: [[67, 769]], 263: [[99, 769]], 264: [[67, 770]], 265: [[99, 770]], 266: [[67, 775]], 267: [[99, 775]], 268: [[67, 780]], 269: [[99, 780]], 270: [[68, 780]], 271: [[100, 780]], 274: [[69, 772],, { 768: 7700, 769: 7702 }], 275: [[101, 772],, { 768: 7701, 769: 7703 }], 276: [[69, 774]], 277: [[101, 774]], 278: [[69, 775]], 279: [[101, 775]], 280: [[69, 808]], 281: [[101, 808]], 282: [[69, 780]], 283: [[101, 780]], 284: [[71, 770]], 285: [[103, 770]], 286: [[71, 774]], 287: [[103, 774]], 288: [[71, 775]], 289: [[103, 775]], 290: [[71, 807]], 291: [[103, 807]], 292: [[72, 770]], 293: [[104, 770]], 296: [[73, 771]], 297: [[105, 771]], 298: [[73, 772]], 299: [[105, 772]], 300: [[73, 774]], 301: [[105, 774]], 302: [[73, 808]], 303: [[105, 808]], 304: [[73, 775]], 306: [[73, 74], 256], 307: [[105, 106], 256], 308: [[74, 770]], 309: [[106, 770]], 310: [[75, 807]], 311: [[107, 807]], 313: [[76, 769]], 314: [[108, 769]], 315: [[76, 807]], 316: [[108, 807]], 317: [[76, 780]], 318: [[108, 780]], 319: [[76, 183], 256], 320: [[108, 183], 256], 323: [[78, 769]], 324: [[110, 769]], 325: [[78, 807]], 326: [[110, 807]], 327: [[78, 780]], 328: [[110, 780]], 329: [[700, 110], 256], 332: [[79, 772],, { 768: 7760, 769: 7762 }], 333: [[111, 772],, { 768: 7761, 769: 7763 }], 334: [[79, 774]], 335: [[111, 774]], 336: [[79, 779]], 337: [[111, 779]], 340: [[82, 769]], 341: [[114, 769]], 342: [[82, 807]], 343: [[114, 807]], 344: [[82, 780]], 345: [[114, 780]], 346: [[83, 769],, { 775: 7780 }], 347: [[115, 769],, { 775: 7781 }], 348: [[83, 770]], 349: [[115, 770]], 350: [[83, 807]], 351: [[115, 807]], 352: [[83, 780],, { 775: 7782 }], 353: [[115, 780],, { 775: 7783 }], 354: [[84, 807]], 355: [[116, 807]], 356: [[84, 780]], 357: [[116, 780]], 360: [[85, 771],, { 769: 7800 }], 361: [[117, 771],, { 769: 7801 }], 362: [[85, 772],, { 776: 7802 }], 363: [[117, 772],, { 776: 7803 }], 364: [[85, 774]], 365: [[117, 774]], 366: [[85, 778]], 367: [[117, 778]], 368: [[85, 779]], 369: [[117, 779]], 370: [[85, 808]], 371: [[117, 808]], 372: [[87, 770]], 373: [[119, 770]], 374: [[89, 770]], 375: [[121, 770]], 376: [[89, 776]], 377: [[90, 769]], 378: [[122, 769]], 379: [[90, 775]], 380: [[122, 775]], 381: [[90, 780]], 382: [[122, 780]], 383: [[115], 256, { 775: 7835 }], 416: [[79, 795],, { 768: 7900, 769: 7898, 771: 7904, 777: 7902, 803: 7906 }], 417: [[111, 795],, { 768: 7901, 769: 7899, 771: 7905, 777: 7903, 803: 7907 }], 431: [[85, 795],, { 768: 7914, 769: 7912, 771: 7918, 777: 7916, 803: 7920 }], 432: [[117, 795],, { 768: 7915, 769: 7913, 771: 7919, 777: 7917, 803: 7921 }], 439: [,, { 780: 494 }], 452: [[68, 381], 256], 453: [[68, 382], 256], 454: [[100, 382], 256], 455: [[76, 74], 256], 456: [[76, 106], 256], 457: [[108, 106], 256], 458: [[78, 74], 256], 459: [[78, 106], 256], 460: [[110, 106], 256], 461: [[65, 780]], 462: [[97, 780]], 463: [[73, 780]], 464: [[105, 780]], 465: [[79, 780]], 466: [[111, 780]], 467: [[85, 780]], 468: [[117, 780]], 469: [[220, 772]], 470: [[252, 772]], 471: [[220, 769]], 472: [[252, 769]], 473: [[220, 780]], 474: [[252, 780]], 475: [[220, 768]], 476: [[252, 768]], 478: [[196, 772]], 479: [[228, 772]], 480: [[550, 772]], 481: [[551, 772]], 482: [[198, 772]], 483: [[230, 772]], 486: [[71, 780]], 487: [[103, 780]], 488: [[75, 780]], 489: [[107, 780]], 490: [[79, 808],, { 772: 492 }], 491: [[111, 808],, { 772: 493 }], 492: [[490, 772]], 493: [[491, 772]], 494: [[439, 780]], 495: [[658, 780]], 496: [[106, 780]], 497: [[68, 90], 256], 498: [[68, 122], 256], 499: [[100, 122], 256], 500: [[71, 769]], 501: [[103, 769]], 504: [[78, 768]], 505: [[110, 768]], 506: [[197, 769]], 507: [[229, 769]], 508: [[198, 769]], 509: [[230, 769]], 510: [[216, 769]], 511: [[248, 769]], 66045: [, 220] }, 512: { 512: [[65, 783]], 513: [[97, 783]], 514: [[65, 785]], 515: [[97, 785]], 516: [[69, 783]], 517: [[101, 783]], 518: [[69, 785]], 519: [[101, 785]], 520: [[73, 783]], 521: [[105, 783]], 522: [[73, 785]], 523: [[105, 785]], 524: [[79, 783]], 525: [[111, 783]], 526: [[79, 785]], 527: [[111, 785]], 528: [[82, 783]], 529: [[114, 783]], 530: [[82, 785]], 531: [[114, 785]], 532: [[85, 783]], 533: [[117, 783]], 534: [[85, 785]], 535: [[117, 785]], 536: [[83, 806]], 537: [[115, 806]], 538: [[84, 806]], 539: [[116, 806]], 542: [[72, 780]], 543: [[104, 780]], 550: [[65, 775],, { 772: 480 }], 551: [[97, 775],, { 772: 481 }], 552: [[69, 807],, { 774: 7708 }], 553: [[101, 807],, { 774: 7709 }], 554: [[214, 772]], 555: [[246, 772]], 556: [[213, 772]], 557: [[245, 772]], 558: [[79, 775],, { 772: 560 }], 559: [[111, 775],, { 772: 561 }], 560: [[558, 772]], 561: [[559, 772]], 562: [[89, 772]], 563: [[121, 772]], 658: [,, { 780: 495 }], 688: [[104], 256], 689: [[614], 256], 690: [[106], 256], 691: [[114], 256], 692: [[633], 256], 693: [[635], 256], 694: [[641], 256], 695: [[119], 256], 696: [[121], 256], 728: [[32, 774], 256], 729: [[32, 775], 256], 730: [[32, 778], 256], 731: [[32, 808], 256], 732: [[32, 771], 256], 733: [[32, 779], 256], 736: [[611], 256], 737: [[108], 256], 738: [[115], 256], 739: [[120], 256], 740: [[661], 256], 66272: [, 220] }, 768: { 768: [, 230], 769: [, 230], 770: [, 230], 771: [, 230], 772: [, 230], 773: [, 230], 774: [, 230], 775: [, 230], 776: [, 230, { 769: 836 }], 777: [, 230], 778: [, 230], 779: [, 230], 780: [, 230], 781: [, 230], 782: [, 230], 783: [, 230], 784: [, 230], 785: [, 230], 786: [, 230], 787: [, 230], 788: [, 230], 789: [, 232], 790: [, 220], 791: [, 220], 792: [, 220], 793: [, 220], 794: [, 232], 795: [, 216], 796: [, 220], 797: [, 220], 798: [, 220], 799: [, 220], 800: [, 220], 801: [, 202], 802: [, 202], 803: [, 220], 804: [, 220], 805: [, 220], 806: [, 220], 807: [, 202], 808: [, 202], 809: [, 220], 810: [, 220], 811: [, 220], 812: [, 220], 813: [, 220], 814: [, 220], 815: [, 220], 816: [, 220], 817: [, 220], 818: [, 220], 819: [, 220], 820: [, 1], 821: [, 1], 822: [, 1], 823: [, 1], 824: [, 1], 825: [, 220], 826: [, 220], 827: [, 220], 828: [, 220], 829: [, 230], 830: [, 230], 831: [, 230], 832: [[768], 230], 833: [[769], 230], 834: [, 230], 835: [[787], 230], 836: [[776, 769], 230], 837: [, 240], 838: [, 230], 839: [, 220], 840: [, 220], 841: [, 220], 842: [, 230], 843: [, 230], 844: [, 230], 845: [, 220], 846: [, 220], 848: [, 230], 849: [, 230], 850: [, 230], 851: [, 220], 852: [, 220], 853: [, 220], 854: [, 220], 855: [, 230], 856: [, 232], 857: [, 220], 858: [, 220], 859: [, 230], 860: [, 233], 861: [, 234], 862: [, 234], 863: [, 233], 864: [, 234], 865: [, 234], 866: [, 233], 867: [, 230], 868: [, 230], 869: [, 230], 870: [, 230], 871: [, 230], 872: [, 230], 873: [, 230], 874: [, 230], 875: [, 230], 876: [, 230], 877: [, 230], 878: [, 230], 879: [, 230], 884: [[697]], 890: [[32, 837], 256], 894: [[59]], 900: [[32, 769], 256], 901: [[168, 769]], 902: [[913, 769]], 903: [[183]], 904: [[917, 769]], 905: [[919, 769]], 906: [[921, 769]], 908: [[927, 769]], 910: [[933, 769]], 911: [[937, 769]], 912: [[970, 769]], 913: [,, { 768: 8122, 769: 902, 772: 8121, 774: 8120, 787: 7944, 788: 7945, 837: 8124 }], 917: [,, { 768: 8136, 769: 904, 787: 7960, 788: 7961 }], 919: [,, { 768: 8138, 769: 905, 787: 7976, 788: 7977, 837: 8140 }], 921: [,, { 768: 8154, 769: 906, 772: 8153, 774: 8152, 776: 938, 787: 7992, 788: 7993 }], 927: [,, { 768: 8184, 769: 908, 787: 8008, 788: 8009 }], 929: [,, { 788: 8172 }], 933: [,, { 768: 8170, 769: 910, 772: 8169, 774: 8168, 776: 939, 788: 8025 }], 937: [,, { 768: 8186, 769: 911, 787: 8040, 788: 8041, 837: 8188 }], 938: [[921, 776]], 939: [[933, 776]], 940: [[945, 769],, { 837: 8116 }], 941: [[949, 769]], 942: [[951, 769],, { 837: 8132 }], 943: [[953, 769]], 944: [[971, 769]], 945: [,, { 768: 8048, 769: 940, 772: 8113, 774: 8112, 787: 7936, 788: 7937, 834: 8118, 837: 8115 }], 949: [,, { 768: 8050, 769: 941, 787: 7952, 788: 7953 }], 951: [,, { 768: 8052, 769: 942, 787: 7968, 788: 7969, 834: 8134, 837: 8131 }], 953: [,, { 768: 8054, 769: 943, 772: 8145, 774: 8144, 776: 970, 787: 7984, 788: 7985, 834: 8150 }], 959: [,, { 768: 8056, 769: 972, 787: 8e3, 788: 8001 }], 961: [,, { 787: 8164, 788: 8165 }], 965: [,, { 768: 8058, 769: 973, 772: 8161, 774: 8160, 776: 971, 787: 8016, 788: 8017, 834: 8166 }], 969: [,, { 768: 8060, 769: 974, 787: 8032, 788: 8033, 834: 8182, 837: 8179 }], 970: [[953, 776],, { 768: 8146, 769: 912, 834: 8151 }], 971: [[965, 776],, { 768: 8162, 769: 944, 834: 8167 }], 972: [[959, 769]], 973: [[965, 769]], 974: [[969, 769],, { 837: 8180 }], 976: [[946], 256], 977: [[952], 256], 978: [[933], 256, { 769: 979, 776: 980 }], 979: [[978, 769]], 980: [[978, 776]], 981: [[966], 256], 982: [[960], 256], 1008: [[954], 256], 1009: [[961], 256], 1010: [[962], 256], 1012: [[920], 256], 1013: [[949], 256], 1017: [[931], 256], 66422: [, 230], 66423: [, 230], 66424: [, 230], 66425: [, 230], 66426: [, 230] }, 1024: { 1024: [[1045, 768]], 1025: [[1045, 776]], 1027: [[1043, 769]], 1030: [,, { 776: 1031 }], 1031: [[1030, 776]], 1036: [[1050, 769]], 1037: [[1048, 768]], 1038: [[1059, 774]], 1040: [,, { 774: 1232, 776: 1234 }], 1043: [,, { 769: 1027 }], 1045: [,, { 768: 1024, 774: 1238, 776: 1025 }], 1046: [,, { 774: 1217, 776: 1244 }], 1047: [,, { 776: 1246 }], 1048: [,, { 768: 1037, 772: 1250, 774: 1049, 776: 1252 }], 1049: [[1048, 774]], 1050: [,, { 769: 1036 }], 1054: [,, { 776: 1254 }], 1059: [,, { 772: 1262, 774: 1038, 776: 1264, 779: 1266 }], 1063: [,, { 776: 1268 }], 1067: [,, { 776: 1272 }], 1069: [,, { 776: 1260 }], 1072: [,, { 774: 1233, 776: 1235 }], 1075: [,, { 769: 1107 }], 1077: [,, { 768: 1104, 774: 1239, 776: 1105 }], 1078: [,, { 774: 1218, 776: 1245 }], 1079: [,, { 776: 1247 }], 1080: [,, { 768: 1117, 772: 1251, 774: 1081, 776: 1253 }], 1081: [[1080, 774]], 1082: [,, { 769: 1116 }], 1086: [,, { 776: 1255 }], 1091: [,, { 772: 1263, 774: 1118, 776: 1265, 779: 1267 }], 1095: [,, { 776: 1269 }], 1099: [,, { 776: 1273 }], 1101: [,, { 776: 1261 }], 1104: [[1077, 768]], 1105: [[1077, 776]], 1107: [[1075, 769]], 1110: [,, { 776: 1111 }], 1111: [[1110, 776]], 1116: [[1082, 769]], 1117: [[1080, 768]], 1118: [[1091, 774]], 1140: [,, { 783: 1142 }], 1141: [,, { 783: 1143 }], 1142: [[1140, 783]], 1143: [[1141, 783]], 1155: [, 230], 1156: [, 230], 1157: [, 230], 1158: [, 230], 1159: [, 230], 1217: [[1046, 774]], 1218: [[1078, 774]], 1232: [[1040, 774]], 1233: [[1072, 774]], 1234: [[1040, 776]], 1235: [[1072, 776]], 1238: [[1045, 774]], 1239: [[1077, 774]], 1240: [,, { 776: 1242 }], 1241: [,, { 776: 1243 }], 1242: [[1240, 776]], 1243: [[1241, 776]], 1244: [[1046, 776]], 1245: [[1078, 776]], 1246: [[1047, 776]], 1247: [[1079, 776]], 1250: [[1048, 772]], 1251: [[1080, 772]], 1252: [[1048, 776]], 1253: [[1080, 776]], 1254: [[1054, 776]], 1255: [[1086, 776]], 1256: [,, { 776: 1258 }], 1257: [,, { 776: 1259 }], 1258: [[1256, 776]], 1259: [[1257, 776]], 1260: [[1069, 776]], 1261: [[1101, 776]], 1262: [[1059, 772]], 1263: [[1091, 772]], 1264: [[1059, 776]], 1265: [[1091, 776]], 1266: [[1059, 779]], 1267: [[1091, 779]], 1268: [[1063, 776]], 1269: [[1095, 776]], 1272: [[1067, 776]], 1273: [[1099, 776]] }, 1280: { 1415: [[1381, 1410], 256], 1425: [, 220], 1426: [, 230], 1427: [, 230], 1428: [, 230], 1429: [, 230], 1430: [, 220], 1431: [, 230], 1432: [, 230], 1433: [, 230], 1434: [, 222], 1435: [, 220], 1436: [, 230], 1437: [, 230], 1438: [, 230], 1439: [, 230], 1440: [, 230], 1441: [, 230], 1442: [, 220], 1443: [, 220], 1444: [, 220], 1445: [, 220], 1446: [, 220], 1447: [, 220], 1448: [, 230], 1449: [, 230], 1450: [, 220], 1451: [, 230], 1452: [, 230], 1453: [, 222], 1454: [, 228], 1455: [, 230], 1456: [, 10], 1457: [, 11], 1458: [, 12], 1459: [, 13], 1460: [, 14], 1461: [, 15], 1462: [, 16], 1463: [, 17], 1464: [, 18], 1465: [, 19], 1466: [, 19], 1467: [, 20], 1468: [, 21], 1469: [, 22], 1471: [, 23], 1473: [, 24], 1474: [, 25], 1476: [, 230], 1477: [, 220], 1479: [, 18] }, 1536: { 1552: [, 230], 1553: [, 230], 1554: [, 230], 1555: [, 230], 1556: [, 230], 1557: [, 230], 1558: [, 230], 1559: [, 230], 1560: [, 30], 1561: [, 31], 1562: [, 32], 1570: [[1575, 1619]], 1571: [[1575, 1620]], 1572: [[1608, 1620]], 1573: [[1575, 1621]], 1574: [[1610, 1620]], 1575: [,, { 1619: 1570, 1620: 1571, 1621: 1573 }], 1608: [,, { 1620: 1572 }], 1610: [,, { 1620: 1574 }], 1611: [, 27], 1612: [, 28], 1613: [, 29], 1614: [, 30], 1615: [, 31], 1616: [, 32], 1617: [, 33], 1618: [, 34], 1619: [, 230], 1620: [, 230], 1621: [, 220], 1622: [, 220], 1623: [, 230], 1624: [, 230], 1625: [, 230], 1626: [, 230], 1627: [, 230], 1628: [, 220], 1629: [, 230], 1630: [, 230], 1631: [, 220], 1648: [, 35], 1653: [[1575, 1652], 256], 1654: [[1608, 1652], 256], 1655: [[1735, 1652], 256], 1656: [[1610, 1652], 256], 1728: [[1749, 1620]], 1729: [,, { 1620: 1730 }], 1730: [[1729, 1620]], 1746: [,, { 1620: 1747 }], 1747: [[1746, 1620]], 1749: [,, { 1620: 1728 }], 1750: [, 230], 1751: [, 230], 1752: [, 230], 1753: [, 230], 1754: [, 230], 1755: [, 230], 1756: [, 230], 1759: [, 230], 1760: [, 230], 1761: [, 230], 1762: [, 230], 1763: [, 220], 1764: [, 230], 1767: [, 230], 1768: [, 230], 1770: [, 220], 1771: [, 230], 1772: [, 230], 1773: [, 220] }, 1792: { 1809: [, 36], 1840: [, 230], 1841: [, 220], 1842: [, 230], 1843: [, 230], 1844: [, 220], 1845: [, 230], 1846: [, 230], 1847: [, 220], 1848: [, 220], 1849: [, 220], 1850: [, 230], 1851: [, 220], 1852: [, 220], 1853: [, 230], 1854: [, 220], 1855: [, 230], 1856: [, 230], 1857: [, 230], 1858: [, 220], 1859: [, 230], 1860: [, 220], 1861: [, 230], 1862: [, 220], 1863: [, 230], 1864: [, 220], 1865: [, 230], 1866: [, 230], 2027: [, 230], 2028: [, 230], 2029: [, 230], 2030: [, 230], 2031: [, 230], 2032: [, 230], 2033: [, 230], 2034: [, 220], 2035: [, 230] }, 2048: { 2070: [, 230], 2071: [, 230], 2072: [, 230], 2073: [, 230], 2075: [, 230], 2076: [, 230], 2077: [, 230], 2078: [, 230], 2079: [, 230], 2080: [, 230], 2081: [, 230], 2082: [, 230], 2083: [, 230], 2085: [, 230], 2086: [, 230], 2087: [, 230], 2089: [, 230], 2090: [, 230], 2091: [, 230], 2092: [, 230], 2093: [, 230], 2137: [, 220], 2138: [, 220], 2139: [, 220], 2276: [, 230], 2277: [, 230], 2278: [, 220], 2279: [, 230], 2280: [, 230], 2281: [, 220], 2282: [, 230], 2283: [, 230], 2284: [, 230], 2285: [, 220], 2286: [, 220], 2287: [, 220], 2288: [, 27], 2289: [, 28], 2290: [, 29], 2291: [, 230], 2292: [, 230], 2293: [, 230], 2294: [, 220], 2295: [, 230], 2296: [, 230], 2297: [, 220], 2298: [, 220], 2299: [, 230], 2300: [, 230], 2301: [, 230], 2302: [, 230], 2303: [, 230] }, 2304: { 2344: [,, { 2364: 2345 }], 2345: [[2344, 2364]], 2352: [,, { 2364: 2353 }], 2353: [[2352, 2364]], 2355: [,, { 2364: 2356 }], 2356: [[2355, 2364]], 2364: [, 7], 2381: [, 9], 2385: [, 230], 2386: [, 220], 2387: [, 230], 2388: [, 230], 2392: [[2325, 2364], 512], 2393: [[2326, 2364], 512], 2394: [[2327, 2364], 512], 2395: [[2332, 2364], 512], 2396: [[2337, 2364], 512], 2397: [[2338, 2364], 512], 2398: [[2347, 2364], 512], 2399: [[2351, 2364], 512], 2492: [, 7], 2503: [,, { 2494: 2507, 2519: 2508 }], 2507: [[2503, 2494]], 2508: [[2503, 2519]], 2509: [, 9], 2524: [[2465, 2492], 512], 2525: [[2466, 2492], 512], 2527: [[2479, 2492], 512] }, 2560: { 2611: [[2610, 2620], 512], 2614: [[2616, 2620], 512], 2620: [, 7], 2637: [, 9], 2649: [[2582, 2620], 512], 2650: [[2583, 2620], 512], 2651: [[2588, 2620], 512], 2654: [[2603, 2620], 512], 2748: [, 7], 2765: [, 9], 68109: [, 220], 68111: [, 230], 68152: [, 230], 68153: [, 1], 68154: [, 220], 68159: [, 9], 68325: [, 230], 68326: [, 220] }, 2816: { 2876: [, 7], 2887: [,, { 2878: 2891, 2902: 2888, 2903: 2892 }], 2888: [[2887, 2902]], 2891: [[2887, 2878]], 2892: [[2887, 2903]], 2893: [, 9], 2908: [[2849, 2876], 512], 2909: [[2850, 2876], 512], 2962: [,, { 3031: 2964 }], 2964: [[2962, 3031]], 3014: [,, { 3006: 3018, 3031: 3020 }], 3015: [,, { 3006: 3019 }], 3018: [[3014, 3006]], 3019: [[3015, 3006]], 3020: [[3014, 3031]], 3021: [, 9] }, 3072: { 3142: [,, { 3158: 3144 }], 3144: [[3142, 3158]], 3149: [, 9], 3157: [, 84], 3158: [, 91], 3260: [, 7], 3263: [,, { 3285: 3264 }], 3264: [[3263, 3285]], 3270: [,, { 3266: 3274, 3285: 3271, 3286: 3272 }], 3271: [[3270, 3285]], 3272: [[3270, 3286]], 3274: [[3270, 3266],, { 3285: 3275 }], 3275: [[3274, 3285]], 3277: [, 9] }, 3328: { 3398: [,, { 3390: 3402, 3415: 3404 }], 3399: [,, { 3390: 3403 }], 3402: [[3398, 3390]], 3403: [[3399, 3390]], 3404: [[3398, 3415]], 3405: [, 9], 3530: [, 9], 3545: [,, { 3530: 3546, 3535: 3548, 3551: 3550 }], 3546: [[3545, 3530]], 3548: [[3545, 3535],, { 3530: 3549 }], 3549: [[3548, 3530]], 3550: [[3545, 3551]] }, 3584: { 3635: [[3661, 3634], 256], 3640: [, 103], 3641: [, 103], 3642: [, 9], 3656: [, 107], 3657: [, 107], 3658: [, 107], 3659: [, 107], 3763: [[3789, 3762], 256], 3768: [, 118], 3769: [, 118], 3784: [, 122], 3785: [, 122], 3786: [, 122], 3787: [, 122], 3804: [[3755, 3737], 256], 3805: [[3755, 3745], 256] }, 3840: { 3852: [[3851], 256], 3864: [, 220], 3865: [, 220], 3893: [, 220], 3895: [, 220], 3897: [, 216], 3907: [[3906, 4023], 512], 3917: [[3916, 4023], 512], 3922: [[3921, 4023], 512], 3927: [[3926, 4023], 512], 3932: [[3931, 4023], 512], 3945: [[3904, 4021], 512], 3953: [, 129], 3954: [, 130], 3955: [[3953, 3954], 512], 3956: [, 132], 3957: [[3953, 3956], 512], 3958: [[4018, 3968], 512], 3959: [[4018, 3969], 256], 3960: [[4019, 3968], 512], 3961: [[4019, 3969], 256], 3962: [, 130], 3963: [, 130], 3964: [, 130], 3965: [, 130], 3968: [, 130], 3969: [[3953, 3968], 512], 3970: [, 230], 3971: [, 230], 3972: [, 9], 3974: [, 230], 3975: [, 230], 3987: [[3986, 4023], 512], 3997: [[3996, 4023], 512], 4002: [[4001, 4023], 512], 4007: [[4006, 4023], 512], 4012: [[4011, 4023], 512], 4025: [[3984, 4021], 512], 4038: [, 220] }, 4096: { 4133: [,, { 4142: 4134 }], 4134: [[4133, 4142]], 4151: [, 7], 4153: [, 9], 4154: [, 9], 4237: [, 220], 4348: [[4316], 256], 69702: [, 9], 69759: [, 9], 69785: [,, { 69818: 69786 }], 69786: [[69785, 69818]], 69787: [,, { 69818: 69788 }], 69788: [[69787, 69818]], 69797: [,, { 69818: 69803 }], 69803: [[69797, 69818]], 69817: [, 9], 69818: [, 7] }, 4352: { 69888: [, 230], 69889: [, 230], 69890: [, 230], 69934: [[69937, 69927]], 69935: [[69938, 69927]], 69937: [,, { 69927: 69934 }], 69938: [,, { 69927: 69935 }], 69939: [, 9], 69940: [, 9], 70003: [, 7], 70080: [, 9] }, 4608: { 70197: [, 9], 70198: [, 7], 70377: [, 7], 70378: [, 9] }, 4864: { 4957: [, 230], 4958: [, 230], 4959: [, 230], 70460: [, 7], 70471: [,, { 70462: 70475, 70487: 70476 }], 70475: [[70471, 70462]], 70476: [[70471, 70487]], 70477: [, 9], 70502: [, 230], 70503: [, 230], 70504: [, 230], 70505: [, 230], 70506: [, 230], 70507: [, 230], 70508: [, 230], 70512: [, 230], 70513: [, 230], 70514: [, 230], 70515: [, 230], 70516: [, 230] }, 5120: { 70841: [,, { 70832: 70844, 70842: 70843, 70845: 70846 }], 70843: [[70841, 70842]], 70844: [[70841, 70832]], 70846: [[70841, 70845]], 70850: [, 9], 70851: [, 7] }, 5376: { 71096: [,, { 71087: 71098 }], 71097: [,, { 71087: 71099 }], 71098: [[71096, 71087]], 71099: [[71097, 71087]], 71103: [, 9], 71104: [, 7] }, 5632: { 71231: [, 9], 71350: [, 9], 71351: [, 7] }, 5888: { 5908: [, 9], 5940: [, 9], 6098: [, 9], 6109: [, 230] }, 6144: { 6313: [, 228] }, 6400: { 6457: [, 222], 6458: [, 230], 6459: [, 220] }, 6656: { 6679: [, 230], 6680: [, 220], 6752: [, 9], 6773: [, 230], 6774: [, 230], 6775: [, 230], 6776: [, 230], 6777: [, 230], 6778: [, 230], 6779: [, 230], 6780: [, 230], 6783: [, 220], 6832: [, 230], 6833: [, 230], 6834: [, 230], 6835: [, 230], 6836: [, 230], 6837: [, 220], 6838: [, 220], 6839: [, 220], 6840: [, 220], 6841: [, 220], 6842: [, 220], 6843: [, 230], 6844: [, 230], 6845: [, 220] }, 6912: { 6917: [,, { 6965: 6918 }], 6918: [[6917, 6965]], 6919: [,, { 6965: 6920 }], 6920: [[6919, 6965]], 6921: [,, { 6965: 6922 }], 6922: [[6921, 6965]], 6923: [,, { 6965: 6924 }], 6924: [[6923, 6965]], 6925: [,, { 6965: 6926 }], 6926: [[6925, 6965]], 6929: [,, { 6965: 6930 }], 6930: [[6929, 6965]], 6964: [, 7], 6970: [,, { 6965: 6971 }], 6971: [[6970, 6965]], 6972: [,, { 6965: 6973 }], 6973: [[6972, 6965]], 6974: [,, { 6965: 6976 }], 6975: [,, { 6965: 6977 }], 6976: [[6974, 6965]], 6977: [[6975, 6965]], 6978: [,, { 6965: 6979 }], 6979: [[6978, 6965]], 6980: [, 9], 7019: [, 230], 7020: [, 220], 7021: [, 230], 7022: [, 230], 7023: [, 230], 7024: [, 230], 7025: [, 230], 7026: [, 230], 7027: [, 230], 7082: [, 9], 7083: [, 9], 7142: [, 7], 7154: [, 9], 7155: [, 9] }, 7168: { 7223: [, 7], 7376: [, 230], 7377: [, 230], 7378: [, 230], 7380: [, 1], 7381: [, 220], 7382: [, 220], 7383: [, 220], 7384: [, 220], 7385: [, 220], 7386: [, 230], 7387: [, 230], 7388: [, 220], 7389: [, 220], 7390: [, 220], 7391: [, 220], 7392: [, 230], 7394: [, 1], 7395: [, 1], 7396: [, 1], 7397: [, 1], 7398: [, 1], 7399: [, 1], 7400: [, 1], 7405: [, 220], 7412: [, 230], 7416: [, 230], 7417: [, 230] }, 7424: { 7468: [[65], 256], 7469: [[198], 256], 7470: [[66], 256], 7472: [[68], 256], 7473: [[69], 256], 7474: [[398], 256], 7475: [[71], 256], 7476: [[72], 256], 7477: [[73], 256], 7478: [[74], 256], 7479: [[75], 256], 7480: [[76], 256], 7481: [[77], 256], 7482: [[78], 256], 7484: [[79], 256], 7485: [[546], 256], 7486: [[80], 256], 7487: [[82], 256], 7488: [[84], 256], 7489: [[85], 256], 7490: [[87], 256], 7491: [[97], 256], 7492: [[592], 256], 7493: [[593], 256], 7494: [[7426], 256], 7495: [[98], 256], 7496: [[100], 256], 7497: [[101], 256], 7498: [[601], 256], 7499: [[603], 256], 7500: [[604], 256], 7501: [[103], 256], 7503: [[107], 256], 7504: [[109], 256], 7505: [[331], 256], 7506: [[111], 256], 7507: [[596], 256], 7508: [[7446], 256], 7509: [[7447], 256], 7510: [[112], 256], 7511: [[116], 256], 7512: [[117], 256], 7513: [[7453], 256], 7514: [[623], 256], 7515: [[118], 256], 7516: [[7461], 256], 7517: [[946], 256], 7518: [[947], 256], 7519: [[948], 256], 7520: [[966], 256], 7521: [[967], 256], 7522: [[105], 256], 7523: [[114], 256], 7524: [[117], 256], 7525: [[118], 256], 7526: [[946], 256], 7527: [[947], 256], 7528: [[961], 256], 7529: [[966], 256], 7530: [[967], 256], 7544: [[1085], 256], 7579: [[594], 256], 7580: [[99], 256], 7581: [[597], 256], 7582: [[240], 256], 7583: [[604], 256], 7584: [[102], 256], 7585: [[607], 256], 7586: [[609], 256], 7587: [[613], 256], 7588: [[616], 256], 7589: [[617], 256], 7590: [[618], 256], 7591: [[7547], 256], 7592: [[669], 256], 7593: [[621], 256], 7594: [[7557], 256], 7595: [[671], 256], 7596: [[625], 256], 7597: [[624], 256], 7598: [[626], 256], 7599: [[627], 256], 7600: [[628], 256], 7601: [[629], 256], 7602: [[632], 256], 7603: [[642], 256], 7604: [[643], 256], 7605: [[427], 256], 7606: [[649], 256], 7607: [[650], 256], 7608: [[7452], 256], 7609: [[651], 256], 7610: [[652], 256], 7611: [[122], 256], 7612: [[656], 256], 7613: [[657], 256], 7614: [[658], 256], 7615: [[952], 256], 7616: [, 230], 7617: [, 230], 7618: [, 220], 7619: [, 230], 7620: [, 230], 7621: [, 230], 7622: [, 230], 7623: [, 230], 7624: [, 230], 7625: [, 230], 7626: [, 220], 7627: [, 230], 7628: [, 230], 7629: [, 234], 7630: [, 214], 7631: [, 220], 7632: [, 202], 7633: [, 230], 7634: [, 230], 7635: [, 230], 7636: [, 230], 7637: [, 230], 7638: [, 230], 7639: [, 230], 7640: [, 230], 7641: [, 230], 7642: [, 230], 7643: [, 230], 7644: [, 230], 7645: [, 230], 7646: [, 230], 7647: [, 230], 7648: [, 230], 7649: [, 230], 7650: [, 230], 7651: [, 230], 7652: [, 230], 7653: [, 230], 7654: [, 230], 7655: [, 230], 7656: [, 230], 7657: [, 230], 7658: [, 230], 7659: [, 230], 7660: [, 230], 7661: [, 230], 7662: [, 230], 7663: [, 230], 7664: [, 230], 7665: [, 230], 7666: [, 230], 7667: [, 230], 7668: [, 230], 7669: [, 230], 7676: [, 233], 7677: [, 220], 7678: [, 230], 7679: [, 220] }, 7680: { 7680: [[65, 805]], 7681: [[97, 805]], 7682: [[66, 775]], 7683: [[98, 775]], 7684: [[66, 803]], 7685: [[98, 803]], 7686: [[66, 817]], 7687: [[98, 817]], 7688: [[199, 769]], 7689: [[231, 769]], 7690: [[68, 775]], 7691: [[100, 775]], 7692: [[68, 803]], 7693: [[100, 803]], 7694: [[68, 817]], 7695: [[100, 817]], 7696: [[68, 807]], 7697: [[100, 807]], 7698: [[68, 813]], 7699: [[100, 813]], 7700: [[274, 768]], 7701: [[275, 768]], 7702: [[274, 769]], 7703: [[275, 769]], 7704: [[69, 813]], 7705: [[101, 813]], 7706: [[69, 816]], 7707: [[101, 816]], 7708: [[552, 774]], 7709: [[553, 774]], 7710: [[70, 775]], 7711: [[102, 775]], 7712: [[71, 772]], 7713: [[103, 772]], 7714: [[72, 775]], 7715: [[104, 775]], 7716: [[72, 803]], 7717: [[104, 803]], 7718: [[72, 776]], 7719: [[104, 776]], 7720: [[72, 807]], 7721: [[104, 807]], 7722: [[72, 814]], 7723: [[104, 814]], 7724: [[73, 816]], 7725: [[105, 816]], 7726: [[207, 769]], 7727: [[239, 769]], 7728: [[75, 769]], 7729: [[107, 769]], 7730: [[75, 803]], 7731: [[107, 803]], 7732: [[75, 817]], 7733: [[107, 817]], 7734: [[76, 803],, { 772: 7736 }], 7735: [[108, 803],, { 772: 7737 }], 7736: [[7734, 772]], 7737: [[7735, 772]], 7738: [[76, 817]], 7739: [[108, 817]], 7740: [[76, 813]], 7741: [[108, 813]], 7742: [[77, 769]], 7743: [[109, 769]], 7744: [[77, 775]], 7745: [[109, 775]], 7746: [[77, 803]], 7747: [[109, 803]], 7748: [[78, 775]], 7749: [[110, 775]], 7750: [[78, 803]], 7751: [[110, 803]], 7752: [[78, 817]], 7753: [[110, 817]], 7754: [[78, 813]], 7755: [[110, 813]], 7756: [[213, 769]], 7757: [[245, 769]], 7758: [[213, 776]], 7759: [[245, 776]], 7760: [[332, 768]], 7761: [[333, 768]], 7762: [[332, 769]], 7763: [[333, 769]], 7764: [[80, 769]], 7765: [[112, 769]], 7766: [[80, 775]], 7767: [[112, 775]], 7768: [[82, 775]], 7769: [[114, 775]], 7770: [[82, 803],, { 772: 7772 }], 7771: [[114, 803],, { 772: 7773 }], 7772: [[7770, 772]], 7773: [[7771, 772]], 7774: [[82, 817]], 7775: [[114, 817]], 7776: [[83, 775]], 7777: [[115, 775]], 7778: [[83, 803],, { 775: 7784 }], 7779: [[115, 803],, { 775: 7785 }], 7780: [[346, 775]], 7781: [[347, 775]], 7782: [[352, 775]], 7783: [[353, 775]], 7784: [[7778, 775]], 7785: [[7779, 775]], 7786: [[84, 775]], 7787: [[116, 775]], 7788: [[84, 803]], 7789: [[116, 803]], 7790: [[84, 817]], 7791: [[116, 817]], 7792: [[84, 813]], 7793: [[116, 813]], 7794: [[85, 804]], 7795: [[117, 804]], 7796: [[85, 816]], 7797: [[117, 816]], 7798: [[85, 813]], 7799: [[117, 813]], 7800: [[360, 769]], 7801: [[361, 769]], 7802: [[362, 776]], 7803: [[363, 776]], 7804: [[86, 771]], 7805: [[118, 771]], 7806: [[86, 803]], 7807: [[118, 803]], 7808: [[87, 768]], 7809: [[119, 768]], 7810: [[87, 769]], 7811: [[119, 769]], 7812: [[87, 776]], 7813: [[119, 776]], 7814: [[87, 775]], 7815: [[119, 775]], 7816: [[87, 803]], 7817: [[119, 803]], 7818: [[88, 775]], 7819: [[120, 775]], 7820: [[88, 776]], 7821: [[120, 776]], 7822: [[89, 775]], 7823: [[121, 775]], 7824: [[90, 770]], 7825: [[122, 770]], 7826: [[90, 803]], 7827: [[122, 803]], 7828: [[90, 817]], 7829: [[122, 817]], 7830: [[104, 817]], 7831: [[116, 776]], 7832: [[119, 778]], 7833: [[121, 778]], 7834: [[97, 702], 256], 7835: [[383, 775]], 7840: [[65, 803],, { 770: 7852, 774: 7862 }], 7841: [[97, 803],, { 770: 7853, 774: 7863 }], 7842: [[65, 777]], 7843: [[97, 777]], 7844: [[194, 769]], 7845: [[226, 769]], 7846: [[194, 768]], 7847: [[226, 768]], 7848: [[194, 777]], 7849: [[226, 777]], 7850: [[194, 771]], 7851: [[226, 771]], 7852: [[7840, 770]], 7853: [[7841, 770]], 7854: [[258, 769]], 7855: [[259, 769]], 7856: [[258, 768]], 7857: [[259, 768]], 7858: [[258, 777]], 7859: [[259, 777]], 7860: [[258, 771]], 7861: [[259, 771]], 7862: [[7840, 774]], 7863: [[7841, 774]], 7864: [[69, 803],, { 770: 7878 }], 7865: [[101, 803],, { 770: 7879 }], 7866: [[69, 777]], 7867: [[101, 777]], 7868: [[69, 771]], 7869: [[101, 771]], 7870: [[202, 769]], 7871: [[234, 769]], 7872: [[202, 768]], 7873: [[234, 768]], 7874: [[202, 777]], 7875: [[234, 777]], 7876: [[202, 771]], 7877: [[234, 771]], 7878: [[7864, 770]], 7879: [[7865, 770]], 7880: [[73, 777]], 7881: [[105, 777]], 7882: [[73, 803]], 7883: [[105, 803]], 7884: [[79, 803],, { 770: 7896 }], 7885: [[111, 803],, { 770: 7897 }], 7886: [[79, 777]], 7887: [[111, 777]], 7888: [[212, 769]], 7889: [[244, 769]], 7890: [[212, 768]], 7891: [[244, 768]], 7892: [[212, 777]], 7893: [[244, 777]], 7894: [[212, 771]], 7895: [[244, 771]], 7896: [[7884, 770]], 7897: [[7885, 770]], 7898: [[416, 769]], 7899: [[417, 769]], 7900: [[416, 768]], 7901: [[417, 768]], 7902: [[416, 777]], 7903: [[417, 777]], 7904: [[416, 771]], 7905: [[417, 771]], 7906: [[416, 803]], 7907: [[417, 803]], 7908: [[85, 803]], 7909: [[117, 803]], 7910: [[85, 777]], 7911: [[117, 777]], 7912: [[431, 769]], 7913: [[432, 769]], 7914: [[431, 768]], 7915: [[432, 768]], 7916: [[431, 777]], 7917: [[432, 777]], 7918: [[431, 771]], 7919: [[432, 771]], 7920: [[431, 803]], 7921: [[432, 803]], 7922: [[89, 768]], 7923: [[121, 768]], 7924: [[89, 803]], 7925: [[121, 803]], 7926: [[89, 777]], 7927: [[121, 777]], 7928: [[89, 771]], 7929: [[121, 771]] }, 7936: { 7936: [[945, 787],, { 768: 7938, 769: 7940, 834: 7942, 837: 8064 }], 7937: [[945, 788],, { 768: 7939, 769: 7941, 834: 7943, 837: 8065 }], 7938: [[7936, 768],, { 837: 8066 }], 7939: [[7937, 768],, { 837: 8067 }], 7940: [[7936, 769],, { 837: 8068 }], 7941: [[7937, 769],, { 837: 8069 }], 7942: [[7936, 834],, { 837: 8070 }], 7943: [[7937, 834],, { 837: 8071 }], 7944: [[913, 787],, { 768: 7946, 769: 7948, 834: 7950, 837: 8072 }], 7945: [[913, 788],, { 768: 7947, 769: 7949, 834: 7951, 837: 8073 }], 7946: [[7944, 768],, { 837: 8074 }], 7947: [[7945, 768],, { 837: 8075 }], 7948: [[7944, 769],, { 837: 8076 }], 7949: [[7945, 769],, { 837: 8077 }], 7950: [[7944, 834],, { 837: 8078 }], 7951: [[7945, 834],, { 837: 8079 }], 7952: [[949, 787],, { 768: 7954, 769: 7956 }], 7953: [[949, 788],, { 768: 7955, 769: 7957 }], 7954: [[7952, 768]], 7955: [[7953, 768]], 7956: [[7952, 769]], 7957: [[7953, 769]], 7960: [[917, 787],, { 768: 7962, 769: 7964 }], 7961: [[917, 788],, { 768: 7963, 769: 7965 }], 7962: [[7960, 768]], 7963: [[7961, 768]], 7964: [[7960, 769]], 7965: [[7961, 769]], 7968: [[951, 787],, { 768: 7970, 769: 7972, 834: 7974, 837: 8080 }], 7969: [[951, 788],, { 768: 7971, 769: 7973, 834: 7975, 837: 8081 }], 7970: [[7968, 768],, { 837: 8082 }], 7971: [[7969, 768],, { 837: 8083 }], 7972: [[7968, 769],, { 837: 8084 }], 7973: [[7969, 769],, { 837: 8085 }], 7974: [[7968, 834],, { 837: 8086 }], 7975: [[7969, 834],, { 837: 8087 }], 7976: [[919, 787],, { 768: 7978, 769: 7980, 834: 7982, 837: 8088 }], 7977: [[919, 788],, { 768: 7979, 769: 7981, 834: 7983, 837: 8089 }], 7978: [[7976, 768],, { 837: 8090 }], 7979: [[7977, 768],, { 837: 8091 }], 7980: [[7976, 769],, { 837: 8092 }], 7981: [[7977, 769],, { 837: 8093 }], 7982: [[7976, 834],, { 837: 8094 }], 7983: [[7977, 834],, { 837: 8095 }], 7984: [[953, 787],, { 768: 7986, 769: 7988, 834: 7990 }], 7985: [[953, 788],, { 768: 7987, 769: 7989, 834: 7991 }], 7986: [[7984, 768]], 7987: [[7985, 768]], 7988: [[7984, 769]], 7989: [[7985, 769]], 7990: [[7984, 834]], 7991: [[7985, 834]], 7992: [[921, 787],, { 768: 7994, 769: 7996, 834: 7998 }], 7993: [[921, 788],, { 768: 7995, 769: 7997, 834: 7999 }], 7994: [[7992, 768]], 7995: [[7993, 768]], 7996: [[7992, 769]], 7997: [[7993, 769]], 7998: [[7992, 834]], 7999: [[7993, 834]], 8e3: [[959, 787],, { 768: 8002, 769: 8004 }], 8001: [[959, 788],, { 768: 8003, 769: 8005 }], 8002: [[8e3, 768]], 8003: [[8001, 768]], 8004: [[8e3, 769]], 8005: [[8001, 769]], 8008: [[927, 787],, { 768: 8010, 769: 8012 }], 8009: [[927, 788],, { 768: 8011, 769: 8013 }], 8010: [[8008, 768]], 8011: [[8009, 768]], 8012: [[8008, 769]], 8013: [[8009, 769]], 8016: [[965, 787],, { 768: 8018, 769: 8020, 834: 8022 }], 8017: [[965, 788],, { 768: 8019, 769: 8021, 834: 8023 }], 8018: [[8016, 768]], 8019: [[8017, 768]], 8020: [[8016, 769]], 8021: [[8017, 769]], 8022: [[8016, 834]], 8023: [[8017, 834]], 8025: [[933, 788],, { 768: 8027, 769: 8029, 834: 8031 }], 8027: [[8025, 768]], 8029: [[8025, 769]], 8031: [[8025, 834]], 8032: [[969, 787],, { 768: 8034, 769: 8036, 834: 8038, 837: 8096 }], 8033: [[969, 788],, { 768: 8035, 769: 8037, 834: 8039, 837: 8097 }], 8034: [[8032, 768],, { 837: 8098 }], 8035: [[8033, 768],, { 837: 8099 }], 8036: [[8032, 769],, { 837: 8100 }], 8037: [[8033, 769],, { 837: 8101 }], 8038: [[8032, 834],, { 837: 8102 }], 8039: [[8033, 834],, { 837: 8103 }], 8040: [[937, 787],, { 768: 8042, 769: 8044, 834: 8046, 837: 8104 }], 8041: [[937, 788],, { 768: 8043, 769: 8045, 834: 8047, 837: 8105 }], 8042: [[8040, 768],, { 837: 8106 }], 8043: [[8041, 768],, { 837: 8107 }], 8044: [[8040, 769],, { 837: 8108 }], 8045: [[8041, 769],, { 837: 8109 }], 8046: [[8040, 834],, { 837: 8110 }], 8047: [[8041, 834],, { 837: 8111 }], 8048: [[945, 768],, { 837: 8114 }], 8049: [[940]], 8050: [[949, 768]], 8051: [[941]], 8052: [[951, 768],, { 837: 8130 }], 8053: [[942]], 8054: [[953, 768]], 8055: [[943]], 8056: [[959, 768]], 8057: [[972]], 8058: [[965, 768]], 8059: [[973]], 8060: [[969, 768],, { 837: 8178 }], 8061: [[974]], 8064: [[7936, 837]], 8065: [[7937, 837]], 8066: [[7938, 837]], 8067: [[7939, 837]], 8068: [[7940, 837]], 8069: [[7941, 837]], 8070: [[7942, 837]], 8071: [[7943, 837]], 8072: [[7944, 837]], 8073: [[7945, 837]], 8074: [[7946, 837]], 8075: [[7947, 837]], 8076: [[7948, 837]], 8077: [[7949, 837]], 8078: [[7950, 837]], 8079: [[7951, 837]], 8080: [[7968, 837]], 8081: [[7969, 837]], 8082: [[7970, 837]], 8083: [[7971, 837]], 8084: [[7972, 837]], 8085: [[7973, 837]], 8086: [[7974, 837]], 8087: [[7975, 837]], 8088: [[7976, 837]], 8089: [[7977, 837]], 8090: [[7978, 837]], 8091: [[7979, 837]], 8092: [[7980, 837]], 8093: [[7981, 837]], 8094: [[7982, 837]], 8095: [[7983, 837]], 8096: [[8032, 837]], 8097: [[8033, 837]], 8098: [[8034, 837]], 8099: [[8035, 837]], 8100: [[8036, 837]], 8101: [[8037, 837]], 8102: [[8038, 837]], 8103: [[8039, 837]], 8104: [[8040, 837]], 8105: [[8041, 837]], 8106: [[8042, 837]], 8107: [[8043, 837]], 8108: [[8044, 837]], 8109: [[8045, 837]], 8110: [[8046, 837]], 8111: [[8047, 837]], 8112: [[945, 774]], 8113: [[945, 772]], 8114: [[8048, 837]], 8115: [[945, 837]], 8116: [[940, 837]], 8118: [[945, 834],, { 837: 8119 }], 8119: [[8118, 837]], 8120: [[913, 774]], 8121: [[913, 772]], 8122: [[913, 768]], 8123: [[902]], 8124: [[913, 837]], 8125: [[32, 787], 256], 8126: [[953]], 8127: [[32, 787], 256, { 768: 8141, 769: 8142, 834: 8143 }], 8128: [[32, 834], 256], 8129: [[168, 834]], 8130: [[8052, 837]], 8131: [[951, 837]], 8132: [[942, 837]], 8134: [[951, 834],, { 837: 8135 }], 8135: [[8134, 837]], 8136: [[917, 768]], 8137: [[904]], 8138: [[919, 768]], 8139: [[905]], 8140: [[919, 837]], 8141: [[8127, 768]], 8142: [[8127, 769]], 8143: [[8127, 834]], 8144: [[953, 774]], 8145: [[953, 772]], 8146: [[970, 768]], 8147: [[912]], 8150: [[953, 834]], 8151: [[970, 834]], 8152: [[921, 774]], 8153: [[921, 772]], 8154: [[921, 768]], 8155: [[906]], 8157: [[8190, 768]], 8158: [[8190, 769]], 8159: [[8190, 834]], 8160: [[965, 774]], 8161: [[965, 772]], 8162: [[971, 768]], 8163: [[944]], 8164: [[961, 787]], 8165: [[961, 788]], 8166: [[965, 834]], 8167: [[971, 834]], 8168: [[933, 774]], 8169: [[933, 772]], 8170: [[933, 768]], 8171: [[910]], 8172: [[929, 788]], 8173: [[168, 768]], 8174: [[901]], 8175: [[96]], 8178: [[8060, 837]], 8179: [[969, 837]], 8180: [[974, 837]], 8182: [[969, 834],, { 837: 8183 }], 8183: [[8182, 837]], 8184: [[927, 768]], 8185: [[908]], 8186: [[937, 768]], 8187: [[911]], 8188: [[937, 837]], 8189: [[180]], 8190: [[32, 788], 256, { 768: 8157, 769: 8158, 834: 8159 }] }, 8192: { 8192: [[8194]], 8193: [[8195]], 8194: [[32], 256], 8195: [[32], 256], 8196: [[32], 256], 8197: [[32], 256], 8198: [[32], 256], 8199: [[32], 256], 8200: [[32], 256], 8201: [[32], 256], 8202: [[32], 256], 8209: [[8208], 256], 8215: [[32, 819], 256], 8228: [[46], 256], 8229: [[46, 46], 256], 8230: [[46, 46, 46], 256], 8239: [[32], 256], 8243: [[8242, 8242], 256], 8244: [[8242, 8242, 8242], 256], 8246: [[8245, 8245], 256], 8247: [[8245, 8245, 8245], 256], 8252: [[33, 33], 256], 8254: [[32, 773], 256], 8263: [[63, 63], 256], 8264: [[63, 33], 256], 8265: [[33, 63], 256], 8279: [[8242, 8242, 8242, 8242], 256], 8287: [[32], 256], 8304: [[48], 256], 8305: [[105], 256], 8308: [[52], 256], 8309: [[53], 256], 8310: [[54], 256], 8311: [[55], 256], 8312: [[56], 256], 8313: [[57], 256], 8314: [[43], 256], 8315: [[8722], 256], 8316: [[61], 256], 8317: [[40], 256], 8318: [[41], 256], 8319: [[110], 256], 8320: [[48], 256], 8321: [[49], 256], 8322: [[50], 256], 8323: [[51], 256], 8324: [[52], 256], 8325: [[53], 256], 8326: [[54], 256], 8327: [[55], 256], 8328: [[56], 256], 8329: [[57], 256], 8330: [[43], 256], 8331: [[8722], 256], 8332: [[61], 256], 8333: [[40], 256], 8334: [[41], 256], 8336: [[97], 256], 8337: [[101], 256], 8338: [[111], 256], 8339: [[120], 256], 8340: [[601], 256], 8341: [[104], 256], 8342: [[107], 256], 8343: [[108], 256], 8344: [[109], 256], 8345: [[110], 256], 8346: [[112], 256], 8347: [[115], 256], 8348: [[116], 256], 8360: [[82, 115], 256], 8400: [, 230], 8401: [, 230], 8402: [, 1], 8403: [, 1], 8404: [, 230], 8405: [, 230], 8406: [, 230], 8407: [, 230], 8408: [, 1], 8409: [, 1], 8410: [, 1], 8411: [, 230], 8412: [, 230], 8417: [, 230], 8421: [, 1], 8422: [, 1], 8423: [, 230], 8424: [, 220], 8425: [, 230], 8426: [, 1], 8427: [, 1], 8428: [, 220], 8429: [, 220], 8430: [, 220], 8431: [, 220], 8432: [, 230] }, 8448: { 8448: [[97, 47, 99], 256], 8449: [[97, 47, 115], 256], 8450: [[67], 256], 8451: [[176, 67], 256], 8453: [[99, 47, 111], 256], 8454: [[99, 47, 117], 256], 8455: [[400], 256], 8457: [[176, 70], 256], 8458: [[103], 256], 8459: [[72], 256], 8460: [[72], 256], 8461: [[72], 256], 8462: [[104], 256], 8463: [[295], 256], 8464: [[73], 256], 8465: [[73], 256], 8466: [[76], 256], 8467: [[108], 256], 8469: [[78], 256], 8470: [[78, 111], 256], 8473: [[80], 256], 8474: [[81], 256], 8475: [[82], 256], 8476: [[82], 256], 8477: [[82], 256], 8480: [[83, 77], 256], 8481: [[84, 69, 76], 256], 8482: [[84, 77], 256], 8484: [[90], 256], 8486: [[937]], 8488: [[90], 256], 8490: [[75]], 8491: [[197]], 8492: [[66], 256], 8493: [[67], 256], 8495: [[101], 256], 8496: [[69], 256], 8497: [[70], 256], 8499: [[77], 256], 8500: [[111], 256], 8501: [[1488], 256], 8502: [[1489], 256], 8503: [[1490], 256], 8504: [[1491], 256], 8505: [[105], 256], 8507: [[70, 65, 88], 256], 8508: [[960], 256], 8509: [[947], 256], 8510: [[915], 256], 8511: [[928], 256], 8512: [[8721], 256], 8517: [[68], 256], 8518: [[100], 256], 8519: [[101], 256], 8520: [[105], 256], 8521: [[106], 256], 8528: [[49, 8260, 55], 256], 8529: [[49, 8260, 57], 256], 8530: [[49, 8260, 49, 48], 256], 8531: [[49, 8260, 51], 256], 8532: [[50, 8260, 51], 256], 8533: [[49, 8260, 53], 256], 8534: [[50, 8260, 53], 256], 8535: [[51, 8260, 53], 256], 8536: [[52, 8260, 53], 256], 8537: [[49, 8260, 54], 256], 8538: [[53, 8260, 54], 256], 8539: [[49, 8260, 56], 256], 8540: [[51, 8260, 56], 256], 8541: [[53, 8260, 56], 256], 8542: [[55, 8260, 56], 256], 8543: [[49, 8260], 256], 8544: [[73], 256], 8545: [[73, 73], 256], 8546: [[73, 73, 73], 256], 8547: [[73, 86], 256], 8548: [[86], 256], 8549: [[86, 73], 256], 8550: [[86, 73, 73], 256], 8551: [[86, 73, 73, 73], 256], 8552: [[73, 88], 256], 8553: [[88], 256], 8554: [[88, 73], 256], 8555: [[88, 73, 73], 256], 8556: [[76], 256], 8557: [[67], 256], 8558: [[68], 256], 8559: [[77], 256], 8560: [[105], 256], 8561: [[105, 105], 256], 8562: [[105, 105, 105], 256], 8563: [[105, 118], 256], 8564: [[118], 256], 8565: [[118, 105], 256], 8566: [[118, 105, 105], 256], 8567: [[118, 105, 105, 105], 256], 8568: [[105, 120], 256], 8569: [[120], 256], 8570: [[120, 105], 256], 8571: [[120, 105, 105], 256], 8572: [[108], 256], 8573: [[99], 256], 8574: [[100], 256], 8575: [[109], 256], 8585: [[48, 8260, 51], 256], 8592: [,, { 824: 8602 }], 8594: [,, { 824: 8603 }], 8596: [,, { 824: 8622 }], 8602: [[8592, 824]], 8603: [[8594, 824]], 8622: [[8596, 824]], 8653: [[8656, 824]], 8654: [[8660, 824]], 8655: [[8658, 824]], 8656: [,, { 824: 8653 }], 8658: [,, { 824: 8655 }], 8660: [,, { 824: 8654 }] }, 8704: { 8707: [,, { 824: 8708 }], 8708: [[8707, 824]], 8712: [,, { 824: 8713 }], 8713: [[8712, 824]], 8715: [,, { 824: 8716 }], 8716: [[8715, 824]], 8739: [,, { 824: 8740 }], 8740: [[8739, 824]], 8741: [,, { 824: 8742 }], 8742: [[8741, 824]], 8748: [[8747, 8747], 256], 8749: [[8747, 8747, 8747], 256], 8751: [[8750, 8750], 256], 8752: [[8750, 8750, 8750], 256], 8764: [,, { 824: 8769 }], 8769: [[8764, 824]], 8771: [,, { 824: 8772 }], 8772: [[8771, 824]], 8773: [,, { 824: 8775 }], 8775: [[8773, 824]], 8776: [,, { 824: 8777 }], 8777: [[8776, 824]], 8781: [,, { 824: 8813 }], 8800: [[61, 824]], 8801: [,, { 824: 8802 }], 8802: [[8801, 824]], 8804: [,, { 824: 8816 }], 8805: [,, { 824: 8817 }], 8813: [[8781, 824]], 8814: [[60, 824]], 8815: [[62, 824]], 8816: [[8804, 824]], 8817: [[8805, 824]], 8818: [,, { 824: 8820 }], 8819: [,, { 824: 8821 }], 8820: [[8818, 824]], 8821: [[8819, 824]], 8822: [,, { 824: 8824 }], 8823: [,, { 824: 8825 }], 8824: [[8822, 824]], 8825: [[8823, 824]], 8826: [,, { 824: 8832 }], 8827: [,, { 824: 8833 }], 8828: [,, { 824: 8928 }], 8829: [,, { 824: 8929 }], 8832: [[8826, 824]], 8833: [[8827, 824]], 8834: [,, { 824: 8836 }], 8835: [,, { 824: 8837 }], 8836: [[8834, 824]], 8837: [[8835, 824]], 8838: [,, { 824: 8840 }], 8839: [,, { 824: 8841 }], 8840: [[8838, 824]], 8841: [[8839, 824]], 8849: [,, { 824: 8930 }], 8850: [,, { 824: 8931 }], 8866: [,, { 824: 8876 }], 8872: [,, { 824: 8877 }], 8873: [,, { 824: 8878 }], 8875: [,, { 824: 8879 }], 8876: [[8866, 824]], 8877: [[8872, 824]], 8878: [[8873, 824]], 8879: [[8875, 824]], 8882: [,, { 824: 8938 }], 8883: [,, { 824: 8939 }], 8884: [,, { 824: 8940 }], 8885: [,, { 824: 8941 }], 8928: [[8828, 824]], 8929: [[8829, 824]], 8930: [[8849, 824]], 8931: [[8850, 824]], 8938: [[8882, 824]], 8939: [[8883, 824]], 8940: [[8884, 824]], 8941: [[8885, 824]] }, 8960: { 9001: [[12296]], 9002: [[12297]] }, 9216: { 9312: [[49], 256], 9313: [[50], 256], 9314: [[51], 256], 9315: [[52], 256], 9316: [[53], 256], 9317: [[54], 256], 9318: [[55], 256], 9319: [[56], 256], 9320: [[57], 256], 9321: [[49, 48], 256], 9322: [[49, 49], 256], 9323: [[49, 50], 256], 9324: [[49, 51], 256], 9325: [[49, 52], 256], 9326: [[49, 53], 256], 9327: [[49, 54], 256], 9328: [[49, 55], 256], 9329: [[49, 56], 256], 9330: [[49, 57], 256], 9331: [[50, 48], 256], 9332: [[40, 49, 41], 256], 9333: [[40, 50, 41], 256], 9334: [[40, 51, 41], 256], 9335: [[40, 52, 41], 256], 9336: [[40, 53, 41], 256], 9337: [[40, 54, 41], 256], 9338: [[40, 55, 41], 256], 9339: [[40, 56, 41], 256], 9340: [[40, 57, 41], 256], 9341: [[40, 49, 48, 41], 256], 9342: [[40, 49, 49, 41], 256], 9343: [[40, 49, 50, 41], 256], 9344: [[40, 49, 51, 41], 256], 9345: [[40, 49, 52, 41], 256], 9346: [[40, 49, 53, 41], 256], 9347: [[40, 49, 54, 41], 256], 9348: [[40, 49, 55, 41], 256], 9349: [[40, 49, 56, 41], 256], 9350: [[40, 49, 57, 41], 256], 9351: [[40, 50, 48, 41], 256], 9352: [[49, 46], 256], 9353: [[50, 46], 256], 9354: [[51, 46], 256], 9355: [[52, 46], 256], 9356: [[53, 46], 256], 9357: [[54, 46], 256], 9358: [[55, 46], 256], 9359: [[56, 46], 256], 9360: [[57, 46], 256], 9361: [[49, 48, 46], 256], 9362: [[49, 49, 46], 256], 9363: [[49, 50, 46], 256], 9364: [[49, 51, 46], 256], 9365: [[49, 52, 46], 256], 9366: [[49, 53, 46], 256], 9367: [[49, 54, 46], 256], 9368: [[49, 55, 46], 256], 9369: [[49, 56, 46], 256], 9370: [[49, 57, 46], 256], 9371: [[50, 48, 46], 256], 9372: [[40, 97, 41], 256], 9373: [[40, 98, 41], 256], 9374: [[40, 99, 41], 256], 9375: [[40, 100, 41], 256], 9376: [[40, 101, 41], 256], 9377: [[40, 102, 41], 256], 9378: [[40, 103, 41], 256], 9379: [[40, 104, 41], 256], 9380: [[40, 105, 41], 256], 9381: [[40, 106, 41], 256], 9382: [[40, 107, 41], 256], 9383: [[40, 108, 41], 256], 9384: [[40, 109, 41], 256], 9385: [[40, 110, 41], 256], 9386: [[40, 111, 41], 256], 9387: [[40, 112, 41], 256], 9388: [[40, 113, 41], 256], 9389: [[40, 114, 41], 256], 9390: [[40, 115, 41], 256], 9391: [[40, 116, 41], 256], 9392: [[40, 117, 41], 256], 9393: [[40, 118, 41], 256], 9394: [[40, 119, 41], 256], 9395: [[40, 120, 41], 256], 9396: [[40, 121, 41], 256], 9397: [[40, 122, 41], 256], 9398: [[65], 256], 9399: [[66], 256], 9400: [[67], 256], 9401: [[68], 256], 9402: [[69], 256], 9403: [[70], 256], 9404: [[71], 256], 9405: [[72], 256], 9406: [[73], 256], 9407: [[74], 256], 9408: [[75], 256], 9409: [[76], 256], 9410: [[77], 256], 9411: [[78], 256], 9412: [[79], 256], 9413: [[80], 256], 9414: [[81], 256], 9415: [[82], 256], 9416: [[83], 256], 9417: [[84], 256], 9418: [[85], 256], 9419: [[86], 256], 9420: [[87], 256], 9421: [[88], 256], 9422: [[89], 256], 9423: [[90], 256], 9424: [[97], 256], 9425: [[98], 256], 9426: [[99], 256], 9427: [[100], 256], 9428: [[101], 256], 9429: [[102], 256], 9430: [[103], 256], 9431: [[104], 256], 9432: [[105], 256], 9433: [[106], 256], 9434: [[107], 256], 9435: [[108], 256], 9436: [[109], 256], 9437: [[110], 256], 9438: [[111], 256], 9439: [[112], 256], 9440: [[113], 256], 9441: [[114], 256], 9442: [[115], 256], 9443: [[116], 256], 9444: [[117], 256], 9445: [[118], 256], 9446: [[119], 256], 9447: [[120], 256], 9448: [[121], 256], 9449: [[122], 256], 9450: [[48], 256] }, 10752: { 10764: [[8747, 8747, 8747, 8747], 256], 10868: [[58, 58, 61], 256], 10869: [[61, 61], 256], 10870: [[61, 61, 61], 256], 10972: [[10973, 824], 512] }, 11264: { 11388: [[106], 256], 11389: [[86], 256], 11503: [, 230], 11504: [, 230], 11505: [, 230] }, 11520: { 11631: [[11617], 256], 11647: [, 9], 11744: [, 230], 11745: [, 230], 11746: [, 230], 11747: [, 230], 11748: [, 230], 11749: [, 230], 11750: [, 230], 11751: [, 230], 11752: [, 230], 11753: [, 230], 11754: [, 230], 11755: [, 230], 11756: [, 230], 11757: [, 230], 11758: [, 230], 11759: [, 230], 11760: [, 230], 11761: [, 230], 11762: [, 230], 11763: [, 230], 11764: [, 230], 11765: [, 230], 11766: [, 230], 11767: [, 230], 11768: [, 230], 11769: [, 230], 11770: [, 230], 11771: [, 230], 11772: [, 230], 11773: [, 230], 11774: [, 230], 11775: [, 230] }, 11776: { 11935: [[27597], 256], 12019: [[40863], 256] }, 12032: { 12032: [[19968], 256], 12033: [[20008], 256], 12034: [[20022], 256], 12035: [[20031], 256], 12036: [[20057], 256], 12037: [[20101], 256], 12038: [[20108], 256], 12039: [[20128], 256], 12040: [[20154], 256], 12041: [[20799], 256], 12042: [[20837], 256], 12043: [[20843], 256], 12044: [[20866], 256], 12045: [[20886], 256], 12046: [[20907], 256], 12047: [[20960], 256], 12048: [[20981], 256], 12049: [[20992], 256], 12050: [[21147], 256], 12051: [[21241], 256], 12052: [[21269], 256], 12053: [[21274], 256], 12054: [[21304], 256], 12055: [[21313], 256], 12056: [[21340], 256], 12057: [[21353], 256], 12058: [[21378], 256], 12059: [[21430], 256], 12060: [[21448], 256], 12061: [[21475], 256], 12062: [[22231], 256], 12063: [[22303], 256], 12064: [[22763], 256], 12065: [[22786], 256], 12066: [[22794], 256], 12067: [[22805], 256], 12068: [[22823], 256], 12069: [[22899], 256], 12070: [[23376], 256], 12071: [[23424], 256], 12072: [[23544], 256], 12073: [[23567], 256], 12074: [[23586], 256], 12075: [[23608], 256], 12076: [[23662], 256], 12077: [[23665], 256], 12078: [[24027], 256], 12079: [[24037], 256], 12080: [[24049], 256], 12081: [[24062], 256], 12082: [[24178], 256], 12083: [[24186], 256], 12084: [[24191], 256], 12085: [[24308], 256], 12086: [[24318], 256], 12087: [[24331], 256], 12088: [[24339], 256], 12089: [[24400], 256], 12090: [[24417], 256], 12091: [[24435], 256], 12092: [[24515], 256], 12093: [[25096], 256], 12094: [[25142], 256], 12095: [[25163], 256], 12096: [[25903], 256], 12097: [[25908], 256], 12098: [[25991], 256], 12099: [[26007], 256], 12100: [[26020], 256], 12101: [[26041], 256], 12102: [[26080], 256], 12103: [[26085], 256], 12104: [[26352], 256], 12105: [[26376], 256], 12106: [[26408], 256], 12107: [[27424], 256], 12108: [[27490], 256], 12109: [[27513], 256], 12110: [[27571], 256], 12111: [[27595], 256], 12112: [[27604], 256], 12113: [[27611], 256], 12114: [[27663], 256], 12115: [[27668], 256], 12116: [[27700], 256], 12117: [[28779], 256], 12118: [[29226], 256], 12119: [[29238], 256], 12120: [[29243], 256], 12121: [[29247], 256], 12122: [[29255], 256], 12123: [[29273], 256], 12124: [[29275], 256], 12125: [[29356], 256], 12126: [[29572], 256], 12127: [[29577], 256], 12128: [[29916], 256], 12129: [[29926], 256], 12130: [[29976], 256], 12131: [[29983], 256], 12132: [[29992], 256], 12133: [[3e4], 256], 12134: [[30091], 256], 12135: [[30098], 256], 12136: [[30326], 256], 12137: [[30333], 256], 12138: [[30382], 256], 12139: [[30399], 256], 12140: [[30446], 256], 12141: [[30683], 256], 12142: [[30690], 256], 12143: [[30707], 256], 12144: [[31034], 256], 12145: [[31160], 256], 12146: [[31166], 256], 12147: [[31348], 256], 12148: [[31435], 256], 12149: [[31481], 256], 12150: [[31859], 256], 12151: [[31992], 256], 12152: [[32566], 256], 12153: [[32593], 256], 12154: [[32650], 256], 12155: [[32701], 256], 12156: [[32769], 256], 12157: [[32780], 256], 12158: [[32786], 256], 12159: [[32819], 256], 12160: [[32895], 256], 12161: [[32905], 256], 12162: [[33251], 256], 12163: [[33258], 256], 12164: [[33267], 256], 12165: [[33276], 256], 12166: [[33292], 256], 12167: [[33307], 256], 12168: [[33311], 256], 12169: [[33390], 256], 12170: [[33394], 256], 12171: [[33400], 256], 12172: [[34381], 256], 12173: [[34411], 256], 12174: [[34880], 256], 12175: [[34892], 256], 12176: [[34915], 256], 12177: [[35198], 256], 12178: [[35211], 256], 12179: [[35282], 256], 12180: [[35328], 256], 12181: [[35895], 256], 12182: [[35910], 256], 12183: [[35925], 256], 12184: [[35960], 256], 12185: [[35997], 256], 12186: [[36196], 256], 12187: [[36208], 256], 12188: [[36275], 256], 12189: [[36523], 256], 12190: [[36554], 256], 12191: [[36763], 256], 12192: [[36784], 256], 12193: [[36789], 256], 12194: [[37009], 256], 12195: [[37193], 256], 12196: [[37318], 256], 12197: [[37324], 256], 12198: [[37329], 256], 12199: [[38263], 256], 12200: [[38272], 256], 12201: [[38428], 256], 12202: [[38582], 256], 12203: [[38585], 256], 12204: [[38632], 256], 12205: [[38737], 256], 12206: [[38750], 256], 12207: [[38754], 256], 12208: [[38761], 256], 12209: [[38859], 256], 12210: [[38893], 256], 12211: [[38899], 256], 12212: [[38913], 256], 12213: [[39080], 256], 12214: [[39131], 256], 12215: [[39135], 256], 12216: [[39318], 256], 12217: [[39321], 256], 12218: [[39340], 256], 12219: [[39592], 256], 12220: [[39640], 256], 12221: [[39647], 256], 12222: [[39717], 256], 12223: [[39727], 256], 12224: [[39730], 256], 12225: [[39740], 256], 12226: [[39770], 256], 12227: [[40165], 256], 12228: [[40565], 256], 12229: [[40575], 256], 12230: [[40613], 256], 12231: [[40635], 256], 12232: [[40643], 256], 12233: [[40653], 256], 12234: [[40657], 256], 12235: [[40697], 256], 12236: [[40701], 256], 12237: [[40718], 256], 12238: [[40723], 256], 12239: [[40736], 256], 12240: [[40763], 256], 12241: [[40778], 256], 12242: [[40786], 256], 12243: [[40845], 256], 12244: [[40860], 256], 12245: [[40864], 256] }, 12288: { 12288: [[32], 256], 12330: [, 218], 12331: [, 228], 12332: [, 232], 12333: [, 222], 12334: [, 224], 12335: [, 224], 12342: [[12306], 256], 12344: [[21313], 256], 12345: [[21316], 256], 12346: [[21317], 256], 12358: [,, { 12441: 12436 }], 12363: [,, { 12441: 12364 }], 12364: [[12363, 12441]], 12365: [,, { 12441: 12366 }], 12366: [[12365, 12441]], 12367: [,, { 12441: 12368 }], 12368: [[12367, 12441]], 12369: [,, { 12441: 12370 }], 12370: [[12369, 12441]], 12371: [,, { 12441: 12372 }], 12372: [[12371, 12441]], 12373: [,, { 12441: 12374 }], 12374: [[12373, 12441]], 12375: [,, { 12441: 12376 }], 12376: [[12375, 12441]], 12377: [,, { 12441: 12378 }], 12378: [[12377, 12441]], 12379: [,, { 12441: 12380 }], 12380: [[12379, 12441]], 12381: [,, { 12441: 12382 }], 12382: [[12381, 12441]], 12383: [,, { 12441: 12384 }], 12384: [[12383, 12441]], 12385: [,, { 12441: 12386 }], 12386: [[12385, 12441]], 12388: [,, { 12441: 12389 }], 12389: [[12388, 12441]], 12390: [,, { 12441: 12391 }], 12391: [[12390, 12441]], 12392: [,, { 12441: 12393 }], 12393: [[12392, 12441]], 12399: [,, { 12441: 12400, 12442: 12401 }], 12400: [[12399, 12441]], 12401: [[12399, 12442]], 12402: [,, { 12441: 12403, 12442: 12404 }], 12403: [[12402, 12441]], 12404: [[12402, 12442]], 12405: [,, { 12441: 12406, 12442: 12407 }], 12406: [[12405, 12441]], 12407: [[12405, 12442]], 12408: [,, { 12441: 12409, 12442: 12410 }], 12409: [[12408, 12441]], 12410: [[12408, 12442]], 12411: [,, { 12441: 12412, 12442: 12413 }], 12412: [[12411, 12441]], 12413: [[12411, 12442]], 12436: [[12358, 12441]], 12441: [, 8], 12442: [, 8], 12443: [[32, 12441], 256], 12444: [[32, 12442], 256], 12445: [,, { 12441: 12446 }], 12446: [[12445, 12441]], 12447: [[12424, 12426], 256], 12454: [,, { 12441: 12532 }], 12459: [,, { 12441: 12460 }], 12460: [[12459, 12441]], 12461: [,, { 12441: 12462 }], 12462: [[12461, 12441]], 12463: [,, { 12441: 12464 }], 12464: [[12463, 12441]], 12465: [,, { 12441: 12466 }], 12466: [[12465, 12441]], 12467: [,, { 12441: 12468 }], 12468: [[12467, 12441]], 12469: [,, { 12441: 12470 }], 12470: [[12469, 12441]], 12471: [,, { 12441: 12472 }], 12472: [[12471, 12441]], 12473: [,, { 12441: 12474 }], 12474: [[12473, 12441]], 12475: [,, { 12441: 12476 }], 12476: [[12475, 12441]], 12477: [,, { 12441: 12478 }], 12478: [[12477, 12441]], 12479: [,, { 12441: 12480 }], 12480: [[12479, 12441]], 12481: [,, { 12441: 12482 }], 12482: [[12481, 12441]], 12484: [,, { 12441: 12485 }], 12485: [[12484, 12441]], 12486: [,, { 12441: 12487 }], 12487: [[12486, 12441]], 12488: [,, { 12441: 12489 }], 12489: [[12488, 12441]], 12495: [,, { 12441: 12496, 12442: 12497 }], 12496: [[12495, 12441]], 12497: [[12495, 12442]], 12498: [,, { 12441: 12499, 12442: 12500 }], 12499: [[12498, 12441]], 12500: [[12498, 12442]], 12501: [,, { 12441: 12502, 12442: 12503 }], 12502: [[12501, 12441]], 12503: [[12501, 12442]], 12504: [,, { 12441: 12505, 12442: 12506 }], 12505: [[12504, 12441]], 12506: [[12504, 12442]], 12507: [,, { 12441: 12508, 12442: 12509 }], 12508: [[12507, 12441]], 12509: [[12507, 12442]], 12527: [,, { 12441: 12535 }], 12528: [,, { 12441: 12536 }], 12529: [,, { 12441: 12537 }], 12530: [,, { 12441: 12538 }], 12532: [[12454, 12441]], 12535: [[12527, 12441]], 12536: [[12528, 12441]], 12537: [[12529, 12441]], 12538: [[12530, 12441]], 12541: [,, { 12441: 12542 }], 12542: [[12541, 12441]], 12543: [[12467, 12488], 256] }, 12544: { 12593: [[4352], 256], 12594: [[4353], 256], 12595: [[4522], 256], 12596: [[4354], 256], 12597: [[4524], 256], 12598: [[4525], 256], 12599: [[4355], 256], 12600: [[4356], 256], 12601: [[4357], 256], 12602: [[4528], 256], 12603: [[4529], 256], 12604: [[4530], 256], 12605: [[4531], 256], 12606: [[4532], 256], 12607: [[4533], 256], 12608: [[4378], 256], 12609: [[4358], 256], 12610: [[4359], 256], 12611: [[4360], 256], 12612: [[4385], 256], 12613: [[4361], 256], 12614: [[4362], 256], 12615: [[4363], 256], 12616: [[4364], 256], 12617: [[4365], 256], 12618: [[4366], 256], 12619: [[4367], 256], 12620: [[4368], 256], 12621: [[4369], 256], 12622: [[4370], 256], 12623: [[4449], 256], 12624: [[4450], 256], 12625: [[4451], 256], 12626: [[4452], 256], 12627: [[4453], 256], 12628: [[4454], 256], 12629: [[4455], 256], 12630: [[4456], 256], 12631: [[4457], 256], 12632: [[4458], 256], 12633: [[4459], 256], 12634: [[4460], 256], 12635: [[4461], 256], 12636: [[4462], 256], 12637: [[4463], 256], 12638: [[4464], 256], 12639: [[4465], 256], 12640: [[4466], 256], 12641: [[4467], 256], 12642: [[4468], 256], 12643: [[4469], 256], 12644: [[4448], 256], 12645: [[4372], 256], 12646: [[4373], 256], 12647: [[4551], 256], 12648: [[4552], 256], 12649: [[4556], 256], 12650: [[4558], 256], 12651: [[4563], 256], 12652: [[4567], 256], 12653: [[4569], 256], 12654: [[4380], 256], 12655: [[4573], 256], 12656: [[4575], 256], 12657: [[4381], 256], 12658: [[4382], 256], 12659: [[4384], 256], 12660: [[4386], 256], 12661: [[4387], 256], 12662: [[4391], 256], 12663: [[4393], 256], 12664: [[4395], 256], 12665: [[4396], 256], 12666: [[4397], 256], 12667: [[4398], 256], 12668: [[4399], 256], 12669: [[4402], 256], 12670: [[4406], 256], 12671: [[4416], 256], 12672: [[4423], 256], 12673: [[4428], 256], 12674: [[4593], 256], 12675: [[4594], 256], 12676: [[4439], 256], 12677: [[4440], 256], 12678: [[4441], 256], 12679: [[4484], 256], 12680: [[4485], 256], 12681: [[4488], 256], 12682: [[4497], 256], 12683: [[4498], 256], 12684: [[4500], 256], 12685: [[4510], 256], 12686: [[4513], 256], 12690: [[19968], 256], 12691: [[20108], 256], 12692: [[19977], 256], 12693: [[22235], 256], 12694: [[19978], 256], 12695: [[20013], 256], 12696: [[19979], 256], 12697: [[30002], 256], 12698: [[20057], 256], 12699: [[19993], 256], 12700: [[19969], 256], 12701: [[22825], 256], 12702: [[22320], 256], 12703: [[20154], 256] }, 12800: { 12800: [[40, 4352, 41], 256], 12801: [[40, 4354, 41], 256], 12802: [[40, 4355, 41], 256], 12803: [[40, 4357, 41], 256], 12804: [[40, 4358, 41], 256], 12805: [[40, 4359, 41], 256], 12806: [[40, 4361, 41], 256], 12807: [[40, 4363, 41], 256], 12808: [[40, 4364, 41], 256], 12809: [[40, 4366, 41], 256], 12810: [[40, 4367, 41], 256], 12811: [[40, 4368, 41], 256], 12812: [[40, 4369, 41], 256], 12813: [[40, 4370, 41], 256], 12814: [[40, 4352, 4449, 41], 256], 12815: [[40, 4354, 4449, 41], 256], 12816: [[40, 4355, 4449, 41], 256], 12817: [[40, 4357, 4449, 41], 256], 12818: [[40, 4358, 4449, 41], 256], 12819: [[40, 4359, 4449, 41], 256], 12820: [[40, 4361, 4449, 41], 256], 12821: [[40, 4363, 4449, 41], 256], 12822: [[40, 4364, 4449, 41], 256], 12823: [[40, 4366, 4449, 41], 256], 12824: [[40, 4367, 4449, 41], 256], 12825: [[40, 4368, 4449, 41], 256], 12826: [[40, 4369, 4449, 41], 256], 12827: [[40, 4370, 4449, 41], 256], 12828: [[40, 4364, 4462, 41], 256], 12829: [[40, 4363, 4457, 4364, 4453, 4523, 41], 256], 12830: [[40, 4363, 4457, 4370, 4462, 41], 256], 12832: [[40, 19968, 41], 256], 12833: [[40, 20108, 41], 256], 12834: [[40, 19977, 41], 256], 12835: [[40, 22235, 41], 256], 12836: [[40, 20116, 41], 256], 12837: [[40, 20845, 41], 256], 12838: [[40, 19971, 41], 256], 12839: [[40, 20843, 41], 256], 12840: [[40, 20061, 41], 256], 12841: [[40, 21313, 41], 256], 12842: [[40, 26376, 41], 256], 12843: [[40, 28779, 41], 256], 12844: [[40, 27700, 41], 256], 12845: [[40, 26408, 41], 256], 12846: [[40, 37329, 41], 256], 12847: [[40, 22303, 41], 256], 12848: [[40, 26085, 41], 256], 12849: [[40, 26666, 41], 256], 12850: [[40, 26377, 41], 256], 12851: [[40, 31038, 41], 256], 12852: [[40, 21517, 41], 256], 12853: [[40, 29305, 41], 256], 12854: [[40, 36001, 41], 256], 12855: [[40, 31069, 41], 256], 12856: [[40, 21172, 41], 256], 12857: [[40, 20195, 41], 256], 12858: [[40, 21628, 41], 256], 12859: [[40, 23398, 41], 256], 12860: [[40, 30435, 41], 256], 12861: [[40, 20225, 41], 256], 12862: [[40, 36039, 41], 256], 12863: [[40, 21332, 41], 256], 12864: [[40, 31085, 41], 256], 12865: [[40, 20241, 41], 256], 12866: [[40, 33258, 41], 256], 12867: [[40, 33267, 41], 256], 12868: [[21839], 256], 12869: [[24188], 256], 12870: [[25991], 256], 12871: [[31631], 256], 12880: [[80, 84, 69], 256], 12881: [[50, 49], 256], 12882: [[50, 50], 256], 12883: [[50, 51], 256], 12884: [[50, 52], 256], 12885: [[50, 53], 256], 12886: [[50, 54], 256], 12887: [[50, 55], 256], 12888: [[50, 56], 256], 12889: [[50, 57], 256], 12890: [[51, 48], 256], 12891: [[51, 49], 256], 12892: [[51, 50], 256], 12893: [[51, 51], 256], 12894: [[51, 52], 256], 12895: [[51, 53], 256], 12896: [[4352], 256], 12897: [[4354], 256], 12898: [[4355], 256], 12899: [[4357], 256], 12900: [[4358], 256], 12901: [[4359], 256], 12902: [[4361], 256], 12903: [[4363], 256], 12904: [[4364], 256], 12905: [[4366], 256], 12906: [[4367], 256], 12907: [[4368], 256], 12908: [[4369], 256], 12909: [[4370], 256], 12910: [[4352, 4449], 256], 12911: [[4354, 4449], 256], 12912: [[4355, 4449], 256], 12913: [[4357, 4449], 256], 12914: [[4358, 4449], 256], 12915: [[4359, 4449], 256], 12916: [[4361, 4449], 256], 12917: [[4363, 4449], 256], 12918: [[4364, 4449], 256], 12919: [[4366, 4449], 256], 12920: [[4367, 4449], 256], 12921: [[4368, 4449], 256], 12922: [[4369, 4449], 256], 12923: [[4370, 4449], 256], 12924: [[4366, 4449, 4535, 4352, 4457], 256], 12925: [[4364, 4462, 4363, 4468], 256], 12926: [[4363, 4462], 256], 12928: [[19968], 256], 12929: [[20108], 256], 12930: [[19977], 256], 12931: [[22235], 256], 12932: [[20116], 256], 12933: [[20845], 256], 12934: [[19971], 256], 12935: [[20843], 256], 12936: [[20061], 256], 12937: [[21313], 256], 12938: [[26376], 256], 12939: [[28779], 256], 12940: [[27700], 256], 12941: [[26408], 256], 12942: [[37329], 256], 12943: [[22303], 256], 12944: [[26085], 256], 12945: [[26666], 256], 12946: [[26377], 256], 12947: [[31038], 256], 12948: [[21517], 256], 12949: [[29305], 256], 12950: [[36001], 256], 12951: [[31069], 256], 12952: [[21172], 256], 12953: [[31192], 256], 12954: [[30007], 256], 12955: [[22899], 256], 12956: [[36969], 256], 12957: [[20778], 256], 12958: [[21360], 256], 12959: [[27880], 256], 12960: [[38917], 256], 12961: [[20241], 256], 12962: [[20889], 256], 12963: [[27491], 256], 12964: [[19978], 256], 12965: [[20013], 256], 12966: [[19979], 256], 12967: [[24038], 256], 12968: [[21491], 256], 12969: [[21307], 256], 12970: [[23447], 256], 12971: [[23398], 256], 12972: [[30435], 256], 12973: [[20225], 256], 12974: [[36039], 256], 12975: [[21332], 256], 12976: [[22812], 256], 12977: [[51, 54], 256], 12978: [[51, 55], 256], 12979: [[51, 56], 256], 12980: [[51, 57], 256], 12981: [[52, 48], 256], 12982: [[52, 49], 256], 12983: [[52, 50], 256], 12984: [[52, 51], 256], 12985: [[52, 52], 256], 12986: [[52, 53], 256], 12987: [[52, 54], 256], 12988: [[52, 55], 256], 12989: [[52, 56], 256], 12990: [[52, 57], 256], 12991: [[53, 48], 256], 12992: [[49, 26376], 256], 12993: [[50, 26376], 256], 12994: [[51, 26376], 256], 12995: [[52, 26376], 256], 12996: [[53, 26376], 256], 12997: [[54, 26376], 256], 12998: [[55, 26376], 256], 12999: [[56, 26376], 256], 13e3: [[57, 26376], 256], 13001: [[49, 48, 26376], 256], 13002: [[49, 49, 26376], 256], 13003: [[49, 50, 26376], 256], 13004: [[72, 103], 256], 13005: [[101, 114, 103], 256], 13006: [[101, 86], 256], 13007: [[76, 84, 68], 256], 13008: [[12450], 256], 13009: [[12452], 256], 13010: [[12454], 256], 13011: [[12456], 256], 13012: [[12458], 256], 13013: [[12459], 256], 13014: [[12461], 256], 13015: [[12463], 256], 13016: [[12465], 256], 13017: [[12467], 256], 13018: [[12469], 256], 13019: [[12471], 256], 13020: [[12473], 256], 13021: [[12475], 256], 13022: [[12477], 256], 13023: [[12479], 256], 13024: [[12481], 256], 13025: [[12484], 256], 13026: [[12486], 256], 13027: [[12488], 256], 13028: [[12490], 256], 13029: [[12491], 256], 13030: [[12492], 256], 13031: [[12493], 256], 13032: [[12494], 256], 13033: [[12495], 256], 13034: [[12498], 256], 13035: [[12501], 256], 13036: [[12504], 256], 13037: [[12507], 256], 13038: [[12510], 256], 13039: [[12511], 256], 13040: [[12512], 256], 13041: [[12513], 256], 13042: [[12514], 256], 13043: [[12516], 256], 13044: [[12518], 256], 13045: [[12520], 256], 13046: [[12521], 256], 13047: [[12522], 256], 13048: [[12523], 256], 13049: [[12524], 256], 13050: [[12525], 256], 13051: [[12527], 256], 13052: [[12528], 256], 13053: [[12529], 256], 13054: [[12530], 256] }, 13056: { 13056: [[12450, 12497, 12540, 12488], 256], 13057: [[12450, 12523, 12501, 12449], 256], 13058: [[12450, 12531, 12506, 12450], 256], 13059: [[12450, 12540, 12523], 256], 13060: [[12452, 12491, 12531, 12464], 256], 13061: [[12452, 12531, 12481], 256], 13062: [[12454, 12457, 12531], 256], 13063: [[12456, 12473, 12463, 12540, 12489], 256], 13064: [[12456, 12540, 12459, 12540], 256], 13065: [[12458, 12531, 12473], 256], 13066: [[12458, 12540, 12512], 256], 13067: [[12459, 12452, 12522], 256], 13068: [[12459, 12521, 12483, 12488], 256], 13069: [[12459, 12525, 12522, 12540], 256], 13070: [[12460, 12525, 12531], 256], 13071: [[12460, 12531, 12510], 256], 13072: [[12462, 12460], 256], 13073: [[12462, 12491, 12540], 256], 13074: [[12461, 12517, 12522, 12540], 256], 13075: [[12462, 12523, 12480, 12540], 256], 13076: [[12461, 12525], 256], 13077: [[12461, 12525, 12464, 12521, 12512], 256], 13078: [[12461, 12525, 12513, 12540, 12488, 12523], 256], 13079: [[12461, 12525, 12527, 12483, 12488], 256], 13080: [[12464, 12521, 12512], 256], 13081: [[12464, 12521, 12512, 12488, 12531], 256], 13082: [[12463, 12523, 12476, 12452, 12525], 256], 13083: [[12463, 12525, 12540, 12493], 256], 13084: [[12465, 12540, 12473], 256], 13085: [[12467, 12523, 12490], 256], 13086: [[12467, 12540, 12509], 256], 13087: [[12469, 12452, 12463, 12523], 256], 13088: [[12469, 12531, 12481, 12540, 12512], 256], 13089: [[12471, 12522, 12531, 12464], 256], 13090: [[12475, 12531, 12481], 256], 13091: [[12475, 12531, 12488], 256], 13092: [[12480, 12540, 12473], 256], 13093: [[12487, 12471], 256], 13094: [[12489, 12523], 256], 13095: [[12488, 12531], 256], 13096: [[12490, 12494], 256], 13097: [[12494, 12483, 12488], 256], 13098: [[12495, 12452, 12484], 256], 13099: [[12497, 12540, 12475, 12531, 12488], 256], 13100: [[12497, 12540, 12484], 256], 13101: [[12496, 12540, 12524, 12523], 256], 13102: [[12500, 12450, 12473, 12488, 12523], 256], 13103: [[12500, 12463, 12523], 256], 13104: [[12500, 12467], 256], 13105: [[12499, 12523], 256], 13106: [[12501, 12449, 12521, 12483, 12489], 256], 13107: [[12501, 12451, 12540, 12488], 256], 13108: [[12502, 12483, 12471, 12455, 12523], 256], 13109: [[12501, 12521, 12531], 256], 13110: [[12504, 12463, 12479, 12540, 12523], 256], 13111: [[12506, 12477], 256], 13112: [[12506, 12491, 12498], 256], 13113: [[12504, 12523, 12484], 256], 13114: [[12506, 12531, 12473], 256], 13115: [[12506, 12540, 12472], 256], 13116: [[12505, 12540, 12479], 256], 13117: [[12509, 12452, 12531, 12488], 256], 13118: [[12508, 12523, 12488], 256], 13119: [[12507, 12531], 256], 13120: [[12509, 12531, 12489], 256], 13121: [[12507, 12540, 12523], 256], 13122: [[12507, 12540, 12531], 256], 13123: [[12510, 12452, 12463, 12525], 256], 13124: [[12510, 12452, 12523], 256], 13125: [[12510, 12483, 12495], 256], 13126: [[12510, 12523, 12463], 256], 13127: [[12510, 12531, 12471, 12519, 12531], 256], 13128: [[12511, 12463, 12525, 12531], 256], 13129: [[12511, 12522], 256], 13130: [[12511, 12522, 12496, 12540, 12523], 256], 13131: [[12513, 12460], 256], 13132: [[12513, 12460, 12488, 12531], 256], 13133: [[12513, 12540, 12488, 12523], 256], 13134: [[12516, 12540, 12489], 256], 13135: [[12516, 12540, 12523], 256], 13136: [[12518, 12450, 12531], 256], 13137: [[12522, 12483, 12488, 12523], 256], 13138: [[12522, 12521], 256], 13139: [[12523, 12500, 12540], 256], 13140: [[12523, 12540, 12502, 12523], 256], 13141: [[12524, 12512], 256], 13142: [[12524, 12531, 12488, 12466, 12531], 256], 13143: [[12527, 12483, 12488], 256], 13144: [[48, 28857], 256], 13145: [[49, 28857], 256], 13146: [[50, 28857], 256], 13147: [[51, 28857], 256], 13148: [[52, 28857], 256], 13149: [[53, 28857], 256], 13150: [[54, 28857], 256], 13151: [[55, 28857], 256], 13152: [[56, 28857], 256], 13153: [[57, 28857], 256], 13154: [[49, 48, 28857], 256], 13155: [[49, 49, 28857], 256], 13156: [[49, 50, 28857], 256], 13157: [[49, 51, 28857], 256], 13158: [[49, 52, 28857], 256], 13159: [[49, 53, 28857], 256], 13160: [[49, 54, 28857], 256], 13161: [[49, 55, 28857], 256], 13162: [[49, 56, 28857], 256], 13163: [[49, 57, 28857], 256], 13164: [[50, 48, 28857], 256], 13165: [[50, 49, 28857], 256], 13166: [[50, 50, 28857], 256], 13167: [[50, 51, 28857], 256], 13168: [[50, 52, 28857], 256], 13169: [[104, 80, 97], 256], 13170: [[100, 97], 256], 13171: [[65, 85], 256], 13172: [[98, 97, 114], 256], 13173: [[111, 86], 256], 13174: [[112, 99], 256], 13175: [[100, 109], 256], 13176: [[100, 109, 178], 256], 13177: [[100, 109, 179], 256], 13178: [[73, 85], 256], 13179: [[24179, 25104], 256], 13180: [[26157, 21644], 256], 13181: [[22823, 27491], 256], 13182: [[26126, 27835], 256], 13183: [[26666, 24335, 20250, 31038], 256], 13184: [[112, 65], 256], 13185: [[110, 65], 256], 13186: [[956, 65], 256], 13187: [[109, 65], 256], 13188: [[107, 65], 256], 13189: [[75, 66], 256], 13190: [[77, 66], 256], 13191: [[71, 66], 256], 13192: [[99, 97, 108], 256], 13193: [[107, 99, 97, 108], 256], 13194: [[112, 70], 256], 13195: [[110, 70], 256], 13196: [[956, 70], 256], 13197: [[956, 103], 256], 13198: [[109, 103], 256], 13199: [[107, 103], 256], 13200: [[72, 122], 256], 13201: [[107, 72, 122], 256], 13202: [[77, 72, 122], 256], 13203: [[71, 72, 122], 256], 13204: [[84, 72, 122], 256], 13205: [[956, 8467], 256], 13206: [[109, 8467], 256], 13207: [[100, 8467], 256], 13208: [[107, 8467], 256], 13209: [[102, 109], 256], 13210: [[110, 109], 256], 13211: [[956, 109], 256], 13212: [[109, 109], 256], 13213: [[99, 109], 256], 13214: [[107, 109], 256], 13215: [[109, 109, 178], 256], 13216: [[99, 109, 178], 256], 13217: [[109, 178], 256], 13218: [[107, 109, 178], 256], 13219: [[109, 109, 179], 256], 13220: [[99, 109, 179], 256], 13221: [[109, 179], 256], 13222: [[107, 109, 179], 256], 13223: [[109, 8725, 115], 256], 13224: [[109, 8725, 115, 178], 256], 13225: [[80, 97], 256], 13226: [[107, 80, 97], 256], 13227: [[77, 80, 97], 256], 13228: [[71, 80, 97], 256], 13229: [[114, 97, 100], 256], 13230: [[114, 97, 100, 8725, 115], 256], 13231: [[114, 97, 100, 8725, 115, 178], 256], 13232: [[112, 115], 256], 13233: [[110, 115], 256], 13234: [[956, 115], 256], 13235: [[109, 115], 256], 13236: [[112, 86], 256], 13237: [[110, 86], 256], 13238: [[956, 86], 256], 13239: [[109, 86], 256], 13240: [[107, 86], 256], 13241: [[77, 86], 256], 13242: [[112, 87], 256], 13243: [[110, 87], 256], 13244: [[956, 87], 256], 13245: [[109, 87], 256], 13246: [[107, 87], 256], 13247: [[77, 87], 256], 13248: [[107, 937], 256], 13249: [[77, 937], 256], 13250: [[97, 46, 109, 46], 256], 13251: [[66, 113], 256], 13252: [[99, 99], 256], 13253: [[99, 100], 256], 13254: [[67, 8725, 107, 103], 256], 13255: [[67, 111, 46], 256], 13256: [[100, 66], 256], 13257: [[71, 121], 256], 13258: [[104, 97], 256], 13259: [[72, 80], 256], 13260: [[105, 110], 256], 13261: [[75, 75], 256], 13262: [[75, 77], 256], 13263: [[107, 116], 256], 13264: [[108, 109], 256], 13265: [[108, 110], 256], 13266: [[108, 111, 103], 256], 13267: [[108, 120], 256], 13268: [[109, 98], 256], 13269: [[109, 105, 108], 256], 13270: [[109, 111, 108], 256], 13271: [[80, 72], 256], 13272: [[112, 46, 109, 46], 256], 13273: [[80, 80, 77], 256], 13274: [[80, 82], 256], 13275: [[115, 114], 256], 13276: [[83, 118], 256], 13277: [[87, 98], 256], 13278: [[86, 8725, 109], 256], 13279: [[65, 8725, 109], 256], 13280: [[49, 26085], 256], 13281: [[50, 26085], 256], 13282: [[51, 26085], 256], 13283: [[52, 26085], 256], 13284: [[53, 26085], 256], 13285: [[54, 26085], 256], 13286: [[55, 26085], 256], 13287: [[56, 26085], 256], 13288: [[57, 26085], 256], 13289: [[49, 48, 26085], 256], 13290: [[49, 49, 26085], 256], 13291: [[49, 50, 26085], 256], 13292: [[49, 51, 26085], 256], 13293: [[49, 52, 26085], 256], 13294: [[49, 53, 26085], 256], 13295: [[49, 54, 26085], 256], 13296: [[49, 55, 26085], 256], 13297: [[49, 56, 26085], 256], 13298: [[49, 57, 26085], 256], 13299: [[50, 48, 26085], 256], 13300: [[50, 49, 26085], 256], 13301: [[50, 50, 26085], 256], 13302: [[50, 51, 26085], 256], 13303: [[50, 52, 26085], 256], 13304: [[50, 53, 26085], 256], 13305: [[50, 54, 26085], 256], 13306: [[50, 55, 26085], 256], 13307: [[50, 56, 26085], 256], 13308: [[50, 57, 26085], 256], 13309: [[51, 48, 26085], 256], 13310: [[51, 49, 26085], 256], 13311: [[103, 97, 108], 256] }, 27136: { 92912: [, 1], 92913: [, 1], 92914: [, 1], 92915: [, 1], 92916: [, 1] }, 27392: { 92976: [, 230], 92977: [, 230], 92978: [, 230], 92979: [, 230], 92980: [, 230], 92981: [, 230], 92982: [, 230] }, 42496: { 42607: [, 230], 42612: [, 230], 42613: [, 230], 42614: [, 230], 42615: [, 230], 42616: [, 230], 42617: [, 230], 42618: [, 230], 42619: [, 230], 42620: [, 230], 42621: [, 230], 42652: [[1098], 256], 42653: [[1100], 256], 42655: [, 230], 42736: [, 230], 42737: [, 230] }, 42752: { 42864: [[42863], 256], 43e3: [[294], 256], 43001: [[339], 256] }, 43008: { 43014: [, 9], 43204: [, 9], 43232: [, 230], 43233: [, 230], 43234: [, 230], 43235: [, 230], 43236: [, 230], 43237: [, 230], 43238: [, 230], 43239: [, 230], 43240: [, 230], 43241: [, 230], 43242: [, 230], 43243: [, 230], 43244: [, 230], 43245: [, 230], 43246: [, 230], 43247: [, 230], 43248: [, 230], 43249: [, 230] }, 43264: { 43307: [, 220], 43308: [, 220], 43309: [, 220], 43347: [, 9], 43443: [, 7], 43456: [, 9] }, 43520: { 43696: [, 230], 43698: [, 230], 43699: [, 230], 43700: [, 220], 43703: [, 230], 43704: [, 230], 43710: [, 230], 43711: [, 230], 43713: [, 230], 43766: [, 9] }, 43776: { 43868: [[42791], 256], 43869: [[43831], 256], 43870: [[619], 256], 43871: [[43858], 256], 44013: [, 9] }, 48128: { 113822: [, 1] }, 53504: { 119134: [[119127, 119141], 512], 119135: [[119128, 119141], 512], 119136: [[119135, 119150], 512], 119137: [[119135, 119151], 512], 119138: [[119135, 119152], 512], 119139: [[119135, 119153], 512], 119140: [[119135, 119154], 512], 119141: [, 216], 119142: [, 216], 119143: [, 1], 119144: [, 1], 119145: [, 1], 119149: [, 226], 119150: [, 216], 119151: [, 216], 119152: [, 216], 119153: [, 216], 119154: [, 216], 119163: [, 220], 119164: [, 220], 119165: [, 220], 119166: [, 220], 119167: [, 220], 119168: [, 220], 119169: [, 220], 119170: [, 220], 119173: [, 230], 119174: [, 230], 119175: [, 230], 119176: [, 230], 119177: [, 230], 119178: [, 220], 119179: [, 220], 119210: [, 230], 119211: [, 230], 119212: [, 230], 119213: [, 230], 119227: [[119225, 119141], 512], 119228: [[119226, 119141], 512], 119229: [[119227, 119150], 512], 119230: [[119228, 119150], 512], 119231: [[119227, 119151], 512], 119232: [[119228, 119151], 512] }, 53760: { 119362: [, 230], 119363: [, 230], 119364: [, 230] }, 54272: { 119808: [[65], 256], 119809: [[66], 256], 119810: [[67], 256], 119811: [[68], 256], 119812: [[69], 256], 119813: [[70], 256], 119814: [[71], 256], 119815: [[72], 256], 119816: [[73], 256], 119817: [[74], 256], 119818: [[75], 256], 119819: [[76], 256], 119820: [[77], 256], 119821: [[78], 256], 119822: [[79], 256], 119823: [[80], 256], 119824: [[81], 256], 119825: [[82], 256], 119826: [[83], 256], 119827: [[84], 256], 119828: [[85], 256], 119829: [[86], 256], 119830: [[87], 256], 119831: [[88], 256], 119832: [[89], 256], 119833: [[90], 256], 119834: [[97], 256], 119835: [[98], 256], 119836: [[99], 256], 119837: [[100], 256], 119838: [[101], 256], 119839: [[102], 256], 119840: [[103], 256], 119841: [[104], 256], 119842: [[105], 256], 119843: [[106], 256], 119844: [[107], 256], 119845: [[108], 256], 119846: [[109], 256], 119847: [[110], 256], 119848: [[111], 256], 119849: [[112], 256], 119850: [[113], 256], 119851: [[114], 256], 119852: [[115], 256], 119853: [[116], 256], 119854: [[117], 256], 119855: [[118], 256], 119856: [[119], 256], 119857: [[120], 256], 119858: [[121], 256], 119859: [[122], 256], 119860: [[65], 256], 119861: [[66], 256], 119862: [[67], 256], 119863: [[68], 256], 119864: [[69], 256], 119865: [[70], 256], 119866: [[71], 256], 119867: [[72], 256], 119868: [[73], 256], 119869: [[74], 256], 119870: [[75], 256], 119871: [[76], 256], 119872: [[77], 256], 119873: [[78], 256], 119874: [[79], 256], 119875: [[80], 256], 119876: [[81], 256], 119877: [[82], 256], 119878: [[83], 256], 119879: [[84], 256], 119880: [[85], 256], 119881: [[86], 256], 119882: [[87], 256], 119883: [[88], 256], 119884: [[89], 256], 119885: [[90], 256], 119886: [[97], 256], 119887: [[98], 256], 119888: [[99], 256], 119889: [[100], 256], 119890: [[101], 256], 119891: [[102], 256], 119892: [[103], 256], 119894: [[105], 256], 119895: [[106], 256], 119896: [[107], 256], 119897: [[108], 256], 119898: [[109], 256], 119899: [[110], 256], 119900: [[111], 256], 119901: [[112], 256], 119902: [[113], 256], 119903: [[114], 256], 119904: [[115], 256], 119905: [[116], 256], 119906: [[117], 256], 119907: [[118], 256], 119908: [[119], 256], 119909: [[120], 256], 119910: [[121], 256], 119911: [[122], 256], 119912: [[65], 256], 119913: [[66], 256], 119914: [[67], 256], 119915: [[68], 256], 119916: [[69], 256], 119917: [[70], 256], 119918: [[71], 256], 119919: [[72], 256], 119920: [[73], 256], 119921: [[74], 256], 119922: [[75], 256], 119923: [[76], 256], 119924: [[77], 256], 119925: [[78], 256], 119926: [[79], 256], 119927: [[80], 256], 119928: [[81], 256], 119929: [[82], 256], 119930: [[83], 256], 119931: [[84], 256], 119932: [[85], 256], 119933: [[86], 256], 119934: [[87], 256], 119935: [[88], 256], 119936: [[89], 256], 119937: [[90], 256], 119938: [[97], 256], 119939: [[98], 256], 119940: [[99], 256], 119941: [[100], 256], 119942: [[101], 256], 119943: [[102], 256], 119944: [[103], 256], 119945: [[104], 256], 119946: [[105], 256], 119947: [[106], 256], 119948: [[107], 256], 119949: [[108], 256], 119950: [[109], 256], 119951: [[110], 256], 119952: [[111], 256], 119953: [[112], 256], 119954: [[113], 256], 119955: [[114], 256], 119956: [[115], 256], 119957: [[116], 256], 119958: [[117], 256], 119959: [[118], 256], 119960: [[119], 256], 119961: [[120], 256], 119962: [[121], 256], 119963: [[122], 256], 119964: [[65], 256], 119966: [[67], 256], 119967: [[68], 256], 119970: [[71], 256], 119973: [[74], 256], 119974: [[75], 256], 119977: [[78], 256], 119978: [[79], 256], 119979: [[80], 256], 119980: [[81], 256], 119982: [[83], 256], 119983: [[84], 256], 119984: [[85], 256], 119985: [[86], 256], 119986: [[87], 256], 119987: [[88], 256], 119988: [[89], 256], 119989: [[90], 256], 119990: [[97], 256], 119991: [[98], 256], 119992: [[99], 256], 119993: [[100], 256], 119995: [[102], 256], 119997: [[104], 256], 119998: [[105], 256], 119999: [[106], 256], 12e4: [[107], 256], 120001: [[108], 256], 120002: [[109], 256], 120003: [[110], 256], 120005: [[112], 256], 120006: [[113], 256], 120007: [[114], 256], 120008: [[115], 256], 120009: [[116], 256], 120010: [[117], 256], 120011: [[118], 256], 120012: [[119], 256], 120013: [[120], 256], 120014: [[121], 256], 120015: [[122], 256], 120016: [[65], 256], 120017: [[66], 256], 120018: [[67], 256], 120019: [[68], 256], 120020: [[69], 256], 120021: [[70], 256], 120022: [[71], 256], 120023: [[72], 256], 120024: [[73], 256], 120025: [[74], 256], 120026: [[75], 256], 120027: [[76], 256], 120028: [[77], 256], 120029: [[78], 256], 120030: [[79], 256], 120031: [[80], 256], 120032: [[81], 256], 120033: [[82], 256], 120034: [[83], 256], 120035: [[84], 256], 120036: [[85], 256], 120037: [[86], 256], 120038: [[87], 256], 120039: [[88], 256], 120040: [[89], 256], 120041: [[90], 256], 120042: [[97], 256], 120043: [[98], 256], 120044: [[99], 256], 120045: [[100], 256], 120046: [[101], 256], 120047: [[102], 256], 120048: [[103], 256], 120049: [[104], 256], 120050: [[105], 256], 120051: [[106], 256], 120052: [[107], 256], 120053: [[108], 256], 120054: [[109], 256], 120055: [[110], 256], 120056: [[111], 256], 120057: [[112], 256], 120058: [[113], 256], 120059: [[114], 256], 120060: [[115], 256], 120061: [[116], 256], 120062: [[117], 256], 120063: [[118], 256] }, 54528: { 120064: [[119], 256], 120065: [[120], 256], 120066: [[121], 256], 120067: [[122], 256], 120068: [[65], 256], 120069: [[66], 256], 120071: [[68], 256], 120072: [[69], 256], 120073: [[70], 256], 120074: [[71], 256], 120077: [[74], 256], 120078: [[75], 256], 120079: [[76], 256], 120080: [[77], 256], 120081: [[78], 256], 120082: [[79], 256], 120083: [[80], 256], 120084: [[81], 256], 120086: [[83], 256], 120087: [[84], 256], 120088: [[85], 256], 120089: [[86], 256], 120090: [[87], 256], 120091: [[88], 256], 120092: [[89], 256], 120094: [[97], 256], 120095: [[98], 256], 120096: [[99], 256], 120097: [[100], 256], 120098: [[101], 256], 120099: [[102], 256], 120100: [[103], 256], 120101: [[104], 256], 120102: [[105], 256], 120103: [[106], 256], 120104: [[107], 256], 120105: [[108], 256], 120106: [[109], 256], 120107: [[110], 256], 120108: [[111], 256], 120109: [[112], 256], 120110: [[113], 256], 120111: [[114], 256], 120112: [[115], 256], 120113: [[116], 256], 120114: [[117], 256], 120115: [[118], 256], 120116: [[119], 256], 120117: [[120], 256], 120118: [[121], 256], 120119: [[122], 256], 120120: [[65], 256], 120121: [[66], 256], 120123: [[68], 256], 120124: [[69], 256], 120125: [[70], 256], 120126: [[71], 256], 120128: [[73], 256], 120129: [[74], 256], 120130: [[75], 256], 120131: [[76], 256], 120132: [[77], 256], 120134: [[79], 256], 120138: [[83], 256], 120139: [[84], 256], 120140: [[85], 256], 120141: [[86], 256], 120142: [[87], 256], 120143: [[88], 256], 120144: [[89], 256], 120146: [[97], 256], 120147: [[98], 256], 120148: [[99], 256], 120149: [[100], 256], 120150: [[101], 256], 120151: [[102], 256], 120152: [[103], 256], 120153: [[104], 256], 120154: [[105], 256], 120155: [[106], 256], 120156: [[107], 256], 120157: [[108], 256], 120158: [[109], 256], 120159: [[110], 256], 120160: [[111], 256], 120161: [[112], 256], 120162: [[113], 256], 120163: [[114], 256], 120164: [[115], 256], 120165: [[116], 256], 120166: [[117], 256], 120167: [[118], 256], 120168: [[119], 256], 120169: [[120], 256], 120170: [[121], 256], 120171: [[122], 256], 120172: [[65], 256], 120173: [[66], 256], 120174: [[67], 256], 120175: [[68], 256], 120176: [[69], 256], 120177: [[70], 256], 120178: [[71], 256], 120179: [[72], 256], 120180: [[73], 256], 120181: [[74], 256], 120182: [[75], 256], 120183: [[76], 256], 120184: [[77], 256], 120185: [[78], 256], 120186: [[79], 256], 120187: [[80], 256], 120188: [[81], 256], 120189: [[82], 256], 120190: [[83], 256], 120191: [[84], 256], 120192: [[85], 256], 120193: [[86], 256], 120194: [[87], 256], 120195: [[88], 256], 120196: [[89], 256], 120197: [[90], 256], 120198: [[97], 256], 120199: [[98], 256], 120200: [[99], 256], 120201: [[100], 256], 120202: [[101], 256], 120203: [[102], 256], 120204: [[103], 256], 120205: [[104], 256], 120206: [[105], 256], 120207: [[106], 256], 120208: [[107], 256], 120209: [[108], 256], 120210: [[109], 256], 120211: [[110], 256], 120212: [[111], 256], 120213: [[112], 256], 120214: [[113], 256], 120215: [[114], 256], 120216: [[115], 256], 120217: [[116], 256], 120218: [[117], 256], 120219: [[118], 256], 120220: [[119], 256], 120221: [[120], 256], 120222: [[121], 256], 120223: [[122], 256], 120224: [[65], 256], 120225: [[66], 256], 120226: [[67], 256], 120227: [[68], 256], 120228: [[69], 256], 120229: [[70], 256], 120230: [[71], 256], 120231: [[72], 256], 120232: [[73], 256], 120233: [[74], 256], 120234: [[75], 256], 120235: [[76], 256], 120236: [[77], 256], 120237: [[78], 256], 120238: [[79], 256], 120239: [[80], 256], 120240: [[81], 256], 120241: [[82], 256], 120242: [[83], 256], 120243: [[84], 256], 120244: [[85], 256], 120245: [[86], 256], 120246: [[87], 256], 120247: [[88], 256], 120248: [[89], 256], 120249: [[90], 256], 120250: [[97], 256], 120251: [[98], 256], 120252: [[99], 256], 120253: [[100], 256], 120254: [[101], 256], 120255: [[102], 256], 120256: [[103], 256], 120257: [[104], 256], 120258: [[105], 256], 120259: [[106], 256], 120260: [[107], 256], 120261: [[108], 256], 120262: [[109], 256], 120263: [[110], 256], 120264: [[111], 256], 120265: [[112], 256], 120266: [[113], 256], 120267: [[114], 256], 120268: [[115], 256], 120269: [[116], 256], 120270: [[117], 256], 120271: [[118], 256], 120272: [[119], 256], 120273: [[120], 256], 120274: [[121], 256], 120275: [[122], 256], 120276: [[65], 256], 120277: [[66], 256], 120278: [[67], 256], 120279: [[68], 256], 120280: [[69], 256], 120281: [[70], 256], 120282: [[71], 256], 120283: [[72], 256], 120284: [[73], 256], 120285: [[74], 256], 120286: [[75], 256], 120287: [[76], 256], 120288: [[77], 256], 120289: [[78], 256], 120290: [[79], 256], 120291: [[80], 256], 120292: [[81], 256], 120293: [[82], 256], 120294: [[83], 256], 120295: [[84], 256], 120296: [[85], 256], 120297: [[86], 256], 120298: [[87], 256], 120299: [[88], 256], 120300: [[89], 256], 120301: [[90], 256], 120302: [[97], 256], 120303: [[98], 256], 120304: [[99], 256], 120305: [[100], 256], 120306: [[101], 256], 120307: [[102], 256], 120308: [[103], 256], 120309: [[104], 256], 120310: [[105], 256], 120311: [[106], 256], 120312: [[107], 256], 120313: [[108], 256], 120314: [[109], 256], 120315: [[110], 256], 120316: [[111], 256], 120317: [[112], 256], 120318: [[113], 256], 120319: [[114], 256] }, 54784: { 120320: [[115], 256], 120321: [[116], 256], 120322: [[117], 256], 120323: [[118], 256], 120324: [[119], 256], 120325: [[120], 256], 120326: [[121], 256], 120327: [[122], 256], 120328: [[65], 256], 120329: [[66], 256], 120330: [[67], 256], 120331: [[68], 256], 120332: [[69], 256], 120333: [[70], 256], 120334: [[71], 256], 120335: [[72], 256], 120336: [[73], 256], 120337: [[74], 256], 120338: [[75], 256], 120339: [[76], 256], 120340: [[77], 256], 120341: [[78], 256], 120342: [[79], 256], 120343: [[80], 256], 120344: [[81], 256], 120345: [[82], 256], 120346: [[83], 256], 120347: [[84], 256], 120348: [[85], 256], 120349: [[86], 256], 120350: [[87], 256], 120351: [[88], 256], 120352: [[89], 256], 120353: [[90], 256], 120354: [[97], 256], 120355: [[98], 256], 120356: [[99], 256], 120357: [[100], 256], 120358: [[101], 256], 120359: [[102], 256], 120360: [[103], 256], 120361: [[104], 256], 120362: [[105], 256], 120363: [[106], 256], 120364: [[107], 256], 120365: [[108], 256], 120366: [[109], 256], 120367: [[110], 256], 120368: [[111], 256], 120369: [[112], 256], 120370: [[113], 256], 120371: [[114], 256], 120372: [[115], 256], 120373: [[116], 256], 120374: [[117], 256], 120375: [[118], 256], 120376: [[119], 256], 120377: [[120], 256], 120378: [[121], 256], 120379: [[122], 256], 120380: [[65], 256], 120381: [[66], 256], 120382: [[67], 256], 120383: [[68], 256], 120384: [[69], 256], 120385: [[70], 256], 120386: [[71], 256], 120387: [[72], 256], 120388: [[73], 256], 120389: [[74], 256], 120390: [[75], 256], 120391: [[76], 256], 120392: [[77], 256], 120393: [[78], 256], 120394: [[79], 256], 120395: [[80], 256], 120396: [[81], 256], 120397: [[82], 256], 120398: [[83], 256], 120399: [[84], 256], 120400: [[85], 256], 120401: [[86], 256], 120402: [[87], 256], 120403: [[88], 256], 120404: [[89], 256], 120405: [[90], 256], 120406: [[97], 256], 120407: [[98], 256], 120408: [[99], 256], 120409: [[100], 256], 120410: [[101], 256], 120411: [[102], 256], 120412: [[103], 256], 120413: [[104], 256], 120414: [[105], 256], 120415: [[106], 256], 120416: [[107], 256], 120417: [[108], 256], 120418: [[109], 256], 120419: [[110], 256], 120420: [[111], 256], 120421: [[112], 256], 120422: [[113], 256], 120423: [[114], 256], 120424: [[115], 256], 120425: [[116], 256], 120426: [[117], 256], 120427: [[118], 256], 120428: [[119], 256], 120429: [[120], 256], 120430: [[121], 256], 120431: [[122], 256], 120432: [[65], 256], 120433: [[66], 256], 120434: [[67], 256], 120435: [[68], 256], 120436: [[69], 256], 120437: [[70], 256], 120438: [[71], 256], 120439: [[72], 256], 120440: [[73], 256], 120441: [[74], 256], 120442: [[75], 256], 120443: [[76], 256], 120444: [[77], 256], 120445: [[78], 256], 120446: [[79], 256], 120447: [[80], 256], 120448: [[81], 256], 120449: [[82], 256], 120450: [[83], 256], 120451: [[84], 256], 120452: [[85], 256], 120453: [[86], 256], 120454: [[87], 256], 120455: [[88], 256], 120456: [[89], 256], 120457: [[90], 256], 120458: [[97], 256], 120459: [[98], 256], 120460: [[99], 256], 120461: [[100], 256], 120462: [[101], 256], 120463: [[102], 256], 120464: [[103], 256], 120465: [[104], 256], 120466: [[105], 256], 120467: [[106], 256], 120468: [[107], 256], 120469: [[108], 256], 120470: [[109], 256], 120471: [[110], 256], 120472: [[111], 256], 120473: [[112], 256], 120474: [[113], 256], 120475: [[114], 256], 120476: [[115], 256], 120477: [[116], 256], 120478: [[117], 256], 120479: [[118], 256], 120480: [[119], 256], 120481: [[120], 256], 120482: [[121], 256], 120483: [[122], 256], 120484: [[305], 256], 120485: [[567], 256], 120488: [[913], 256], 120489: [[914], 256], 120490: [[915], 256], 120491: [[916], 256], 120492: [[917], 256], 120493: [[918], 256], 120494: [[919], 256], 120495: [[920], 256], 120496: [[921], 256], 120497: [[922], 256], 120498: [[923], 256], 120499: [[924], 256], 120500: [[925], 256], 120501: [[926], 256], 120502: [[927], 256], 120503: [[928], 256], 120504: [[929], 256], 120505: [[1012], 256], 120506: [[931], 256], 120507: [[932], 256], 120508: [[933], 256], 120509: [[934], 256], 120510: [[935], 256], 120511: [[936], 256], 120512: [[937], 256], 120513: [[8711], 256], 120514: [[945], 256], 120515: [[946], 256], 120516: [[947], 256], 120517: [[948], 256], 120518: [[949], 256], 120519: [[950], 256], 120520: [[951], 256], 120521: [[952], 256], 120522: [[953], 256], 120523: [[954], 256], 120524: [[955], 256], 120525: [[956], 256], 120526: [[957], 256], 120527: [[958], 256], 120528: [[959], 256], 120529: [[960], 256], 120530: [[961], 256], 120531: [[962], 256], 120532: [[963], 256], 120533: [[964], 256], 120534: [[965], 256], 120535: [[966], 256], 120536: [[967], 256], 120537: [[968], 256], 120538: [[969], 256], 120539: [[8706], 256], 120540: [[1013], 256], 120541: [[977], 256], 120542: [[1008], 256], 120543: [[981], 256], 120544: [[1009], 256], 120545: [[982], 256], 120546: [[913], 256], 120547: [[914], 256], 120548: [[915], 256], 120549: [[916], 256], 120550: [[917], 256], 120551: [[918], 256], 120552: [[919], 256], 120553: [[920], 256], 120554: [[921], 256], 120555: [[922], 256], 120556: [[923], 256], 120557: [[924], 256], 120558: [[925], 256], 120559: [[926], 256], 120560: [[927], 256], 120561: [[928], 256], 120562: [[929], 256], 120563: [[1012], 256], 120564: [[931], 256], 120565: [[932], 256], 120566: [[933], 256], 120567: [[934], 256], 120568: [[935], 256], 120569: [[936], 256], 120570: [[937], 256], 120571: [[8711], 256], 120572: [[945], 256], 120573: [[946], 256], 120574: [[947], 256], 120575: [[948], 256] }, 55040: { 120576: [[949], 256], 120577: [[950], 256], 120578: [[951], 256], 120579: [[952], 256], 120580: [[953], 256], 120581: [[954], 256], 120582: [[955], 256], 120583: [[956], 256], 120584: [[957], 256], 120585: [[958], 256], 120586: [[959], 256], 120587: [[960], 256], 120588: [[961], 256], 120589: [[962], 256], 120590: [[963], 256], 120591: [[964], 256], 120592: [[965], 256], 120593: [[966], 256], 120594: [[967], 256], 120595: [[968], 256], 120596: [[969], 256], 120597: [[8706], 256], 120598: [[1013], 256], 120599: [[977], 256], 120600: [[1008], 256], 120601: [[981], 256], 120602: [[1009], 256], 120603: [[982], 256], 120604: [[913], 256], 120605: [[914], 256], 120606: [[915], 256], 120607: [[916], 256], 120608: [[917], 256], 120609: [[918], 256], 120610: [[919], 256], 120611: [[920], 256], 120612: [[921], 256], 120613: [[922], 256], 120614: [[923], 256], 120615: [[924], 256], 120616: [[925], 256], 120617: [[926], 256], 120618: [[927], 256], 120619: [[928], 256], 120620: [[929], 256], 120621: [[1012], 256], 120622: [[931], 256], 120623: [[932], 256], 120624: [[933], 256], 120625: [[934], 256], 120626: [[935], 256], 120627: [[936], 256], 120628: [[937], 256], 120629: [[8711], 256], 120630: [[945], 256], 120631: [[946], 256], 120632: [[947], 256], 120633: [[948], 256], 120634: [[949], 256], 120635: [[950], 256], 120636: [[951], 256], 120637: [[952], 256], 120638: [[953], 256], 120639: [[954], 256], 120640: [[955], 256], 120641: [[956], 256], 120642: [[957], 256], 120643: [[958], 256], 120644: [[959], 256], 120645: [[960], 256], 120646: [[961], 256], 120647: [[962], 256], 120648: [[963], 256], 120649: [[964], 256], 120650: [[965], 256], 120651: [[966], 256], 120652: [[967], 256], 120653: [[968], 256], 120654: [[969], 256], 120655: [[8706], 256], 120656: [[1013], 256], 120657: [[977], 256], 120658: [[1008], 256], 120659: [[981], 256], 120660: [[1009], 256], 120661: [[982], 256], 120662: [[913], 256], 120663: [[914], 256], 120664: [[915], 256], 120665: [[916], 256], 120666: [[917], 256], 120667: [[918], 256], 120668: [[919], 256], 120669: [[920], 256], 120670: [[921], 256], 120671: [[922], 256], 120672: [[923], 256], 120673: [[924], 256], 120674: [[925], 256], 120675: [[926], 256], 120676: [[927], 256], 120677: [[928], 256], 120678: [[929], 256], 120679: [[1012], 256], 120680: [[931], 256], 120681: [[932], 256], 120682: [[933], 256], 120683: [[934], 256], 120684: [[935], 256], 120685: [[936], 256], 120686: [[937], 256], 120687: [[8711], 256], 120688: [[945], 256], 120689: [[946], 256], 120690: [[947], 256], 120691: [[948], 256], 120692: [[949], 256], 120693: [[950], 256], 120694: [[951], 256], 120695: [[952], 256], 120696: [[953], 256], 120697: [[954], 256], 120698: [[955], 256], 120699: [[956], 256], 120700: [[957], 256], 120701: [[958], 256], 120702: [[959], 256], 120703: [[960], 256], 120704: [[961], 256], 120705: [[962], 256], 120706: [[963], 256], 120707: [[964], 256], 120708: [[965], 256], 120709: [[966], 256], 120710: [[967], 256], 120711: [[968], 256], 120712: [[969], 256], 120713: [[8706], 256], 120714: [[1013], 256], 120715: [[977], 256], 120716: [[1008], 256], 120717: [[981], 256], 120718: [[1009], 256], 120719: [[982], 256], 120720: [[913], 256], 120721: [[914], 256], 120722: [[915], 256], 120723: [[916], 256], 120724: [[917], 256], 120725: [[918], 256], 120726: [[919], 256], 120727: [[920], 256], 120728: [[921], 256], 120729: [[922], 256], 120730: [[923], 256], 120731: [[924], 256], 120732: [[925], 256], 120733: [[926], 256], 120734: [[927], 256], 120735: [[928], 256], 120736: [[929], 256], 120737: [[1012], 256], 120738: [[931], 256], 120739: [[932], 256], 120740: [[933], 256], 120741: [[934], 256], 120742: [[935], 256], 120743: [[936], 256], 120744: [[937], 256], 120745: [[8711], 256], 120746: [[945], 256], 120747: [[946], 256], 120748: [[947], 256], 120749: [[948], 256], 120750: [[949], 256], 120751: [[950], 256], 120752: [[951], 256], 120753: [[952], 256], 120754: [[953], 256], 120755: [[954], 256], 120756: [[955], 256], 120757: [[956], 256], 120758: [[957], 256], 120759: [[958], 256], 120760: [[959], 256], 120761: [[960], 256], 120762: [[961], 256], 120763: [[962], 256], 120764: [[963], 256], 120765: [[964], 256], 120766: [[965], 256], 120767: [[966], 256], 120768: [[967], 256], 120769: [[968], 256], 120770: [[969], 256], 120771: [[8706], 256], 120772: [[1013], 256], 120773: [[977], 256], 120774: [[1008], 256], 120775: [[981], 256], 120776: [[1009], 256], 120777: [[982], 256], 120778: [[988], 256], 120779: [[989], 256], 120782: [[48], 256], 120783: [[49], 256], 120784: [[50], 256], 120785: [[51], 256], 120786: [[52], 256], 120787: [[53], 256], 120788: [[54], 256], 120789: [[55], 256], 120790: [[56], 256], 120791: [[57], 256], 120792: [[48], 256], 120793: [[49], 256], 120794: [[50], 256], 120795: [[51], 256], 120796: [[52], 256], 120797: [[53], 256], 120798: [[54], 256], 120799: [[55], 256], 120800: [[56], 256], 120801: [[57], 256], 120802: [[48], 256], 120803: [[49], 256], 120804: [[50], 256], 120805: [[51], 256], 120806: [[52], 256], 120807: [[53], 256], 120808: [[54], 256], 120809: [[55], 256], 120810: [[56], 256], 120811: [[57], 256], 120812: [[48], 256], 120813: [[49], 256], 120814: [[50], 256], 120815: [[51], 256], 120816: [[52], 256], 120817: [[53], 256], 120818: [[54], 256], 120819: [[55], 256], 120820: [[56], 256], 120821: [[57], 256], 120822: [[48], 256], 120823: [[49], 256], 120824: [[50], 256], 120825: [[51], 256], 120826: [[52], 256], 120827: [[53], 256], 120828: [[54], 256], 120829: [[55], 256], 120830: [[56], 256], 120831: [[57], 256] }, 59392: { 125136: [, 220], 125137: [, 220], 125138: [, 220], 125139: [, 220], 125140: [, 220], 125141: [, 220], 125142: [, 220] }, 60928: { 126464: [[1575], 256], 126465: [[1576], 256], 126466: [[1580], 256], 126467: [[1583], 256], 126469: [[1608], 256], 126470: [[1586], 256], 126471: [[1581], 256], 126472: [[1591], 256], 126473: [[1610], 256], 126474: [[1603], 256], 126475: [[1604], 256], 126476: [[1605], 256], 126477: [[1606], 256], 126478: [[1587], 256], 126479: [[1593], 256], 126480: [[1601], 256], 126481: [[1589], 256], 126482: [[1602], 256], 126483: [[1585], 256], 126484: [[1588], 256], 126485: [[1578], 256], 126486: [[1579], 256], 126487: [[1582], 256], 126488: [[1584], 256], 126489: [[1590], 256], 126490: [[1592], 256], 126491: [[1594], 256], 126492: [[1646], 256], 126493: [[1722], 256], 126494: [[1697], 256], 126495: [[1647], 256], 126497: [[1576], 256], 126498: [[1580], 256], 126500: [[1607], 256], 126503: [[1581], 256], 126505: [[1610], 256], 126506: [[1603], 256], 126507: [[1604], 256], 126508: [[1605], 256], 126509: [[1606], 256], 126510: [[1587], 256], 126511: [[1593], 256], 126512: [[1601], 256], 126513: [[1589], 256], 126514: [[1602], 256], 126516: [[1588], 256], 126517: [[1578], 256], 126518: [[1579], 256], 126519: [[1582], 256], 126521: [[1590], 256], 126523: [[1594], 256], 126530: [[1580], 256], 126535: [[1581], 256], 126537: [[1610], 256], 126539: [[1604], 256], 126541: [[1606], 256], 126542: [[1587], 256], 126543: [[1593], 256], 126545: [[1589], 256], 126546: [[1602], 256], 126548: [[1588], 256], 126551: [[1582], 256], 126553: [[1590], 256], 126555: [[1594], 256], 126557: [[1722], 256], 126559: [[1647], 256], 126561: [[1576], 256], 126562: [[1580], 256], 126564: [[1607], 256], 126567: [[1581], 256], 126568: [[1591], 256], 126569: [[1610], 256], 126570: [[1603], 256], 126572: [[1605], 256], 126573: [[1606], 256], 126574: [[1587], 256], 126575: [[1593], 256], 126576: [[1601], 256], 126577: [[1589], 256], 126578: [[1602], 256], 126580: [[1588], 256], 126581: [[1578], 256], 126582: [[1579], 256], 126583: [[1582], 256], 126585: [[1590], 256], 126586: [[1592], 256], 126587: [[1594], 256], 126588: [[1646], 256], 126590: [[1697], 256], 126592: [[1575], 256], 126593: [[1576], 256], 126594: [[1580], 256], 126595: [[1583], 256], 126596: [[1607], 256], 126597: [[1608], 256], 126598: [[1586], 256], 126599: [[1581], 256], 126600: [[1591], 256], 126601: [[1610], 256], 126603: [[1604], 256], 126604: [[1605], 256], 126605: [[1606], 256], 126606: [[1587], 256], 126607: [[1593], 256], 126608: [[1601], 256], 126609: [[1589], 256], 126610: [[1602], 256], 126611: [[1585], 256], 126612: [[1588], 256], 126613: [[1578], 256], 126614: [[1579], 256], 126615: [[1582], 256], 126616: [[1584], 256], 126617: [[1590], 256], 126618: [[1592], 256], 126619: [[1594], 256], 126625: [[1576], 256], 126626: [[1580], 256], 126627: [[1583], 256], 126629: [[1608], 256], 126630: [[1586], 256], 126631: [[1581], 256], 126632: [[1591], 256], 126633: [[1610], 256], 126635: [[1604], 256], 126636: [[1605], 256], 126637: [[1606], 256], 126638: [[1587], 256], 126639: [[1593], 256], 126640: [[1601], 256], 126641: [[1589], 256], 126642: [[1602], 256], 126643: [[1585], 256], 126644: [[1588], 256], 126645: [[1578], 256], 126646: [[1579], 256], 126647: [[1582], 256], 126648: [[1584], 256], 126649: [[1590], 256], 126650: [[1592], 256], 126651: [[1594], 256] }, 61696: { 127232: [[48, 46], 256], 127233: [[48, 44], 256], 127234: [[49, 44], 256], 127235: [[50, 44], 256], 127236: [[51, 44], 256], 127237: [[52, 44], 256], 127238: [[53, 44], 256], 127239: [[54, 44], 256], 127240: [[55, 44], 256], 127241: [[56, 44], 256], 127242: [[57, 44], 256], 127248: [[40, 65, 41], 256], 127249: [[40, 66, 41], 256], 127250: [[40, 67, 41], 256], 127251: [[40, 68, 41], 256], 127252: [[40, 69, 41], 256], 127253: [[40, 70, 41], 256], 127254: [[40, 71, 41], 256], 127255: [[40, 72, 41], 256], 127256: [[40, 73, 41], 256], 127257: [[40, 74, 41], 256], 127258: [[40, 75, 41], 256], 127259: [[40, 76, 41], 256], 127260: [[40, 77, 41], 256], 127261: [[40, 78, 41], 256], 127262: [[40, 79, 41], 256], 127263: [[40, 80, 41], 256], 127264: [[40, 81, 41], 256], 127265: [[40, 82, 41], 256], 127266: [[40, 83, 41], 256], 127267: [[40, 84, 41], 256], 127268: [[40, 85, 41], 256], 127269: [[40, 86, 41], 256], 127270: [[40, 87, 41], 256], 127271: [[40, 88, 41], 256], 127272: [[40, 89, 41], 256], 127273: [[40, 90, 41], 256], 127274: [[12308, 83, 12309], 256], 127275: [[67], 256], 127276: [[82], 256], 127277: [[67, 68], 256], 127278: [[87, 90], 256], 127280: [[65], 256], 127281: [[66], 256], 127282: [[67], 256], 127283: [[68], 256], 127284: [[69], 256], 127285: [[70], 256], 127286: [[71], 256], 127287: [[72], 256], 127288: [[73], 256], 127289: [[74], 256], 127290: [[75], 256], 127291: [[76], 256], 127292: [[77], 256], 127293: [[78], 256], 127294: [[79], 256], 127295: [[80], 256], 127296: [[81], 256], 127297: [[82], 256], 127298: [[83], 256], 127299: [[84], 256], 127300: [[85], 256], 127301: [[86], 256], 127302: [[87], 256], 127303: [[88], 256], 127304: [[89], 256], 127305: [[90], 256], 127306: [[72, 86], 256], 127307: [[77, 86], 256], 127308: [[83, 68], 256], 127309: [[83, 83], 256], 127310: [[80, 80, 86], 256], 127311: [[87, 67], 256], 127338: [[77, 67], 256], 127339: [[77, 68], 256], 127376: [[68, 74], 256] }, 61952: { 127488: [[12411, 12363], 256], 127489: [[12467, 12467], 256], 127490: [[12469], 256], 127504: [[25163], 256], 127505: [[23383], 256], 127506: [[21452], 256], 127507: [[12487], 256], 127508: [[20108], 256], 127509: [[22810], 256], 127510: [[35299], 256], 127511: [[22825], 256], 127512: [[20132], 256], 127513: [[26144], 256], 127514: [[28961], 256], 127515: [[26009], 256], 127516: [[21069], 256], 127517: [[24460], 256], 127518: [[20877], 256], 127519: [[26032], 256], 127520: [[21021], 256], 127521: [[32066], 256], 127522: [[29983], 256], 127523: [[36009], 256], 127524: [[22768], 256], 127525: [[21561], 256], 127526: [[28436], 256], 127527: [[25237], 256], 127528: [[25429], 256], 127529: [[19968], 256], 127530: [[19977], 256], 127531: [[36938], 256], 127532: [[24038], 256], 127533: [[20013], 256], 127534: [[21491], 256], 127535: [[25351], 256], 127536: [[36208], 256], 127537: [[25171], 256], 127538: [[31105], 256], 127539: [[31354], 256], 127540: [[21512], 256], 127541: [[28288], 256], 127542: [[26377], 256], 127543: [[26376], 256], 127544: [[30003], 256], 127545: [[21106], 256], 127546: [[21942], 256], 127552: [[12308, 26412, 12309], 256], 127553: [[12308, 19977, 12309], 256], 127554: [[12308, 20108, 12309], 256], 127555: [[12308, 23433, 12309], 256], 127556: [[12308, 28857, 12309], 256], 127557: [[12308, 25171, 12309], 256], 127558: [[12308, 30423, 12309], 256], 127559: [[12308, 21213, 12309], 256], 127560: [[12308, 25943, 12309], 256], 127568: [[24471], 256], 127569: [[21487], 256] }, 63488: { 194560: [[20029]], 194561: [[20024]], 194562: [[20033]], 194563: [[131362]], 194564: [[20320]], 194565: [[20398]], 194566: [[20411]], 194567: [[20482]], 194568: [[20602]], 194569: [[20633]], 194570: [[20711]], 194571: [[20687]], 194572: [[13470]], 194573: [[132666]], 194574: [[20813]], 194575: [[20820]], 194576: [[20836]], 194577: [[20855]], 194578: [[132380]], 194579: [[13497]], 194580: [[20839]], 194581: [[20877]], 194582: [[132427]], 194583: [[20887]], 194584: [[20900]], 194585: [[20172]], 194586: [[20908]], 194587: [[20917]], 194588: [[168415]], 194589: [[20981]], 194590: [[20995]], 194591: [[13535]], 194592: [[21051]], 194593: [[21062]], 194594: [[21106]], 194595: [[21111]], 194596: [[13589]], 194597: [[21191]], 194598: [[21193]], 194599: [[21220]], 194600: [[21242]], 194601: [[21253]], 194602: [[21254]], 194603: [[21271]], 194604: [[21321]], 194605: [[21329]], 194606: [[21338]], 194607: [[21363]], 194608: [[21373]], 194609: [[21375]], 194610: [[21375]], 194611: [[21375]], 194612: [[133676]], 194613: [[28784]], 194614: [[21450]], 194615: [[21471]], 194616: [[133987]], 194617: [[21483]], 194618: [[21489]], 194619: [[21510]], 194620: [[21662]], 194621: [[21560]], 194622: [[21576]], 194623: [[21608]], 194624: [[21666]], 194625: [[21750]], 194626: [[21776]], 194627: [[21843]], 194628: [[21859]], 194629: [[21892]], 194630: [[21892]], 194631: [[21913]], 194632: [[21931]], 194633: [[21939]], 194634: [[21954]], 194635: [[22294]], 194636: [[22022]], 194637: [[22295]], 194638: [[22097]], 194639: [[22132]], 194640: [[20999]], 194641: [[22766]], 194642: [[22478]], 194643: [[22516]], 194644: [[22541]], 194645: [[22411]], 194646: [[22578]], 194647: [[22577]], 194648: [[22700]], 194649: [[136420]], 194650: [[22770]], 194651: [[22775]], 194652: [[22790]], 194653: [[22810]], 194654: [[22818]], 194655: [[22882]], 194656: [[136872]], 194657: [[136938]], 194658: [[23020]], 194659: [[23067]], 194660: [[23079]], 194661: [[23e3]], 194662: [[23142]], 194663: [[14062]], 194664: [[14076]], 194665: [[23304]], 194666: [[23358]], 194667: [[23358]], 194668: [[137672]], 194669: [[23491]], 194670: [[23512]], 194671: [[23527]], 194672: [[23539]], 194673: [[138008]], 194674: [[23551]], 194675: [[23558]], 194676: [[24403]], 194677: [[23586]], 194678: [[14209]], 194679: [[23648]], 194680: [[23662]], 194681: [[23744]], 194682: [[23693]], 194683: [[138724]], 194684: [[23875]], 194685: [[138726]], 194686: [[23918]], 194687: [[23915]], 194688: [[23932]], 194689: [[24033]], 194690: [[24034]], 194691: [[14383]], 194692: [[24061]], 194693: [[24104]], 194694: [[24125]], 194695: [[24169]], 194696: [[14434]], 194697: [[139651]], 194698: [[14460]], 194699: [[24240]], 194700: [[24243]], 194701: [[24246]], 194702: [[24266]], 194703: [[172946]], 194704: [[24318]], 194705: [[140081]], 194706: [[140081]], 194707: [[33281]], 194708: [[24354]], 194709: [[24354]], 194710: [[14535]], 194711: [[144056]], 194712: [[156122]], 194713: [[24418]], 194714: [[24427]], 194715: [[14563]], 194716: [[24474]], 194717: [[24525]], 194718: [[24535]], 194719: [[24569]], 194720: [[24705]], 194721: [[14650]], 194722: [[14620]], 194723: [[24724]], 194724: [[141012]], 194725: [[24775]], 194726: [[24904]], 194727: [[24908]], 194728: [[24910]], 194729: [[24908]], 194730: [[24954]], 194731: [[24974]], 194732: [[25010]], 194733: [[24996]], 194734: [[25007]], 194735: [[25054]], 194736: [[25074]], 194737: [[25078]], 194738: [[25104]], 194739: [[25115]], 194740: [[25181]], 194741: [[25265]], 194742: [[25300]], 194743: [[25424]], 194744: [[142092]], 194745: [[25405]], 194746: [[25340]], 194747: [[25448]], 194748: [[25475]], 194749: [[25572]], 194750: [[142321]], 194751: [[25634]], 194752: [[25541]], 194753: [[25513]], 194754: [[14894]], 194755: [[25705]], 194756: [[25726]], 194757: [[25757]], 194758: [[25719]], 194759: [[14956]], 194760: [[25935]], 194761: [[25964]], 194762: [[143370]], 194763: [[26083]], 194764: [[26360]], 194765: [[26185]], 194766: [[15129]], 194767: [[26257]], 194768: [[15112]], 194769: [[15076]], 194770: [[20882]], 194771: [[20885]], 194772: [[26368]], 194773: [[26268]], 194774: [[32941]], 194775: [[17369]], 194776: [[26391]], 194777: [[26395]], 194778: [[26401]], 194779: [[26462]], 194780: [[26451]], 194781: [[144323]], 194782: [[15177]], 194783: [[26618]], 194784: [[26501]], 194785: [[26706]], 194786: [[26757]], 194787: [[144493]], 194788: [[26766]], 194789: [[26655]], 194790: [[26900]], 194791: [[15261]], 194792: [[26946]], 194793: [[27043]], 194794: [[27114]], 194795: [[27304]], 194796: [[145059]], 194797: [[27355]], 194798: [[15384]], 194799: [[27425]], 194800: [[145575]], 194801: [[27476]], 194802: [[15438]], 194803: [[27506]], 194804: [[27551]], 194805: [[27578]], 194806: [[27579]], 194807: [[146061]], 194808: [[138507]], 194809: [[146170]], 194810: [[27726]], 194811: [[146620]], 194812: [[27839]], 194813: [[27853]], 194814: [[27751]], 194815: [[27926]] }, 63744: { 63744: [[35912]], 63745: [[26356]], 63746: [[36554]], 63747: [[36040]], 63748: [[28369]], 63749: [[20018]], 63750: [[21477]], 63751: [[40860]], 63752: [[40860]], 63753: [[22865]], 63754: [[37329]], 63755: [[21895]], 63756: [[22856]], 63757: [[25078]], 63758: [[30313]], 63759: [[32645]], 63760: [[34367]], 63761: [[34746]], 63762: [[35064]], 63763: [[37007]], 63764: [[27138]], 63765: [[27931]], 63766: [[28889]], 63767: [[29662]], 63768: [[33853]], 63769: [[37226]], 63770: [[39409]], 63771: [[20098]], 63772: [[21365]], 63773: [[27396]], 63774: [[29211]], 63775: [[34349]], 63776: [[40478]], 63777: [[23888]], 63778: [[28651]], 63779: [[34253]], 63780: [[35172]], 63781: [[25289]], 63782: [[33240]], 63783: [[34847]], 63784: [[24266]], 63785: [[26391]], 63786: [[28010]], 63787: [[29436]], 63788: [[37070]], 63789: [[20358]], 63790: [[20919]], 63791: [[21214]], 63792: [[25796]], 63793: [[27347]], 63794: [[29200]], 63795: [[30439]], 63796: [[32769]], 63797: [[34310]], 63798: [[34396]], 63799: [[36335]], 63800: [[38706]], 63801: [[39791]], 63802: [[40442]], 63803: [[30860]], 63804: [[31103]], 63805: [[32160]], 63806: [[33737]], 63807: [[37636]], 63808: [[40575]], 63809: [[35542]], 63810: [[22751]], 63811: [[24324]], 63812: [[31840]], 63813: [[32894]], 63814: [[29282]], 63815: [[30922]], 63816: [[36034]], 63817: [[38647]], 63818: [[22744]], 63819: [[23650]], 63820: [[27155]], 63821: [[28122]], 63822: [[28431]], 63823: [[32047]], 63824: [[32311]], 63825: [[38475]], 63826: [[21202]], 63827: [[32907]], 63828: [[20956]], 63829: [[20940]], 63830: [[31260]], 63831: [[32190]], 63832: [[33777]], 63833: [[38517]], 63834: [[35712]], 63835: [[25295]], 63836: [[27138]], 63837: [[35582]], 63838: [[20025]], 63839: [[23527]], 63840: [[24594]], 63841: [[29575]], 63842: [[30064]], 63843: [[21271]], 63844: [[30971]], 63845: [[20415]], 63846: [[24489]], 63847: [[19981]], 63848: [[27852]], 63849: [[25976]], 63850: [[32034]], 63851: [[21443]], 63852: [[22622]], 63853: [[30465]], 63854: [[33865]], 63855: [[35498]], 63856: [[27578]], 63857: [[36784]], 63858: [[27784]], 63859: [[25342]], 63860: [[33509]], 63861: [[25504]], 63862: [[30053]], 63863: [[20142]], 63864: [[20841]], 63865: [[20937]], 63866: [[26753]], 63867: [[31975]], 63868: [[33391]], 63869: [[35538]], 63870: [[37327]], 63871: [[21237]], 63872: [[21570]], 63873: [[22899]], 63874: [[24300]], 63875: [[26053]], 63876: [[28670]], 63877: [[31018]], 63878: [[38317]], 63879: [[39530]], 63880: [[40599]], 63881: [[40654]], 63882: [[21147]], 63883: [[26310]], 63884: [[27511]], 63885: [[36706]], 63886: [[24180]], 63887: [[24976]], 63888: [[25088]], 63889: [[25754]], 63890: [[28451]], 63891: [[29001]], 63892: [[29833]], 63893: [[31178]], 63894: [[32244]], 63895: [[32879]], 63896: [[36646]], 63897: [[34030]], 63898: [[36899]], 63899: [[37706]], 63900: [[21015]], 63901: [[21155]], 63902: [[21693]], 63903: [[28872]], 63904: [[35010]], 63905: [[35498]], 63906: [[24265]], 63907: [[24565]], 63908: [[25467]], 63909: [[27566]], 63910: [[31806]], 63911: [[29557]], 63912: [[20196]], 63913: [[22265]], 63914: [[23527]], 63915: [[23994]], 63916: [[24604]], 63917: [[29618]], 63918: [[29801]], 63919: [[32666]], 63920: [[32838]], 63921: [[37428]], 63922: [[38646]], 63923: [[38728]], 63924: [[38936]], 63925: [[20363]], 63926: [[31150]], 63927: [[37300]], 63928: [[38584]], 63929: [[24801]], 63930: [[20102]], 63931: [[20698]], 63932: [[23534]], 63933: [[23615]], 63934: [[26009]], 63935: [[27138]], 63936: [[29134]], 63937: [[30274]], 63938: [[34044]], 63939: [[36988]], 63940: [[40845]], 63941: [[26248]], 63942: [[38446]], 63943: [[21129]], 63944: [[26491]], 63945: [[26611]], 63946: [[27969]], 63947: [[28316]], 63948: [[29705]], 63949: [[30041]], 63950: [[30827]], 63951: [[32016]], 63952: [[39006]], 63953: [[20845]], 63954: [[25134]], 63955: [[38520]], 63956: [[20523]], 63957: [[23833]], 63958: [[28138]], 63959: [[36650]], 63960: [[24459]], 63961: [[24900]], 63962: [[26647]], 63963: [[29575]], 63964: [[38534]], 63965: [[21033]], 63966: [[21519]], 63967: [[23653]], 63968: [[26131]], 63969: [[26446]], 63970: [[26792]], 63971: [[27877]], 63972: [[29702]], 63973: [[30178]], 63974: [[32633]], 63975: [[35023]], 63976: [[35041]], 63977: [[37324]], 63978: [[38626]], 63979: [[21311]], 63980: [[28346]], 63981: [[21533]], 63982: [[29136]], 63983: [[29848]], 63984: [[34298]], 63985: [[38563]], 63986: [[40023]], 63987: [[40607]], 63988: [[26519]], 63989: [[28107]], 63990: [[33256]], 63991: [[31435]], 63992: [[31520]], 63993: [[31890]], 63994: [[29376]], 63995: [[28825]], 63996: [[35672]], 63997: [[20160]], 63998: [[33590]], 63999: [[21050]], 194816: [[27966]], 194817: [[28023]], 194818: [[27969]], 194819: [[28009]], 194820: [[28024]], 194821: [[28037]], 194822: [[146718]], 194823: [[27956]], 194824: [[28207]], 194825: [[28270]], 194826: [[15667]], 194827: [[28363]], 194828: [[28359]], 194829: [[147153]], 194830: [[28153]], 194831: [[28526]], 194832: [[147294]], 194833: [[147342]], 194834: [[28614]], 194835: [[28729]], 194836: [[28702]], 194837: [[28699]], 194838: [[15766]], 194839: [[28746]], 194840: [[28797]], 194841: [[28791]], 194842: [[28845]], 194843: [[132389]], 194844: [[28997]], 194845: [[148067]], 194846: [[29084]], 194847: [[148395]], 194848: [[29224]], 194849: [[29237]], 194850: [[29264]], 194851: [[149e3]], 194852: [[29312]], 194853: [[29333]], 194854: [[149301]], 194855: [[149524]], 194856: [[29562]], 194857: [[29579]], 194858: [[16044]], 194859: [[29605]], 194860: [[16056]], 194861: [[16056]], 194862: [[29767]], 194863: [[29788]], 194864: [[29809]], 194865: [[29829]], 194866: [[29898]], 194867: [[16155]], 194868: [[29988]], 194869: [[150582]], 194870: [[30014]], 194871: [[150674]], 194872: [[30064]], 194873: [[139679]], 194874: [[30224]], 194875: [[151457]], 194876: [[151480]], 194877: [[151620]], 194878: [[16380]], 194879: [[16392]], 194880: [[30452]], 194881: [[151795]], 194882: [[151794]], 194883: [[151833]], 194884: [[151859]], 194885: [[30494]], 194886: [[30495]], 194887: [[30495]], 194888: [[30538]], 194889: [[16441]], 194890: [[30603]], 194891: [[16454]], 194892: [[16534]], 194893: [[152605]], 194894: [[30798]], 194895: [[30860]], 194896: [[30924]], 194897: [[16611]], 194898: [[153126]], 194899: [[31062]], 194900: [[153242]], 194901: [[153285]], 194902: [[31119]], 194903: [[31211]], 194904: [[16687]], 194905: [[31296]], 194906: [[31306]], 194907: [[31311]], 194908: [[153980]], 194909: [[154279]], 194910: [[154279]], 194911: [[31470]], 194912: [[16898]], 194913: [[154539]], 194914: [[31686]], 194915: [[31689]], 194916: [[16935]], 194917: [[154752]], 194918: [[31954]], 194919: [[17056]], 194920: [[31976]], 194921: [[31971]], 194922: [[32e3]], 194923: [[155526]], 194924: [[32099]], 194925: [[17153]], 194926: [[32199]], 194927: [[32258]], 194928: [[32325]], 194929: [[17204]], 194930: [[156200]], 194931: [[156231]], 194932: [[17241]], 194933: [[156377]], 194934: [[32634]], 194935: [[156478]], 194936: [[32661]], 194937: [[32762]], 194938: [[32773]], 194939: [[156890]], 194940: [[156963]], 194941: [[32864]], 194942: [[157096]], 194943: [[32880]], 194944: [[144223]], 194945: [[17365]], 194946: [[32946]], 194947: [[33027]], 194948: [[17419]], 194949: [[33086]], 194950: [[23221]], 194951: [[157607]], 194952: [[157621]], 194953: [[144275]], 194954: [[144284]], 194955: [[33281]], 194956: [[33284]], 194957: [[36766]], 194958: [[17515]], 194959: [[33425]], 194960: [[33419]], 194961: [[33437]], 194962: [[21171]], 194963: [[33457]], 194964: [[33459]], 194965: [[33469]], 194966: [[33510]], 194967: [[158524]], 194968: [[33509]], 194969: [[33565]], 194970: [[33635]], 194971: [[33709]], 194972: [[33571]], 194973: [[33725]], 194974: [[33767]], 194975: [[33879]], 194976: [[33619]], 194977: [[33738]], 194978: [[33740]], 194979: [[33756]], 194980: [[158774]], 194981: [[159083]], 194982: [[158933]], 194983: [[17707]], 194984: [[34033]], 194985: [[34035]], 194986: [[34070]], 194987: [[160714]], 194988: [[34148]], 194989: [[159532]], 194990: [[17757]], 194991: [[17761]], 194992: [[159665]], 194993: [[159954]], 194994: [[17771]], 194995: [[34384]], 194996: [[34396]], 194997: [[34407]], 194998: [[34409]], 194999: [[34473]], 195e3: [[34440]], 195001: [[34574]], 195002: [[34530]], 195003: [[34681]], 195004: [[34600]], 195005: [[34667]], 195006: [[34694]], 195007: [[17879]], 195008: [[34785]], 195009: [[34817]], 195010: [[17913]], 195011: [[34912]], 195012: [[34915]], 195013: [[161383]], 195014: [[35031]], 195015: [[35038]], 195016: [[17973]], 195017: [[35066]], 195018: [[13499]], 195019: [[161966]], 195020: [[162150]], 195021: [[18110]], 195022: [[18119]], 195023: [[35488]], 195024: [[35565]], 195025: [[35722]], 195026: [[35925]], 195027: [[162984]], 195028: [[36011]], 195029: [[36033]], 195030: [[36123]], 195031: [[36215]], 195032: [[163631]], 195033: [[133124]], 195034: [[36299]], 195035: [[36284]], 195036: [[36336]], 195037: [[133342]], 195038: [[36564]], 195039: [[36664]], 195040: [[165330]], 195041: [[165357]], 195042: [[37012]], 195043: [[37105]], 195044: [[37137]], 195045: [[165678]], 195046: [[37147]], 195047: [[37432]], 195048: [[37591]], 195049: [[37592]], 195050: [[37500]], 195051: [[37881]], 195052: [[37909]], 195053: [[166906]], 195054: [[38283]], 195055: [[18837]], 195056: [[38327]], 195057: [[167287]], 195058: [[18918]], 195059: [[38595]], 195060: [[23986]], 195061: [[38691]], 195062: [[168261]], 195063: [[168474]], 195064: [[19054]], 195065: [[19062]], 195066: [[38880]], 195067: [[168970]], 195068: [[19122]], 195069: [[169110]], 195070: [[38923]], 195071: [[38923]] }, 64e3: { 64e3: [[20999]], 64001: [[24230]], 64002: [[25299]], 64003: [[31958]], 64004: [[23429]], 64005: [[27934]], 64006: [[26292]], 64007: [[36667]], 64008: [[34892]], 64009: [[38477]], 64010: [[35211]], 64011: [[24275]], 64012: [[20800]], 64013: [[21952]], 64016: [[22618]], 64018: [[26228]], 64021: [[20958]], 64022: [[29482]], 64023: [[30410]], 64024: [[31036]], 64025: [[31070]], 64026: [[31077]], 64027: [[31119]], 64028: [[38742]], 64029: [[31934]], 64030: [[32701]], 64032: [[34322]], 64034: [[35576]], 64037: [[36920]], 64038: [[37117]], 64042: [[39151]], 64043: [[39164]], 64044: [[39208]], 64045: [[40372]], 64046: [[37086]], 64047: [[38583]], 64048: [[20398]], 64049: [[20711]], 64050: [[20813]], 64051: [[21193]], 64052: [[21220]], 64053: [[21329]], 64054: [[21917]], 64055: [[22022]], 64056: [[22120]], 64057: [[22592]], 64058: [[22696]], 64059: [[23652]], 64060: [[23662]], 64061: [[24724]], 64062: [[24936]], 64063: [[24974]], 64064: [[25074]], 64065: [[25935]], 64066: [[26082]], 64067: [[26257]], 64068: [[26757]], 64069: [[28023]], 64070: [[28186]], 64071: [[28450]], 64072: [[29038]], 64073: [[29227]], 64074: [[29730]], 64075: [[30865]], 64076: [[31038]], 64077: [[31049]], 64078: [[31048]], 64079: [[31056]], 64080: [[31062]], 64081: [[31069]], 64082: [[31117]], 64083: [[31118]], 64084: [[31296]], 64085: [[31361]], 64086: [[31680]], 64087: [[32244]], 64088: [[32265]], 64089: [[32321]], 64090: [[32626]], 64091: [[32773]], 64092: [[33261]], 64093: [[33401]], 64094: [[33401]], 64095: [[33879]], 64096: [[35088]], 64097: [[35222]], 64098: [[35585]], 64099: [[35641]], 64100: [[36051]], 64101: [[36104]], 64102: [[36790]], 64103: [[36920]], 64104: [[38627]], 64105: [[38911]], 64106: [[38971]], 64107: [[24693]], 64108: [[148206]], 64109: [[33304]], 64112: [[20006]], 64113: [[20917]], 64114: [[20840]], 64115: [[20352]], 64116: [[20805]], 64117: [[20864]], 64118: [[21191]], 64119: [[21242]], 64120: [[21917]], 64121: [[21845]], 64122: [[21913]], 64123: [[21986]], 64124: [[22618]], 64125: [[22707]], 64126: [[22852]], 64127: [[22868]], 64128: [[23138]], 64129: [[23336]], 64130: [[24274]], 64131: [[24281]], 64132: [[24425]], 64133: [[24493]], 64134: [[24792]], 64135: [[24910]], 64136: [[24840]], 64137: [[24974]], 64138: [[24928]], 64139: [[25074]], 64140: [[25140]], 64141: [[25540]], 64142: [[25628]], 64143: [[25682]], 64144: [[25942]], 64145: [[26228]], 64146: [[26391]], 64147: [[26395]], 64148: [[26454]], 64149: [[27513]], 64150: [[27578]], 64151: [[27969]], 64152: [[28379]], 64153: [[28363]], 64154: [[28450]], 64155: [[28702]], 64156: [[29038]], 64157: [[30631]], 64158: [[29237]], 64159: [[29359]], 64160: [[29482]], 64161: [[29809]], 64162: [[29958]], 64163: [[30011]], 64164: [[30237]], 64165: [[30239]], 64166: [[30410]], 64167: [[30427]], 64168: [[30452]], 64169: [[30538]], 64170: [[30528]], 64171: [[30924]], 64172: [[31409]], 64173: [[31680]], 64174: [[31867]], 64175: [[32091]], 64176: [[32244]], 64177: [[32574]], 64178: [[32773]], 64179: [[33618]], 64180: [[33775]], 64181: [[34681]], 64182: [[35137]], 64183: [[35206]], 64184: [[35222]], 64185: [[35519]], 64186: [[35576]], 64187: [[35531]], 64188: [[35585]], 64189: [[35582]], 64190: [[35565]], 64191: [[35641]], 64192: [[35722]], 64193: [[36104]], 64194: [[36664]], 64195: [[36978]], 64196: [[37273]], 64197: [[37494]], 64198: [[38524]], 64199: [[38627]], 64200: [[38742]], 64201: [[38875]], 64202: [[38911]], 64203: [[38923]], 64204: [[38971]], 64205: [[39698]], 64206: [[40860]], 64207: [[141386]], 64208: [[141380]], 64209: [[144341]], 64210: [[15261]], 64211: [[16408]], 64212: [[16441]], 64213: [[152137]], 64214: [[154832]], 64215: [[163539]], 64216: [[40771]], 64217: [[40846]], 195072: [[38953]], 195073: [[169398]], 195074: [[39138]], 195075: [[19251]], 195076: [[39209]], 195077: [[39335]], 195078: [[39362]], 195079: [[39422]], 195080: [[19406]], 195081: [[170800]], 195082: [[39698]], 195083: [[4e4]], 195084: [[40189]], 195085: [[19662]], 195086: [[19693]], 195087: [[40295]], 195088: [[172238]], 195089: [[19704]], 195090: [[172293]], 195091: [[172558]], 195092: [[172689]], 195093: [[40635]], 195094: [[19798]], 195095: [[40697]], 195096: [[40702]], 195097: [[40709]], 195098: [[40719]], 195099: [[40726]], 195100: [[40763]], 195101: [[173568]] }, 64256: { 64256: [[102, 102], 256], 64257: [[102, 105], 256], 64258: [[102, 108], 256], 64259: [[102, 102, 105], 256], 64260: [[102, 102, 108], 256], 64261: [[383, 116], 256], 64262: [[115, 116], 256], 64275: [[1396, 1398], 256], 64276: [[1396, 1381], 256], 64277: [[1396, 1387], 256], 64278: [[1406, 1398], 256], 64279: [[1396, 1389], 256], 64285: [[1497, 1460], 512], 64286: [, 26], 64287: [[1522, 1463], 512], 64288: [[1506], 256], 64289: [[1488], 256], 64290: [[1491], 256], 64291: [[1492], 256], 64292: [[1499], 256], 64293: [[1500], 256], 64294: [[1501], 256], 64295: [[1512], 256], 64296: [[1514], 256], 64297: [[43], 256], 64298: [[1513, 1473], 512], 64299: [[1513, 1474], 512], 64300: [[64329, 1473], 512], 64301: [[64329, 1474], 512], 64302: [[1488, 1463], 512], 64303: [[1488, 1464], 512], 64304: [[1488, 1468], 512], 64305: [[1489, 1468], 512], 64306: [[1490, 1468], 512], 64307: [[1491, 1468], 512], 64308: [[1492, 1468], 512], 64309: [[1493, 1468], 512], 64310: [[1494, 1468], 512], 64312: [[1496, 1468], 512], 64313: [[1497, 1468], 512], 64314: [[1498, 1468], 512], 64315: [[1499, 1468], 512], 64316: [[1500, 1468], 512], 64318: [[1502, 1468], 512], 64320: [[1504, 1468], 512], 64321: [[1505, 1468], 512], 64323: [[1507, 1468], 512], 64324: [[1508, 1468], 512], 64326: [[1510, 1468], 512], 64327: [[1511, 1468], 512], 64328: [[1512, 1468], 512], 64329: [[1513, 1468], 512], 64330: [[1514, 1468], 512], 64331: [[1493, 1465], 512], 64332: [[1489, 1471], 512], 64333: [[1499, 1471], 512], 64334: [[1508, 1471], 512], 64335: [[1488, 1500], 256], 64336: [[1649], 256], 64337: [[1649], 256], 64338: [[1659], 256], 64339: [[1659], 256], 64340: [[1659], 256], 64341: [[1659], 256], 64342: [[1662], 256], 64343: [[1662], 256], 64344: [[1662], 256], 64345: [[1662], 256], 64346: [[1664], 256], 64347: [[1664], 256], 64348: [[1664], 256], 64349: [[1664], 256], 64350: [[1658], 256], 64351: [[1658], 256], 64352: [[1658], 256], 64353: [[1658], 256], 64354: [[1663], 256], 64355: [[1663], 256], 64356: [[1663], 256], 64357: [[1663], 256], 64358: [[1657], 256], 64359: [[1657], 256], 64360: [[1657], 256], 64361: [[1657], 256], 64362: [[1700], 256], 64363: [[1700], 256], 64364: [[1700], 256], 64365: [[1700], 256], 64366: [[1702], 256], 64367: [[1702], 256], 64368: [[1702], 256], 64369: [[1702], 256], 64370: [[1668], 256], 64371: [[1668], 256], 64372: [[1668], 256], 64373: [[1668], 256], 64374: [[1667], 256], 64375: [[1667], 256], 64376: [[1667], 256], 64377: [[1667], 256], 64378: [[1670], 256], 64379: [[1670], 256], 64380: [[1670], 256], 64381: [[1670], 256], 64382: [[1671], 256], 64383: [[1671], 256], 64384: [[1671], 256], 64385: [[1671], 256], 64386: [[1677], 256], 64387: [[1677], 256], 64388: [[1676], 256], 64389: [[1676], 256], 64390: [[1678], 256], 64391: [[1678], 256], 64392: [[1672], 256], 64393: [[1672], 256], 64394: [[1688], 256], 64395: [[1688], 256], 64396: [[1681], 256], 64397: [[1681], 256], 64398: [[1705], 256], 64399: [[1705], 256], 64400: [[1705], 256], 64401: [[1705], 256], 64402: [[1711], 256], 64403: [[1711], 256], 64404: [[1711], 256], 64405: [[1711], 256], 64406: [[1715], 256], 64407: [[1715], 256], 64408: [[1715], 256], 64409: [[1715], 256], 64410: [[1713], 256], 64411: [[1713], 256], 64412: [[1713], 256], 64413: [[1713], 256], 64414: [[1722], 256], 64415: [[1722], 256], 64416: [[1723], 256], 64417: [[1723], 256], 64418: [[1723], 256], 64419: [[1723], 256], 64420: [[1728], 256], 64421: [[1728], 256], 64422: [[1729], 256], 64423: [[1729], 256], 64424: [[1729], 256], 64425: [[1729], 256], 64426: [[1726], 256], 64427: [[1726], 256], 64428: [[1726], 256], 64429: [[1726], 256], 64430: [[1746], 256], 64431: [[1746], 256], 64432: [[1747], 256], 64433: [[1747], 256], 64467: [[1709], 256], 64468: [[1709], 256], 64469: [[1709], 256], 64470: [[1709], 256], 64471: [[1735], 256], 64472: [[1735], 256], 64473: [[1734], 256], 64474: [[1734], 256], 64475: [[1736], 256], 64476: [[1736], 256], 64477: [[1655], 256], 64478: [[1739], 256], 64479: [[1739], 256], 64480: [[1733], 256], 64481: [[1733], 256], 64482: [[1737], 256], 64483: [[1737], 256], 64484: [[1744], 256], 64485: [[1744], 256], 64486: [[1744], 256], 64487: [[1744], 256], 64488: [[1609], 256], 64489: [[1609], 256], 64490: [[1574, 1575], 256], 64491: [[1574, 1575], 256], 64492: [[1574, 1749], 256], 64493: [[1574, 1749], 256], 64494: [[1574, 1608], 256], 64495: [[1574, 1608], 256], 64496: [[1574, 1735], 256], 64497: [[1574, 1735], 256], 64498: [[1574, 1734], 256], 64499: [[1574, 1734], 256], 64500: [[1574, 1736], 256], 64501: [[1574, 1736], 256], 64502: [[1574, 1744], 256], 64503: [[1574, 1744], 256], 64504: [[1574, 1744], 256], 64505: [[1574, 1609], 256], 64506: [[1574, 1609], 256], 64507: [[1574, 1609], 256], 64508: [[1740], 256], 64509: [[1740], 256], 64510: [[1740], 256], 64511: [[1740], 256] }, 64512: { 64512: [[1574, 1580], 256], 64513: [[1574, 1581], 256], 64514: [[1574, 1605], 256], 64515: [[1574, 1609], 256], 64516: [[1574, 1610], 256], 64517: [[1576, 1580], 256], 64518: [[1576, 1581], 256], 64519: [[1576, 1582], 256], 64520: [[1576, 1605], 256], 64521: [[1576, 1609], 256], 64522: [[1576, 1610], 256], 64523: [[1578, 1580], 256], 64524: [[1578, 1581], 256], 64525: [[1578, 1582], 256], 64526: [[1578, 1605], 256], 64527: [[1578, 1609], 256], 64528: [[1578, 1610], 256], 64529: [[1579, 1580], 256], 64530: [[1579, 1605], 256], 64531: [[1579, 1609], 256], 64532: [[1579, 1610], 256], 64533: [[1580, 1581], 256], 64534: [[1580, 1605], 256], 64535: [[1581, 1580], 256], 64536: [[1581, 1605], 256], 64537: [[1582, 1580], 256], 64538: [[1582, 1581], 256], 64539: [[1582, 1605], 256], 64540: [[1587, 1580], 256], 64541: [[1587, 1581], 256], 64542: [[1587, 1582], 256], 64543: [[1587, 1605], 256], 64544: [[1589, 1581], 256], 64545: [[1589, 1605], 256], 64546: [[1590, 1580], 256], 64547: [[1590, 1581], 256], 64548: [[1590, 1582], 256], 64549: [[1590, 1605], 256], 64550: [[1591, 1581], 256], 64551: [[1591, 1605], 256], 64552: [[1592, 1605], 256], 64553: [[1593, 1580], 256], 64554: [[1593, 1605], 256], 64555: [[1594, 1580], 256], 64556: [[1594, 1605], 256], 64557: [[1601, 1580], 256], 64558: [[1601, 1581], 256], 64559: [[1601, 1582], 256], 64560: [[1601, 1605], 256], 64561: [[1601, 1609], 256], 64562: [[1601, 1610], 256], 64563: [[1602, 1581], 256], 64564: [[1602, 1605], 256], 64565: [[1602, 1609], 256], 64566: [[1602, 1610], 256], 64567: [[1603, 1575], 256], 64568: [[1603, 1580], 256], 64569: [[1603, 1581], 256], 64570: [[1603, 1582], 256], 64571: [[1603, 1604], 256], 64572: [[1603, 1605], 256], 64573: [[1603, 1609], 256], 64574: [[1603, 1610], 256], 64575: [[1604, 1580], 256], 64576: [[1604, 1581], 256], 64577: [[1604, 1582], 256], 64578: [[1604, 1605], 256], 64579: [[1604, 1609], 256], 64580: [[1604, 1610], 256], 64581: [[1605, 1580], 256], 64582: [[1605, 1581], 256], 64583: [[1605, 1582], 256], 64584: [[1605, 1605], 256], 64585: [[1605, 1609], 256], 64586: [[1605, 1610], 256], 64587: [[1606, 1580], 256], 64588: [[1606, 1581], 256], 64589: [[1606, 1582], 256], 64590: [[1606, 1605], 256], 64591: [[1606, 1609], 256], 64592: [[1606, 1610], 256], 64593: [[1607, 1580], 256], 64594: [[1607, 1605], 256], 64595: [[1607, 1609], 256], 64596: [[1607, 1610], 256], 64597: [[1610, 1580], 256], 64598: [[1610, 1581], 256], 64599: [[1610, 1582], 256], 64600: [[1610, 1605], 256], 64601: [[1610, 1609], 256], 64602: [[1610, 1610], 256], 64603: [[1584, 1648], 256], 64604: [[1585, 1648], 256], 64605: [[1609, 1648], 256], 64606: [[32, 1612, 1617], 256], 64607: [[32, 1613, 1617], 256], 64608: [[32, 1614, 1617], 256], 64609: [[32, 1615, 1617], 256], 64610: [[32, 1616, 1617], 256], 64611: [[32, 1617, 1648], 256], 64612: [[1574, 1585], 256], 64613: [[1574, 1586], 256], 64614: [[1574, 1605], 256], 64615: [[1574, 1606], 256], 64616: [[1574, 1609], 256], 64617: [[1574, 1610], 256], 64618: [[1576, 1585], 256], 64619: [[1576, 1586], 256], 64620: [[1576, 1605], 256], 64621: [[1576, 1606], 256], 64622: [[1576, 1609], 256], 64623: [[1576, 1610], 256], 64624: [[1578, 1585], 256], 64625: [[1578, 1586], 256], 64626: [[1578, 1605], 256], 64627: [[1578, 1606], 256], 64628: [[1578, 1609], 256], 64629: [[1578, 1610], 256], 64630: [[1579, 1585], 256], 64631: [[1579, 1586], 256], 64632: [[1579, 1605], 256], 64633: [[1579, 1606], 256], 64634: [[1579, 1609], 256], 64635: [[1579, 1610], 256], 64636: [[1601, 1609], 256], 64637: [[1601, 1610], 256], 64638: [[1602, 1609], 256], 64639: [[1602, 1610], 256], 64640: [[1603, 1575], 256], 64641: [[1603, 1604], 256], 64642: [[1603, 1605], 256], 64643: [[1603, 1609], 256], 64644: [[1603, 1610], 256], 64645: [[1604, 1605], 256], 64646: [[1604, 1609], 256], 64647: [[1604, 1610], 256], 64648: [[1605, 1575], 256], 64649: [[1605, 1605], 256], 64650: [[1606, 1585], 256], 64651: [[1606, 1586], 256], 64652: [[1606, 1605], 256], 64653: [[1606, 1606], 256], 64654: [[1606, 1609], 256], 64655: [[1606, 1610], 256], 64656: [[1609, 1648], 256], 64657: [[1610, 1585], 256], 64658: [[1610, 1586], 256], 64659: [[1610, 1605], 256], 64660: [[1610, 1606], 256], 64661: [[1610, 1609], 256], 64662: [[1610, 1610], 256], 64663: [[1574, 1580], 256], 64664: [[1574, 1581], 256], 64665: [[1574, 1582], 256], 64666: [[1574, 1605], 256], 64667: [[1574, 1607], 256], 64668: [[1576, 1580], 256], 64669: [[1576, 1581], 256], 64670: [[1576, 1582], 256], 64671: [[1576, 1605], 256], 64672: [[1576, 1607], 256], 64673: [[1578, 1580], 256], 64674: [[1578, 1581], 256], 64675: [[1578, 1582], 256], 64676: [[1578, 1605], 256], 64677: [[1578, 1607], 256], 64678: [[1579, 1605], 256], 64679: [[1580, 1581], 256], 64680: [[1580, 1605], 256], 64681: [[1581, 1580], 256], 64682: [[1581, 1605], 256], 64683: [[1582, 1580], 256], 64684: [[1582, 1605], 256], 64685: [[1587, 1580], 256], 64686: [[1587, 1581], 256], 64687: [[1587, 1582], 256], 64688: [[1587, 1605], 256], 64689: [[1589, 1581], 256], 64690: [[1589, 1582], 256], 64691: [[1589, 1605], 256], 64692: [[1590, 1580], 256], 64693: [[1590, 1581], 256], 64694: [[1590, 1582], 256], 64695: [[1590, 1605], 256], 64696: [[1591, 1581], 256], 64697: [[1592, 1605], 256], 64698: [[1593, 1580], 256], 64699: [[1593, 1605], 256], 64700: [[1594, 1580], 256], 64701: [[1594, 1605], 256], 64702: [[1601, 1580], 256], 64703: [[1601, 1581], 256], 64704: [[1601, 1582], 256], 64705: [[1601, 1605], 256], 64706: [[1602, 1581], 256], 64707: [[1602, 1605], 256], 64708: [[1603, 1580], 256], 64709: [[1603, 1581], 256], 64710: [[1603, 1582], 256], 64711: [[1603, 1604], 256], 64712: [[1603, 1605], 256], 64713: [[1604, 1580], 256], 64714: [[1604, 1581], 256], 64715: [[1604, 1582], 256], 64716: [[1604, 1605], 256], 64717: [[1604, 1607], 256], 64718: [[1605, 1580], 256], 64719: [[1605, 1581], 256], 64720: [[1605, 1582], 256], 64721: [[1605, 1605], 256], 64722: [[1606, 1580], 256], 64723: [[1606, 1581], 256], 64724: [[1606, 1582], 256], 64725: [[1606, 1605], 256], 64726: [[1606, 1607], 256], 64727: [[1607, 1580], 256], 64728: [[1607, 1605], 256], 64729: [[1607, 1648], 256], 64730: [[1610, 1580], 256], 64731: [[1610, 1581], 256], 64732: [[1610, 1582], 256], 64733: [[1610, 1605], 256], 64734: [[1610, 1607], 256], 64735: [[1574, 1605], 256], 64736: [[1574, 1607], 256], 64737: [[1576, 1605], 256], 64738: [[1576, 1607], 256], 64739: [[1578, 1605], 256], 64740: [[1578, 1607], 256], 64741: [[1579, 1605], 256], 64742: [[1579, 1607], 256], 64743: [[1587, 1605], 256], 64744: [[1587, 1607], 256], 64745: [[1588, 1605], 256], 64746: [[1588, 1607], 256], 64747: [[1603, 1604], 256], 64748: [[1603, 1605], 256], 64749: [[1604, 1605], 256], 64750: [[1606, 1605], 256], 64751: [[1606, 1607], 256], 64752: [[1610, 1605], 256], 64753: [[1610, 1607], 256], 64754: [[1600, 1614, 1617], 256], 64755: [[1600, 1615, 1617], 256], 64756: [[1600, 1616, 1617], 256], 64757: [[1591, 1609], 256], 64758: [[1591, 1610], 256], 64759: [[1593, 1609], 256], 64760: [[1593, 1610], 256], 64761: [[1594, 1609], 256], 64762: [[1594, 1610], 256], 64763: [[1587, 1609], 256], 64764: [[1587, 1610], 256], 64765: [[1588, 1609], 256], 64766: [[1588, 1610], 256], 64767: [[1581, 1609], 256] }, 64768: { 64768: [[1581, 1610], 256], 64769: [[1580, 1609], 256], 64770: [[1580, 1610], 256], 64771: [[1582, 1609], 256], 64772: [[1582, 1610], 256], 64773: [[1589, 1609], 256], 64774: [[1589, 1610], 256], 64775: [[1590, 1609], 256], 64776: [[1590, 1610], 256], 64777: [[1588, 1580], 256], 64778: [[1588, 1581], 256], 64779: [[1588, 1582], 256], 64780: [[1588, 1605], 256], 64781: [[1588, 1585], 256], 64782: [[1587, 1585], 256], 64783: [[1589, 1585], 256], 64784: [[1590, 1585], 256], 64785: [[1591, 1609], 256], 64786: [[1591, 1610], 256], 64787: [[1593, 1609], 256], 64788: [[1593, 1610], 256], 64789: [[1594, 1609], 256], 64790: [[1594, 1610], 256], 64791: [[1587, 1609], 256], 64792: [[1587, 1610], 256], 64793: [[1588, 1609], 256], 64794: [[1588, 1610], 256], 64795: [[1581, 1609], 256], 64796: [[1581, 1610], 256], 64797: [[1580, 1609], 256], 64798: [[1580, 1610], 256], 64799: [[1582, 1609], 256], 64800: [[1582, 1610], 256], 64801: [[1589, 1609], 256], 64802: [[1589, 1610], 256], 64803: [[1590, 1609], 256], 64804: [[1590, 1610], 256], 64805: [[1588, 1580], 256], 64806: [[1588, 1581], 256], 64807: [[1588, 1582], 256], 64808: [[1588, 1605], 256], 64809: [[1588, 1585], 256], 64810: [[1587, 1585], 256], 64811: [[1589, 1585], 256], 64812: [[1590, 1585], 256], 64813: [[1588, 1580], 256], 64814: [[1588, 1581], 256], 64815: [[1588, 1582], 256], 64816: [[1588, 1605], 256], 64817: [[1587, 1607], 256], 64818: [[1588, 1607], 256], 64819: [[1591, 1605], 256], 64820: [[1587, 1580], 256], 64821: [[1587, 1581], 256], 64822: [[1587, 1582], 256], 64823: [[1588, 1580], 256], 64824: [[1588, 1581], 256], 64825: [[1588, 1582], 256], 64826: [[1591, 1605], 256], 64827: [[1592, 1605], 256], 64828: [[1575, 1611], 256], 64829: [[1575, 1611], 256], 64848: [[1578, 1580, 1605], 256], 64849: [[1578, 1581, 1580], 256], 64850: [[1578, 1581, 1580], 256], 64851: [[1578, 1581, 1605], 256], 64852: [[1578, 1582, 1605], 256], 64853: [[1578, 1605, 1580], 256], 64854: [[1578, 1605, 1581], 256], 64855: [[1578, 1605, 1582], 256], 64856: [[1580, 1605, 1581], 256], 64857: [[1580, 1605, 1581], 256], 64858: [[1581, 1605, 1610], 256], 64859: [[1581, 1605, 1609], 256], 64860: [[1587, 1581, 1580], 256], 64861: [[1587, 1580, 1581], 256], 64862: [[1587, 1580, 1609], 256], 64863: [[1587, 1605, 1581], 256], 64864: [[1587, 1605, 1581], 256], 64865: [[1587, 1605, 1580], 256], 64866: [[1587, 1605, 1605], 256], 64867: [[1587, 1605, 1605], 256], 64868: [[1589, 1581, 1581], 256], 64869: [[1589, 1581, 1581], 256], 64870: [[1589, 1605, 1605], 256], 64871: [[1588, 1581, 1605], 256], 64872: [[1588, 1581, 1605], 256], 64873: [[1588, 1580, 1610], 256], 64874: [[1588, 1605, 1582], 256], 64875: [[1588, 1605, 1582], 256], 64876: [[1588, 1605, 1605], 256], 64877: [[1588, 1605, 1605], 256], 64878: [[1590, 1581, 1609], 256], 64879: [[1590, 1582, 1605], 256], 64880: [[1590, 1582, 1605], 256], 64881: [[1591, 1605, 1581], 256], 64882: [[1591, 1605, 1581], 256], 64883: [[1591, 1605, 1605], 256], 64884: [[1591, 1605, 1610], 256], 64885: [[1593, 1580, 1605], 256], 64886: [[1593, 1605, 1605], 256], 64887: [[1593, 1605, 1605], 256], 64888: [[1593, 1605, 1609], 256], 64889: [[1594, 1605, 1605], 256], 64890: [[1594, 1605, 1610], 256], 64891: [[1594, 1605, 1609], 256], 64892: [[1601, 1582, 1605], 256], 64893: [[1601, 1582, 1605], 256], 64894: [[1602, 1605, 1581], 256], 64895: [[1602, 1605, 1605], 256], 64896: [[1604, 1581, 1605], 256], 64897: [[1604, 1581, 1610], 256], 64898: [[1604, 1581, 1609], 256], 64899: [[1604, 1580, 1580], 256], 64900: [[1604, 1580, 1580], 256], 64901: [[1604, 1582, 1605], 256], 64902: [[1604, 1582, 1605], 256], 64903: [[1604, 1605, 1581], 256], 64904: [[1604, 1605, 1581], 256], 64905: [[1605, 1581, 1580], 256], 64906: [[1605, 1581, 1605], 256], 64907: [[1605, 1581, 1610], 256], 64908: [[1605, 1580, 1581], 256], 64909: [[1605, 1580, 1605], 256], 64910: [[1605, 1582, 1580], 256], 64911: [[1605, 1582, 1605], 256], 64914: [[1605, 1580, 1582], 256], 64915: [[1607, 1605, 1580], 256], 64916: [[1607, 1605, 1605], 256], 64917: [[1606, 1581, 1605], 256], 64918: [[1606, 1581, 1609], 256], 64919: [[1606, 1580, 1605], 256], 64920: [[1606, 1580, 1605], 256], 64921: [[1606, 1580, 1609], 256], 64922: [[1606, 1605, 1610], 256], 64923: [[1606, 1605, 1609], 256], 64924: [[1610, 1605, 1605], 256], 64925: [[1610, 1605, 1605], 256], 64926: [[1576, 1582, 1610], 256], 64927: [[1578, 1580, 1610], 256], 64928: [[1578, 1580, 1609], 256], 64929: [[1578, 1582, 1610], 256], 64930: [[1578, 1582, 1609], 256], 64931: [[1578, 1605, 1610], 256], 64932: [[1578, 1605, 1609], 256], 64933: [[1580, 1605, 1610], 256], 64934: [[1580, 1581, 1609], 256], 64935: [[1580, 1605, 1609], 256], 64936: [[1587, 1582, 1609], 256], 64937: [[1589, 1581, 1610], 256], 64938: [[1588, 1581, 1610], 256], 64939: [[1590, 1581, 1610], 256], 64940: [[1604, 1580, 1610], 256], 64941: [[1604, 1605, 1610], 256], 64942: [[1610, 1581, 1610], 256], 64943: [[1610, 1580, 1610], 256], 64944: [[1610, 1605, 1610], 256], 64945: [[1605, 1605, 1610], 256], 64946: [[1602, 1605, 1610], 256], 64947: [[1606, 1581, 1610], 256], 64948: [[1602, 1605, 1581], 256], 64949: [[1604, 1581, 1605], 256], 64950: [[1593, 1605, 1610], 256], 64951: [[1603, 1605, 1610], 256], 64952: [[1606, 1580, 1581], 256], 64953: [[1605, 1582, 1610], 256], 64954: [[1604, 1580, 1605], 256], 64955: [[1603, 1605, 1605], 256], 64956: [[1604, 1580, 1605], 256], 64957: [[1606, 1580, 1581], 256], 64958: [[1580, 1581, 1610], 256], 64959: [[1581, 1580, 1610], 256], 64960: [[1605, 1580, 1610], 256], 64961: [[1601, 1605, 1610], 256], 64962: [[1576, 1581, 1610], 256], 64963: [[1603, 1605, 1605], 256], 64964: [[1593, 1580, 1605], 256], 64965: [[1589, 1605, 1605], 256], 64966: [[1587, 1582, 1610], 256], 64967: [[1606, 1580, 1610], 256], 65008: [[1589, 1604, 1746], 256], 65009: [[1602, 1604, 1746], 256], 65010: [[1575, 1604, 1604, 1607], 256], 65011: [[1575, 1603, 1576, 1585], 256], 65012: [[1605, 1581, 1605, 1583], 256], 65013: [[1589, 1604, 1593, 1605], 256], 65014: [[1585, 1587, 1608, 1604], 256], 65015: [[1593, 1604, 1610, 1607], 256], 65016: [[1608, 1587, 1604, 1605], 256], 65017: [[1589, 1604, 1609], 256], 65018: [[1589, 1604, 1609, 32, 1575, 1604, 1604, 1607, 32, 1593, 1604, 1610, 1607, 32, 1608, 1587, 1604, 1605], 256], 65019: [[1580, 1604, 32, 1580, 1604, 1575, 1604, 1607], 256], 65020: [[1585, 1740, 1575, 1604], 256] }, 65024: { 65040: [[44], 256], 65041: [[12289], 256], 65042: [[12290], 256], 65043: [[58], 256], 65044: [[59], 256], 65045: [[33], 256], 65046: [[63], 256], 65047: [[12310], 256], 65048: [[12311], 256], 65049: [[8230], 256], 65056: [, 230], 65057: [, 230], 65058: [, 230], 65059: [, 230], 65060: [, 230], 65061: [, 230], 65062: [, 230], 65063: [, 220], 65064: [, 220], 65065: [, 220], 65066: [, 220], 65067: [, 220], 65068: [, 220], 65069: [, 220], 65072: [[8229], 256], 65073: [[8212], 256], 65074: [[8211], 256], 65075: [[95], 256], 65076: [[95], 256], 65077: [[40], 256], 65078: [[41], 256], 65079: [[123], 256], 65080: [[125], 256], 65081: [[12308], 256], 65082: [[12309], 256], 65083: [[12304], 256], 65084: [[12305], 256], 65085: [[12298], 256], 65086: [[12299], 256], 65087: [[12296], 256], 65088: [[12297], 256], 65089: [[12300], 256], 65090: [[12301], 256], 65091: [[12302], 256], 65092: [[12303], 256], 65095: [[91], 256], 65096: [[93], 256], 65097: [[8254], 256], 65098: [[8254], 256], 65099: [[8254], 256], 65100: [[8254], 256], 65101: [[95], 256], 65102: [[95], 256], 65103: [[95], 256], 65104: [[44], 256], 65105: [[12289], 256], 65106: [[46], 256], 65108: [[59], 256], 65109: [[58], 256], 65110: [[63], 256], 65111: [[33], 256], 65112: [[8212], 256], 65113: [[40], 256], 65114: [[41], 256], 65115: [[123], 256], 65116: [[125], 256], 65117: [[12308], 256], 65118: [[12309], 256], 65119: [[35], 256], 65120: [[38], 256], 65121: [[42], 256], 65122: [[43], 256], 65123: [[45], 256], 65124: [[60], 256], 65125: [[62], 256], 65126: [[61], 256], 65128: [[92], 256], 65129: [[36], 256], 65130: [[37], 256], 65131: [[64], 256], 65136: [[32, 1611], 256], 65137: [[1600, 1611], 256], 65138: [[32, 1612], 256], 65140: [[32, 1613], 256], 65142: [[32, 1614], 256], 65143: [[1600, 1614], 256], 65144: [[32, 1615], 256], 65145: [[1600, 1615], 256], 65146: [[32, 1616], 256], 65147: [[1600, 1616], 256], 65148: [[32, 1617], 256], 65149: [[1600, 1617], 256], 65150: [[32, 1618], 256], 65151: [[1600, 1618], 256], 65152: [[1569], 256], 65153: [[1570], 256], 65154: [[1570], 256], 65155: [[1571], 256], 65156: [[1571], 256], 65157: [[1572], 256], 65158: [[1572], 256], 65159: [[1573], 256], 65160: [[1573], 256], 65161: [[1574], 256], 65162: [[1574], 256], 65163: [[1574], 256], 65164: [[1574], 256], 65165: [[1575], 256], 65166: [[1575], 256], 65167: [[1576], 256], 65168: [[1576], 256], 65169: [[1576], 256], 65170: [[1576], 256], 65171: [[1577], 256], 65172: [[1577], 256], 65173: [[1578], 256], 65174: [[1578], 256], 65175: [[1578], 256], 65176: [[1578], 256], 65177: [[1579], 256], 65178: [[1579], 256], 65179: [[1579], 256], 65180: [[1579], 256], 65181: [[1580], 256], 65182: [[1580], 256], 65183: [[1580], 256], 65184: [[1580], 256], 65185: [[1581], 256], 65186: [[1581], 256], 65187: [[1581], 256], 65188: [[1581], 256], 65189: [[1582], 256], 65190: [[1582], 256], 65191: [[1582], 256], 65192: [[1582], 256], 65193: [[1583], 256], 65194: [[1583], 256], 65195: [[1584], 256], 65196: [[1584], 256], 65197: [[1585], 256], 65198: [[1585], 256], 65199: [[1586], 256], 65200: [[1586], 256], 65201: [[1587], 256], 65202: [[1587], 256], 65203: [[1587], 256], 65204: [[1587], 256], 65205: [[1588], 256], 65206: [[1588], 256], 65207: [[1588], 256], 65208: [[1588], 256], 65209: [[1589], 256], 65210: [[1589], 256], 65211: [[1589], 256], 65212: [[1589], 256], 65213: [[1590], 256], 65214: [[1590], 256], 65215: [[1590], 256], 65216: [[1590], 256], 65217: [[1591], 256], 65218: [[1591], 256], 65219: [[1591], 256], 65220: [[1591], 256], 65221: [[1592], 256], 65222: [[1592], 256], 65223: [[1592], 256], 65224: [[1592], 256], 65225: [[1593], 256], 65226: [[1593], 256], 65227: [[1593], 256], 65228: [[1593], 256], 65229: [[1594], 256], 65230: [[1594], 256], 65231: [[1594], 256], 65232: [[1594], 256], 65233: [[1601], 256], 65234: [[1601], 256], 65235: [[1601], 256], 65236: [[1601], 256], 65237: [[1602], 256], 65238: [[1602], 256], 65239: [[1602], 256], 65240: [[1602], 256], 65241: [[1603], 256], 65242: [[1603], 256], 65243: [[1603], 256], 65244: [[1603], 256], 65245: [[1604], 256], 65246: [[1604], 256], 65247: [[1604], 256], 65248: [[1604], 256], 65249: [[1605], 256], 65250: [[1605], 256], 65251: [[1605], 256], 65252: [[1605], 256], 65253: [[1606], 256], 65254: [[1606], 256], 65255: [[1606], 256], 65256: [[1606], 256], 65257: [[1607], 256], 65258: [[1607], 256], 65259: [[1607], 256], 65260: [[1607], 256], 65261: [[1608], 256], 65262: [[1608], 256], 65263: [[1609], 256], 65264: [[1609], 256], 65265: [[1610], 256], 65266: [[1610], 256], 65267: [[1610], 256], 65268: [[1610], 256], 65269: [[1604, 1570], 256], 65270: [[1604, 1570], 256], 65271: [[1604, 1571], 256], 65272: [[1604, 1571], 256], 65273: [[1604, 1573], 256], 65274: [[1604, 1573], 256], 65275: [[1604, 1575], 256], 65276: [[1604, 1575], 256] }, 65280: { 65281: [[33], 256], 65282: [[34], 256], 65283: [[35], 256], 65284: [[36], 256], 65285: [[37], 256], 65286: [[38], 256], 65287: [[39], 256], 65288: [[40], 256], 65289: [[41], 256], 65290: [[42], 256], 65291: [[43], 256], 65292: [[44], 256], 65293: [[45], 256], 65294: [[46], 256], 65295: [[47], 256], 65296: [[48], 256], 65297: [[49], 256], 65298: [[50], 256], 65299: [[51], 256], 65300: [[52], 256], 65301: [[53], 256], 65302: [[54], 256], 65303: [[55], 256], 65304: [[56], 256], 65305: [[57], 256], 65306: [[58], 256], 65307: [[59], 256], 65308: [[60], 256], 65309: [[61], 256], 65310: [[62], 256], 65311: [[63], 256], 65312: [[64], 256], 65313: [[65], 256], 65314: [[66], 256], 65315: [[67], 256], 65316: [[68], 256], 65317: [[69], 256], 65318: [[70], 256], 65319: [[71], 256], 65320: [[72], 256], 65321: [[73], 256], 65322: [[74], 256], 65323: [[75], 256], 65324: [[76], 256], 65325: [[77], 256], 65326: [[78], 256], 65327: [[79], 256], 65328: [[80], 256], 65329: [[81], 256], 65330: [[82], 256], 65331: [[83], 256], 65332: [[84], 256], 65333: [[85], 256], 65334: [[86], 256], 65335: [[87], 256], 65336: [[88], 256], 65337: [[89], 256], 65338: [[90], 256], 65339: [[91], 256], 65340: [[92], 256], 65341: [[93], 256], 65342: [[94], 256], 65343: [[95], 256], 65344: [[96], 256], 65345: [[97], 256], 65346: [[98], 256], 65347: [[99], 256], 65348: [[100], 256], 65349: [[101], 256], 65350: [[102], 256], 65351: [[103], 256], 65352: [[104], 256], 65353: [[105], 256], 65354: [[106], 256], 65355: [[107], 256], 65356: [[108], 256], 65357: [[109], 256], 65358: [[110], 256], 65359: [[111], 256], 65360: [[112], 256], 65361: [[113], 256], 65362: [[114], 256], 65363: [[115], 256], 65364: [[116], 256], 65365: [[117], 256], 65366: [[118], 256], 65367: [[119], 256], 65368: [[120], 256], 65369: [[121], 256], 65370: [[122], 256], 65371: [[123], 256], 65372: [[124], 256], 65373: [[125], 256], 65374: [[126], 256], 65375: [[10629], 256], 65376: [[10630], 256], 65377: [[12290], 256], 65378: [[12300], 256], 65379: [[12301], 256], 65380: [[12289], 256], 65381: [[12539], 256], 65382: [[12530], 256], 65383: [[12449], 256], 65384: [[12451], 256], 65385: [[12453], 256], 65386: [[12455], 256], 65387: [[12457], 256], 65388: [[12515], 256], 65389: [[12517], 256], 65390: [[12519], 256], 65391: [[12483], 256], 65392: [[12540], 256], 65393: [[12450], 256], 65394: [[12452], 256], 65395: [[12454], 256], 65396: [[12456], 256], 65397: [[12458], 256], 65398: [[12459], 256], 65399: [[12461], 256], 65400: [[12463], 256], 65401: [[12465], 256], 65402: [[12467], 256], 65403: [[12469], 256], 65404: [[12471], 256], 65405: [[12473], 256], 65406: [[12475], 256], 65407: [[12477], 256], 65408: [[12479], 256], 65409: [[12481], 256], 65410: [[12484], 256], 65411: [[12486], 256], 65412: [[12488], 256], 65413: [[12490], 256], 65414: [[12491], 256], 65415: [[12492], 256], 65416: [[12493], 256], 65417: [[12494], 256], 65418: [[12495], 256], 65419: [[12498], 256], 65420: [[12501], 256], 65421: [[12504], 256], 65422: [[12507], 256], 65423: [[12510], 256], 65424: [[12511], 256], 65425: [[12512], 256], 65426: [[12513], 256], 65427: [[12514], 256], 65428: [[12516], 256], 65429: [[12518], 256], 65430: [[12520], 256], 65431: [[12521], 256], 65432: [[12522], 256], 65433: [[12523], 256], 65434: [[12524], 256], 65435: [[12525], 256], 65436: [[12527], 256], 65437: [[12531], 256], 65438: [[12441], 256], 65439: [[12442], 256], 65440: [[12644], 256], 65441: [[12593], 256], 65442: [[12594], 256], 65443: [[12595], 256], 65444: [[12596], 256], 65445: [[12597], 256], 65446: [[12598], 256], 65447: [[12599], 256], 65448: [[12600], 256], 65449: [[12601], 256], 65450: [[12602], 256], 65451: [[12603], 256], 65452: [[12604], 256], 65453: [[12605], 256], 65454: [[12606], 256], 65455: [[12607], 256], 65456: [[12608], 256], 65457: [[12609], 256], 65458: [[12610], 256], 65459: [[12611], 256], 65460: [[12612], 256], 65461: [[12613], 256], 65462: [[12614], 256], 65463: [[12615], 256], 65464: [[12616], 256], 65465: [[12617], 256], 65466: [[12618], 256], 65467: [[12619], 256], 65468: [[12620], 256], 65469: [[12621], 256], 65470: [[12622], 256], 65474: [[12623], 256], 65475: [[12624], 256], 65476: [[12625], 256], 65477: [[12626], 256], 65478: [[12627], 256], 65479: [[12628], 256], 65482: [[12629], 256], 65483: [[12630], 256], 65484: [[12631], 256], 65485: [[12632], 256], 65486: [[12633], 256], 65487: [[12634], 256], 65490: [[12635], 256], 65491: [[12636], 256], 65492: [[12637], 256], 65493: [[12638], 256], 65494: [[12639], 256], 65495: [[12640], 256], 65498: [[12641], 256], 65499: [[12642], 256], 65500: [[12643], 256], 65504: [[162], 256], 65505: [[163], 256], 65506: [[172], 256], 65507: [[175], 256], 65508: [[166], 256], 65509: [[165], 256], 65510: [[8361], 256], 65512: [[9474], 256], 65513: [[8592], 256], 65514: [[8593], 256], 65515: [[8594], 256], 65516: [[8595], 256], 65517: [[9632], 256], 65518: [[9675], 256] } };var n = { nfc: function nfc(t) {return r(\"NFC\", t);}, nfd: function nfd(t) {return r(\"NFD\", t);}, nfkc: function nfkc(t) {return r(\"NFKC\", t);}, nfkd: function nfkd(t) {return r(\"NFKD\", t);} };\"object\" == typeof d ? d.exports = n : t.unorm = n, n.shimApplied = !1, String.prototype.normalize || (String.prototype.normalize = function (t) {var e = \"\" + this;if (\"NFC\" === (t = void 0 === t ? \"NFC\" : t)) return n.nfc(e);if (\"NFD\" === t) return n.nfd(e);if (\"NFKC\" === t) return n.nfkc(e);if (\"NFKD\" === t) return n.nfkd(e);throw new RangeError(\"Invalid normalization form: \" + t);}, n.shimApplied = !0);}(this);}, {}] }, {}, [3])(3);});\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../../Downloads/HBuilderX/plugins/uniapp-cli/node_modules/webpack/buildin/global.js */ 2), __webpack_require__(/*! ./../../../../Downloads/HBuilderX/plugins/uniapp-cli/node_modules/node-libs-browser/mock/process.js */ 29), __webpack_require__(/*! ./node_modules/@dcloudio/vue-cli-plugin-uni/lib/format-log.js */ 12)[\"default\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///28\n");

/***/ }),

/***/ 287:
/*!*********************************************************!*\
  !*** C:/Users/Admin/Desktop/evc.app/common/wxqrcode.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval(" //---------------------------------------------------------------------\n//\n// QR Code Generator for JavaScript\n//\n// Copyright (c) 2009 Kazuhiko Arase\n//\n// URL: [url=http://www.d-project.com/]http://www.d-project.com/[/url]\n//\n// Licensed under the MIT license:\n//        [url=http://www.opensource.org/licenses/mit-license.php]http://www.opensource.org/licenses/mit-license.php[/url]\n//\n// The word 'QR Code' is registered trademark of\n// DENSO WAVE INCORPORATED\n//        [url=http://www.denso-wave.com/qrcode/faqpatent-e.html]http://www.denso-wave.com/qrcode/faqpatent-e.html[/url]\n//\n//---------------------------------------------------------------------\n\n//---------------------------------------------------------------------\n// qrcode\n//代码第1588行为补充代码\n//修改人：chenxing\n//2017-02-27 16:21:32\n//---------------------------------------------------------------------\n\n/**\n * qrcode\n * @param typeNumber 1 to 40\n * @param errorCorrectLevel 'L','M','Q','H'\n */\nvar qrcode = function qrcode(typeNumber, errorCorrectLevel) {\n\n  var PAD0 = 0xEC;\n  var PAD1 = 0x11;\n\n  var _typeNumber = typeNumber;\n  var _errorCorrectLevel = QRErrorCorrectLevel[errorCorrectLevel];\n  var _modules = null;\n  var _moduleCount = 0;\n  var _dataCache = null;\n  var _dataList = new Array();\n\n  var _this = {};\n\n  var makeImpl = function makeImpl(test, maskPattern) {\n\n    _moduleCount = _typeNumber * 4 + 17;\n    _modules = function (moduleCount) {\n      var modules = new Array(moduleCount);\n      for (var row = 0; row < moduleCount; row += 1) {\n        modules[row] = new Array(moduleCount);\n        for (var col = 0; col < moduleCount; col += 1) {\n          modules[row][col] = null;\n        }\n      }\n      return modules;\n    }(_moduleCount);\n\n    setupPositionProbePattern(0, 0);\n    setupPositionProbePattern(_moduleCount - 7, 0);\n    setupPositionProbePattern(0, _moduleCount - 7);\n    setupPositionAdjustPattern();\n    setupTimingPattern();\n    setupTypeInfo(test, maskPattern);\n\n    if (_typeNumber >= 7) {\n      setupTypeNumber(test);\n    }\n\n    if (_dataCache == null) {\n      _dataCache = createData(_typeNumber, _errorCorrectLevel, _dataList);\n    }\n\n    mapData(_dataCache, maskPattern);\n  };\n\n  var setupPositionProbePattern = function setupPositionProbePattern(row, col) {\n\n    for (var r = -1; r <= 7; r += 1) {\n\n      if (row + r <= -1 || _moduleCount <= row + r) continue;\n\n      for (var c = -1; c <= 7; c += 1) {\n\n        if (col + c <= -1 || _moduleCount <= col + c) continue;\n\n        if (0 <= r && r <= 6 && (c == 0 || c == 6) ||\n        0 <= c && c <= 6 && (r == 0 || r == 6) ||\n        2 <= r && r <= 4 && 2 <= c && c <= 4) {\n          _modules[row + r][col + c] = true;\n        } else {\n          _modules[row + r][col + c] = false;\n        }\n      }\n    }\n  };\n\n  var getBestMaskPattern = function getBestMaskPattern() {\n\n    var minLostPoint = 0;\n    var pattern = 0;\n\n    for (var i = 0; i < 8; i += 1) {\n\n      makeImpl(true, i);\n\n      var lostPoint = QRUtil.getLostPoint(_this);\n\n      if (i == 0 || minLostPoint > lostPoint) {\n        minLostPoint = lostPoint;\n        pattern = i;\n      }\n    }\n\n    return pattern;\n  };\n\n  var setupTimingPattern = function setupTimingPattern() {\n\n    for (var r = 8; r < _moduleCount - 8; r += 1) {\n      if (_modules[r][6] != null) {\n        continue;\n      }\n      _modules[r][6] = r % 2 == 0;\n    }\n\n    for (var c = 8; c < _moduleCount - 8; c += 1) {\n      if (_modules[6][c] != null) {\n        continue;\n      }\n      _modules[6][c] = c % 2 == 0;\n    }\n  };\n\n  var setupPositionAdjustPattern = function setupPositionAdjustPattern() {\n\n    var pos = QRUtil.getPatternPosition(_typeNumber);\n\n    for (var i = 0; i < pos.length; i += 1) {\n\n      for (var j = 0; j < pos.length; j += 1) {\n\n        var row = pos[i];\n        var col = pos[j];\n\n        if (_modules[row][col] != null) {\n          continue;\n        }\n\n        for (var r = -2; r <= 2; r += 1) {\n\n          for (var c = -2; c <= 2; c += 1) {\n\n            if (r == -2 || r == 2 || c == -2 || c == 2 ||\n            r == 0 && c == 0) {\n              _modules[row + r][col + c] = true;\n            } else {\n              _modules[row + r][col + c] = false;\n            }\n          }\n        }\n      }\n    }\n  };\n\n  var setupTypeNumber = function setupTypeNumber(test) {\n\n    var bits = QRUtil.getBCHTypeNumber(_typeNumber);\n\n    for (var i = 0; i < 18; i += 1) {\n      var mod = !test && (bits >> i & 1) == 1;\n      _modules[Math.floor(i / 3)][i % 3 + _moduleCount - 8 - 3] = mod;\n    }\n\n    for (var i = 0; i < 18; i += 1) {\n      var mod = !test && (bits >> i & 1) == 1;\n      _modules[i % 3 + _moduleCount - 8 - 3][Math.floor(i / 3)] = mod;\n    }\n  };\n\n  var setupTypeInfo = function setupTypeInfo(test, maskPattern) {\n\n    var data = _errorCorrectLevel << 3 | maskPattern;\n    var bits = QRUtil.getBCHTypeInfo(data);\n\n    // vertical\n    for (var i = 0; i < 15; i += 1) {\n\n      var mod = !test && (bits >> i & 1) == 1;\n\n      if (i < 6) {\n        _modules[i][8] = mod;\n      } else if (i < 8) {\n        _modules[i + 1][8] = mod;\n      } else {\n        _modules[_moduleCount - 15 + i][8] = mod;\n      }\n    }\n\n    // horizontal\n    for (var i = 0; i < 15; i += 1) {\n\n      var mod = !test && (bits >> i & 1) == 1;\n\n      if (i < 8) {\n        _modules[8][_moduleCount - i - 1] = mod;\n      } else if (i < 9) {\n        _modules[8][15 - i - 1 + 1] = mod;\n      } else {\n        _modules[8][15 - i - 1] = mod;\n      }\n    }\n\n    // fixed module\n    _modules[_moduleCount - 8][8] = !test;\n  };\n\n  var mapData = function mapData(data, maskPattern) {\n\n    var inc = -1;\n    var row = _moduleCount - 1;\n    var bitIndex = 7;\n    var byteIndex = 0;\n    var maskFunc = QRUtil.getMaskFunction(maskPattern);\n\n    for (var col = _moduleCount - 1; col > 0; col -= 2) {\n\n      if (col == 6) col -= 1;\n\n      while (true) {\n\n        for (var c = 0; c < 2; c += 1) {\n\n          if (_modules[row][col - c] == null) {\n\n            var dark = false;\n\n            if (byteIndex < data.length) {\n              dark = (data[byteIndex] >>> bitIndex & 1) == 1;\n            }\n\n            var mask = maskFunc(row, col - c);\n\n            if (mask) {\n              dark = !dark;\n            }\n\n            _modules[row][col - c] = dark;\n            bitIndex -= 1;\n\n            if (bitIndex == -1) {\n              byteIndex += 1;\n              bitIndex = 7;\n            }\n          }\n        }\n\n        row += inc;\n\n        if (row < 0 || _moduleCount <= row) {\n          row -= inc;\n          inc = -inc;\n          break;\n        }\n      }\n    }\n  };\n\n  var createBytes = function createBytes(buffer, rsBlocks) {\n\n    var offset = 0;\n\n    var maxDcCount = 0;\n    var maxEcCount = 0;\n\n    var dcdata = new Array(rsBlocks.length);\n    var ecdata = new Array(rsBlocks.length);\n\n    for (var r = 0; r < rsBlocks.length; r += 1) {\n\n      var dcCount = rsBlocks[r].dataCount;\n      var ecCount = rsBlocks[r].totalCount - dcCount;\n\n      maxDcCount = Math.max(maxDcCount, dcCount);\n      maxEcCount = Math.max(maxEcCount, ecCount);\n\n      dcdata[r] = new Array(dcCount);\n\n      for (var i = 0; i < dcdata[r].length; i += 1) {\n        dcdata[r][i] = 0xff & buffer.getBuffer()[i + offset];\n      }\n      offset += dcCount;\n\n      var rsPoly = QRUtil.getErrorCorrectPolynomial(ecCount);\n      var rawPoly = qrPolynomial(dcdata[r], rsPoly.getLength() - 1);\n\n      var modPoly = rawPoly.mod(rsPoly);\n      ecdata[r] = new Array(rsPoly.getLength() - 1);\n      for (var i = 0; i < ecdata[r].length; i += 1) {\n        var modIndex = i + modPoly.getLength() - ecdata[r].length;\n        ecdata[r][i] = modIndex >= 0 ? modPoly.getAt(modIndex) : 0;\n      }\n    }\n\n    var totalCodeCount = 0;\n    for (var i = 0; i < rsBlocks.length; i += 1) {\n      totalCodeCount += rsBlocks[i].totalCount;\n    }\n\n    var data = new Array(totalCodeCount);\n    var index = 0;\n\n    for (var i = 0; i < maxDcCount; i += 1) {\n      for (var r = 0; r < rsBlocks.length; r += 1) {\n        if (i < dcdata[r].length) {\n          data[index] = dcdata[r][i];\n          index += 1;\n        }\n      }\n    }\n\n    for (var i = 0; i < maxEcCount; i += 1) {\n      for (var r = 0; r < rsBlocks.length; r += 1) {\n        if (i < ecdata[r].length) {\n          data[index] = ecdata[r][i];\n          index += 1;\n        }\n      }\n    }\n\n    return data;\n  };\n\n  var createData = function createData(typeNumber, errorCorrectLevel, dataList) {\n\n    var rsBlocks = QRRSBlock.getRSBlocks(typeNumber, errorCorrectLevel);\n\n    var buffer = qrBitBuffer();\n\n    for (var i = 0; i < dataList.length; i += 1) {\n      var data = dataList[i];\n      buffer.put(data.getMode(), 4);\n      buffer.put(data.getLength(), QRUtil.getLengthInBits(data.getMode(), typeNumber));\n      data.write(buffer);\n    }\n\n    // calc num max data.\n    var totalDataCount = 0;\n    for (var i = 0; i < rsBlocks.length; i += 1) {\n      totalDataCount += rsBlocks[i].dataCount;\n    }\n\n    if (buffer.getLengthInBits() > totalDataCount * 8) {\n      throw new Error('code length overflow. (' +\n      buffer.getLengthInBits() +\n      '>' +\n      totalDataCount * 8 +\n      ')');\n    }\n\n    // end code\n    if (buffer.getLengthInBits() + 4 <= totalDataCount * 8) {\n      buffer.put(0, 4);\n    }\n\n    // padding\n    while (buffer.getLengthInBits() % 8 != 0) {\n      buffer.putBit(false);\n    }\n\n    // padding\n    while (true) {\n\n      if (buffer.getLengthInBits() >= totalDataCount * 8) {\n        break;\n      }\n      buffer.put(PAD0, 8);\n\n      if (buffer.getLengthInBits() >= totalDataCount * 8) {\n        break;\n      }\n      buffer.put(PAD1, 8);\n    }\n\n    return createBytes(buffer, rsBlocks);\n  };\n\n  _this.addData = function (data) {\n    var newData = qr8BitByte(data);\n    _dataList.push(newData);\n    _dataCache = null;\n  };\n\n  _this.isDark = function (row, col) {\n    if (row < 0 || _moduleCount <= row || col < 0 || _moduleCount <= col) {\n      throw new Error(row + ',' + col);\n    }\n    return _modules[row][col];\n  };\n\n  _this.getModuleCount = function () {\n    return _moduleCount;\n  };\n\n  _this.make = function () {\n    makeImpl(false, getBestMaskPattern());\n  };\n\n  _this.createTableTag = function (cellSize, margin) {\n\n    cellSize = cellSize || 2;\n    margin = typeof margin == 'undefined' ? cellSize * 4 : margin;\n\n    var qrHtml = '';\n\n    qrHtml += '<table style=\"';\n    qrHtml += ' border-width: 0px; border-style: none;';\n    qrHtml += ' border-collapse: collapse;';\n    qrHtml += ' padding: 0px; margin: ' + margin + 'px;';\n    qrHtml += '\">';\n    qrHtml += '<tbody>';\n\n    for (var r = 0; r < _this.getModuleCount(); r += 1) {\n\n      qrHtml += '<tr>';\n\n      for (var c = 0; c < _this.getModuleCount(); c += 1) {\n        qrHtml += '<td style=\"';\n        qrHtml += ' border-width: 0px; border-style: none;';\n        qrHtml += ' border-collapse: collapse;';\n        qrHtml += ' padding: 0px; margin: 0px;';\n        qrHtml += ' width: ' + cellSize + 'px;';\n        qrHtml += ' height: ' + cellSize + 'px;';\n        qrHtml += ' background-color: ';\n        qrHtml += _this.isDark(r, c) ? '#000000' : '#ffffff';\n        qrHtml += ';';\n        qrHtml += '\"/>';\n      }\n\n      qrHtml += '</tr>';\n    }\n\n    qrHtml += '</tbody>';\n    qrHtml += '</table>';\n\n    return qrHtml;\n  };\n\n  _this.createImgTag = function (cellSize, margin, size) {\n\n    cellSize = cellSize || 2;\n    margin = typeof margin == 'undefined' ? cellSize * 4 : margin;\n\n    var min = margin;\n    var max = _this.getModuleCount() * cellSize + margin;\n\n    return createImgTag(size, size, function (x, y) {\n      if (min <= x && x < max && min <= y && y < max) {\n        var c = Math.floor((x - min) / cellSize);\n        var r = Math.floor((y - min) / cellSize);\n        return _this.isDark(r, c) ? 0 : 1;\n      } else {\n        return 1;\n      }\n    });\n  };\n\n  return _this;\n};\n\n//---------------------------------------------------------------------\n// qrcode.stringToBytes\n//---------------------------------------------------------------------\n\nqrcode.stringToBytes = function (s) {\n  var bytes = new Array();\n  for (var i = 0; i < s.length; i += 1) {\n    var c = s.charCodeAt(i);\n    bytes.push(c & 0xff);\n  }\n  return bytes;\n};\n\n//---------------------------------------------------------------------\n// qrcode.createStringToBytes\n//---------------------------------------------------------------------\n\n/**\n * @param unicodeData base64 string of byte array.\n * [16bit Unicode],[16bit Bytes], ...\n * @param numChars\n */\nqrcode.createStringToBytes = function (unicodeData, numChars) {\n\n  // create conversion map.\n\n  var unicodeMap = function () {\n\n    var bin = base64DecodeInputStream(unicodeData);\n    var read = function read() {\n      var b = bin.read();\n      if (b == -1) throw new Error();\n      return b;\n    };\n\n    var count = 0;\n    var unicodeMap = {};\n    while (true) {\n      var b0 = bin.read();\n      if (b0 == -1) break;\n      var b1 = read();\n      var b2 = read();\n      var b3 = read();\n      var k = String.fromCharCode(b0 << 8 | b1);\n      var v = b2 << 8 | b3;\n      unicodeMap[k] = v;\n      count += 1;\n    }\n    if (count != numChars) {\n      throw new Error(count + ' != ' + numChars);\n    }\n\n    return unicodeMap;\n  }();\n\n  var unknownChar = '?'.charCodeAt(0);\n\n  return function (s) {\n    var bytes = new Array();\n    for (var i = 0; i < s.length; i += 1) {\n      var c = s.charCodeAt(i);\n      if (c < 128) {\n        bytes.push(c);\n      } else {\n        var b = unicodeMap[s.charAt(i)];\n        if (typeof b == 'number') {\n          if ((b & 0xff) == b) {\n            // 1byte\n            bytes.push(b);\n          } else {\n            // 2bytes\n            bytes.push(b >>> 8);\n            bytes.push(b & 0xff);\n          }\n        } else {\n          bytes.push(unknownChar);\n        }\n      }\n    }\n    return bytes;\n  };\n};\n\n//---------------------------------------------------------------------\n// QRMode\n//---------------------------------------------------------------------\n\nvar QRMode = {\n  MODE_NUMBER: 1 << 0,\n  MODE_ALPHA_NUM: 1 << 1,\n  MODE_8BIT_BYTE: 1 << 2,\n  MODE_KANJI: 1 << 3 };\n\n\n//---------------------------------------------------------------------\n// QRErrorCorrectLevel\n//---------------------------------------------------------------------\n\nvar QRErrorCorrectLevel = {\n  L: 1,\n  M: 0,\n  Q: 3,\n  H: 2 };\n\n\n//---------------------------------------------------------------------\n// QRMaskPattern\n//---------------------------------------------------------------------\n\nvar QRMaskPattern = {\n  PATTERN000: 0,\n  PATTERN001: 1,\n  PATTERN010: 2,\n  PATTERN011: 3,\n  PATTERN100: 4,\n  PATTERN101: 5,\n  PATTERN110: 6,\n  PATTERN111: 7 };\n\n\n//---------------------------------------------------------------------\n// QRUtil\n//---------------------------------------------------------------------\n\nvar QRUtil = function () {\n\n  var PATTERN_POSITION_TABLE = [\n  [],\n  [6, 18],\n  [6, 22],\n  [6, 26],\n  [6, 30],\n  [6, 34],\n  [6, 22, 38],\n  [6, 24, 42],\n  [6, 26, 46],\n  [6, 28, 50],\n  [6, 30, 54],\n  [6, 32, 58],\n  [6, 34, 62],\n  [6, 26, 46, 66],\n  [6, 26, 48, 70],\n  [6, 26, 50, 74],\n  [6, 30, 54, 78],\n  [6, 30, 56, 82],\n  [6, 30, 58, 86],\n  [6, 34, 62, 90],\n  [6, 28, 50, 72, 94],\n  [6, 26, 50, 74, 98],\n  [6, 30, 54, 78, 102],\n  [6, 28, 54, 80, 106],\n  [6, 32, 58, 84, 110],\n  [6, 30, 58, 86, 114],\n  [6, 34, 62, 90, 118],\n  [6, 26, 50, 74, 98, 122],\n  [6, 30, 54, 78, 102, 126],\n  [6, 26, 52, 78, 104, 130],\n  [6, 30, 56, 82, 108, 134],\n  [6, 34, 60, 86, 112, 138],\n  [6, 30, 58, 86, 114, 142],\n  [6, 34, 62, 90, 118, 146],\n  [6, 30, 54, 78, 102, 126, 150],\n  [6, 24, 50, 76, 102, 128, 154],\n  [6, 28, 54, 80, 106, 132, 158],\n  [6, 32, 58, 84, 110, 136, 162],\n  [6, 26, 54, 82, 110, 138, 166],\n  [6, 30, 58, 86, 114, 142, 170]];\n\n  var G15 = 1 << 10 | 1 << 8 | 1 << 5 | 1 << 4 | 1 << 2 | 1 << 1 | 1 << 0;\n  var G18 = 1 << 12 | 1 << 11 | 1 << 10 | 1 << 9 | 1 << 8 | 1 << 5 | 1 << 2 | 1 << 0;\n  var G15_MASK = 1 << 14 | 1 << 12 | 1 << 10 | 1 << 4 | 1 << 1;\n\n  var _this = {};\n\n  var getBCHDigit = function getBCHDigit(data) {\n    var digit = 0;\n    while (data != 0) {\n      digit += 1;\n      data >>>= 1;\n    }\n    return digit;\n  };\n\n  _this.getBCHTypeInfo = function (data) {\n    var d = data << 10;\n    while (getBCHDigit(d) - getBCHDigit(G15) >= 0) {\n      d ^= G15 << getBCHDigit(d) - getBCHDigit(G15);\n    }\n    return (data << 10 | d) ^ G15_MASK;\n  };\n\n  _this.getBCHTypeNumber = function (data) {\n    var d = data << 12;\n    while (getBCHDigit(d) - getBCHDigit(G18) >= 0) {\n      d ^= G18 << getBCHDigit(d) - getBCHDigit(G18);\n    }\n    return data << 12 | d;\n  };\n\n  _this.getPatternPosition = function (typeNumber) {\n    return PATTERN_POSITION_TABLE[typeNumber - 1];\n  };\n\n  _this.getMaskFunction = function (maskPattern) {\n\n    switch (maskPattern) {\n\n      case QRMaskPattern.PATTERN000:\n        return function (i, j) {return (i + j) % 2 == 0;};\n      case QRMaskPattern.PATTERN001:\n        return function (i, j) {return i % 2 == 0;};\n      case QRMaskPattern.PATTERN010:\n        return function (i, j) {return j % 3 == 0;};\n      case QRMaskPattern.PATTERN011:\n        return function (i, j) {return (i + j) % 3 == 0;};\n      case QRMaskPattern.PATTERN100:\n        return function (i, j) {return (Math.floor(i / 2) + Math.floor(j / 3)) % 2 == 0;};\n      case QRMaskPattern.PATTERN101:\n        return function (i, j) {return i * j % 2 + i * j % 3 == 0;};\n      case QRMaskPattern.PATTERN110:\n        return function (i, j) {return (i * j % 2 + i * j % 3) % 2 == 0;};\n      case QRMaskPattern.PATTERN111:\n        return function (i, j) {return (i * j % 3 + (i + j) % 2) % 2 == 0;};\n\n      default:\n        throw new Error('bad maskPattern:' + maskPattern);}\n\n  };\n\n  _this.getErrorCorrectPolynomial = function (errorCorrectLength) {\n    var a = qrPolynomial([1], 0);\n    for (var i = 0; i < errorCorrectLength; i += 1) {\n      a = a.multiply(qrPolynomial([1, QRMath.gexp(i)], 0));\n    }\n    return a;\n  };\n\n  _this.getLengthInBits = function (mode, type) {\n\n    if (1 <= type && type < 10) {\n\n      // 1 - 9\n\n      switch (mode) {\n        case QRMode.MODE_NUMBER:return 10;\n        case QRMode.MODE_ALPHA_NUM:return 9;\n        case QRMode.MODE_8BIT_BYTE:return 8;\n        case QRMode.MODE_KANJI:return 8;\n        default:\n          throw new Error('mode:' + mode);}\n\n\n    } else if (type < 27) {\n\n      // 10 - 26\n\n      switch (mode) {\n        case QRMode.MODE_NUMBER:return 12;\n        case QRMode.MODE_ALPHA_NUM:return 11;\n        case QRMode.MODE_8BIT_BYTE:return 16;\n        case QRMode.MODE_KANJI:return 10;\n        default:\n          throw new Error('mode:' + mode);}\n\n\n    } else if (type < 41) {\n\n      // 27 - 40\n\n      switch (mode) {\n        case QRMode.MODE_NUMBER:return 14;\n        case QRMode.MODE_ALPHA_NUM:return 13;\n        case QRMode.MODE_8BIT_BYTE:return 16;\n        case QRMode.MODE_KANJI:return 12;\n        default:\n          throw new Error('mode:' + mode);}\n\n\n    } else {\n      throw new Error('type:' + type);\n    }\n  };\n\n  _this.getLostPoint = function (qrcode) {\n\n    var moduleCount = qrcode.getModuleCount();\n\n    var lostPoint = 0;\n\n    // LEVEL1\n\n    for (var row = 0; row < moduleCount; row += 1) {\n      for (var col = 0; col < moduleCount; col += 1) {\n\n        var sameCount = 0;\n        var dark = qrcode.isDark(row, col);\n\n        for (var r = -1; r <= 1; r += 1) {\n\n          if (row + r < 0 || moduleCount <= row + r) {\n            continue;\n          }\n\n          for (var c = -1; c <= 1; c += 1) {\n\n            if (col + c < 0 || moduleCount <= col + c) {\n              continue;\n            }\n\n            if (r == 0 && c == 0) {\n              continue;\n            }\n\n            if (dark == qrcode.isDark(row + r, col + c)) {\n              sameCount += 1;\n            }\n          }\n        }\n\n        if (sameCount > 5) {\n          lostPoint += 3 + sameCount - 5;\n        }\n      }\n    };\n\n    // LEVEL2\n\n    for (var row = 0; row < moduleCount - 1; row += 1) {\n      for (var col = 0; col < moduleCount - 1; col += 1) {\n        var count = 0;\n        if (qrcode.isDark(row, col)) count += 1;\n        if (qrcode.isDark(row + 1, col)) count += 1;\n        if (qrcode.isDark(row, col + 1)) count += 1;\n        if (qrcode.isDark(row + 1, col + 1)) count += 1;\n        if (count == 0 || count == 4) {\n          lostPoint += 3;\n        }\n      }\n    }\n\n    // LEVEL3\n\n    for (var row = 0; row < moduleCount; row += 1) {\n      for (var col = 0; col < moduleCount - 6; col += 1) {\n        if (qrcode.isDark(row, col) &&\n        !qrcode.isDark(row, col + 1) &&\n        qrcode.isDark(row, col + 2) &&\n        qrcode.isDark(row, col + 3) &&\n        qrcode.isDark(row, col + 4) &&\n        !qrcode.isDark(row, col + 5) &&\n        qrcode.isDark(row, col + 6)) {\n          lostPoint += 40;\n        }\n      }\n    }\n\n    for (var col = 0; col < moduleCount; col += 1) {\n      for (var row = 0; row < moduleCount - 6; row += 1) {\n        if (qrcode.isDark(row, col) &&\n        !qrcode.isDark(row + 1, col) &&\n        qrcode.isDark(row + 2, col) &&\n        qrcode.isDark(row + 3, col) &&\n        qrcode.isDark(row + 4, col) &&\n        !qrcode.isDark(row + 5, col) &&\n        qrcode.isDark(row + 6, col)) {\n          lostPoint += 40;\n        }\n      }\n    }\n\n    // LEVEL4\n\n    var darkCount = 0;\n\n    for (var col = 0; col < moduleCount; col += 1) {\n      for (var row = 0; row < moduleCount; row += 1) {\n        if (qrcode.isDark(row, col)) {\n          darkCount += 1;\n        }\n      }\n    }\n\n    var ratio = Math.abs(100 * darkCount / moduleCount / moduleCount - 50) / 5;\n    lostPoint += ratio * 10;\n\n    return lostPoint;\n  };\n\n  return _this;\n}();\n\n//---------------------------------------------------------------------\n// QRMath\n//---------------------------------------------------------------------\n\nvar QRMath = function () {\n\n  var EXP_TABLE = new Array(256);\n  var LOG_TABLE = new Array(256);\n\n  // initialize tables\n  for (var i = 0; i < 8; i += 1) {\n    EXP_TABLE[i] = 1 << i;\n  }\n  for (var i = 8; i < 256; i += 1) {\n    EXP_TABLE[i] = EXP_TABLE[i - 4] ^\n    EXP_TABLE[i - 5] ^\n    EXP_TABLE[i - 6] ^\n    EXP_TABLE[i - 8];\n  }\n  for (var i = 0; i < 255; i += 1) {\n    LOG_TABLE[EXP_TABLE[i]] = i;\n  }\n\n  var _this = {};\n\n  _this.glog = function (n) {\n\n    if (n < 1) {\n      throw new Error('glog(' + n + ')');\n    }\n\n    return LOG_TABLE[n];\n  };\n\n  _this.gexp = function (n) {\n\n    while (n < 0) {\n      n += 255;\n    }\n\n    while (n >= 256) {\n      n -= 255;\n    }\n\n    return EXP_TABLE[n];\n  };\n\n  return _this;\n}();\n\n//---------------------------------------------------------------------\n// qrPolynomial\n//---------------------------------------------------------------------\n\nfunction qrPolynomial(num, shift) {\n\n  if (typeof num.length == 'undefined') {\n    throw new Error(num.length + '/' + shift);\n  }\n\n  var _num = function () {\n    var offset = 0;\n    while (offset < num.length && num[offset] == 0) {\n      offset += 1;\n    }\n    var _num = new Array(num.length - offset + shift);\n    for (var i = 0; i < num.length - offset; i += 1) {\n      _num[i] = num[i + offset];\n    }\n    return _num;\n  }();\n\n  var _this = {};\n\n  _this.getAt = function (index) {\n    return _num[index];\n  };\n\n  _this.getLength = function () {\n    return _num.length;\n  };\n\n  _this.multiply = function (e) {\n\n    var num = new Array(_this.getLength() + e.getLength() - 1);\n\n    for (var i = 0; i < _this.getLength(); i += 1) {\n      for (var j = 0; j < e.getLength(); j += 1) {\n        num[i + j] ^= QRMath.gexp(QRMath.glog(_this.getAt(i)) + QRMath.glog(e.getAt(j)));\n      }\n    }\n\n    return qrPolynomial(num, 0);\n  };\n\n  _this.mod = function (e) {\n\n    if (_this.getLength() - e.getLength() < 0) {\n      return _this;\n    }\n\n    var ratio = QRMath.glog(_this.getAt(0)) - QRMath.glog(e.getAt(0));\n\n    var num = new Array(_this.getLength());\n    for (var i = 0; i < _this.getLength(); i += 1) {\n      num[i] = _this.getAt(i);\n    }\n\n    for (var i = 0; i < e.getLength(); i += 1) {\n      num[i] ^= QRMath.gexp(QRMath.glog(e.getAt(i)) + ratio);\n    }\n\n    // recursive call\n    return qrPolynomial(num, 0).mod(e);\n  };\n\n  return _this;\n};\n\n//---------------------------------------------------------------------\n// QRRSBlock\n//---------------------------------------------------------------------\n\nvar QRRSBlock = function () {\n\n\n  // [1: [L, M, Q, H], ..]\n  var RS_BLOCK_TABLE = [[1, 26, 19], [1, 26, 16], [1, 26, 13], [1, 26, 9], [1, 44, 34], [1, 44, 28], [1, 44, 22], [1, 44, 16], [1, 70, 55], [1, 70, 44], [2, 35, 17], [2, 35, 13], [1, 100, 80], [2, 50, 32], [2, 50, 24], [4, 25, 9], [1, 134, 108], [2, 67, 43], [2, 33, 15, 2, 34, 16], [2, 33, 11, 2, 34, 12], [2, 86, 68], [4, 43, 27], [4, 43, 19], [4, 43, 15], [2, 98, 78], [4, 49, 31], [2, 32, 14, 4, 33, 15], [4, 39, 13, 1, 40, 14], [2, 121, 97], [2, 60, 38, 2, 61, 39], [4, 40, 18, 2, 41, 19], [4, 40, 14, 2, 41, 15], [2, 146, 116], [3, 58, 36, 2, 59, 37], [4, 36, 16, 4, 37, 17], [4, 36, 12, 4, 37, 13], [2, 86, 68, 2, 87, 69], [4, 69, 43, 1, 70, 44], [6, 43, 19, 2, 44, 20], [6, 43, 15, 2, 44, 16], [4, 101, 81], [1, 80, 50, 4, 81, 51], [4, 50, 22, 4, 51, 23], [3, 36, 12, 8, 37, 13], [2, 116, 92, 2, 117, 93], [6, 58, 36, 2, 59, 37], [4, 46, 20, 6, 47, 21], [7, 42, 14, 4, 43, 15], [4, 133, 107], [8, 59, 37, 1, 60, 38], [8, 44, 20, 4, 45, 21], [12, 33, 11, 4, 34, 12], [3, 145, 115, 1, 146, 116], [4, 64, 40, 5, 65, 41], [11, 36, 16, 5, 37, 17], [11, 36, 12, 5, 37, 13], [5, 109, 87, 1, 110, 88], [5, 65, 41, 5, 66, 42], [5, 54, 24, 7, 55, 25], [11, 36, 12], [5, 122, 98, 1, 123, 99], [7, 73, 45, 3, 74, 46], [15, 43, 19, 2, 44, 20], [3, 45, 15, 13, 46, 16], [1, 135, 107, 5, 136, 108], [10, 74, 46, 1, 75, 47], [1, 50, 22, 15, 51, 23], [2, 42, 14, 17, 43, 15], [5, 150, 120, 1, 151, 121], [9, 69, 43, 4, 70, 44], [17, 50, 22, 1, 51, 23], [2, 42, 14, 19, 43, 15], [3, 141, 113, 4, 142, 114], [3, 70, 44, 11, 71, 45], [17, 47, 21, 4, 48, 22], [9, 39, 13, 16, 40, 14], [3, 135, 107, 5, 136, 108], [3, 67, 41, 13, 68, 42], [15, 54, 24, 5, 55, 25], [15, 43, 15, 10, 44, 16], [4, 144, 116, 4, 145, 117], [17, 68, 42], [17, 50, 22, 6, 51, 23], [19, 46, 16, 6, 47, 17], [2, 139, 111, 7, 140, 112], [17, 74, 46], [7, 54, 24, 16, 55, 25], [34, 37, 13], [4, 151, 121, 5, 152, 122], [4, 75, 47, 14, 76, 48], [11, 54, 24, 14, 55, 25], [16, 45, 15, 14, 46, 16], [6, 147, 117, 4, 148, 118], [6, 73, 45, 14, 74, 46], [11, 54, 24, 16, 55, 25], [30, 46, 16, 2, 47, 17], [8, 132, 106, 4, 133, 107], [8, 75, 47, 13, 76, 48], [7, 54, 24, 22, 55, 25], [22, 45, 15, 13, 46, 16], [10, 142, 114, 2, 143, 115], [19, 74, 46, 4, 75, 47], [28, 50, 22, 6, 51, 23], [33, 46, 16, 4, 47, 17], [8, 152, 122, 4, 153, 123], [22, 73, 45, 3, 74, 46], [8, 53, 23, 26, 54, 24], [12, 45, 15, 28, 46, 16], [3, 147, 117, 10, 148, 118], [3, 73, 45, 23, 74, 46], [4, 54, 24, 31, 55, 25], [11, 45, 15, 31, 46, 16], [7, 146, 116, 7, 147, 117], [21, 73, 45, 7, 74, 46], [1, 53, 23, 37, 54, 24], [19, 45, 15, 26, 46, 16], [5, 145, 115, 10, 146, 116], [19, 75, 47, 10, 76, 48], [15, 54, 24, 25, 55, 25], [23, 45, 15, 25, 46, 16], [13, 145, 115, 3, 146, 116], [2, 74, 46, 29, 75, 47], [42, 54, 24, 1, 55, 25], [23, 45, 15, 28, 46, 16], [17, 145, 115], [10, 74, 46, 23, 75, 47], [10, 54, 24, 35, 55, 25], [19, 45, 15, 35, 46, 16], [17, 145, 115, 1, 146, 116], [14, 74, 46, 21, 75, 47], [29, 54, 24, 19, 55, 25], [11, 45, 15, 46, 46, 16], [13, 145, 115, 6, 146, 116], [14, 74, 46, 23, 75, 47], [44, 54, 24, 7, 55, 25], [59, 46, 16, 1, 47, 17], [12, 151, 121, 7, 152, 122], [12, 75, 47, 26, 76, 48], [39, 54, 24, 14, 55, 25], [22, 45, 15, 41, 46, 16], [6, 151, 121, 14, 152, 122], [6, 75, 47, 34, 76, 48], [46, 54, 24, 10, 55, 25], [2, 45, 15, 64, 46, 16], [17, 152, 122, 4, 153, 123], [29, 74, 46, 14, 75, 47], [49, 54, 24, 10, 55, 25], [24, 45, 15, 46, 46, 16], [4, 152, 122, 18, 153, 123], [13, 74, 46, 32, 75, 47], [48, 54, 24, 14, 55, 25], [42, 45, 15, 32, 46, 16], [20, 147, 117, 4, 148, 118], [40, 75, 47, 7, 76, 48], [43, 54, 24, 22, 55, 25], [10, 45, 15, 67, 46, 16], [19, 148, 118, 6, 149, 119], [18, 75, 47, 31, 76, 48], [34, 54, 24, 34, 55, 25], [20, 45, 15, 61, 46, 16]];\n\n  var qrRSBlock = function qrRSBlock(totalCount, dataCount) {\n    var _this = {};\n    _this.totalCount = totalCount;\n    _this.dataCount = dataCount;\n    return _this;\n  };\n\n  var _this = {};\n\n  var getRsBlockTable = function getRsBlockTable(typeNumber, errorCorrectLevel) {\n\n    switch (errorCorrectLevel) {\n      case QRErrorCorrectLevel.L:\n        return RS_BLOCK_TABLE[(typeNumber - 1) * 4 + 0];\n      case QRErrorCorrectLevel.M:\n        return RS_BLOCK_TABLE[(typeNumber - 1) * 4 + 1];\n      case QRErrorCorrectLevel.Q:\n        return RS_BLOCK_TABLE[(typeNumber - 1) * 4 + 2];\n      case QRErrorCorrectLevel.H:\n        return RS_BLOCK_TABLE[(typeNumber - 1) * 4 + 3];\n      default:\n        return undefined;}\n\n  };\n\n  _this.getRSBlocks = function (typeNumber, errorCorrectLevel) {\n\n    var rsBlock = getRsBlockTable(typeNumber, errorCorrectLevel);\n\n    if (typeof rsBlock == 'undefined') {\n      throw new Error('bad rs block [url=home.php?mod=space&uid=5302]@[/url] typeNumber:' + typeNumber +\n      '/errorCorrectLevel:' + errorCorrectLevel);\n    }\n\n    var length = rsBlock.length / 3;\n\n    var list = new Array();\n\n    for (var i = 0; i < length; i += 1) {\n\n      var count = rsBlock[i * 3 + 0];\n      var totalCount = rsBlock[i * 3 + 1];\n      var dataCount = rsBlock[i * 3 + 2];\n\n      for (var j = 0; j < count; j += 1) {\n        list.push(qrRSBlock(totalCount, dataCount));\n      }\n    }\n\n    return list;\n  };\n\n  return _this;\n}();\n\n//---------------------------------------------------------------------\n// qrBitBuffer\n//---------------------------------------------------------------------\n\nvar qrBitBuffer = function qrBitBuffer() {\n\n  var _buffer = new Array();\n  var _length = 0;\n\n  var _this = {};\n\n  _this.getBuffer = function () {\n    return _buffer;\n  };\n\n  _this.getAt = function (index) {\n    var bufIndex = Math.floor(index / 8);\n    return (_buffer[bufIndex] >>> 7 - index % 8 & 1) == 1;\n  };\n\n  _this.put = function (num, length) {\n    for (var i = 0; i < length; i += 1) {\n      _this.putBit((num >>> length - i - 1 & 1) == 1);\n    }\n  };\n\n  _this.getLengthInBits = function () {\n    return _length;\n  };\n\n  _this.putBit = function (bit) {\n\n    var bufIndex = Math.floor(_length / 8);\n    if (_buffer.length <= bufIndex) {\n      _buffer.push(0);\n    }\n\n    if (bit) {\n      _buffer[bufIndex] |= 0x80 >>> _length % 8;\n    }\n\n    _length += 1;\n  };\n\n  return _this;\n};\n\n//---------------------------------------------------------------------\n// qr8BitByte\n//---------------------------------------------------------------------\n\nvar qr8BitByte = function qr8BitByte(data) {\n\n  var _mode = QRMode.MODE_8BIT_BYTE;\n  var _data = data;\n  var _parsedData = [];\n\n  var _this = {};\n\n\n  // Added to support UTF-8 Characters\n  for (var i = 0, l = _data.length; i < l; i++) {\n    var byteArray = [];\n    var code = _data.charCodeAt(i);\n\n    if (code > 0x10000) {\n      byteArray[0] = 0xF0 | (code & 0x1C0000) >>> 18;\n      byteArray[1] = 0x80 | (code & 0x3F000) >>> 12;\n      byteArray[2] = 0x80 | (code & 0xFC0) >>> 6;\n      byteArray[3] = 0x80 | code & 0x3F;\n    } else if (code > 0x800) {\n      byteArray[0] = 0xE0 | (code & 0xF000) >>> 12;\n      byteArray[1] = 0x80 | (code & 0xFC0) >>> 6;\n      byteArray[2] = 0x80 | code & 0x3F;\n    } else if (code > 0x80) {\n      byteArray[0] = 0xC0 | (code & 0x7C0) >>> 6;\n      byteArray[1] = 0x80 | code & 0x3F;\n    } else {\n      byteArray[0] = code;\n    }\n\n    // Fix Unicode corruption bug\n    _parsedData.push(byteArray);\n  }\n\n  _parsedData = Array.prototype.concat.apply([], _parsedData);\n\n  if (_parsedData.length != _data.length) {\n    _parsedData.unshift(191);\n    _parsedData.unshift(187);\n    _parsedData.unshift(239);\n  }\n\n  var _bytes = _parsedData;\n\n  _this.getMode = function () {\n    return _mode;\n  };\n\n  _this.getLength = function (buffer) {\n    return _bytes.length;\n  };\n\n  _this.write = function (buffer) {\n    for (var i = 0; i < _bytes.length; i += 1) {\n      buffer.put(_bytes[i], 8);\n    }\n  };\n\n  return _this;\n};\n\n//=====================================================================\n// GIF Support etc.\n//\n\n//---------------------------------------------------------------------\n// byteArrayOutputStream\n//---------------------------------------------------------------------\n\nvar byteArrayOutputStream = function byteArrayOutputStream() {\n\n  var _bytes = new Array();\n\n  var _this = {};\n\n  _this.writeByte = function (b) {\n    _bytes.push(b & 0xff);\n  };\n\n  _this.writeShort = function (i) {\n    _this.writeByte(i);\n    _this.writeByte(i >>> 8);\n  };\n\n  _this.writeBytes = function (b, off, len) {\n    off = off || 0;\n    len = len || b.length;\n    for (var i = 0; i < len; i += 1) {\n      _this.writeByte(b[i + off]);\n    }\n  };\n\n  _this.writeString = function (s) {\n    for (var i = 0; i < s.length; i += 1) {\n      _this.writeByte(s.charCodeAt(i));\n    }\n  };\n\n  _this.toByteArray = function () {\n    return _bytes;\n  };\n\n  _this.toString = function () {\n    var s = '';\n    s += '[';\n    for (var i = 0; i < _bytes.length; i += 1) {\n      if (i > 0) {\n        s += ',';\n      }\n      s += _bytes[i];\n    }\n    s += ']';\n    return s;\n  };\n\n  return _this;\n};\n\n//---------------------------------------------------------------------\n// base64EncodeOutputStream\n//---------------------------------------------------------------------\n\nvar base64EncodeOutputStream = function base64EncodeOutputStream() {\n\n  var _buffer = 0;\n  var _buflen = 0;\n  var _length = 0;\n  var _base64 = '';\n\n  var _this = {};\n\n  var writeEncoded = function writeEncoded(b) {\n    _base64 += String.fromCharCode(encode(b & 0x3f));\n  };\n\n  var encode = function encode(n) {\n    if (n < 0) {\n      // error.\n    } else if (n < 26) {\n      return 0x41 + n;\n    } else if (n < 52) {\n      return 0x61 + (n - 26);\n    } else if (n < 62) {\n      return 0x30 + (n - 52);\n    } else if (n == 62) {\n      return 0x2b;\n    } else if (n == 63) {\n      return 0x2f;\n    }\n    throw new Error('n:' + n);\n  };\n\n  _this.writeByte = function (n) {\n\n    _buffer = _buffer << 8 | n & 0xff;\n    _buflen += 8;\n    _length += 1;\n\n    while (_buflen >= 6) {\n      writeEncoded(_buffer >>> _buflen - 6);\n      _buflen -= 6;\n    }\n  };\n\n  _this.flush = function () {\n\n    if (_buflen > 0) {\n      writeEncoded(_buffer << 6 - _buflen);\n      _buffer = 0;\n      _buflen = 0;\n    }\n\n    if (_length % 3 != 0) {\n      // padding\n      var padlen = 3 - _length % 3;\n      for (var i = 0; i < padlen; i += 1) {\n        _base64 += '=';\n      }\n    }\n  };\n\n  _this.toString = function () {\n    return _base64;\n  };\n\n  return _this;\n};\n\n//---------------------------------------------------------------------\n// base64DecodeInputStream\n//---------------------------------------------------------------------\n\nvar base64DecodeInputStream = function base64DecodeInputStream(str) {\n\n  var _str = str;\n  var _pos = 0;\n  var _buffer = 0;\n  var _buflen = 0;\n\n  var _this = {};\n\n  _this.read = function () {\n\n    while (_buflen < 8) {\n\n      if (_pos >= _str.length) {\n        if (_buflen == 0) {\n          return -1;\n        }\n        throw new Error('unexpected end of file./' + _buflen);\n      }\n\n      var c = _str.charAt(_pos);\n      _pos += 1;\n\n      if (c == '=') {\n        _buflen = 0;\n        return -1;\n      } else if (c.match(/^\\s$/)) {\n        // ignore if whitespace.\n        continue;\n      }\n\n      _buffer = _buffer << 6 | decode(c.charCodeAt(0));\n      _buflen += 6;\n    }\n\n    var n = _buffer >>> _buflen - 8 & 0xff;\n    _buflen -= 8;\n    return n;\n  };\n\n  var decode = function decode(c) {\n    if (0x41 <= c && c <= 0x5a) {\n      return c - 0x41;\n    } else if (0x61 <= c && c <= 0x7a) {\n      return c - 0x61 + 26;\n    } else if (0x30 <= c && c <= 0x39) {\n      return c - 0x30 + 52;\n    } else if (c == 0x2b) {\n      return 62;\n    } else if (c == 0x2f) {\n      return 63;\n    } else {\n      throw new Error('c:' + c);\n    }\n  };\n\n  return _this;\n};\n\n//---------------------------------------------------------------------\n// gifImage (B/W)\n//---------------------------------------------------------------------\n\nvar gifImage = function gifImage(width, height) {\n\n  var _width = width;\n  var _height = height;\n  var _data = new Array(width * height);\n\n  var _this = {};\n\n  _this.setPixel = function (x, y, pixel) {\n    _data[y * _width + x] = pixel;\n  };\n\n  _this.write = function (out) {\n\n    //---------------------------------\n    // GIF Signature\n\n    out.writeString('GIF87a');\n\n    //---------------------------------\n    // Screen Descriptor\n\n    out.writeShort(_width);\n    out.writeShort(_height);\n\n    out.writeByte(0x80); // 2bit\n    out.writeByte(0);\n    out.writeByte(0);\n\n    //---------------------------------\n    // Global Color Map\n\n    // black\n    out.writeByte(0x00);\n    out.writeByte(0x00);\n    out.writeByte(0x00);\n\n    // white\n    out.writeByte(0xff);\n    out.writeByte(0xff);\n    out.writeByte(0xff);\n\n    //---------------------------------\n    // Image Descriptor\n\n    out.writeString(',');\n    out.writeShort(0);\n    out.writeShort(0);\n    out.writeShort(_width);\n    out.writeShort(_height);\n    out.writeByte(0);\n\n    //---------------------------------\n    // Local Color Map\n\n    //---------------------------------\n    // Raster Data\n\n    var lzwMinCodeSize = 2;\n    var raster = getLZWRaster(lzwMinCodeSize);\n\n    out.writeByte(lzwMinCodeSize);\n\n    var offset = 0;\n\n    while (raster.length - offset > 255) {\n      out.writeByte(255);\n      out.writeBytes(raster, offset, 255);\n      offset += 255;\n    }\n\n    out.writeByte(raster.length - offset);\n    out.writeBytes(raster, offset, raster.length - offset);\n    out.writeByte(0x00);\n\n    //---------------------------------\n    // GIF Terminator\n    out.writeString(';');\n  };\n\n  var bitOutputStream = function bitOutputStream(out) {\n\n    var _out = out;\n    var _bitLength = 0;\n    var _bitBuffer = 0;\n\n    var _this = {};\n\n    _this.write = function (data, length) {\n\n      if (data >>> length != 0) {\n        throw new Error('length over');\n      }\n\n      while (_bitLength + length >= 8) {\n        _out.writeByte(0xff & (data << _bitLength | _bitBuffer));\n        length -= 8 - _bitLength;\n        data >>>= 8 - _bitLength;\n        _bitBuffer = 0;\n        _bitLength = 0;\n      }\n\n      _bitBuffer = data << _bitLength | _bitBuffer;\n      _bitLength = _bitLength + length;\n    };\n\n    _this.flush = function () {\n      if (_bitLength > 0) {\n        _out.writeByte(_bitBuffer);\n      }\n    };\n\n    return _this;\n  };\n\n  var getLZWRaster = function getLZWRaster(lzwMinCodeSize) {\n\n    var clearCode = 1 << lzwMinCodeSize;\n    var endCode = (1 << lzwMinCodeSize) + 1;\n    var bitLength = lzwMinCodeSize + 1;\n\n    // Setup LZWTable\n    var table = lzwTable();\n\n    for (var i = 0; i < clearCode; i += 1) {\n      table.add(String.fromCharCode(i));\n    }\n    table.add(String.fromCharCode(clearCode));\n    table.add(String.fromCharCode(endCode));\n\n    var byteOut = byteArrayOutputStream();\n    var bitOut = bitOutputStream(byteOut);\n\n    // clear code\n    bitOut.write(clearCode, bitLength);\n\n    var dataIndex = 0;\n\n    var s = String.fromCharCode(_data[dataIndex]);\n    dataIndex += 1;\n\n    while (dataIndex < _data.length) {\n\n      var c = String.fromCharCode(_data[dataIndex]);\n      dataIndex += 1;\n\n      if (table.contains(s + c)) {\n\n        s = s + c;\n\n      } else {\n\n        bitOut.write(table.indexOf(s), bitLength);\n\n        if (table.size() < 0xfff) {\n\n          if (table.size() == 1 << bitLength) {\n            bitLength += 1;\n          }\n\n          table.add(s + c);\n        }\n\n        s = c;\n      }\n    }\n\n    bitOut.write(table.indexOf(s), bitLength);\n\n    // end code\n    bitOut.write(endCode, bitLength);\n\n    bitOut.flush();\n\n    return byteOut.toByteArray();\n  };\n\n  var lzwTable = function lzwTable() {\n\n    var _map = {};\n    var _size = 0;\n\n    var _this = {};\n\n    _this.add = function (key) {\n      if (_this.contains(key)) {\n        throw new Error('dup key:' + key);\n      }\n      _map[key] = _size;\n      _size += 1;\n    };\n\n    _this.size = function () {\n      return _size;\n    };\n\n    _this.indexOf = function (key) {\n      return _map[key];\n    };\n\n    _this.contains = function (key) {\n      return typeof _map[key] != 'undefined';\n    };\n\n    return _this;\n  };\n\n  return _this;\n};\n\nvar createImgTag = function createImgTag(width, height, getPixel, alt) {\n\n  var gif = gifImage(width, height);\n  for (var y = 0; y < height; y += 1) {\n    for (var x = 0; x < width; x += 1) {\n      gif.setPixel(x, y, getPixel(x, y));\n    }\n  }\n\n  var b = byteArrayOutputStream();\n  gif.write(b);\n\n  var base64 = base64EncodeOutputStream();\n  var bytes = b.toByteArray();\n  for (var i = 0; i < bytes.length; i += 1) {\n    base64.writeByte(bytes[i]);\n  }\n  base64.flush();\n\n  var img = '';\n  img += 'data:image/gif;base64,';\n  img += base64;\n\n  return img;\n};\n\n//---------------------------------------------------------------------\n// returns qrcode function.\n\nvar createQrCodeImg = function createQrCodeImg(text, options) {\n  options = options || {};\n  var typeNumber = options.typeNumber || 4;\n  var errorCorrectLevel = options.errorCorrectLevel || 'M';\n  var size = options.size || 500;\n\n  var qr;\n\n  try {\n    qr = qrcode(typeNumber, errorCorrectLevel || 'M');\n    qr.addData(text);\n    qr.make();\n  } catch (e) {\n    if (typeNumber >= 40) {\n      throw new Error('Text too long to encode');\n    } else {\n      return gen(text, {\n        size: size,\n        errorCorrectLevel: errorCorrectLevel,\n        typeNumber: typeNumber + 1 });\n\n    }\n  }\n\n  // calc cellsize and margin\n  var cellsize = parseInt(size / qr.getModuleCount());\n  var margin = parseInt((size - qr.getModuleCount() * cellsize) / 2);\n\n  return qr.createImgTag(cellsize, margin, size);\n};\n// var module = {}; 需要注释这一行，否则微信小程序无法使用\nmodule.exports = {\n  createQrCodeImg: createQrCodeImg };//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///287\n");

/***/ }),

/***/ 29:
/*!********************************************************!*\
  !*** ./node_modules/node-libs-browser/mock/process.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("exports.nextTick = function nextTick(fn) {\n\tsetTimeout(fn, 0);\n};\n\nexports.platform = exports.arch = \nexports.execPath = exports.title = 'browser';\nexports.pid = 1;\nexports.browser = true;\nexports.env = {};\nexports.argv = [];\n\nexports.binding = function (name) {\n\tthrow new Error('No such module. (Possibly not yet loaded)')\n};\n\n(function () {\n    var cwd = '/';\n    var path;\n    exports.cwd = function () { return cwd };\n    exports.chdir = function (dir) {\n        if (!path) path = __webpack_require__(/*! path */ 30);\n        cwd = path.resolve(dir, cwd);\n    };\n})();\n\nexports.exit = exports.kill = \nexports.umask = exports.dlopen = \nexports.uptime = exports.memoryUsage = \nexports.uvCounters = function() {};\nexports.features = {};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLCtCQUErQjtBQUMvQjtBQUNBLDBCQUEwQixtQkFBTyxDQUFDLGNBQU07QUFDeEM7QUFDQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiIyOS5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydHMubmV4dFRpY2sgPSBmdW5jdGlvbiBuZXh0VGljayhmbikge1xuXHRzZXRUaW1lb3V0KGZuLCAwKTtcbn07XG5cbmV4cG9ydHMucGxhdGZvcm0gPSBleHBvcnRzLmFyY2ggPSBcbmV4cG9ydHMuZXhlY1BhdGggPSBleHBvcnRzLnRpdGxlID0gJ2Jyb3dzZXInO1xuZXhwb3J0cy5waWQgPSAxO1xuZXhwb3J0cy5icm93c2VyID0gdHJ1ZTtcbmV4cG9ydHMuZW52ID0ge307XG5leHBvcnRzLmFyZ3YgPSBbXTtcblxuZXhwb3J0cy5iaW5kaW5nID0gZnVuY3Rpb24gKG5hbWUpIHtcblx0dGhyb3cgbmV3IEVycm9yKCdObyBzdWNoIG1vZHVsZS4gKFBvc3NpYmx5IG5vdCB5ZXQgbG9hZGVkKScpXG59O1xuXG4oZnVuY3Rpb24gKCkge1xuICAgIHZhciBjd2QgPSAnLyc7XG4gICAgdmFyIHBhdGg7XG4gICAgZXhwb3J0cy5jd2QgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBjd2QgfTtcbiAgICBleHBvcnRzLmNoZGlyID0gZnVuY3Rpb24gKGRpcikge1xuICAgICAgICBpZiAoIXBhdGgpIHBhdGggPSByZXF1aXJlKCdwYXRoJyk7XG4gICAgICAgIGN3ZCA9IHBhdGgucmVzb2x2ZShkaXIsIGN3ZCk7XG4gICAgfTtcbn0pKCk7XG5cbmV4cG9ydHMuZXhpdCA9IGV4cG9ydHMua2lsbCA9IFxuZXhwb3J0cy51bWFzayA9IGV4cG9ydHMuZGxvcGVuID0gXG5leHBvcnRzLnVwdGltZSA9IGV4cG9ydHMubWVtb3J5VXNhZ2UgPSBcbmV4cG9ydHMudXZDb3VudGVycyA9IGZ1bmN0aW9uKCkge307XG5leHBvcnRzLmZlYXR1cmVzID0ge307XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///29\n");

/***/ }),

/***/ 3:
/*!******************************************************************************************!*\
  !*** ./node_modules/@dcloudio/vue-cli-plugin-uni/packages/mp-vue/dist/mp.runtime.esm.js ***!
  \******************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(global) {/*!\n * Vue.js v2.6.10\n * (c) 2014-2019 Evan You\n * Released under the MIT License.\n */\n/*  */\n\nvar emptyObject = Object.freeze({});\n\n// These helpers produce better VM code in JS engines due to their\n// explicitness and function inlining.\nfunction isUndef (v) {\n  return v === undefined || v === null\n}\n\nfunction isDef (v) {\n  return v !== undefined && v !== null\n}\n\nfunction isTrue (v) {\n  return v === true\n}\n\nfunction isFalse (v) {\n  return v === false\n}\n\n/**\n * Check if value is primitive.\n */\nfunction isPrimitive (value) {\n  return (\n    typeof value === 'string' ||\n    typeof value === 'number' ||\n    // $flow-disable-line\n    typeof value === 'symbol' ||\n    typeof value === 'boolean'\n  )\n}\n\n/**\n * Quick object check - this is primarily used to tell\n * Objects from primitive values when we know the value\n * is a JSON-compliant type.\n */\nfunction isObject (obj) {\n  return obj !== null && typeof obj === 'object'\n}\n\n/**\n * Get the raw type string of a value, e.g., [object Object].\n */\nvar _toString = Object.prototype.toString;\n\nfunction toRawType (value) {\n  return _toString.call(value).slice(8, -1)\n}\n\n/**\n * Strict object type check. Only returns true\n * for plain JavaScript objects.\n */\nfunction isPlainObject (obj) {\n  return _toString.call(obj) === '[object Object]'\n}\n\nfunction isRegExp (v) {\n  return _toString.call(v) === '[object RegExp]'\n}\n\n/**\n * Check if val is a valid array index.\n */\nfunction isValidArrayIndex (val) {\n  var n = parseFloat(String(val));\n  return n >= 0 && Math.floor(n) === n && isFinite(val)\n}\n\nfunction isPromise (val) {\n  return (\n    isDef(val) &&\n    typeof val.then === 'function' &&\n    typeof val.catch === 'function'\n  )\n}\n\n/**\n * Convert a value to a string that is actually rendered.\n */\nfunction toString (val) {\n  return val == null\n    ? ''\n    : Array.isArray(val) || (isPlainObject(val) && val.toString === _toString)\n      ? JSON.stringify(val, null, 2)\n      : String(val)\n}\n\n/**\n * Convert an input value to a number for persistence.\n * If the conversion fails, return original string.\n */\nfunction toNumber (val) {\n  var n = parseFloat(val);\n  return isNaN(n) ? val : n\n}\n\n/**\n * Make a map and return a function for checking if a key\n * is in that map.\n */\nfunction makeMap (\n  str,\n  expectsLowerCase\n) {\n  var map = Object.create(null);\n  var list = str.split(',');\n  for (var i = 0; i < list.length; i++) {\n    map[list[i]] = true;\n  }\n  return expectsLowerCase\n    ? function (val) { return map[val.toLowerCase()]; }\n    : function (val) { return map[val]; }\n}\n\n/**\n * Check if a tag is a built-in tag.\n */\nvar isBuiltInTag = makeMap('slot,component', true);\n\n/**\n * Check if an attribute is a reserved attribute.\n */\nvar isReservedAttribute = makeMap('key,ref,slot,slot-scope,is');\n\n/**\n * Remove an item from an array.\n */\nfunction remove (arr, item) {\n  if (arr.length) {\n    var index = arr.indexOf(item);\n    if (index > -1) {\n      return arr.splice(index, 1)\n    }\n  }\n}\n\n/**\n * Check whether an object has the property.\n */\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nfunction hasOwn (obj, key) {\n  return hasOwnProperty.call(obj, key)\n}\n\n/**\n * Create a cached version of a pure function.\n */\nfunction cached (fn) {\n  var cache = Object.create(null);\n  return (function cachedFn (str) {\n    var hit = cache[str];\n    return hit || (cache[str] = fn(str))\n  })\n}\n\n/**\n * Camelize a hyphen-delimited string.\n */\nvar camelizeRE = /-(\\w)/g;\nvar camelize = cached(function (str) {\n  return str.replace(camelizeRE, function (_, c) { return c ? c.toUpperCase() : ''; })\n});\n\n/**\n * Capitalize a string.\n */\nvar capitalize = cached(function (str) {\n  return str.charAt(0).toUpperCase() + str.slice(1)\n});\n\n/**\n * Hyphenate a camelCase string.\n */\nvar hyphenateRE = /\\B([A-Z])/g;\nvar hyphenate = cached(function (str) {\n  return str.replace(hyphenateRE, '-$1').toLowerCase()\n});\n\n/**\n * Simple bind polyfill for environments that do not support it,\n * e.g., PhantomJS 1.x. Technically, we don't need this anymore\n * since native bind is now performant enough in most browsers.\n * But removing it would mean breaking code that was able to run in\n * PhantomJS 1.x, so this must be kept for backward compatibility.\n */\n\n/* istanbul ignore next */\nfunction polyfillBind (fn, ctx) {\n  function boundFn (a) {\n    var l = arguments.length;\n    return l\n      ? l > 1\n        ? fn.apply(ctx, arguments)\n        : fn.call(ctx, a)\n      : fn.call(ctx)\n  }\n\n  boundFn._length = fn.length;\n  return boundFn\n}\n\nfunction nativeBind (fn, ctx) {\n  return fn.bind(ctx)\n}\n\nvar bind = Function.prototype.bind\n  ? nativeBind\n  : polyfillBind;\n\n/**\n * Convert an Array-like object to a real Array.\n */\nfunction toArray (list, start) {\n  start = start || 0;\n  var i = list.length - start;\n  var ret = new Array(i);\n  while (i--) {\n    ret[i] = list[i + start];\n  }\n  return ret\n}\n\n/**\n * Mix properties into target object.\n */\nfunction extend (to, _from) {\n  for (var key in _from) {\n    to[key] = _from[key];\n  }\n  return to\n}\n\n/**\n * Merge an Array of Objects into a single Object.\n */\nfunction toObject (arr) {\n  var res = {};\n  for (var i = 0; i < arr.length; i++) {\n    if (arr[i]) {\n      extend(res, arr[i]);\n    }\n  }\n  return res\n}\n\n/* eslint-disable no-unused-vars */\n\n/**\n * Perform no operation.\n * Stubbing args to make Flow happy without leaving useless transpiled code\n * with ...rest (https://flow.org/blog/2017/05/07/Strict-Function-Call-Arity/).\n */\nfunction noop (a, b, c) {}\n\n/**\n * Always return false.\n */\nvar no = function (a, b, c) { return false; };\n\n/* eslint-enable no-unused-vars */\n\n/**\n * Return the same value.\n */\nvar identity = function (_) { return _; };\n\n/**\n * Check if two values are loosely equal - that is,\n * if they are plain objects, do they have the same shape?\n */\nfunction looseEqual (a, b) {\n  if (a === b) { return true }\n  var isObjectA = isObject(a);\n  var isObjectB = isObject(b);\n  if (isObjectA && isObjectB) {\n    try {\n      var isArrayA = Array.isArray(a);\n      var isArrayB = Array.isArray(b);\n      if (isArrayA && isArrayB) {\n        return a.length === b.length && a.every(function (e, i) {\n          return looseEqual(e, b[i])\n        })\n      } else if (a instanceof Date && b instanceof Date) {\n        return a.getTime() === b.getTime()\n      } else if (!isArrayA && !isArrayB) {\n        var keysA = Object.keys(a);\n        var keysB = Object.keys(b);\n        return keysA.length === keysB.length && keysA.every(function (key) {\n          return looseEqual(a[key], b[key])\n        })\n      } else {\n        /* istanbul ignore next */\n        return false\n      }\n    } catch (e) {\n      /* istanbul ignore next */\n      return false\n    }\n  } else if (!isObjectA && !isObjectB) {\n    return String(a) === String(b)\n  } else {\n    return false\n  }\n}\n\n/**\n * Return the first index at which a loosely equal value can be\n * found in the array (if value is a plain object, the array must\n * contain an object of the same shape), or -1 if it is not present.\n */\nfunction looseIndexOf (arr, val) {\n  for (var i = 0; i < arr.length; i++) {\n    if (looseEqual(arr[i], val)) { return i }\n  }\n  return -1\n}\n\n/**\n * Ensure a function is called only once.\n */\nfunction once (fn) {\n  var called = false;\n  return function () {\n    if (!called) {\n      called = true;\n      fn.apply(this, arguments);\n    }\n  }\n}\n\nvar ASSET_TYPES = [\n  'component',\n  'directive',\n  'filter'\n];\n\nvar LIFECYCLE_HOOKS = [\n  'beforeCreate',\n  'created',\n  'beforeMount',\n  'mounted',\n  'beforeUpdate',\n  'updated',\n  'beforeDestroy',\n  'destroyed',\n  'activated',\n  'deactivated',\n  'errorCaptured',\n  'serverPrefetch'\n];\n\n/*  */\n\n\n\nvar config = ({\n  /**\n   * Option merge strategies (used in core/util/options)\n   */\n  // $flow-disable-line\n  optionMergeStrategies: Object.create(null),\n\n  /**\n   * Whether to suppress warnings.\n   */\n  silent: false,\n\n  /**\n   * Show production mode tip message on boot?\n   */\n  productionTip: \"development\" !== 'production',\n\n  /**\n   * Whether to enable devtools\n   */\n  devtools: \"development\" !== 'production',\n\n  /**\n   * Whether to record perf\n   */\n  performance: false,\n\n  /**\n   * Error handler for watcher errors\n   */\n  errorHandler: null,\n\n  /**\n   * Warn handler for watcher warns\n   */\n  warnHandler: null,\n\n  /**\n   * Ignore certain custom elements\n   */\n  ignoredElements: [],\n\n  /**\n   * Custom user key aliases for v-on\n   */\n  // $flow-disable-line\n  keyCodes: Object.create(null),\n\n  /**\n   * Check if a tag is reserved so that it cannot be registered as a\n   * component. This is platform-dependent and may be overwritten.\n   */\n  isReservedTag: no,\n\n  /**\n   * Check if an attribute is reserved so that it cannot be used as a component\n   * prop. This is platform-dependent and may be overwritten.\n   */\n  isReservedAttr: no,\n\n  /**\n   * Check if a tag is an unknown element.\n   * Platform-dependent.\n   */\n  isUnknownElement: no,\n\n  /**\n   * Get the namespace of an element\n   */\n  getTagNamespace: noop,\n\n  /**\n   * Parse the real tag name for the specific platform.\n   */\n  parsePlatformTagName: identity,\n\n  /**\n   * Check if an attribute must be bound using property, e.g. value\n   * Platform-dependent.\n   */\n  mustUseProp: no,\n\n  /**\n   * Perform updates asynchronously. Intended to be used by Vue Test Utils\n   * This will significantly reduce performance if set to false.\n   */\n  async: true,\n\n  /**\n   * Exposed for legacy reasons\n   */\n  _lifecycleHooks: LIFECYCLE_HOOKS\n});\n\n/*  */\n\n/**\n * unicode letters used for parsing html tags, component names and property paths.\n * using https://www.w3.org/TR/html53/semantics-scripting.html#potentialcustomelementname\n * skipping \\u10000-\\uEFFFF due to it freezing up PhantomJS\n */\nvar unicodeRegExp = /a-zA-Z\\u00B7\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u203F-\\u2040\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD/;\n\n/**\n * Check if a string starts with $ or _\n */\nfunction isReserved (str) {\n  var c = (str + '').charCodeAt(0);\n  return c === 0x24 || c === 0x5F\n}\n\n/**\n * Define a property.\n */\nfunction def (obj, key, val, enumerable) {\n  Object.defineProperty(obj, key, {\n    value: val,\n    enumerable: !!enumerable,\n    writable: true,\n    configurable: true\n  });\n}\n\n/**\n * Parse simple path.\n */\nvar bailRE = new RegExp((\"[^\" + (unicodeRegExp.source) + \".$_\\\\d]\"));\nfunction parsePath (path) {\n  if (bailRE.test(path)) {\n    return\n  }\n  var segments = path.split('.');\n  return function (obj) {\n    for (var i = 0; i < segments.length; i++) {\n      if (!obj) { return }\n      obj = obj[segments[i]];\n    }\n    return obj\n  }\n}\n\n/*  */\n\n// can we use __proto__?\nvar hasProto = '__proto__' in {};\n\n// Browser environment sniffing\nvar inBrowser = typeof window !== 'undefined';\nvar inWeex = typeof WXEnvironment !== 'undefined' && !!WXEnvironment.platform;\nvar weexPlatform = inWeex && WXEnvironment.platform.toLowerCase();\nvar UA = inBrowser && window.navigator.userAgent.toLowerCase();\nvar isIE = UA && /msie|trident/.test(UA);\nvar isIE9 = UA && UA.indexOf('msie 9.0') > 0;\nvar isEdge = UA && UA.indexOf('edge/') > 0;\nvar isAndroid = (UA && UA.indexOf('android') > 0) || (weexPlatform === 'android');\nvar isIOS = (UA && /iphone|ipad|ipod|ios/.test(UA)) || (weexPlatform === 'ios');\nvar isChrome = UA && /chrome\\/\\d+/.test(UA) && !isEdge;\nvar isPhantomJS = UA && /phantomjs/.test(UA);\nvar isFF = UA && UA.match(/firefox\\/(\\d+)/);\n\n// Firefox has a \"watch\" function on Object.prototype...\nvar nativeWatch = ({}).watch;\nif (inBrowser) {\n  try {\n    var opts = {};\n    Object.defineProperty(opts, 'passive', ({\n      get: function get () {\n      }\n    })); // https://github.com/facebook/flow/issues/285\n    window.addEventListener('test-passive', null, opts);\n  } catch (e) {}\n}\n\n// this needs to be lazy-evaled because vue may be required before\n// vue-server-renderer can set VUE_ENV\nvar _isServer;\nvar isServerRendering = function () {\n  if (_isServer === undefined) {\n    /* istanbul ignore if */\n    if (!inBrowser && !inWeex && typeof global !== 'undefined') {\n      // detect presence of vue-server-renderer and avoid\n      // Webpack shimming the process\n      _isServer = global['process'] && global['process'].env.VUE_ENV === 'server';\n    } else {\n      _isServer = false;\n    }\n  }\n  return _isServer\n};\n\n// detect devtools\nvar devtools = inBrowser && window.__VUE_DEVTOOLS_GLOBAL_HOOK__;\n\n/* istanbul ignore next */\nfunction isNative (Ctor) {\n  return typeof Ctor === 'function' && /native code/.test(Ctor.toString())\n}\n\nvar hasSymbol =\n  typeof Symbol !== 'undefined' && isNative(Symbol) &&\n  typeof Reflect !== 'undefined' && isNative(Reflect.ownKeys);\n\nvar _Set;\n/* istanbul ignore if */ // $flow-disable-line\nif (typeof Set !== 'undefined' && isNative(Set)) {\n  // use native Set when available.\n  _Set = Set;\n} else {\n  // a non-standard Set polyfill that only works with primitive keys.\n  _Set = /*@__PURE__*/(function () {\n    function Set () {\n      this.set = Object.create(null);\n    }\n    Set.prototype.has = function has (key) {\n      return this.set[key] === true\n    };\n    Set.prototype.add = function add (key) {\n      this.set[key] = true;\n    };\n    Set.prototype.clear = function clear () {\n      this.set = Object.create(null);\n    };\n\n    return Set;\n  }());\n}\n\n/*  */\n\nvar warn = noop;\nvar tip = noop;\nvar generateComponentTrace = (noop); // work around flow check\nvar formatComponentName = (noop);\n\nif (true) {\n  var hasConsole = typeof console !== 'undefined';\n  var classifyRE = /(?:^|[-_])(\\w)/g;\n  var classify = function (str) { return str\n    .replace(classifyRE, function (c) { return c.toUpperCase(); })\n    .replace(/[-_]/g, ''); };\n\n  warn = function (msg, vm) {\n    var trace = vm ? generateComponentTrace(vm) : '';\n\n    if (config.warnHandler) {\n      config.warnHandler.call(null, msg, vm, trace);\n    } else if (hasConsole && (!config.silent)) {\n      console.error((\"[Vue warn]: \" + msg + trace));\n    }\n  };\n\n  tip = function (msg, vm) {\n    if (hasConsole && (!config.silent)) {\n      console.warn(\"[Vue tip]: \" + msg + (\n        vm ? generateComponentTrace(vm) : ''\n      ));\n    }\n  };\n\n  formatComponentName = function (vm, includeFile) {\n    {\n      if(vm.$scope && vm.$scope.is){\n        return vm.$scope.is\n      }\n    }\n    if (vm.$root === vm) {\n      return '<Root>'\n    }\n    var options = typeof vm === 'function' && vm.cid != null\n      ? vm.options\n      : vm._isVue\n        ? vm.$options || vm.constructor.options\n        : vm;\n    var name = options.name || options._componentTag;\n    var file = options.__file;\n    if (!name && file) {\n      var match = file.match(/([^/\\\\]+)\\.vue$/);\n      name = match && match[1];\n    }\n\n    return (\n      (name ? (\"<\" + (classify(name)) + \">\") : \"<Anonymous>\") +\n      (file && includeFile !== false ? (\" at \" + file) : '')\n    )\n  };\n\n  var repeat = function (str, n) {\n    var res = '';\n    while (n) {\n      if (n % 2 === 1) { res += str; }\n      if (n > 1) { str += str; }\n      n >>= 1;\n    }\n    return res\n  };\n\n  generateComponentTrace = function (vm) {\n    if (vm._isVue && vm.$parent) {\n      var tree = [];\n      var currentRecursiveSequence = 0;\n      while (vm) {\n        if (tree.length > 0) {\n          var last = tree[tree.length - 1];\n          if (last.constructor === vm.constructor) {\n            currentRecursiveSequence++;\n            vm = vm.$parent;\n            continue\n          } else if (currentRecursiveSequence > 0) {\n            tree[tree.length - 1] = [last, currentRecursiveSequence];\n            currentRecursiveSequence = 0;\n          }\n        }\n        tree.push(vm);\n        vm = vm.$parent;\n      }\n      return '\\n\\nfound in\\n\\n' + tree\n        .map(function (vm, i) { return (\"\" + (i === 0 ? '---> ' : repeat(' ', 5 + i * 2)) + (Array.isArray(vm)\n            ? ((formatComponentName(vm[0])) + \"... (\" + (vm[1]) + \" recursive calls)\")\n            : formatComponentName(vm))); })\n        .join('\\n')\n    } else {\n      return (\"\\n\\n(found in \" + (formatComponentName(vm)) + \")\")\n    }\n  };\n}\n\n/*  */\n\nvar uid = 0;\n\n/**\n * A dep is an observable that can have multiple\n * directives subscribing to it.\n */\nvar Dep = function Dep () {\n  this.id = uid++;\n  this.subs = [];\n};\n\nDep.prototype.addSub = function addSub (sub) {\n  this.subs.push(sub);\n};\n\nDep.prototype.removeSub = function removeSub (sub) {\n  remove(this.subs, sub);\n};\n\nDep.prototype.depend = function depend () {\n  if (Dep.SharedObject.target) {\n    Dep.SharedObject.target.addDep(this);\n  }\n};\n\nDep.prototype.notify = function notify () {\n  // stabilize the subscriber list first\n  var subs = this.subs.slice();\n  if ( true && !config.async) {\n    // subs aren't sorted in scheduler if not running async\n    // we need to sort them now to make sure they fire in correct\n    // order\n    subs.sort(function (a, b) { return a.id - b.id; });\n  }\n  for (var i = 0, l = subs.length; i < l; i++) {\n    subs[i].update();\n  }\n};\n\n// The current target watcher being evaluated.\n// This is globally unique because only one watcher\n// can be evaluated at a time.\n// fixed by xxxxxx (nvue shared vuex)\n/* eslint-disable no-undef */\nDep.SharedObject = typeof SharedObject !== 'undefined' ? SharedObject : {};\nDep.SharedObject.target = null;\nDep.SharedObject.targetStack = [];\n\nfunction pushTarget (target) {\n  Dep.SharedObject.targetStack.push(target);\n  Dep.SharedObject.target = target;\n}\n\nfunction popTarget () {\n  Dep.SharedObject.targetStack.pop();\n  Dep.SharedObject.target = Dep.SharedObject.targetStack[Dep.SharedObject.targetStack.length - 1];\n}\n\n/*  */\n\nvar VNode = function VNode (\n  tag,\n  data,\n  children,\n  text,\n  elm,\n  context,\n  componentOptions,\n  asyncFactory\n) {\n  this.tag = tag;\n  this.data = data;\n  this.children = children;\n  this.text = text;\n  this.elm = elm;\n  this.ns = undefined;\n  this.context = context;\n  this.fnContext = undefined;\n  this.fnOptions = undefined;\n  this.fnScopeId = undefined;\n  this.key = data && data.key;\n  this.componentOptions = componentOptions;\n  this.componentInstance = undefined;\n  this.parent = undefined;\n  this.raw = false;\n  this.isStatic = false;\n  this.isRootInsert = true;\n  this.isComment = false;\n  this.isCloned = false;\n  this.isOnce = false;\n  this.asyncFactory = asyncFactory;\n  this.asyncMeta = undefined;\n  this.isAsyncPlaceholder = false;\n};\n\nvar prototypeAccessors = { child: { configurable: true } };\n\n// DEPRECATED: alias for componentInstance for backwards compat.\n/* istanbul ignore next */\nprototypeAccessors.child.get = function () {\n  return this.componentInstance\n};\n\nObject.defineProperties( VNode.prototype, prototypeAccessors );\n\nvar createEmptyVNode = function (text) {\n  if ( text === void 0 ) text = '';\n\n  var node = new VNode();\n  node.text = text;\n  node.isComment = true;\n  return node\n};\n\nfunction createTextVNode (val) {\n  return new VNode(undefined, undefined, undefined, String(val))\n}\n\n// optimized shallow clone\n// used for static nodes and slot nodes because they may be reused across\n// multiple renders, cloning them avoids errors when DOM manipulations rely\n// on their elm reference.\nfunction cloneVNode (vnode) {\n  var cloned = new VNode(\n    vnode.tag,\n    vnode.data,\n    // #7975\n    // clone children array to avoid mutating original in case of cloning\n    // a child.\n    vnode.children && vnode.children.slice(),\n    vnode.text,\n    vnode.elm,\n    vnode.context,\n    vnode.componentOptions,\n    vnode.asyncFactory\n  );\n  cloned.ns = vnode.ns;\n  cloned.isStatic = vnode.isStatic;\n  cloned.key = vnode.key;\n  cloned.isComment = vnode.isComment;\n  cloned.fnContext = vnode.fnContext;\n  cloned.fnOptions = vnode.fnOptions;\n  cloned.fnScopeId = vnode.fnScopeId;\n  cloned.asyncMeta = vnode.asyncMeta;\n  cloned.isCloned = true;\n  return cloned\n}\n\n/*\n * not type checking this file because flow doesn't play well with\n * dynamically accessing methods on Array prototype\n */\n\nvar arrayProto = Array.prototype;\nvar arrayMethods = Object.create(arrayProto);\n\nvar methodsToPatch = [\n  'push',\n  'pop',\n  'shift',\n  'unshift',\n  'splice',\n  'sort',\n  'reverse'\n];\n\n/**\n * Intercept mutating methods and emit events\n */\nmethodsToPatch.forEach(function (method) {\n  // cache original method\n  var original = arrayProto[method];\n  def(arrayMethods, method, function mutator () {\n    var args = [], len = arguments.length;\n    while ( len-- ) args[ len ] = arguments[ len ];\n\n    var result = original.apply(this, args);\n    var ob = this.__ob__;\n    var inserted;\n    switch (method) {\n      case 'push':\n      case 'unshift':\n        inserted = args;\n        break\n      case 'splice':\n        inserted = args.slice(2);\n        break\n    }\n    if (inserted) { ob.observeArray(inserted); }\n    // notify change\n    ob.dep.notify();\n    return result\n  });\n});\n\n/*  */\n\nvar arrayKeys = Object.getOwnPropertyNames(arrayMethods);\n\n/**\n * In some cases we may want to disable observation inside a component's\n * update computation.\n */\nvar shouldObserve = true;\n\nfunction toggleObserving (value) {\n  shouldObserve = value;\n}\n\n/**\n * Observer class that is attached to each observed\n * object. Once attached, the observer converts the target\n * object's property keys into getter/setters that\n * collect dependencies and dispatch updates.\n */\nvar Observer = function Observer (value) {\n  this.value = value;\n  this.dep = new Dep();\n  this.vmCount = 0;\n  def(value, '__ob__', this);\n  if (Array.isArray(value)) {\n    if (hasProto) {\n      {// fixed by xxxxxx 微信小程序使用 plugins 之后，数组方法被直接挂载到了数组对象上，需要执行 copyAugment 逻辑\n        if(value.push !== value.__proto__.push){\n          copyAugment(value, arrayMethods, arrayKeys);\n        } else {\n          protoAugment(value, arrayMethods);\n        }\n      }\n    } else {\n      copyAugment(value, arrayMethods, arrayKeys);\n    }\n    this.observeArray(value);\n  } else {\n    this.walk(value);\n  }\n};\n\n/**\n * Walk through all properties and convert them into\n * getter/setters. This method should only be called when\n * value type is Object.\n */\nObserver.prototype.walk = function walk (obj) {\n  var keys = Object.keys(obj);\n  for (var i = 0; i < keys.length; i++) {\n    defineReactive$$1(obj, keys[i]);\n  }\n};\n\n/**\n * Observe a list of Array items.\n */\nObserver.prototype.observeArray = function observeArray (items) {\n  for (var i = 0, l = items.length; i < l; i++) {\n    observe(items[i]);\n  }\n};\n\n// helpers\n\n/**\n * Augment a target Object or Array by intercepting\n * the prototype chain using __proto__\n */\nfunction protoAugment (target, src) {\n  /* eslint-disable no-proto */\n  target.__proto__ = src;\n  /* eslint-enable no-proto */\n}\n\n/**\n * Augment a target Object or Array by defining\n * hidden properties.\n */\n/* istanbul ignore next */\nfunction copyAugment (target, src, keys) {\n  for (var i = 0, l = keys.length; i < l; i++) {\n    var key = keys[i];\n    def(target, key, src[key]);\n  }\n}\n\n/**\n * Attempt to create an observer instance for a value,\n * returns the new observer if successfully observed,\n * or the existing observer if the value already has one.\n */\nfunction observe (value, asRootData) {\n  if (!isObject(value) || value instanceof VNode) {\n    return\n  }\n  var ob;\n  if (hasOwn(value, '__ob__') && value.__ob__ instanceof Observer) {\n    ob = value.__ob__;\n  } else if (\n    shouldObserve &&\n    !isServerRendering() &&\n    (Array.isArray(value) || isPlainObject(value)) &&\n    Object.isExtensible(value) &&\n    !value._isVue\n  ) {\n    ob = new Observer(value);\n  }\n  if (asRootData && ob) {\n    ob.vmCount++;\n  }\n  return ob\n}\n\n/**\n * Define a reactive property on an Object.\n */\nfunction defineReactive$$1 (\n  obj,\n  key,\n  val,\n  customSetter,\n  shallow\n) {\n  var dep = new Dep();\n\n  var property = Object.getOwnPropertyDescriptor(obj, key);\n  if (property && property.configurable === false) {\n    return\n  }\n\n  // cater for pre-defined getter/setters\n  var getter = property && property.get;\n  var setter = property && property.set;\n  if ((!getter || setter) && arguments.length === 2) {\n    val = obj[key];\n  }\n\n  var childOb = !shallow && observe(val);\n  Object.defineProperty(obj, key, {\n    enumerable: true,\n    configurable: true,\n    get: function reactiveGetter () {\n      var value = getter ? getter.call(obj) : val;\n      if (Dep.SharedObject.target) { // fixed by xxxxxx\n        dep.depend();\n        if (childOb) {\n          childOb.dep.depend();\n          if (Array.isArray(value)) {\n            dependArray(value);\n          }\n        }\n      }\n      return value\n    },\n    set: function reactiveSetter (newVal) {\n      var value = getter ? getter.call(obj) : val;\n      /* eslint-disable no-self-compare */\n      if (newVal === value || (newVal !== newVal && value !== value)) {\n        return\n      }\n      /* eslint-enable no-self-compare */\n      if ( true && customSetter) {\n        customSetter();\n      }\n      // #7981: for accessor properties without setter\n      if (getter && !setter) { return }\n      if (setter) {\n        setter.call(obj, newVal);\n      } else {\n        val = newVal;\n      }\n      childOb = !shallow && observe(newVal);\n      dep.notify();\n    }\n  });\n}\n\n/**\n * Set a property on an object. Adds the new property and\n * triggers change notification if the property doesn't\n * already exist.\n */\nfunction set (target, key, val) {\n  if ( true &&\n    (isUndef(target) || isPrimitive(target))\n  ) {\n    warn((\"Cannot set reactive property on undefined, null, or primitive value: \" + ((target))));\n  }\n  if (Array.isArray(target) && isValidArrayIndex(key)) {\n    target.length = Math.max(target.length, key);\n    target.splice(key, 1, val);\n    return val\n  }\n  if (key in target && !(key in Object.prototype)) {\n    target[key] = val;\n    return val\n  }\n  var ob = (target).__ob__;\n  if (target._isVue || (ob && ob.vmCount)) {\n     true && warn(\n      'Avoid adding reactive properties to a Vue instance or its root $data ' +\n      'at runtime - declare it upfront in the data option.'\n    );\n    return val\n  }\n  if (!ob) {\n    target[key] = val;\n    return val\n  }\n  defineReactive$$1(ob.value, key, val);\n  ob.dep.notify();\n  return val\n}\n\n/**\n * Delete a property and trigger change if necessary.\n */\nfunction del (target, key) {\n  if ( true &&\n    (isUndef(target) || isPrimitive(target))\n  ) {\n    warn((\"Cannot delete reactive property on undefined, null, or primitive value: \" + ((target))));\n  }\n  if (Array.isArray(target) && isValidArrayIndex(key)) {\n    target.splice(key, 1);\n    return\n  }\n  var ob = (target).__ob__;\n  if (target._isVue || (ob && ob.vmCount)) {\n     true && warn(\n      'Avoid deleting properties on a Vue instance or its root $data ' +\n      '- just set it to null.'\n    );\n    return\n  }\n  if (!hasOwn(target, key)) {\n    return\n  }\n  delete target[key];\n  if (!ob) {\n    return\n  }\n  ob.dep.notify();\n}\n\n/**\n * Collect dependencies on array elements when the array is touched, since\n * we cannot intercept array element access like property getters.\n */\nfunction dependArray (value) {\n  for (var e = (void 0), i = 0, l = value.length; i < l; i++) {\n    e = value[i];\n    e && e.__ob__ && e.__ob__.dep.depend();\n    if (Array.isArray(e)) {\n      dependArray(e);\n    }\n  }\n}\n\n/*  */\n\n/**\n * Option overwriting strategies are functions that handle\n * how to merge a parent option value and a child option\n * value into the final value.\n */\nvar strats = config.optionMergeStrategies;\n\n/**\n * Options with restrictions\n */\nif (true) {\n  strats.el = strats.propsData = function (parent, child, vm, key) {\n    if (!vm) {\n      warn(\n        \"option \\\"\" + key + \"\\\" can only be used during instance \" +\n        'creation with the `new` keyword.'\n      );\n    }\n    return defaultStrat(parent, child)\n  };\n}\n\n/**\n * Helper that recursively merges two data objects together.\n */\nfunction mergeData (to, from) {\n  if (!from) { return to }\n  var key, toVal, fromVal;\n\n  var keys = hasSymbol\n    ? Reflect.ownKeys(from)\n    : Object.keys(from);\n\n  for (var i = 0; i < keys.length; i++) {\n    key = keys[i];\n    // in case the object is already observed...\n    if (key === '__ob__') { continue }\n    toVal = to[key];\n    fromVal = from[key];\n    if (!hasOwn(to, key)) {\n      set(to, key, fromVal);\n    } else if (\n      toVal !== fromVal &&\n      isPlainObject(toVal) &&\n      isPlainObject(fromVal)\n    ) {\n      mergeData(toVal, fromVal);\n    }\n  }\n  return to\n}\n\n/**\n * Data\n */\nfunction mergeDataOrFn (\n  parentVal,\n  childVal,\n  vm\n) {\n  if (!vm) {\n    // in a Vue.extend merge, both should be functions\n    if (!childVal) {\n      return parentVal\n    }\n    if (!parentVal) {\n      return childVal\n    }\n    // when parentVal & childVal are both present,\n    // we need to return a function that returns the\n    // merged result of both functions... no need to\n    // check if parentVal is a function here because\n    // it has to be a function to pass previous merges.\n    return function mergedDataFn () {\n      return mergeData(\n        typeof childVal === 'function' ? childVal.call(this, this) : childVal,\n        typeof parentVal === 'function' ? parentVal.call(this, this) : parentVal\n      )\n    }\n  } else {\n    return function mergedInstanceDataFn () {\n      // instance merge\n      var instanceData = typeof childVal === 'function'\n        ? childVal.call(vm, vm)\n        : childVal;\n      var defaultData = typeof parentVal === 'function'\n        ? parentVal.call(vm, vm)\n        : parentVal;\n      if (instanceData) {\n        return mergeData(instanceData, defaultData)\n      } else {\n        return defaultData\n      }\n    }\n  }\n}\n\nstrats.data = function (\n  parentVal,\n  childVal,\n  vm\n) {\n  if (!vm) {\n    if (childVal && typeof childVal !== 'function') {\n       true && warn(\n        'The \"data\" option should be a function ' +\n        'that returns a per-instance value in component ' +\n        'definitions.',\n        vm\n      );\n\n      return parentVal\n    }\n    return mergeDataOrFn(parentVal, childVal)\n  }\n\n  return mergeDataOrFn(parentVal, childVal, vm)\n};\n\n/**\n * Hooks and props are merged as arrays.\n */\nfunction mergeHook (\n  parentVal,\n  childVal\n) {\n  var res = childVal\n    ? parentVal\n      ? parentVal.concat(childVal)\n      : Array.isArray(childVal)\n        ? childVal\n        : [childVal]\n    : parentVal;\n  return res\n    ? dedupeHooks(res)\n    : res\n}\n\nfunction dedupeHooks (hooks) {\n  var res = [];\n  for (var i = 0; i < hooks.length; i++) {\n    if (res.indexOf(hooks[i]) === -1) {\n      res.push(hooks[i]);\n    }\n  }\n  return res\n}\n\nLIFECYCLE_HOOKS.forEach(function (hook) {\n  strats[hook] = mergeHook;\n});\n\n/**\n * Assets\n *\n * When a vm is present (instance creation), we need to do\n * a three-way merge between constructor options, instance\n * options and parent options.\n */\nfunction mergeAssets (\n  parentVal,\n  childVal,\n  vm,\n  key\n) {\n  var res = Object.create(parentVal || null);\n  if (childVal) {\n     true && assertObjectType(key, childVal, vm);\n    return extend(res, childVal)\n  } else {\n    return res\n  }\n}\n\nASSET_TYPES.forEach(function (type) {\n  strats[type + 's'] = mergeAssets;\n});\n\n/**\n * Watchers.\n *\n * Watchers hashes should not overwrite one\n * another, so we merge them as arrays.\n */\nstrats.watch = function (\n  parentVal,\n  childVal,\n  vm,\n  key\n) {\n  // work around Firefox's Object.prototype.watch...\n  if (parentVal === nativeWatch) { parentVal = undefined; }\n  if (childVal === nativeWatch) { childVal = undefined; }\n  /* istanbul ignore if */\n  if (!childVal) { return Object.create(parentVal || null) }\n  if (true) {\n    assertObjectType(key, childVal, vm);\n  }\n  if (!parentVal) { return childVal }\n  var ret = {};\n  extend(ret, parentVal);\n  for (var key$1 in childVal) {\n    var parent = ret[key$1];\n    var child = childVal[key$1];\n    if (parent && !Array.isArray(parent)) {\n      parent = [parent];\n    }\n    ret[key$1] = parent\n      ? parent.concat(child)\n      : Array.isArray(child) ? child : [child];\n  }\n  return ret\n};\n\n/**\n * Other object hashes.\n */\nstrats.props =\nstrats.methods =\nstrats.inject =\nstrats.computed = function (\n  parentVal,\n  childVal,\n  vm,\n  key\n) {\n  if (childVal && \"development\" !== 'production') {\n    assertObjectType(key, childVal, vm);\n  }\n  if (!parentVal) { return childVal }\n  var ret = Object.create(null);\n  extend(ret, parentVal);\n  if (childVal) { extend(ret, childVal); }\n  return ret\n};\nstrats.provide = mergeDataOrFn;\n\n/**\n * Default strategy.\n */\nvar defaultStrat = function (parentVal, childVal) {\n  return childVal === undefined\n    ? parentVal\n    : childVal\n};\n\n/**\n * Validate component names\n */\nfunction checkComponents (options) {\n  for (var key in options.components) {\n    validateComponentName(key);\n  }\n}\n\nfunction validateComponentName (name) {\n  if (!new RegExp((\"^[a-zA-Z][\\\\-\\\\.0-9_\" + (unicodeRegExp.source) + \"]*$\")).test(name)) {\n    warn(\n      'Invalid component name: \"' + name + '\". Component names ' +\n      'should conform to valid custom element name in html5 specification.'\n    );\n  }\n  if (isBuiltInTag(name) || config.isReservedTag(name)) {\n    warn(\n      'Do not use built-in or reserved HTML elements as component ' +\n      'id: ' + name\n    );\n  }\n}\n\n/**\n * Ensure all props option syntax are normalized into the\n * Object-based format.\n */\nfunction normalizeProps (options, vm) {\n  var props = options.props;\n  if (!props) { return }\n  var res = {};\n  var i, val, name;\n  if (Array.isArray(props)) {\n    i = props.length;\n    while (i--) {\n      val = props[i];\n      if (typeof val === 'string') {\n        name = camelize(val);\n        res[name] = { type: null };\n      } else if (true) {\n        warn('props must be strings when using array syntax.');\n      }\n    }\n  } else if (isPlainObject(props)) {\n    for (var key in props) {\n      val = props[key];\n      name = camelize(key);\n      res[name] = isPlainObject(val)\n        ? val\n        : { type: val };\n    }\n  } else if (true) {\n    warn(\n      \"Invalid value for option \\\"props\\\": expected an Array or an Object, \" +\n      \"but got \" + (toRawType(props)) + \".\",\n      vm\n    );\n  }\n  options.props = res;\n}\n\n/**\n * Normalize all injections into Object-based format\n */\nfunction normalizeInject (options, vm) {\n  var inject = options.inject;\n  if (!inject) { return }\n  var normalized = options.inject = {};\n  if (Array.isArray(inject)) {\n    for (var i = 0; i < inject.length; i++) {\n      normalized[inject[i]] = { from: inject[i] };\n    }\n  } else if (isPlainObject(inject)) {\n    for (var key in inject) {\n      var val = inject[key];\n      normalized[key] = isPlainObject(val)\n        ? extend({ from: key }, val)\n        : { from: val };\n    }\n  } else if (true) {\n    warn(\n      \"Invalid value for option \\\"inject\\\": expected an Array or an Object, \" +\n      \"but got \" + (toRawType(inject)) + \".\",\n      vm\n    );\n  }\n}\n\n/**\n * Normalize raw function directives into object format.\n */\nfunction normalizeDirectives (options) {\n  var dirs = options.directives;\n  if (dirs) {\n    for (var key in dirs) {\n      var def$$1 = dirs[key];\n      if (typeof def$$1 === 'function') {\n        dirs[key] = { bind: def$$1, update: def$$1 };\n      }\n    }\n  }\n}\n\nfunction assertObjectType (name, value, vm) {\n  if (!isPlainObject(value)) {\n    warn(\n      \"Invalid value for option \\\"\" + name + \"\\\": expected an Object, \" +\n      \"but got \" + (toRawType(value)) + \".\",\n      vm\n    );\n  }\n}\n\n/**\n * Merge two option objects into a new one.\n * Core utility used in both instantiation and inheritance.\n */\nfunction mergeOptions (\n  parent,\n  child,\n  vm\n) {\n  if (true) {\n    checkComponents(child);\n  }\n\n  if (typeof child === 'function') {\n    child = child.options;\n  }\n\n  normalizeProps(child, vm);\n  normalizeInject(child, vm);\n  normalizeDirectives(child);\n\n  // Apply extends and mixins on the child options,\n  // but only if it is a raw options object that isn't\n  // the result of another mergeOptions call.\n  // Only merged options has the _base property.\n  if (!child._base) {\n    if (child.extends) {\n      parent = mergeOptions(parent, child.extends, vm);\n    }\n    if (child.mixins) {\n      for (var i = 0, l = child.mixins.length; i < l; i++) {\n        parent = mergeOptions(parent, child.mixins[i], vm);\n      }\n    }\n  }\n\n  var options = {};\n  var key;\n  for (key in parent) {\n    mergeField(key);\n  }\n  for (key in child) {\n    if (!hasOwn(parent, key)) {\n      mergeField(key);\n    }\n  }\n  function mergeField (key) {\n    var strat = strats[key] || defaultStrat;\n    options[key] = strat(parent[key], child[key], vm, key);\n  }\n  return options\n}\n\n/**\n * Resolve an asset.\n * This function is used because child instances need access\n * to assets defined in its ancestor chain.\n */\nfunction resolveAsset (\n  options,\n  type,\n  id,\n  warnMissing\n) {\n  /* istanbul ignore if */\n  if (typeof id !== 'string') {\n    return\n  }\n  var assets = options[type];\n  // check local registration variations first\n  if (hasOwn(assets, id)) { return assets[id] }\n  var camelizedId = camelize(id);\n  if (hasOwn(assets, camelizedId)) { return assets[camelizedId] }\n  var PascalCaseId = capitalize(camelizedId);\n  if (hasOwn(assets, PascalCaseId)) { return assets[PascalCaseId] }\n  // fallback to prototype chain\n  var res = assets[id] || assets[camelizedId] || assets[PascalCaseId];\n  if ( true && warnMissing && !res) {\n    warn(\n      'Failed to resolve ' + type.slice(0, -1) + ': ' + id,\n      options\n    );\n  }\n  return res\n}\n\n/*  */\n\n\n\nfunction validateProp (\n  key,\n  propOptions,\n  propsData,\n  vm\n) {\n  var prop = propOptions[key];\n  var absent = !hasOwn(propsData, key);\n  var value = propsData[key];\n  // boolean casting\n  var booleanIndex = getTypeIndex(Boolean, prop.type);\n  if (booleanIndex > -1) {\n    if (absent && !hasOwn(prop, 'default')) {\n      value = false;\n    } else if (value === '' || value === hyphenate(key)) {\n      // only cast empty string / same name to boolean if\n      // boolean has higher priority\n      var stringIndex = getTypeIndex(String, prop.type);\n      if (stringIndex < 0 || booleanIndex < stringIndex) {\n        value = true;\n      }\n    }\n  }\n  // check default value\n  if (value === undefined) {\n    value = getPropDefaultValue(vm, prop, key);\n    // since the default value is a fresh copy,\n    // make sure to observe it.\n    var prevShouldObserve = shouldObserve;\n    toggleObserving(true);\n    observe(value);\n    toggleObserving(prevShouldObserve);\n  }\n  if (\n    true\n  ) {\n    assertProp(prop, key, value, vm, absent);\n  }\n  return value\n}\n\n/**\n * Get the default value of a prop.\n */\nfunction getPropDefaultValue (vm, prop, key) {\n  // no default, return undefined\n  if (!hasOwn(prop, 'default')) {\n    return undefined\n  }\n  var def = prop.default;\n  // warn against non-factory defaults for Object & Array\n  if ( true && isObject(def)) {\n    warn(\n      'Invalid default value for prop \"' + key + '\": ' +\n      'Props with type Object/Array must use a factory function ' +\n      'to return the default value.',\n      vm\n    );\n  }\n  // the raw prop value was also undefined from previous render,\n  // return previous default value to avoid unnecessary watcher trigger\n  if (vm && vm.$options.propsData &&\n    vm.$options.propsData[key] === undefined &&\n    vm._props[key] !== undefined\n  ) {\n    return vm._props[key]\n  }\n  // call factory function for non-Function types\n  // a value is Function if its prototype is function even across different execution context\n  return typeof def === 'function' && getType(prop.type) !== 'Function'\n    ? def.call(vm)\n    : def\n}\n\n/**\n * Assert whether a prop is valid.\n */\nfunction assertProp (\n  prop,\n  name,\n  value,\n  vm,\n  absent\n) {\n  if (prop.required && absent) {\n    warn(\n      'Missing required prop: \"' + name + '\"',\n      vm\n    );\n    return\n  }\n  if (value == null && !prop.required) {\n    return\n  }\n  var type = prop.type;\n  var valid = !type || type === true;\n  var expectedTypes = [];\n  if (type) {\n    if (!Array.isArray(type)) {\n      type = [type];\n    }\n    for (var i = 0; i < type.length && !valid; i++) {\n      var assertedType = assertType(value, type[i]);\n      expectedTypes.push(assertedType.expectedType || '');\n      valid = assertedType.valid;\n    }\n  }\n\n  if (!valid) {\n    warn(\n      getInvalidTypeMessage(name, value, expectedTypes),\n      vm\n    );\n    return\n  }\n  var validator = prop.validator;\n  if (validator) {\n    if (!validator(value)) {\n      warn(\n        'Invalid prop: custom validator check failed for prop \"' + name + '\".',\n        vm\n      );\n    }\n  }\n}\n\nvar simpleCheckRE = /^(String|Number|Boolean|Function|Symbol)$/;\n\nfunction assertType (value, type) {\n  var valid;\n  var expectedType = getType(type);\n  if (simpleCheckRE.test(expectedType)) {\n    var t = typeof value;\n    valid = t === expectedType.toLowerCase();\n    // for primitive wrapper objects\n    if (!valid && t === 'object') {\n      valid = value instanceof type;\n    }\n  } else if (expectedType === 'Object') {\n    valid = isPlainObject(value);\n  } else if (expectedType === 'Array') {\n    valid = Array.isArray(value);\n  } else {\n    valid = value instanceof type;\n  }\n  return {\n    valid: valid,\n    expectedType: expectedType\n  }\n}\n\n/**\n * Use function string name to check built-in types,\n * because a simple equality check will fail when running\n * across different vms / iframes.\n */\nfunction getType (fn) {\n  var match = fn && fn.toString().match(/^\\s*function (\\w+)/);\n  return match ? match[1] : ''\n}\n\nfunction isSameType (a, b) {\n  return getType(a) === getType(b)\n}\n\nfunction getTypeIndex (type, expectedTypes) {\n  if (!Array.isArray(expectedTypes)) {\n    return isSameType(expectedTypes, type) ? 0 : -1\n  }\n  for (var i = 0, len = expectedTypes.length; i < len; i++) {\n    if (isSameType(expectedTypes[i], type)) {\n      return i\n    }\n  }\n  return -1\n}\n\nfunction getInvalidTypeMessage (name, value, expectedTypes) {\n  var message = \"Invalid prop: type check failed for prop \\\"\" + name + \"\\\".\" +\n    \" Expected \" + (expectedTypes.map(capitalize).join(', '));\n  var expectedType = expectedTypes[0];\n  var receivedType = toRawType(value);\n  var expectedValue = styleValue(value, expectedType);\n  var receivedValue = styleValue(value, receivedType);\n  // check if we need to specify expected value\n  if (expectedTypes.length === 1 &&\n      isExplicable(expectedType) &&\n      !isBoolean(expectedType, receivedType)) {\n    message += \" with value \" + expectedValue;\n  }\n  message += \", got \" + receivedType + \" \";\n  // check if we need to specify received value\n  if (isExplicable(receivedType)) {\n    message += \"with value \" + receivedValue + \".\";\n  }\n  return message\n}\n\nfunction styleValue (value, type) {\n  if (type === 'String') {\n    return (\"\\\"\" + value + \"\\\"\")\n  } else if (type === 'Number') {\n    return (\"\" + (Number(value)))\n  } else {\n    return (\"\" + value)\n  }\n}\n\nfunction isExplicable (value) {\n  var explicitTypes = ['string', 'number', 'boolean'];\n  return explicitTypes.some(function (elem) { return value.toLowerCase() === elem; })\n}\n\nfunction isBoolean () {\n  var args = [], len = arguments.length;\n  while ( len-- ) args[ len ] = arguments[ len ];\n\n  return args.some(function (elem) { return elem.toLowerCase() === 'boolean'; })\n}\n\n/*  */\n\nfunction handleError (err, vm, info) {\n  // Deactivate deps tracking while processing error handler to avoid possible infinite rendering.\n  // See: https://github.com/vuejs/vuex/issues/1505\n  pushTarget();\n  try {\n    if (vm) {\n      var cur = vm;\n      while ((cur = cur.$parent)) {\n        var hooks = cur.$options.errorCaptured;\n        if (hooks) {\n          for (var i = 0; i < hooks.length; i++) {\n            try {\n              var capture = hooks[i].call(cur, err, vm, info) === false;\n              if (capture) { return }\n            } catch (e) {\n              globalHandleError(e, cur, 'errorCaptured hook');\n            }\n          }\n        }\n      }\n    }\n    globalHandleError(err, vm, info);\n  } finally {\n    popTarget();\n  }\n}\n\nfunction invokeWithErrorHandling (\n  handler,\n  context,\n  args,\n  vm,\n  info\n) {\n  var res;\n  try {\n    res = args ? handler.apply(context, args) : handler.call(context);\n    if (res && !res._isVue && isPromise(res) && !res._handled) {\n      res.catch(function (e) { return handleError(e, vm, info + \" (Promise/async)\"); });\n      // issue #9511\n      // avoid catch triggering multiple times when nested calls\n      res._handled = true;\n    }\n  } catch (e) {\n    handleError(e, vm, info);\n  }\n  return res\n}\n\nfunction globalHandleError (err, vm, info) {\n  if (config.errorHandler) {\n    try {\n      return config.errorHandler.call(null, err, vm, info)\n    } catch (e) {\n      // if the user intentionally throws the original error in the handler,\n      // do not log it twice\n      if (e !== err) {\n        logError(e, null, 'config.errorHandler');\n      }\n    }\n  }\n  logError(err, vm, info);\n}\n\nfunction logError (err, vm, info) {\n  if (true) {\n    warn((\"Error in \" + info + \": \\\"\" + (err.toString()) + \"\\\"\"), vm);\n  }\n  /* istanbul ignore else */\n  if ((inBrowser || inWeex) && typeof console !== 'undefined') {\n    console.error(err);\n  } else {\n    throw err\n  }\n}\n\n/*  */\n\nvar callbacks = [];\nvar pending = false;\n\nfunction flushCallbacks () {\n  pending = false;\n  var copies = callbacks.slice(0);\n  callbacks.length = 0;\n  for (var i = 0; i < copies.length; i++) {\n    copies[i]();\n  }\n}\n\n// Here we have async deferring wrappers using microtasks.\n// In 2.5 we used (macro) tasks (in combination with microtasks).\n// However, it has subtle problems when state is changed right before repaint\n// (e.g. #6813, out-in transitions).\n// Also, using (macro) tasks in event handler would cause some weird behaviors\n// that cannot be circumvented (e.g. #7109, #7153, #7546, #7834, #8109).\n// So we now use microtasks everywhere, again.\n// A major drawback of this tradeoff is that there are some scenarios\n// where microtasks have too high a priority and fire in between supposedly\n// sequential events (e.g. #4521, #6690, which have workarounds)\n// or even between bubbling of the same event (#6566).\nvar timerFunc;\n\n// The nextTick behavior leverages the microtask queue, which can be accessed\n// via either native Promise.then or MutationObserver.\n// MutationObserver has wider support, however it is seriously bugged in\n// UIWebView in iOS >= 9.3.3 when triggered in touch event handlers. It\n// completely stops working after triggering a few times... so, if native\n// Promise is available, we will use it:\n/* istanbul ignore next, $flow-disable-line */\nif (typeof Promise !== 'undefined' && isNative(Promise)) {\n  var p = Promise.resolve();\n  timerFunc = function () {\n    p.then(flushCallbacks);\n    // In problematic UIWebViews, Promise.then doesn't completely break, but\n    // it can get stuck in a weird state where callbacks are pushed into the\n    // microtask queue but the queue isn't being flushed, until the browser\n    // needs to do some other work, e.g. handle a timer. Therefore we can\n    // \"force\" the microtask queue to be flushed by adding an empty timer.\n    if (isIOS) { setTimeout(noop); }\n  };\n} else if (!isIE && typeof MutationObserver !== 'undefined' && (\n  isNative(MutationObserver) ||\n  // PhantomJS and iOS 7.x\n  MutationObserver.toString() === '[object MutationObserverConstructor]'\n)) {\n  // Use MutationObserver where native Promise is not available,\n  // e.g. PhantomJS, iOS7, Android 4.4\n  // (#6466 MutationObserver is unreliable in IE11)\n  var counter = 1;\n  var observer = new MutationObserver(flushCallbacks);\n  var textNode = document.createTextNode(String(counter));\n  observer.observe(textNode, {\n    characterData: true\n  });\n  timerFunc = function () {\n    counter = (counter + 1) % 2;\n    textNode.data = String(counter);\n  };\n} else if (typeof setImmediate !== 'undefined' && isNative(setImmediate)) {\n  // Fallback to setImmediate.\n  // Techinically it leverages the (macro) task queue,\n  // but it is still a better choice than setTimeout.\n  timerFunc = function () {\n    setImmediate(flushCallbacks);\n  };\n} else {\n  // Fallback to setTimeout.\n  timerFunc = function () {\n    setTimeout(flushCallbacks, 0);\n  };\n}\n\nfunction nextTick (cb, ctx) {\n  var _resolve;\n  callbacks.push(function () {\n    if (cb) {\n      try {\n        cb.call(ctx);\n      } catch (e) {\n        handleError(e, ctx, 'nextTick');\n      }\n    } else if (_resolve) {\n      _resolve(ctx);\n    }\n  });\n  if (!pending) {\n    pending = true;\n    timerFunc();\n  }\n  // $flow-disable-line\n  if (!cb && typeof Promise !== 'undefined') {\n    return new Promise(function (resolve) {\n      _resolve = resolve;\n    })\n  }\n}\n\n/*  */\n\n/* not type checking this file because flow doesn't play well with Proxy */\n\nvar initProxy;\n\nif (true) {\n  var allowedGlobals = makeMap(\n    'Infinity,undefined,NaN,isFinite,isNaN,' +\n    'parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,' +\n    'Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl,' +\n    'require' // for Webpack/Browserify\n  );\n\n  var warnNonPresent = function (target, key) {\n    warn(\n      \"Property or method \\\"\" + key + \"\\\" is not defined on the instance but \" +\n      'referenced during render. Make sure that this property is reactive, ' +\n      'either in the data option, or for class-based components, by ' +\n      'initializing the property. ' +\n      'See: https://vuejs.org/v2/guide/reactivity.html#Declaring-Reactive-Properties.',\n      target\n    );\n  };\n\n  var warnReservedPrefix = function (target, key) {\n    warn(\n      \"Property \\\"\" + key + \"\\\" must be accessed with \\\"$data.\" + key + \"\\\" because \" +\n      'properties starting with \"$\" or \"_\" are not proxied in the Vue instance to ' +\n      'prevent conflicts with Vue internals' +\n      'See: https://vuejs.org/v2/api/#data',\n      target\n    );\n  };\n\n  var hasProxy =\n    typeof Proxy !== 'undefined' && isNative(Proxy);\n\n  if (hasProxy) {\n    var isBuiltInModifier = makeMap('stop,prevent,self,ctrl,shift,alt,meta,exact');\n    config.keyCodes = new Proxy(config.keyCodes, {\n      set: function set (target, key, value) {\n        if (isBuiltInModifier(key)) {\n          warn((\"Avoid overwriting built-in modifier in config.keyCodes: .\" + key));\n          return false\n        } else {\n          target[key] = value;\n          return true\n        }\n      }\n    });\n  }\n\n  var hasHandler = {\n    has: function has (target, key) {\n      var has = key in target;\n      var isAllowed = allowedGlobals(key) ||\n        (typeof key === 'string' && key.charAt(0) === '_' && !(key in target.$data));\n      if (!has && !isAllowed) {\n        if (key in target.$data) { warnReservedPrefix(target, key); }\n        else { warnNonPresent(target, key); }\n      }\n      return has || !isAllowed\n    }\n  };\n\n  var getHandler = {\n    get: function get (target, key) {\n      if (typeof key === 'string' && !(key in target)) {\n        if (key in target.$data) { warnReservedPrefix(target, key); }\n        else { warnNonPresent(target, key); }\n      }\n      return target[key]\n    }\n  };\n\n  initProxy = function initProxy (vm) {\n    if (hasProxy) {\n      // determine which proxy handler to use\n      var options = vm.$options;\n      var handlers = options.render && options.render._withStripped\n        ? getHandler\n        : hasHandler;\n      vm._renderProxy = new Proxy(vm, handlers);\n    } else {\n      vm._renderProxy = vm;\n    }\n  };\n}\n\n/*  */\n\nvar seenObjects = new _Set();\n\n/**\n * Recursively traverse an object to evoke all converted\n * getters, so that every nested property inside the object\n * is collected as a \"deep\" dependency.\n */\nfunction traverse (val) {\n  _traverse(val, seenObjects);\n  seenObjects.clear();\n}\n\nfunction _traverse (val, seen) {\n  var i, keys;\n  var isA = Array.isArray(val);\n  if ((!isA && !isObject(val)) || Object.isFrozen(val) || val instanceof VNode) {\n    return\n  }\n  if (val.__ob__) {\n    var depId = val.__ob__.dep.id;\n    if (seen.has(depId)) {\n      return\n    }\n    seen.add(depId);\n  }\n  if (isA) {\n    i = val.length;\n    while (i--) { _traverse(val[i], seen); }\n  } else {\n    keys = Object.keys(val);\n    i = keys.length;\n    while (i--) { _traverse(val[keys[i]], seen); }\n  }\n}\n\nvar mark;\nvar measure;\n\nif (true) {\n  var perf = inBrowser && window.performance;\n  /* istanbul ignore if */\n  if (\n    perf &&\n    perf.mark &&\n    perf.measure &&\n    perf.clearMarks &&\n    perf.clearMeasures\n  ) {\n    mark = function (tag) { return perf.mark(tag); };\n    measure = function (name, startTag, endTag) {\n      perf.measure(name, startTag, endTag);\n      perf.clearMarks(startTag);\n      perf.clearMarks(endTag);\n      // perf.clearMeasures(name)\n    };\n  }\n}\n\n/*  */\n\nvar normalizeEvent = cached(function (name) {\n  var passive = name.charAt(0) === '&';\n  name = passive ? name.slice(1) : name;\n  var once$$1 = name.charAt(0) === '~'; // Prefixed last, checked first\n  name = once$$1 ? name.slice(1) : name;\n  var capture = name.charAt(0) === '!';\n  name = capture ? name.slice(1) : name;\n  return {\n    name: name,\n    once: once$$1,\n    capture: capture,\n    passive: passive\n  }\n});\n\nfunction createFnInvoker (fns, vm) {\n  function invoker () {\n    var arguments$1 = arguments;\n\n    var fns = invoker.fns;\n    if (Array.isArray(fns)) {\n      var cloned = fns.slice();\n      for (var i = 0; i < cloned.length; i++) {\n        invokeWithErrorHandling(cloned[i], null, arguments$1, vm, \"v-on handler\");\n      }\n    } else {\n      // return handler return value for single handlers\n      return invokeWithErrorHandling(fns, null, arguments, vm, \"v-on handler\")\n    }\n  }\n  invoker.fns = fns;\n  return invoker\n}\n\nfunction updateListeners (\n  on,\n  oldOn,\n  add,\n  remove$$1,\n  createOnceHandler,\n  vm\n) {\n  var name, def$$1, cur, old, event;\n  for (name in on) {\n    def$$1 = cur = on[name];\n    old = oldOn[name];\n    event = normalizeEvent(name);\n    if (isUndef(cur)) {\n       true && warn(\n        \"Invalid handler for event \\\"\" + (event.name) + \"\\\": got \" + String(cur),\n        vm\n      );\n    } else if (isUndef(old)) {\n      if (isUndef(cur.fns)) {\n        cur = on[name] = createFnInvoker(cur, vm);\n      }\n      if (isTrue(event.once)) {\n        cur = on[name] = createOnceHandler(event.name, cur, event.capture);\n      }\n      add(event.name, cur, event.capture, event.passive, event.params);\n    } else if (cur !== old) {\n      old.fns = cur;\n      on[name] = old;\n    }\n  }\n  for (name in oldOn) {\n    if (isUndef(on[name])) {\n      event = normalizeEvent(name);\n      remove$$1(event.name, oldOn[name], event.capture);\n    }\n  }\n}\n\n/*  */\n\n/*  */\n\nfunction extractPropsFromVNodeData (\n  data,\n  Ctor,\n  tag\n) {\n  // we are only extracting raw values here.\n  // validation and default values are handled in the child\n  // component itself.\n  var propOptions = Ctor.options.props;\n  if (isUndef(propOptions)) {\n    return\n  }\n  var res = {};\n  var attrs = data.attrs;\n  var props = data.props;\n  if (isDef(attrs) || isDef(props)) {\n    for (var key in propOptions) {\n      var altKey = hyphenate(key);\n      if (true) {\n        var keyInLowerCase = key.toLowerCase();\n        if (\n          key !== keyInLowerCase &&\n          attrs && hasOwn(attrs, keyInLowerCase)\n        ) {\n          tip(\n            \"Prop \\\"\" + keyInLowerCase + \"\\\" is passed to component \" +\n            (formatComponentName(tag || Ctor)) + \", but the declared prop name is\" +\n            \" \\\"\" + key + \"\\\". \" +\n            \"Note that HTML attributes are case-insensitive and camelCased \" +\n            \"props need to use their kebab-case equivalents when using in-DOM \" +\n            \"templates. You should probably use \\\"\" + altKey + \"\\\" instead of \\\"\" + key + \"\\\".\"\n          );\n        }\n      }\n      checkProp(res, props, key, altKey, true) ||\n      checkProp(res, attrs, key, altKey, false);\n    }\n  }\n  return res\n}\n\nfunction checkProp (\n  res,\n  hash,\n  key,\n  altKey,\n  preserve\n) {\n  if (isDef(hash)) {\n    if (hasOwn(hash, key)) {\n      res[key] = hash[key];\n      if (!preserve) {\n        delete hash[key];\n      }\n      return true\n    } else if (hasOwn(hash, altKey)) {\n      res[key] = hash[altKey];\n      if (!preserve) {\n        delete hash[altKey];\n      }\n      return true\n    }\n  }\n  return false\n}\n\n/*  */\n\n// The template compiler attempts to minimize the need for normalization by\n// statically analyzing the template at compile time.\n//\n// For plain HTML markup, normalization can be completely skipped because the\n// generated render function is guaranteed to return Array<VNode>. There are\n// two cases where extra normalization is needed:\n\n// 1. When the children contains components - because a functional component\n// may return an Array instead of a single root. In this case, just a simple\n// normalization is needed - if any child is an Array, we flatten the whole\n// thing with Array.prototype.concat. It is guaranteed to be only 1-level deep\n// because functional components already normalize their own children.\nfunction simpleNormalizeChildren (children) {\n  for (var i = 0; i < children.length; i++) {\n    if (Array.isArray(children[i])) {\n      return Array.prototype.concat.apply([], children)\n    }\n  }\n  return children\n}\n\n// 2. When the children contains constructs that always generated nested Arrays,\n// e.g. <template>, <slot>, v-for, or when the children is provided by user\n// with hand-written render functions / JSX. In such cases a full normalization\n// is needed to cater to all possible types of children values.\nfunction normalizeChildren (children) {\n  return isPrimitive(children)\n    ? [createTextVNode(children)]\n    : Array.isArray(children)\n      ? normalizeArrayChildren(children)\n      : undefined\n}\n\nfunction isTextNode (node) {\n  return isDef(node) && isDef(node.text) && isFalse(node.isComment)\n}\n\nfunction normalizeArrayChildren (children, nestedIndex) {\n  var res = [];\n  var i, c, lastIndex, last;\n  for (i = 0; i < children.length; i++) {\n    c = children[i];\n    if (isUndef(c) || typeof c === 'boolean') { continue }\n    lastIndex = res.length - 1;\n    last = res[lastIndex];\n    //  nested\n    if (Array.isArray(c)) {\n      if (c.length > 0) {\n        c = normalizeArrayChildren(c, ((nestedIndex || '') + \"_\" + i));\n        // merge adjacent text nodes\n        if (isTextNode(c[0]) && isTextNode(last)) {\n          res[lastIndex] = createTextVNode(last.text + (c[0]).text);\n          c.shift();\n        }\n        res.push.apply(res, c);\n      }\n    } else if (isPrimitive(c)) {\n      if (isTextNode(last)) {\n        // merge adjacent text nodes\n        // this is necessary for SSR hydration because text nodes are\n        // essentially merged when rendered to HTML strings\n        res[lastIndex] = createTextVNode(last.text + c);\n      } else if (c !== '') {\n        // convert primitive to vnode\n        res.push(createTextVNode(c));\n      }\n    } else {\n      if (isTextNode(c) && isTextNode(last)) {\n        // merge adjacent text nodes\n        res[lastIndex] = createTextVNode(last.text + c.text);\n      } else {\n        // default key for nested array children (likely generated by v-for)\n        if (isTrue(children._isVList) &&\n          isDef(c.tag) &&\n          isUndef(c.key) &&\n          isDef(nestedIndex)) {\n          c.key = \"__vlist\" + nestedIndex + \"_\" + i + \"__\";\n        }\n        res.push(c);\n      }\n    }\n  }\n  return res\n}\n\n/*  */\n\nfunction initProvide (vm) {\n  var provide = vm.$options.provide;\n  if (provide) {\n    vm._provided = typeof provide === 'function'\n      ? provide.call(vm)\n      : provide;\n  }\n}\n\nfunction initInjections (vm) {\n  var result = resolveInject(vm.$options.inject, vm);\n  if (result) {\n    toggleObserving(false);\n    Object.keys(result).forEach(function (key) {\n      /* istanbul ignore else */\n      if (true) {\n        defineReactive$$1(vm, key, result[key], function () {\n          warn(\n            \"Avoid mutating an injected value directly since the changes will be \" +\n            \"overwritten whenever the provided component re-renders. \" +\n            \"injection being mutated: \\\"\" + key + \"\\\"\",\n            vm\n          );\n        });\n      } else {}\n    });\n    toggleObserving(true);\n  }\n}\n\nfunction resolveInject (inject, vm) {\n  if (inject) {\n    // inject is :any because flow is not smart enough to figure out cached\n    var result = Object.create(null);\n    var keys = hasSymbol\n      ? Reflect.ownKeys(inject)\n      : Object.keys(inject);\n\n    for (var i = 0; i < keys.length; i++) {\n      var key = keys[i];\n      // #6574 in case the inject object is observed...\n      if (key === '__ob__') { continue }\n      var provideKey = inject[key].from;\n      var source = vm;\n      while (source) {\n        if (source._provided && hasOwn(source._provided, provideKey)) {\n          result[key] = source._provided[provideKey];\n          break\n        }\n        source = source.$parent;\n      }\n      if (!source) {\n        if ('default' in inject[key]) {\n          var provideDefault = inject[key].default;\n          result[key] = typeof provideDefault === 'function'\n            ? provideDefault.call(vm)\n            : provideDefault;\n        } else if (true) {\n          warn((\"Injection \\\"\" + key + \"\\\" not found\"), vm);\n        }\n      }\n    }\n    return result\n  }\n}\n\n/*  */\n\n\n\n/**\n * Runtime helper for resolving raw children VNodes into a slot object.\n */\nfunction resolveSlots (\n  children,\n  context\n) {\n  if (!children || !children.length) {\n    return {}\n  }\n  var slots = {};\n  for (var i = 0, l = children.length; i < l; i++) {\n    var child = children[i];\n    var data = child.data;\n    // remove slot attribute if the node is resolved as a Vue slot node\n    if (data && data.attrs && data.attrs.slot) {\n      delete data.attrs.slot;\n    }\n    // named slots should only be respected if the vnode was rendered in the\n    // same context.\n    if ((child.context === context || child.fnContext === context) &&\n      data && data.slot != null\n    ) {\n      var name = data.slot;\n      var slot = (slots[name] || (slots[name] = []));\n      if (child.tag === 'template') {\n        slot.push.apply(slot, child.children || []);\n      } else {\n        slot.push(child);\n      }\n    } else {\n      // fixed by xxxxxx 临时 hack 掉 uni-app 中的异步 name slot page\n      if(child.asyncMeta && child.asyncMeta.data && child.asyncMeta.data.slot === 'page'){\n        (slots['page'] || (slots['page'] = [])).push(child);\n      }else{\n        (slots.default || (slots.default = [])).push(child);\n      }\n    }\n  }\n  // ignore slots that contains only whitespace\n  for (var name$1 in slots) {\n    if (slots[name$1].every(isWhitespace)) {\n      delete slots[name$1];\n    }\n  }\n  return slots\n}\n\nfunction isWhitespace (node) {\n  return (node.isComment && !node.asyncFactory) || node.text === ' '\n}\n\n/*  */\n\nfunction normalizeScopedSlots (\n  slots,\n  normalSlots,\n  prevSlots\n) {\n  var res;\n  var hasNormalSlots = Object.keys(normalSlots).length > 0;\n  var isStable = slots ? !!slots.$stable : !hasNormalSlots;\n  var key = slots && slots.$key;\n  if (!slots) {\n    res = {};\n  } else if (slots._normalized) {\n    // fast path 1: child component re-render only, parent did not change\n    return slots._normalized\n  } else if (\n    isStable &&\n    prevSlots &&\n    prevSlots !== emptyObject &&\n    key === prevSlots.$key &&\n    !hasNormalSlots &&\n    !prevSlots.$hasNormal\n  ) {\n    // fast path 2: stable scoped slots w/ no normal slots to proxy,\n    // only need to normalize once\n    return prevSlots\n  } else {\n    res = {};\n    for (var key$1 in slots) {\n      if (slots[key$1] && key$1[0] !== '$') {\n        res[key$1] = normalizeScopedSlot(normalSlots, key$1, slots[key$1]);\n      }\n    }\n  }\n  // expose normal slots on scopedSlots\n  for (var key$2 in normalSlots) {\n    if (!(key$2 in res)) {\n      res[key$2] = proxyNormalSlot(normalSlots, key$2);\n    }\n  }\n  // avoriaz seems to mock a non-extensible $scopedSlots object\n  // and when that is passed down this would cause an error\n  if (slots && Object.isExtensible(slots)) {\n    (slots)._normalized = res;\n  }\n  def(res, '$stable', isStable);\n  def(res, '$key', key);\n  def(res, '$hasNormal', hasNormalSlots);\n  return res\n}\n\nfunction normalizeScopedSlot(normalSlots, key, fn) {\n  var normalized = function () {\n    var res = arguments.length ? fn.apply(null, arguments) : fn({});\n    res = res && typeof res === 'object' && !Array.isArray(res)\n      ? [res] // single vnode\n      : normalizeChildren(res);\n    return res && (\n      res.length === 0 ||\n      (res.length === 1 && res[0].isComment) // #9658\n    ) ? undefined\n      : res\n  };\n  // this is a slot using the new v-slot syntax without scope. although it is\n  // compiled as a scoped slot, render fn users would expect it to be present\n  // on this.$slots because the usage is semantically a normal slot.\n  if (fn.proxy) {\n    Object.defineProperty(normalSlots, key, {\n      get: normalized,\n      enumerable: true,\n      configurable: true\n    });\n  }\n  return normalized\n}\n\nfunction proxyNormalSlot(slots, key) {\n  return function () { return slots[key]; }\n}\n\n/*  */\n\n/**\n * Runtime helper for rendering v-for lists.\n */\nfunction renderList (\n  val,\n  render\n) {\n  var ret, i, l, keys, key;\n  if (Array.isArray(val) || typeof val === 'string') {\n    ret = new Array(val.length);\n    for (i = 0, l = val.length; i < l; i++) {\n      ret[i] = render(val[i], i);\n    }\n  } else if (typeof val === 'number') {\n    ret = new Array(val);\n    for (i = 0; i < val; i++) {\n      ret[i] = render(i + 1, i);\n    }\n  } else if (isObject(val)) {\n    if (hasSymbol && val[Symbol.iterator]) {\n      ret = [];\n      var iterator = val[Symbol.iterator]();\n      var result = iterator.next();\n      while (!result.done) {\n        ret.push(render(result.value, ret.length));\n        result = iterator.next();\n      }\n    } else {\n      keys = Object.keys(val);\n      ret = new Array(keys.length);\n      for (i = 0, l = keys.length; i < l; i++) {\n        key = keys[i];\n        ret[i] = render(val[key], key, i);\n      }\n    }\n  }\n  if (!isDef(ret)) {\n    ret = [];\n  }\n  (ret)._isVList = true;\n  return ret\n}\n\n/*  */\n\n/**\n * Runtime helper for rendering <slot>\n */\nfunction renderSlot (\n  name,\n  fallback,\n  props,\n  bindObject\n) {\n  var scopedSlotFn = this.$scopedSlots[name];\n  var nodes;\n  if (scopedSlotFn) { // scoped slot\n    props = props || {};\n    if (bindObject) {\n      if ( true && !isObject(bindObject)) {\n        warn(\n          'slot v-bind without argument expects an Object',\n          this\n        );\n      }\n      props = extend(extend({}, bindObject), props);\n    }\n    nodes = scopedSlotFn(props) || fallback;\n  } else {\n    nodes = this.$slots[name] || fallback;\n  }\n\n  var target = props && props.slot;\n  if (target) {\n    return this.$createElement('template', { slot: target }, nodes)\n  } else {\n    return nodes\n  }\n}\n\n/*  */\n\n/**\n * Runtime helper for resolving filters\n */\nfunction resolveFilter (id) {\n  return resolveAsset(this.$options, 'filters', id, true) || identity\n}\n\n/*  */\n\nfunction isKeyNotMatch (expect, actual) {\n  if (Array.isArray(expect)) {\n    return expect.indexOf(actual) === -1\n  } else {\n    return expect !== actual\n  }\n}\n\n/**\n * Runtime helper for checking keyCodes from config.\n * exposed as Vue.prototype._k\n * passing in eventKeyName as last argument separately for backwards compat\n */\nfunction checkKeyCodes (\n  eventKeyCode,\n  key,\n  builtInKeyCode,\n  eventKeyName,\n  builtInKeyName\n) {\n  var mappedKeyCode = config.keyCodes[key] || builtInKeyCode;\n  if (builtInKeyName && eventKeyName && !config.keyCodes[key]) {\n    return isKeyNotMatch(builtInKeyName, eventKeyName)\n  } else if (mappedKeyCode) {\n    return isKeyNotMatch(mappedKeyCode, eventKeyCode)\n  } else if (eventKeyName) {\n    return hyphenate(eventKeyName) !== key\n  }\n}\n\n/*  */\n\n/**\n * Runtime helper for merging v-bind=\"object\" into a VNode's data.\n */\nfunction bindObjectProps (\n  data,\n  tag,\n  value,\n  asProp,\n  isSync\n) {\n  if (value) {\n    if (!isObject(value)) {\n       true && warn(\n        'v-bind without argument expects an Object or Array value',\n        this\n      );\n    } else {\n      if (Array.isArray(value)) {\n        value = toObject(value);\n      }\n      var hash;\n      var loop = function ( key ) {\n        if (\n          key === 'class' ||\n          key === 'style' ||\n          isReservedAttribute(key)\n        ) {\n          hash = data;\n        } else {\n          var type = data.attrs && data.attrs.type;\n          hash = asProp || config.mustUseProp(tag, type, key)\n            ? data.domProps || (data.domProps = {})\n            : data.attrs || (data.attrs = {});\n        }\n        var camelizedKey = camelize(key);\n        var hyphenatedKey = hyphenate(key);\n        if (!(camelizedKey in hash) && !(hyphenatedKey in hash)) {\n          hash[key] = value[key];\n\n          if (isSync) {\n            var on = data.on || (data.on = {});\n            on[(\"update:\" + key)] = function ($event) {\n              value[key] = $event;\n            };\n          }\n        }\n      };\n\n      for (var key in value) loop( key );\n    }\n  }\n  return data\n}\n\n/*  */\n\n/**\n * Runtime helper for rendering static trees.\n */\nfunction renderStatic (\n  index,\n  isInFor\n) {\n  var cached = this._staticTrees || (this._staticTrees = []);\n  var tree = cached[index];\n  // if has already-rendered static tree and not inside v-for,\n  // we can reuse the same tree.\n  if (tree && !isInFor) {\n    return tree\n  }\n  // otherwise, render a fresh tree.\n  tree = cached[index] = this.$options.staticRenderFns[index].call(\n    this._renderProxy,\n    null,\n    this // for render fns generated for functional component templates\n  );\n  markStatic(tree, (\"__static__\" + index), false);\n  return tree\n}\n\n/**\n * Runtime helper for v-once.\n * Effectively it means marking the node as static with a unique key.\n */\nfunction markOnce (\n  tree,\n  index,\n  key\n) {\n  markStatic(tree, (\"__once__\" + index + (key ? (\"_\" + key) : \"\")), true);\n  return tree\n}\n\nfunction markStatic (\n  tree,\n  key,\n  isOnce\n) {\n  if (Array.isArray(tree)) {\n    for (var i = 0; i < tree.length; i++) {\n      if (tree[i] && typeof tree[i] !== 'string') {\n        markStaticNode(tree[i], (key + \"_\" + i), isOnce);\n      }\n    }\n  } else {\n    markStaticNode(tree, key, isOnce);\n  }\n}\n\nfunction markStaticNode (node, key, isOnce) {\n  node.isStatic = true;\n  node.key = key;\n  node.isOnce = isOnce;\n}\n\n/*  */\n\nfunction bindObjectListeners (data, value) {\n  if (value) {\n    if (!isPlainObject(value)) {\n       true && warn(\n        'v-on without argument expects an Object value',\n        this\n      );\n    } else {\n      var on = data.on = data.on ? extend({}, data.on) : {};\n      for (var key in value) {\n        var existing = on[key];\n        var ours = value[key];\n        on[key] = existing ? [].concat(existing, ours) : ours;\n      }\n    }\n  }\n  return data\n}\n\n/*  */\n\nfunction resolveScopedSlots (\n  fns, // see flow/vnode\n  res,\n  // the following are added in 2.6\n  hasDynamicKeys,\n  contentHashKey\n) {\n  res = res || { $stable: !hasDynamicKeys };\n  for (var i = 0; i < fns.length; i++) {\n    var slot = fns[i];\n    if (Array.isArray(slot)) {\n      resolveScopedSlots(slot, res, hasDynamicKeys);\n    } else if (slot) {\n      // marker for reverse proxying v-slot without scope on this.$slots\n      if (slot.proxy) {\n        slot.fn.proxy = true;\n      }\n      res[slot.key] = slot.fn;\n    }\n  }\n  if (contentHashKey) {\n    (res).$key = contentHashKey;\n  }\n  return res\n}\n\n/*  */\n\nfunction bindDynamicKeys (baseObj, values) {\n  for (var i = 0; i < values.length; i += 2) {\n    var key = values[i];\n    if (typeof key === 'string' && key) {\n      baseObj[values[i]] = values[i + 1];\n    } else if ( true && key !== '' && key !== null) {\n      // null is a speical value for explicitly removing a binding\n      warn(\n        (\"Invalid value for dynamic directive argument (expected string or null): \" + key),\n        this\n      );\n    }\n  }\n  return baseObj\n}\n\n// helper to dynamically append modifier runtime markers to event names.\n// ensure only append when value is already string, otherwise it will be cast\n// to string and cause the type check to miss.\nfunction prependModifier (value, symbol) {\n  return typeof value === 'string' ? symbol + value : value\n}\n\n/*  */\n\nfunction installRenderHelpers (target) {\n  target._o = markOnce;\n  target._n = toNumber;\n  target._s = toString;\n  target._l = renderList;\n  target._t = renderSlot;\n  target._q = looseEqual;\n  target._i = looseIndexOf;\n  target._m = renderStatic;\n  target._f = resolveFilter;\n  target._k = checkKeyCodes;\n  target._b = bindObjectProps;\n  target._v = createTextVNode;\n  target._e = createEmptyVNode;\n  target._u = resolveScopedSlots;\n  target._g = bindObjectListeners;\n  target._d = bindDynamicKeys;\n  target._p = prependModifier;\n}\n\n/*  */\n\nfunction FunctionalRenderContext (\n  data,\n  props,\n  children,\n  parent,\n  Ctor\n) {\n  var this$1 = this;\n\n  var options = Ctor.options;\n  // ensure the createElement function in functional components\n  // gets a unique context - this is necessary for correct named slot check\n  var contextVm;\n  if (hasOwn(parent, '_uid')) {\n    contextVm = Object.create(parent);\n    // $flow-disable-line\n    contextVm._original = parent;\n  } else {\n    // the context vm passed in is a functional context as well.\n    // in this case we want to make sure we are able to get a hold to the\n    // real context instance.\n    contextVm = parent;\n    // $flow-disable-line\n    parent = parent._original;\n  }\n  var isCompiled = isTrue(options._compiled);\n  var needNormalization = !isCompiled;\n\n  this.data = data;\n  this.props = props;\n  this.children = children;\n  this.parent = parent;\n  this.listeners = data.on || emptyObject;\n  this.injections = resolveInject(options.inject, parent);\n  this.slots = function () {\n    if (!this$1.$slots) {\n      normalizeScopedSlots(\n        data.scopedSlots,\n        this$1.$slots = resolveSlots(children, parent)\n      );\n    }\n    return this$1.$slots\n  };\n\n  Object.defineProperty(this, 'scopedSlots', ({\n    enumerable: true,\n    get: function get () {\n      return normalizeScopedSlots(data.scopedSlots, this.slots())\n    }\n  }));\n\n  // support for compiled functional template\n  if (isCompiled) {\n    // exposing $options for renderStatic()\n    this.$options = options;\n    // pre-resolve slots for renderSlot()\n    this.$slots = this.slots();\n    this.$scopedSlots = normalizeScopedSlots(data.scopedSlots, this.$slots);\n  }\n\n  if (options._scopeId) {\n    this._c = function (a, b, c, d) {\n      var vnode = createElement(contextVm, a, b, c, d, needNormalization);\n      if (vnode && !Array.isArray(vnode)) {\n        vnode.fnScopeId = options._scopeId;\n        vnode.fnContext = parent;\n      }\n      return vnode\n    };\n  } else {\n    this._c = function (a, b, c, d) { return createElement(contextVm, a, b, c, d, needNormalization); };\n  }\n}\n\ninstallRenderHelpers(FunctionalRenderContext.prototype);\n\nfunction createFunctionalComponent (\n  Ctor,\n  propsData,\n  data,\n  contextVm,\n  children\n) {\n  var options = Ctor.options;\n  var props = {};\n  var propOptions = options.props;\n  if (isDef(propOptions)) {\n    for (var key in propOptions) {\n      props[key] = validateProp(key, propOptions, propsData || emptyObject);\n    }\n  } else {\n    if (isDef(data.attrs)) { mergeProps(props, data.attrs); }\n    if (isDef(data.props)) { mergeProps(props, data.props); }\n  }\n\n  var renderContext = new FunctionalRenderContext(\n    data,\n    props,\n    children,\n    contextVm,\n    Ctor\n  );\n\n  var vnode = options.render.call(null, renderContext._c, renderContext);\n\n  if (vnode instanceof VNode) {\n    return cloneAndMarkFunctionalResult(vnode, data, renderContext.parent, options, renderContext)\n  } else if (Array.isArray(vnode)) {\n    var vnodes = normalizeChildren(vnode) || [];\n    var res = new Array(vnodes.length);\n    for (var i = 0; i < vnodes.length; i++) {\n      res[i] = cloneAndMarkFunctionalResult(vnodes[i], data, renderContext.parent, options, renderContext);\n    }\n    return res\n  }\n}\n\nfunction cloneAndMarkFunctionalResult (vnode, data, contextVm, options, renderContext) {\n  // #7817 clone node before setting fnContext, otherwise if the node is reused\n  // (e.g. it was from a cached normal slot) the fnContext causes named slots\n  // that should not be matched to match.\n  var clone = cloneVNode(vnode);\n  clone.fnContext = contextVm;\n  clone.fnOptions = options;\n  if (true) {\n    (clone.devtoolsMeta = clone.devtoolsMeta || {}).renderContext = renderContext;\n  }\n  if (data.slot) {\n    (clone.data || (clone.data = {})).slot = data.slot;\n  }\n  return clone\n}\n\nfunction mergeProps (to, from) {\n  for (var key in from) {\n    to[camelize(key)] = from[key];\n  }\n}\n\n/*  */\n\n/*  */\n\n/*  */\n\n/*  */\n\n// inline hooks to be invoked on component VNodes during patch\nvar componentVNodeHooks = {\n  init: function init (vnode, hydrating) {\n    if (\n      vnode.componentInstance &&\n      !vnode.componentInstance._isDestroyed &&\n      vnode.data.keepAlive\n    ) {\n      // kept-alive components, treat as a patch\n      var mountedNode = vnode; // work around flow\n      componentVNodeHooks.prepatch(mountedNode, mountedNode);\n    } else {\n      var child = vnode.componentInstance = createComponentInstanceForVnode(\n        vnode,\n        activeInstance\n      );\n      child.$mount(hydrating ? vnode.elm : undefined, hydrating);\n    }\n  },\n\n  prepatch: function prepatch (oldVnode, vnode) {\n    var options = vnode.componentOptions;\n    var child = vnode.componentInstance = oldVnode.componentInstance;\n    updateChildComponent(\n      child,\n      options.propsData, // updated props\n      options.listeners, // updated listeners\n      vnode, // new parent vnode\n      options.children // new children\n    );\n  },\n\n  insert: function insert (vnode) {\n    var context = vnode.context;\n    var componentInstance = vnode.componentInstance;\n    if (!componentInstance._isMounted) {\n      componentInstance._isMounted = true;\n      callHook(componentInstance, 'mounted');\n    }\n    if (vnode.data.keepAlive) {\n      if (context._isMounted) {\n        // vue-router#1212\n        // During updates, a kept-alive component's child components may\n        // change, so directly walking the tree here may call activated hooks\n        // on incorrect children. Instead we push them into a queue which will\n        // be processed after the whole patch process ended.\n        queueActivatedComponent(componentInstance);\n      } else {\n        activateChildComponent(componentInstance, true /* direct */);\n      }\n    }\n  },\n\n  destroy: function destroy (vnode) {\n    var componentInstance = vnode.componentInstance;\n    if (!componentInstance._isDestroyed) {\n      if (!vnode.data.keepAlive) {\n        componentInstance.$destroy();\n      } else {\n        deactivateChildComponent(componentInstance, true /* direct */);\n      }\n    }\n  }\n};\n\nvar hooksToMerge = Object.keys(componentVNodeHooks);\n\nfunction createComponent (\n  Ctor,\n  data,\n  context,\n  children,\n  tag\n) {\n  if (isUndef(Ctor)) {\n    return\n  }\n\n  var baseCtor = context.$options._base;\n\n  // plain options object: turn it into a constructor\n  if (isObject(Ctor)) {\n    Ctor = baseCtor.extend(Ctor);\n  }\n\n  // if at this stage it's not a constructor or an async component factory,\n  // reject.\n  if (typeof Ctor !== 'function') {\n    if (true) {\n      warn((\"Invalid Component definition: \" + (String(Ctor))), context);\n    }\n    return\n  }\n\n  // async component\n  var asyncFactory;\n  if (isUndef(Ctor.cid)) {\n    asyncFactory = Ctor;\n    Ctor = resolveAsyncComponent(asyncFactory, baseCtor);\n    if (Ctor === undefined) {\n      // return a placeholder node for async component, which is rendered\n      // as a comment node but preserves all the raw information for the node.\n      // the information will be used for async server-rendering and hydration.\n      return createAsyncPlaceholder(\n        asyncFactory,\n        data,\n        context,\n        children,\n        tag\n      )\n    }\n  }\n\n  data = data || {};\n\n  // resolve constructor options in case global mixins are applied after\n  // component constructor creation\n  resolveConstructorOptions(Ctor);\n\n  // transform component v-model data into props & events\n  if (isDef(data.model)) {\n    transformModel(Ctor.options, data);\n  }\n\n  // extract props\n  var propsData = extractPropsFromVNodeData(data, Ctor, tag);\n\n  // functional component\n  if (isTrue(Ctor.options.functional)) {\n    return createFunctionalComponent(Ctor, propsData, data, context, children)\n  }\n\n  // extract listeners, since these needs to be treated as\n  // child component listeners instead of DOM listeners\n  var listeners = data.on;\n  // replace with listeners with .native modifier\n  // so it gets processed during parent component patch.\n  data.on = data.nativeOn;\n\n  if (isTrue(Ctor.options.abstract)) {\n    // abstract components do not keep anything\n    // other than props & listeners & slot\n\n    // work around flow\n    var slot = data.slot;\n    data = {};\n    if (slot) {\n      data.slot = slot;\n    }\n  }\n\n  // install component management hooks onto the placeholder node\n  installComponentHooks(data);\n\n  // return a placeholder vnode\n  var name = Ctor.options.name || tag;\n  var vnode = new VNode(\n    (\"vue-component-\" + (Ctor.cid) + (name ? (\"-\" + name) : '')),\n    data, undefined, undefined, undefined, context,\n    { Ctor: Ctor, propsData: propsData, listeners: listeners, tag: tag, children: children },\n    asyncFactory\n  );\n\n  return vnode\n}\n\nfunction createComponentInstanceForVnode (\n  vnode, // we know it's MountedComponentVNode but flow doesn't\n  parent // activeInstance in lifecycle state\n) {\n  var options = {\n    _isComponent: true,\n    _parentVnode: vnode,\n    parent: parent\n  };\n  // check inline-template render functions\n  var inlineTemplate = vnode.data.inlineTemplate;\n  if (isDef(inlineTemplate)) {\n    options.render = inlineTemplate.render;\n    options.staticRenderFns = inlineTemplate.staticRenderFns;\n  }\n  return new vnode.componentOptions.Ctor(options)\n}\n\nfunction installComponentHooks (data) {\n  var hooks = data.hook || (data.hook = {});\n  for (var i = 0; i < hooksToMerge.length; i++) {\n    var key = hooksToMerge[i];\n    var existing = hooks[key];\n    var toMerge = componentVNodeHooks[key];\n    if (existing !== toMerge && !(existing && existing._merged)) {\n      hooks[key] = existing ? mergeHook$1(toMerge, existing) : toMerge;\n    }\n  }\n}\n\nfunction mergeHook$1 (f1, f2) {\n  var merged = function (a, b) {\n    // flow complains about extra args which is why we use any\n    f1(a, b);\n    f2(a, b);\n  };\n  merged._merged = true;\n  return merged\n}\n\n// transform component v-model info (value and callback) into\n// prop and event handler respectively.\nfunction transformModel (options, data) {\n  var prop = (options.model && options.model.prop) || 'value';\n  var event = (options.model && options.model.event) || 'input'\n  ;(data.attrs || (data.attrs = {}))[prop] = data.model.value;\n  var on = data.on || (data.on = {});\n  var existing = on[event];\n  var callback = data.model.callback;\n  if (isDef(existing)) {\n    if (\n      Array.isArray(existing)\n        ? existing.indexOf(callback) === -1\n        : existing !== callback\n    ) {\n      on[event] = [callback].concat(existing);\n    }\n  } else {\n    on[event] = callback;\n  }\n}\n\n/*  */\n\nvar SIMPLE_NORMALIZE = 1;\nvar ALWAYS_NORMALIZE = 2;\n\n// wrapper function for providing a more flexible interface\n// without getting yelled at by flow\nfunction createElement (\n  context,\n  tag,\n  data,\n  children,\n  normalizationType,\n  alwaysNormalize\n) {\n  if (Array.isArray(data) || isPrimitive(data)) {\n    normalizationType = children;\n    children = data;\n    data = undefined;\n  }\n  if (isTrue(alwaysNormalize)) {\n    normalizationType = ALWAYS_NORMALIZE;\n  }\n  return _createElement(context, tag, data, children, normalizationType)\n}\n\nfunction _createElement (\n  context,\n  tag,\n  data,\n  children,\n  normalizationType\n) {\n  if (isDef(data) && isDef((data).__ob__)) {\n     true && warn(\n      \"Avoid using observed data object as vnode data: \" + (JSON.stringify(data)) + \"\\n\" +\n      'Always create fresh vnode data objects in each render!',\n      context\n    );\n    return createEmptyVNode()\n  }\n  // object syntax in v-bind\n  if (isDef(data) && isDef(data.is)) {\n    tag = data.is;\n  }\n  if (!tag) {\n    // in case of component :is set to falsy value\n    return createEmptyVNode()\n  }\n  // warn against non-primitive key\n  if ( true &&\n    isDef(data) && isDef(data.key) && !isPrimitive(data.key)\n  ) {\n    {\n      warn(\n        'Avoid using non-primitive value as key, ' +\n        'use string/number value instead.',\n        context\n      );\n    }\n  }\n  // support single function children as default scoped slot\n  if (Array.isArray(children) &&\n    typeof children[0] === 'function'\n  ) {\n    data = data || {};\n    data.scopedSlots = { default: children[0] };\n    children.length = 0;\n  }\n  if (normalizationType === ALWAYS_NORMALIZE) {\n    children = normalizeChildren(children);\n  } else if (normalizationType === SIMPLE_NORMALIZE) {\n    children = simpleNormalizeChildren(children);\n  }\n  var vnode, ns;\n  if (typeof tag === 'string') {\n    var Ctor;\n    ns = (context.$vnode && context.$vnode.ns) || config.getTagNamespace(tag);\n    if (config.isReservedTag(tag)) {\n      // platform built-in elements\n      vnode = new VNode(\n        config.parsePlatformTagName(tag), data, children,\n        undefined, undefined, context\n      );\n    } else if ((!data || !data.pre) && isDef(Ctor = resolveAsset(context.$options, 'components', tag))) {\n      // component\n      vnode = createComponent(Ctor, data, context, children, tag);\n    } else {\n      // unknown or unlisted namespaced elements\n      // check at runtime because it may get assigned a namespace when its\n      // parent normalizes children\n      vnode = new VNode(\n        tag, data, children,\n        undefined, undefined, context\n      );\n    }\n  } else {\n    // direct component options / constructor\n    vnode = createComponent(tag, data, context, children);\n  }\n  if (Array.isArray(vnode)) {\n    return vnode\n  } else if (isDef(vnode)) {\n    if (isDef(ns)) { applyNS(vnode, ns); }\n    if (isDef(data)) { registerDeepBindings(data); }\n    return vnode\n  } else {\n    return createEmptyVNode()\n  }\n}\n\nfunction applyNS (vnode, ns, force) {\n  vnode.ns = ns;\n  if (vnode.tag === 'foreignObject') {\n    // use default namespace inside foreignObject\n    ns = undefined;\n    force = true;\n  }\n  if (isDef(vnode.children)) {\n    for (var i = 0, l = vnode.children.length; i < l; i++) {\n      var child = vnode.children[i];\n      if (isDef(child.tag) && (\n        isUndef(child.ns) || (isTrue(force) && child.tag !== 'svg'))) {\n        applyNS(child, ns, force);\n      }\n    }\n  }\n}\n\n// ref #5318\n// necessary to ensure parent re-render when deep bindings like :style and\n// :class are used on slot nodes\nfunction registerDeepBindings (data) {\n  if (isObject(data.style)) {\n    traverse(data.style);\n  }\n  if (isObject(data.class)) {\n    traverse(data.class);\n  }\n}\n\n/*  */\n\nfunction initRender (vm) {\n  vm._vnode = null; // the root of the child tree\n  vm._staticTrees = null; // v-once cached trees\n  var options = vm.$options;\n  var parentVnode = vm.$vnode = options._parentVnode; // the placeholder node in parent tree\n  var renderContext = parentVnode && parentVnode.context;\n  vm.$slots = resolveSlots(options._renderChildren, renderContext);\n  vm.$scopedSlots = emptyObject;\n  // bind the createElement fn to this instance\n  // so that we get proper render context inside it.\n  // args order: tag, data, children, normalizationType, alwaysNormalize\n  // internal version is used by render functions compiled from templates\n  vm._c = function (a, b, c, d) { return createElement(vm, a, b, c, d, false); };\n  // normalization is always applied for the public version, used in\n  // user-written render functions.\n  vm.$createElement = function (a, b, c, d) { return createElement(vm, a, b, c, d, true); };\n\n  // $attrs & $listeners are exposed for easier HOC creation.\n  // they need to be reactive so that HOCs using them are always updated\n  var parentData = parentVnode && parentVnode.data;\n\n  /* istanbul ignore else */\n  if (true) {\n    defineReactive$$1(vm, '$attrs', parentData && parentData.attrs || emptyObject, function () {\n      !isUpdatingChildComponent && warn(\"$attrs is readonly.\", vm);\n    }, true);\n    defineReactive$$1(vm, '$listeners', options._parentListeners || emptyObject, function () {\n      !isUpdatingChildComponent && warn(\"$listeners is readonly.\", vm);\n    }, true);\n  } else {}\n}\n\nvar currentRenderingInstance = null;\n\nfunction renderMixin (Vue) {\n  // install runtime convenience helpers\n  installRenderHelpers(Vue.prototype);\n\n  Vue.prototype.$nextTick = function (fn) {\n    return nextTick(fn, this)\n  };\n\n  Vue.prototype._render = function () {\n    var vm = this;\n    var ref = vm.$options;\n    var render = ref.render;\n    var _parentVnode = ref._parentVnode;\n\n    if (_parentVnode) {\n      vm.$scopedSlots = normalizeScopedSlots(\n        _parentVnode.data.scopedSlots,\n        vm.$slots,\n        vm.$scopedSlots\n      );\n    }\n\n    // set parent vnode. this allows render functions to have access\n    // to the data on the placeholder node.\n    vm.$vnode = _parentVnode;\n    // render self\n    var vnode;\n    try {\n      // There's no need to maintain a stack becaues all render fns are called\n      // separately from one another. Nested component's render fns are called\n      // when parent component is patched.\n      currentRenderingInstance = vm;\n      vnode = render.call(vm._renderProxy, vm.$createElement);\n    } catch (e) {\n      handleError(e, vm, \"render\");\n      // return error render result,\n      // or previous vnode to prevent render error causing blank component\n      /* istanbul ignore else */\n      if ( true && vm.$options.renderError) {\n        try {\n          vnode = vm.$options.renderError.call(vm._renderProxy, vm.$createElement, e);\n        } catch (e) {\n          handleError(e, vm, \"renderError\");\n          vnode = vm._vnode;\n        }\n      } else {\n        vnode = vm._vnode;\n      }\n    } finally {\n      currentRenderingInstance = null;\n    }\n    // if the returned array contains only a single node, allow it\n    if (Array.isArray(vnode) && vnode.length === 1) {\n      vnode = vnode[0];\n    }\n    // return empty vnode in case the render function errored out\n    if (!(vnode instanceof VNode)) {\n      if ( true && Array.isArray(vnode)) {\n        warn(\n          'Multiple root nodes returned from render function. Render function ' +\n          'should return a single root node.',\n          vm\n        );\n      }\n      vnode = createEmptyVNode();\n    }\n    // set parent\n    vnode.parent = _parentVnode;\n    return vnode\n  };\n}\n\n/*  */\n\nfunction ensureCtor (comp, base) {\n  if (\n    comp.__esModule ||\n    (hasSymbol && comp[Symbol.toStringTag] === 'Module')\n  ) {\n    comp = comp.default;\n  }\n  return isObject(comp)\n    ? base.extend(comp)\n    : comp\n}\n\nfunction createAsyncPlaceholder (\n  factory,\n  data,\n  context,\n  children,\n  tag\n) {\n  var node = createEmptyVNode();\n  node.asyncFactory = factory;\n  node.asyncMeta = { data: data, context: context, children: children, tag: tag };\n  return node\n}\n\nfunction resolveAsyncComponent (\n  factory,\n  baseCtor\n) {\n  if (isTrue(factory.error) && isDef(factory.errorComp)) {\n    return factory.errorComp\n  }\n\n  if (isDef(factory.resolved)) {\n    return factory.resolved\n  }\n\n  var owner = currentRenderingInstance;\n  if (owner && isDef(factory.owners) && factory.owners.indexOf(owner) === -1) {\n    // already pending\n    factory.owners.push(owner);\n  }\n\n  if (isTrue(factory.loading) && isDef(factory.loadingComp)) {\n    return factory.loadingComp\n  }\n\n  if (owner && !isDef(factory.owners)) {\n    var owners = factory.owners = [owner];\n    var sync = true;\n    var timerLoading = null;\n    var timerTimeout = null\n\n    ;(owner).$on('hook:destroyed', function () { return remove(owners, owner); });\n\n    var forceRender = function (renderCompleted) {\n      for (var i = 0, l = owners.length; i < l; i++) {\n        (owners[i]).$forceUpdate();\n      }\n\n      if (renderCompleted) {\n        owners.length = 0;\n        if (timerLoading !== null) {\n          clearTimeout(timerLoading);\n          timerLoading = null;\n        }\n        if (timerTimeout !== null) {\n          clearTimeout(timerTimeout);\n          timerTimeout = null;\n        }\n      }\n    };\n\n    var resolve = once(function (res) {\n      // cache resolved\n      factory.resolved = ensureCtor(res, baseCtor);\n      // invoke callbacks only if this is not a synchronous resolve\n      // (async resolves are shimmed as synchronous during SSR)\n      if (!sync) {\n        forceRender(true);\n      } else {\n        owners.length = 0;\n      }\n    });\n\n    var reject = once(function (reason) {\n       true && warn(\n        \"Failed to resolve async component: \" + (String(factory)) +\n        (reason ? (\"\\nReason: \" + reason) : '')\n      );\n      if (isDef(factory.errorComp)) {\n        factory.error = true;\n        forceRender(true);\n      }\n    });\n\n    var res = factory(resolve, reject);\n\n    if (isObject(res)) {\n      if (isPromise(res)) {\n        // () => Promise\n        if (isUndef(factory.resolved)) {\n          res.then(resolve, reject);\n        }\n      } else if (isPromise(res.component)) {\n        res.component.then(resolve, reject);\n\n        if (isDef(res.error)) {\n          factory.errorComp = ensureCtor(res.error, baseCtor);\n        }\n\n        if (isDef(res.loading)) {\n          factory.loadingComp = ensureCtor(res.loading, baseCtor);\n          if (res.delay === 0) {\n            factory.loading = true;\n          } else {\n            timerLoading = setTimeout(function () {\n              timerLoading = null;\n              if (isUndef(factory.resolved) && isUndef(factory.error)) {\n                factory.loading = true;\n                forceRender(false);\n              }\n            }, res.delay || 200);\n          }\n        }\n\n        if (isDef(res.timeout)) {\n          timerTimeout = setTimeout(function () {\n            timerTimeout = null;\n            if (isUndef(factory.resolved)) {\n              reject(\n                 true\n                  ? (\"timeout (\" + (res.timeout) + \"ms)\")\n                  : undefined\n              );\n            }\n          }, res.timeout);\n        }\n      }\n    }\n\n    sync = false;\n    // return in case resolved synchronously\n    return factory.loading\n      ? factory.loadingComp\n      : factory.resolved\n  }\n}\n\n/*  */\n\nfunction isAsyncPlaceholder (node) {\n  return node.isComment && node.asyncFactory\n}\n\n/*  */\n\nfunction getFirstComponentChild (children) {\n  if (Array.isArray(children)) {\n    for (var i = 0; i < children.length; i++) {\n      var c = children[i];\n      if (isDef(c) && (isDef(c.componentOptions) || isAsyncPlaceholder(c))) {\n        return c\n      }\n    }\n  }\n}\n\n/*  */\n\n/*  */\n\nfunction initEvents (vm) {\n  vm._events = Object.create(null);\n  vm._hasHookEvent = false;\n  // init parent attached events\n  var listeners = vm.$options._parentListeners;\n  if (listeners) {\n    updateComponentListeners(vm, listeners);\n  }\n}\n\nvar target;\n\nfunction add (event, fn) {\n  target.$on(event, fn);\n}\n\nfunction remove$1 (event, fn) {\n  target.$off(event, fn);\n}\n\nfunction createOnceHandler (event, fn) {\n  var _target = target;\n  return function onceHandler () {\n    var res = fn.apply(null, arguments);\n    if (res !== null) {\n      _target.$off(event, onceHandler);\n    }\n  }\n}\n\nfunction updateComponentListeners (\n  vm,\n  listeners,\n  oldListeners\n) {\n  target = vm;\n  updateListeners(listeners, oldListeners || {}, add, remove$1, createOnceHandler, vm);\n  target = undefined;\n}\n\nfunction eventsMixin (Vue) {\n  var hookRE = /^hook:/;\n  Vue.prototype.$on = function (event, fn) {\n    var vm = this;\n    if (Array.isArray(event)) {\n      for (var i = 0, l = event.length; i < l; i++) {\n        vm.$on(event[i], fn);\n      }\n    } else {\n      (vm._events[event] || (vm._events[event] = [])).push(fn);\n      // optimize hook:event cost by using a boolean flag marked at registration\n      // instead of a hash lookup\n      if (hookRE.test(event)) {\n        vm._hasHookEvent = true;\n      }\n    }\n    return vm\n  };\n\n  Vue.prototype.$once = function (event, fn) {\n    var vm = this;\n    function on () {\n      vm.$off(event, on);\n      fn.apply(vm, arguments);\n    }\n    on.fn = fn;\n    vm.$on(event, on);\n    return vm\n  };\n\n  Vue.prototype.$off = function (event, fn) {\n    var vm = this;\n    // all\n    if (!arguments.length) {\n      vm._events = Object.create(null);\n      return vm\n    }\n    // array of events\n    if (Array.isArray(event)) {\n      for (var i$1 = 0, l = event.length; i$1 < l; i$1++) {\n        vm.$off(event[i$1], fn);\n      }\n      return vm\n    }\n    // specific event\n    var cbs = vm._events[event];\n    if (!cbs) {\n      return vm\n    }\n    if (!fn) {\n      vm._events[event] = null;\n      return vm\n    }\n    // specific handler\n    var cb;\n    var i = cbs.length;\n    while (i--) {\n      cb = cbs[i];\n      if (cb === fn || cb.fn === fn) {\n        cbs.splice(i, 1);\n        break\n      }\n    }\n    return vm\n  };\n\n  Vue.prototype.$emit = function (event) {\n    var vm = this;\n    if (true) {\n      var lowerCaseEvent = event.toLowerCase();\n      if (lowerCaseEvent !== event && vm._events[lowerCaseEvent]) {\n        tip(\n          \"Event \\\"\" + lowerCaseEvent + \"\\\" is emitted in component \" +\n          (formatComponentName(vm)) + \" but the handler is registered for \\\"\" + event + \"\\\". \" +\n          \"Note that HTML attributes are case-insensitive and you cannot use \" +\n          \"v-on to listen to camelCase events when using in-DOM templates. \" +\n          \"You should probably use \\\"\" + (hyphenate(event)) + \"\\\" instead of \\\"\" + event + \"\\\".\"\n        );\n      }\n    }\n    var cbs = vm._events[event];\n    if (cbs) {\n      cbs = cbs.length > 1 ? toArray(cbs) : cbs;\n      var args = toArray(arguments, 1);\n      var info = \"event handler for \\\"\" + event + \"\\\"\";\n      for (var i = 0, l = cbs.length; i < l; i++) {\n        invokeWithErrorHandling(cbs[i], vm, args, vm, info);\n      }\n    }\n    return vm\n  };\n}\n\n/*  */\n\nvar activeInstance = null;\nvar isUpdatingChildComponent = false;\n\nfunction setActiveInstance(vm) {\n  var prevActiveInstance = activeInstance;\n  activeInstance = vm;\n  return function () {\n    activeInstance = prevActiveInstance;\n  }\n}\n\nfunction initLifecycle (vm) {\n  var options = vm.$options;\n\n  // locate first non-abstract parent\n  var parent = options.parent;\n  if (parent && !options.abstract) {\n    while (parent.$options.abstract && parent.$parent) {\n      parent = parent.$parent;\n    }\n    parent.$children.push(vm);\n  }\n\n  vm.$parent = parent;\n  vm.$root = parent ? parent.$root : vm;\n\n  vm.$children = [];\n  vm.$refs = {};\n\n  vm._watcher = null;\n  vm._inactive = null;\n  vm._directInactive = false;\n  vm._isMounted = false;\n  vm._isDestroyed = false;\n  vm._isBeingDestroyed = false;\n}\n\nfunction lifecycleMixin (Vue) {\n  Vue.prototype._update = function (vnode, hydrating) {\n    var vm = this;\n    var prevEl = vm.$el;\n    var prevVnode = vm._vnode;\n    var restoreActiveInstance = setActiveInstance(vm);\n    vm._vnode = vnode;\n    // Vue.prototype.__patch__ is injected in entry points\n    // based on the rendering backend used.\n    if (!prevVnode) {\n      // initial render\n      vm.$el = vm.__patch__(vm.$el, vnode, hydrating, false /* removeOnly */);\n    } else {\n      // updates\n      vm.$el = vm.__patch__(prevVnode, vnode);\n    }\n    restoreActiveInstance();\n    // update __vue__ reference\n    if (prevEl) {\n      prevEl.__vue__ = null;\n    }\n    if (vm.$el) {\n      vm.$el.__vue__ = vm;\n    }\n    // if parent is an HOC, update its $el as well\n    if (vm.$vnode && vm.$parent && vm.$vnode === vm.$parent._vnode) {\n      vm.$parent.$el = vm.$el;\n    }\n    // updated hook is called by the scheduler to ensure that children are\n    // updated in a parent's updated hook.\n  };\n\n  Vue.prototype.$forceUpdate = function () {\n    var vm = this;\n    if (vm._watcher) {\n      vm._watcher.update();\n    }\n  };\n\n  Vue.prototype.$destroy = function () {\n    var vm = this;\n    if (vm._isBeingDestroyed) {\n      return\n    }\n    callHook(vm, 'beforeDestroy');\n    vm._isBeingDestroyed = true;\n    // remove self from parent\n    var parent = vm.$parent;\n    if (parent && !parent._isBeingDestroyed && !vm.$options.abstract) {\n      remove(parent.$children, vm);\n    }\n    // teardown watchers\n    if (vm._watcher) {\n      vm._watcher.teardown();\n    }\n    var i = vm._watchers.length;\n    while (i--) {\n      vm._watchers[i].teardown();\n    }\n    // remove reference from data ob\n    // frozen object may not have observer.\n    if (vm._data.__ob__) {\n      vm._data.__ob__.vmCount--;\n    }\n    // call the last hook...\n    vm._isDestroyed = true;\n    // invoke destroy hooks on current rendered tree\n    vm.__patch__(vm._vnode, null);\n    // fire destroyed hook\n    callHook(vm, 'destroyed');\n    // turn off all instance listeners.\n    vm.$off();\n    // remove __vue__ reference\n    if (vm.$el) {\n      vm.$el.__vue__ = null;\n    }\n    // release circular reference (#6759)\n    if (vm.$vnode) {\n      vm.$vnode.parent = null;\n    }\n  };\n}\n\nfunction updateChildComponent (\n  vm,\n  propsData,\n  listeners,\n  parentVnode,\n  renderChildren\n) {\n  if (true) {\n    isUpdatingChildComponent = true;\n  }\n\n  // determine whether component has slot children\n  // we need to do this before overwriting $options._renderChildren.\n\n  // check if there are dynamic scopedSlots (hand-written or compiled but with\n  // dynamic slot names). Static scoped slots compiled from template has the\n  // \"$stable\" marker.\n  var newScopedSlots = parentVnode.data.scopedSlots;\n  var oldScopedSlots = vm.$scopedSlots;\n  var hasDynamicScopedSlot = !!(\n    (newScopedSlots && !newScopedSlots.$stable) ||\n    (oldScopedSlots !== emptyObject && !oldScopedSlots.$stable) ||\n    (newScopedSlots && vm.$scopedSlots.$key !== newScopedSlots.$key)\n  );\n\n  // Any static slot children from the parent may have changed during parent's\n  // update. Dynamic scoped slots may also have changed. In such cases, a forced\n  // update is necessary to ensure correctness.\n  var needsForceUpdate = !!(\n    renderChildren ||               // has new static slots\n    vm.$options._renderChildren ||  // has old static slots\n    hasDynamicScopedSlot\n  );\n\n  vm.$options._parentVnode = parentVnode;\n  vm.$vnode = parentVnode; // update vm's placeholder node without re-render\n\n  if (vm._vnode) { // update child tree's parent\n    vm._vnode.parent = parentVnode;\n  }\n  vm.$options._renderChildren = renderChildren;\n\n  // update $attrs and $listeners hash\n  // these are also reactive so they may trigger child update if the child\n  // used them during render\n  vm.$attrs = parentVnode.data.attrs || emptyObject;\n  vm.$listeners = listeners || emptyObject;\n\n  // update props\n  if (propsData && vm.$options.props) {\n    toggleObserving(false);\n    var props = vm._props;\n    var propKeys = vm.$options._propKeys || [];\n    for (var i = 0; i < propKeys.length; i++) {\n      var key = propKeys[i];\n      var propOptions = vm.$options.props; // wtf flow?\n      props[key] = validateProp(key, propOptions, propsData, vm);\n    }\n    toggleObserving(true);\n    // keep a copy of raw propsData\n    vm.$options.propsData = propsData;\n  }\n\n  // update listeners\n  listeners = listeners || emptyObject;\n  var oldListeners = vm.$options._parentListeners;\n  vm.$options._parentListeners = listeners;\n  updateComponentListeners(vm, listeners, oldListeners);\n\n  // resolve slots + force update if has children\n  if (needsForceUpdate) {\n    vm.$slots = resolveSlots(renderChildren, parentVnode.context);\n    vm.$forceUpdate();\n  }\n\n  if (true) {\n    isUpdatingChildComponent = false;\n  }\n}\n\nfunction isInInactiveTree (vm) {\n  while (vm && (vm = vm.$parent)) {\n    if (vm._inactive) { return true }\n  }\n  return false\n}\n\nfunction activateChildComponent (vm, direct) {\n  if (direct) {\n    vm._directInactive = false;\n    if (isInInactiveTree(vm)) {\n      return\n    }\n  } else if (vm._directInactive) {\n    return\n  }\n  if (vm._inactive || vm._inactive === null) {\n    vm._inactive = false;\n    for (var i = 0; i < vm.$children.length; i++) {\n      activateChildComponent(vm.$children[i]);\n    }\n    callHook(vm, 'activated');\n  }\n}\n\nfunction deactivateChildComponent (vm, direct) {\n  if (direct) {\n    vm._directInactive = true;\n    if (isInInactiveTree(vm)) {\n      return\n    }\n  }\n  if (!vm._inactive) {\n    vm._inactive = true;\n    for (var i = 0; i < vm.$children.length; i++) {\n      deactivateChildComponent(vm.$children[i]);\n    }\n    callHook(vm, 'deactivated');\n  }\n}\n\nfunction callHook (vm, hook) {\n  // #7573 disable dep collection when invoking lifecycle hooks\n  pushTarget();\n  var handlers = vm.$options[hook];\n  var info = hook + \" hook\";\n  if (handlers) {\n    for (var i = 0, j = handlers.length; i < j; i++) {\n      invokeWithErrorHandling(handlers[i], vm, null, vm, info);\n    }\n  }\n  if (vm._hasHookEvent) {\n    vm.$emit('hook:' + hook);\n  }\n  popTarget();\n}\n\n/*  */\n\nvar MAX_UPDATE_COUNT = 100;\n\nvar queue = [];\nvar activatedChildren = [];\nvar has = {};\nvar circular = {};\nvar waiting = false;\nvar flushing = false;\nvar index = 0;\n\n/**\n * Reset the scheduler's state.\n */\nfunction resetSchedulerState () {\n  index = queue.length = activatedChildren.length = 0;\n  has = {};\n  if (true) {\n    circular = {};\n  }\n  waiting = flushing = false;\n}\n\n// Async edge case #6566 requires saving the timestamp when event listeners are\n// attached. However, calling performance.now() has a perf overhead especially\n// if the page has thousands of event listeners. Instead, we take a timestamp\n// every time the scheduler flushes and use that for all event listeners\n// attached during that flush.\nvar currentFlushTimestamp = 0;\n\n// Async edge case fix requires storing an event listener's attach timestamp.\nvar getNow = Date.now;\n\n// Determine what event timestamp the browser is using. Annoyingly, the\n// timestamp can either be hi-res (relative to page load) or low-res\n// (relative to UNIX epoch), so in order to compare time we have to use the\n// same timestamp type when saving the flush timestamp.\n// All IE versions use low-res event timestamps, and have problematic clock\n// implementations (#9632)\nif (inBrowser && !isIE) {\n  var performance = window.performance;\n  if (\n    performance &&\n    typeof performance.now === 'function' &&\n    getNow() > document.createEvent('Event').timeStamp\n  ) {\n    // if the event timestamp, although evaluated AFTER the Date.now(), is\n    // smaller than it, it means the event is using a hi-res timestamp,\n    // and we need to use the hi-res version for event listener timestamps as\n    // well.\n    getNow = function () { return performance.now(); };\n  }\n}\n\n/**\n * Flush both queues and run the watchers.\n */\nfunction flushSchedulerQueue () {\n  currentFlushTimestamp = getNow();\n  flushing = true;\n  var watcher, id;\n\n  // Sort queue before flush.\n  // This ensures that:\n  // 1. Components are updated from parent to child. (because parent is always\n  //    created before the child)\n  // 2. A component's user watchers are run before its render watcher (because\n  //    user watchers are created before the render watcher)\n  // 3. If a component is destroyed during a parent component's watcher run,\n  //    its watchers can be skipped.\n  queue.sort(function (a, b) { return a.id - b.id; });\n\n  // do not cache length because more watchers might be pushed\n  // as we run existing watchers\n  for (index = 0; index < queue.length; index++) {\n    watcher = queue[index];\n    if (watcher.before) {\n      watcher.before();\n    }\n    id = watcher.id;\n    has[id] = null;\n    watcher.run();\n    // in dev build, check and stop circular updates.\n    if ( true && has[id] != null) {\n      circular[id] = (circular[id] || 0) + 1;\n      if (circular[id] > MAX_UPDATE_COUNT) {\n        warn(\n          'You may have an infinite update loop ' + (\n            watcher.user\n              ? (\"in watcher with expression \\\"\" + (watcher.expression) + \"\\\"\")\n              : \"in a component render function.\"\n          ),\n          watcher.vm\n        );\n        break\n      }\n    }\n  }\n\n  // keep copies of post queues before resetting state\n  var activatedQueue = activatedChildren.slice();\n  var updatedQueue = queue.slice();\n\n  resetSchedulerState();\n\n  // call component updated and activated hooks\n  callActivatedHooks(activatedQueue);\n  callUpdatedHooks(updatedQueue);\n\n  // devtool hook\n  /* istanbul ignore if */\n  if (devtools && config.devtools) {\n    devtools.emit('flush');\n  }\n}\n\nfunction callUpdatedHooks (queue) {\n  var i = queue.length;\n  while (i--) {\n    var watcher = queue[i];\n    var vm = watcher.vm;\n    if (vm._watcher === watcher && vm._isMounted && !vm._isDestroyed) {\n      callHook(vm, 'updated');\n    }\n  }\n}\n\n/**\n * Queue a kept-alive component that was activated during patch.\n * The queue will be processed after the entire tree has been patched.\n */\nfunction queueActivatedComponent (vm) {\n  // setting _inactive to false here so that a render function can\n  // rely on checking whether it's in an inactive tree (e.g. router-view)\n  vm._inactive = false;\n  activatedChildren.push(vm);\n}\n\nfunction callActivatedHooks (queue) {\n  for (var i = 0; i < queue.length; i++) {\n    queue[i]._inactive = true;\n    activateChildComponent(queue[i], true /* true */);\n  }\n}\n\n/**\n * Push a watcher into the watcher queue.\n * Jobs with duplicate IDs will be skipped unless it's\n * pushed when the queue is being flushed.\n */\nfunction queueWatcher (watcher) {\n  var id = watcher.id;\n  if (has[id] == null) {\n    has[id] = true;\n    if (!flushing) {\n      queue.push(watcher);\n    } else {\n      // if already flushing, splice the watcher based on its id\n      // if already past its id, it will be run next immediately.\n      var i = queue.length - 1;\n      while (i > index && queue[i].id > watcher.id) {\n        i--;\n      }\n      queue.splice(i + 1, 0, watcher);\n    }\n    // queue the flush\n    if (!waiting) {\n      waiting = true;\n\n      if ( true && !config.async) {\n        flushSchedulerQueue();\n        return\n      }\n      nextTick(flushSchedulerQueue);\n    }\n  }\n}\n\n/*  */\n\n\n\nvar uid$2 = 0;\n\n/**\n * A watcher parses an expression, collects dependencies,\n * and fires callback when the expression value changes.\n * This is used for both the $watch() api and directives.\n */\nvar Watcher = function Watcher (\n  vm,\n  expOrFn,\n  cb,\n  options,\n  isRenderWatcher\n) {\n  this.vm = vm;\n  if (isRenderWatcher) {\n    vm._watcher = this;\n  }\n  vm._watchers.push(this);\n  // options\n  if (options) {\n    this.deep = !!options.deep;\n    this.user = !!options.user;\n    this.lazy = !!options.lazy;\n    this.sync = !!options.sync;\n    this.before = options.before;\n  } else {\n    this.deep = this.user = this.lazy = this.sync = false;\n  }\n  this.cb = cb;\n  this.id = ++uid$2; // uid for batching\n  this.active = true;\n  this.dirty = this.lazy; // for lazy watchers\n  this.deps = [];\n  this.newDeps = [];\n  this.depIds = new _Set();\n  this.newDepIds = new _Set();\n  this.expression =  true\n    ? expOrFn.toString()\n    : undefined;\n  // parse expression for getter\n  if (typeof expOrFn === 'function') {\n    this.getter = expOrFn;\n  } else {\n    this.getter = parsePath(expOrFn);\n    if (!this.getter) {\n      this.getter = noop;\n       true && warn(\n        \"Failed watching path: \\\"\" + expOrFn + \"\\\" \" +\n        'Watcher only accepts simple dot-delimited paths. ' +\n        'For full control, use a function instead.',\n        vm\n      );\n    }\n  }\n  this.value = this.lazy\n    ? undefined\n    : this.get();\n};\n\n/**\n * Evaluate the getter, and re-collect dependencies.\n */\nWatcher.prototype.get = function get () {\n  pushTarget(this);\n  var value;\n  var vm = this.vm;\n  try {\n    value = this.getter.call(vm, vm);\n  } catch (e) {\n    if (this.user) {\n      handleError(e, vm, (\"getter for watcher \\\"\" + (this.expression) + \"\\\"\"));\n    } else {\n      throw e\n    }\n  } finally {\n    // \"touch\" every property so they are all tracked as\n    // dependencies for deep watching\n    if (this.deep) {\n      traverse(value);\n    }\n    popTarget();\n    this.cleanupDeps();\n  }\n  return value\n};\n\n/**\n * Add a dependency to this directive.\n */\nWatcher.prototype.addDep = function addDep (dep) {\n  var id = dep.id;\n  if (!this.newDepIds.has(id)) {\n    this.newDepIds.add(id);\n    this.newDeps.push(dep);\n    if (!this.depIds.has(id)) {\n      dep.addSub(this);\n    }\n  }\n};\n\n/**\n * Clean up for dependency collection.\n */\nWatcher.prototype.cleanupDeps = function cleanupDeps () {\n  var i = this.deps.length;\n  while (i--) {\n    var dep = this.deps[i];\n    if (!this.newDepIds.has(dep.id)) {\n      dep.removeSub(this);\n    }\n  }\n  var tmp = this.depIds;\n  this.depIds = this.newDepIds;\n  this.newDepIds = tmp;\n  this.newDepIds.clear();\n  tmp = this.deps;\n  this.deps = this.newDeps;\n  this.newDeps = tmp;\n  this.newDeps.length = 0;\n};\n\n/**\n * Subscriber interface.\n * Will be called when a dependency changes.\n */\nWatcher.prototype.update = function update () {\n  /* istanbul ignore else */\n  if (this.lazy) {\n    this.dirty = true;\n  } else if (this.sync) {\n    this.run();\n  } else {\n    queueWatcher(this);\n  }\n};\n\n/**\n * Scheduler job interface.\n * Will be called by the scheduler.\n */\nWatcher.prototype.run = function run () {\n  if (this.active) {\n    var value = this.get();\n    if (\n      value !== this.value ||\n      // Deep watchers and watchers on Object/Arrays should fire even\n      // when the value is the same, because the value may\n      // have mutated.\n      isObject(value) ||\n      this.deep\n    ) {\n      // set new value\n      var oldValue = this.value;\n      this.value = value;\n      if (this.user) {\n        try {\n          this.cb.call(this.vm, value, oldValue);\n        } catch (e) {\n          handleError(e, this.vm, (\"callback for watcher \\\"\" + (this.expression) + \"\\\"\"));\n        }\n      } else {\n        this.cb.call(this.vm, value, oldValue);\n      }\n    }\n  }\n};\n\n/**\n * Evaluate the value of the watcher.\n * This only gets called for lazy watchers.\n */\nWatcher.prototype.evaluate = function evaluate () {\n  this.value = this.get();\n  this.dirty = false;\n};\n\n/**\n * Depend on all deps collected by this watcher.\n */\nWatcher.prototype.depend = function depend () {\n  var i = this.deps.length;\n  while (i--) {\n    this.deps[i].depend();\n  }\n};\n\n/**\n * Remove self from all dependencies' subscriber list.\n */\nWatcher.prototype.teardown = function teardown () {\n  if (this.active) {\n    // remove self from vm's watcher list\n    // this is a somewhat expensive operation so we skip it\n    // if the vm is being destroyed.\n    if (!this.vm._isBeingDestroyed) {\n      remove(this.vm._watchers, this);\n    }\n    var i = this.deps.length;\n    while (i--) {\n      this.deps[i].removeSub(this);\n    }\n    this.active = false;\n  }\n};\n\n/*  */\n\nvar sharedPropertyDefinition = {\n  enumerable: true,\n  configurable: true,\n  get: noop,\n  set: noop\n};\n\nfunction proxy (target, sourceKey, key) {\n  sharedPropertyDefinition.get = function proxyGetter () {\n    return this[sourceKey][key]\n  };\n  sharedPropertyDefinition.set = function proxySetter (val) {\n    this[sourceKey][key] = val;\n  };\n  Object.defineProperty(target, key, sharedPropertyDefinition);\n}\n\nfunction initState (vm) {\n  vm._watchers = [];\n  var opts = vm.$options;\n  if (opts.props) { initProps(vm, opts.props); }\n  if (opts.methods) { initMethods(vm, opts.methods); }\n  if (opts.data) {\n    initData(vm);\n  } else {\n    observe(vm._data = {}, true /* asRootData */);\n  }\n  if (opts.computed) { initComputed(vm, opts.computed); }\n  if (opts.watch && opts.watch !== nativeWatch) {\n    initWatch(vm, opts.watch);\n  }\n}\n\nfunction initProps (vm, propsOptions) {\n  var propsData = vm.$options.propsData || {};\n  var props = vm._props = {};\n  // cache prop keys so that future props updates can iterate using Array\n  // instead of dynamic object key enumeration.\n  var keys = vm.$options._propKeys = [];\n  var isRoot = !vm.$parent;\n  // root instance props should be converted\n  if (!isRoot) {\n    toggleObserving(false);\n  }\n  var loop = function ( key ) {\n    keys.push(key);\n    var value = validateProp(key, propsOptions, propsData, vm);\n    /* istanbul ignore else */\n    if (true) {\n      var hyphenatedKey = hyphenate(key);\n      if (isReservedAttribute(hyphenatedKey) ||\n          config.isReservedAttr(hyphenatedKey)) {\n        warn(\n          (\"\\\"\" + hyphenatedKey + \"\\\" is a reserved attribute and cannot be used as component prop.\"),\n          vm\n        );\n      }\n      defineReactive$$1(props, key, value, function () {\n        if (!isRoot && !isUpdatingChildComponent) {\n          {\n            if(vm.mpHost === 'mp-baidu'){//百度 observer 在 setData callback 之后触发，直接忽略该 warn\n                return\n            }\n            //fixed by xxxxxx __next_tick_pending,uni://form-field 时不告警\n            if(\n                key === 'value' && \n                Array.isArray(vm.$options.behaviors) &&\n                vm.$options.behaviors.indexOf('uni://form-field') !== -1\n              ){\n              return\n            }\n            if(vm._getFormData){\n              return\n            }\n            var $parent = vm.$parent;\n            while($parent){\n              if($parent.__next_tick_pending){\n                return  \n              }\n              $parent = $parent.$parent;\n            }\n          }\n          warn(\n            \"Avoid mutating a prop directly since the value will be \" +\n            \"overwritten whenever the parent component re-renders. \" +\n            \"Instead, use a data or computed property based on the prop's \" +\n            \"value. Prop being mutated: \\\"\" + key + \"\\\"\",\n            vm\n          );\n        }\n      });\n    } else {}\n    // static props are already proxied on the component's prototype\n    // during Vue.extend(). We only need to proxy props defined at\n    // instantiation here.\n    if (!(key in vm)) {\n      proxy(vm, \"_props\", key);\n    }\n  };\n\n  for (var key in propsOptions) loop( key );\n  toggleObserving(true);\n}\n\nfunction initData (vm) {\n  var data = vm.$options.data;\n  data = vm._data = typeof data === 'function'\n    ? getData(data, vm)\n    : data || {};\n  if (!isPlainObject(data)) {\n    data = {};\n     true && warn(\n      'data functions should return an object:\\n' +\n      'https://vuejs.org/v2/guide/components.html#data-Must-Be-a-Function',\n      vm\n    );\n  }\n  // proxy data on instance\n  var keys = Object.keys(data);\n  var props = vm.$options.props;\n  var methods = vm.$options.methods;\n  var i = keys.length;\n  while (i--) {\n    var key = keys[i];\n    if (true) {\n      if (methods && hasOwn(methods, key)) {\n        warn(\n          (\"Method \\\"\" + key + \"\\\" has already been defined as a data property.\"),\n          vm\n        );\n      }\n    }\n    if (props && hasOwn(props, key)) {\n       true && warn(\n        \"The data property \\\"\" + key + \"\\\" is already declared as a prop. \" +\n        \"Use prop default value instead.\",\n        vm\n      );\n    } else if (!isReserved(key)) {\n      proxy(vm, \"_data\", key);\n    }\n  }\n  // observe data\n  observe(data, true /* asRootData */);\n}\n\nfunction getData (data, vm) {\n  // #7573 disable dep collection when invoking data getters\n  pushTarget();\n  try {\n    return data.call(vm, vm)\n  } catch (e) {\n    handleError(e, vm, \"data()\");\n    return {}\n  } finally {\n    popTarget();\n  }\n}\n\nvar computedWatcherOptions = { lazy: true };\n\nfunction initComputed (vm, computed) {\n  // $flow-disable-line\n  var watchers = vm._computedWatchers = Object.create(null);\n  // computed properties are just getters during SSR\n  var isSSR = isServerRendering();\n\n  for (var key in computed) {\n    var userDef = computed[key];\n    var getter = typeof userDef === 'function' ? userDef : userDef.get;\n    if ( true && getter == null) {\n      warn(\n        (\"Getter is missing for computed property \\\"\" + key + \"\\\".\"),\n        vm\n      );\n    }\n\n    if (!isSSR) {\n      // create internal watcher for the computed property.\n      watchers[key] = new Watcher(\n        vm,\n        getter || noop,\n        noop,\n        computedWatcherOptions\n      );\n    }\n\n    // component-defined computed properties are already defined on the\n    // component prototype. We only need to define computed properties defined\n    // at instantiation here.\n    if (!(key in vm)) {\n      defineComputed(vm, key, userDef);\n    } else if (true) {\n      if (key in vm.$data) {\n        warn((\"The computed property \\\"\" + key + \"\\\" is already defined in data.\"), vm);\n      } else if (vm.$options.props && key in vm.$options.props) {\n        warn((\"The computed property \\\"\" + key + \"\\\" is already defined as a prop.\"), vm);\n      }\n    }\n  }\n}\n\nfunction defineComputed (\n  target,\n  key,\n  userDef\n) {\n  var shouldCache = !isServerRendering();\n  if (typeof userDef === 'function') {\n    sharedPropertyDefinition.get = shouldCache\n      ? createComputedGetter(key)\n      : createGetterInvoker(userDef);\n    sharedPropertyDefinition.set = noop;\n  } else {\n    sharedPropertyDefinition.get = userDef.get\n      ? shouldCache && userDef.cache !== false\n        ? createComputedGetter(key)\n        : createGetterInvoker(userDef.get)\n      : noop;\n    sharedPropertyDefinition.set = userDef.set || noop;\n  }\n  if ( true &&\n      sharedPropertyDefinition.set === noop) {\n    sharedPropertyDefinition.set = function () {\n      warn(\n        (\"Computed property \\\"\" + key + \"\\\" was assigned to but it has no setter.\"),\n        this\n      );\n    };\n  }\n  Object.defineProperty(target, key, sharedPropertyDefinition);\n}\n\nfunction createComputedGetter (key) {\n  return function computedGetter () {\n    var watcher = this._computedWatchers && this._computedWatchers[key];\n    if (watcher) {\n      if (watcher.dirty) {\n        watcher.evaluate();\n      }\n      if (Dep.SharedObject.target) {// fixed by xxxxxx\n        watcher.depend();\n      }\n      return watcher.value\n    }\n  }\n}\n\nfunction createGetterInvoker(fn) {\n  return function computedGetter () {\n    return fn.call(this, this)\n  }\n}\n\nfunction initMethods (vm, methods) {\n  var props = vm.$options.props;\n  for (var key in methods) {\n    if (true) {\n      if (typeof methods[key] !== 'function') {\n        warn(\n          \"Method \\\"\" + key + \"\\\" has type \\\"\" + (typeof methods[key]) + \"\\\" in the component definition. \" +\n          \"Did you reference the function correctly?\",\n          vm\n        );\n      }\n      if (props && hasOwn(props, key)) {\n        warn(\n          (\"Method \\\"\" + key + \"\\\" has already been defined as a prop.\"),\n          vm\n        );\n      }\n      if ((key in vm) && isReserved(key)) {\n        warn(\n          \"Method \\\"\" + key + \"\\\" conflicts with an existing Vue instance method. \" +\n          \"Avoid defining component methods that start with _ or $.\"\n        );\n      }\n    }\n    vm[key] = typeof methods[key] !== 'function' ? noop : bind(methods[key], vm);\n  }\n}\n\nfunction initWatch (vm, watch) {\n  for (var key in watch) {\n    var handler = watch[key];\n    if (Array.isArray(handler)) {\n      for (var i = 0; i < handler.length; i++) {\n        createWatcher(vm, key, handler[i]);\n      }\n    } else {\n      createWatcher(vm, key, handler);\n    }\n  }\n}\n\nfunction createWatcher (\n  vm,\n  expOrFn,\n  handler,\n  options\n) {\n  if (isPlainObject(handler)) {\n    options = handler;\n    handler = handler.handler;\n  }\n  if (typeof handler === 'string') {\n    handler = vm[handler];\n  }\n  return vm.$watch(expOrFn, handler, options)\n}\n\nfunction stateMixin (Vue) {\n  // flow somehow has problems with directly declared definition object\n  // when using Object.defineProperty, so we have to procedurally build up\n  // the object here.\n  var dataDef = {};\n  dataDef.get = function () { return this._data };\n  var propsDef = {};\n  propsDef.get = function () { return this._props };\n  if (true) {\n    dataDef.set = function () {\n      warn(\n        'Avoid replacing instance root $data. ' +\n        'Use nested data properties instead.',\n        this\n      );\n    };\n    propsDef.set = function () {\n      warn(\"$props is readonly.\", this);\n    };\n  }\n  Object.defineProperty(Vue.prototype, '$data', dataDef);\n  Object.defineProperty(Vue.prototype, '$props', propsDef);\n\n  Vue.prototype.$set = set;\n  Vue.prototype.$delete = del;\n\n  Vue.prototype.$watch = function (\n    expOrFn,\n    cb,\n    options\n  ) {\n    var vm = this;\n    if (isPlainObject(cb)) {\n      return createWatcher(vm, expOrFn, cb, options)\n    }\n    options = options || {};\n    options.user = true;\n    var watcher = new Watcher(vm, expOrFn, cb, options);\n    if (options.immediate) {\n      try {\n        cb.call(vm, watcher.value);\n      } catch (error) {\n        handleError(error, vm, (\"callback for immediate watcher \\\"\" + (watcher.expression) + \"\\\"\"));\n      }\n    }\n    return function unwatchFn () {\n      watcher.teardown();\n    }\n  };\n}\n\n/*  */\n\nvar uid$3 = 0;\n\nfunction initMixin (Vue) {\n  Vue.prototype._init = function (options) {\n    var vm = this;\n    // a uid\n    vm._uid = uid$3++;\n\n    var startTag, endTag;\n    /* istanbul ignore if */\n    if ( true && config.performance && mark) {\n      startTag = \"vue-perf-start:\" + (vm._uid);\n      endTag = \"vue-perf-end:\" + (vm._uid);\n      mark(startTag);\n    }\n\n    // a flag to avoid this being observed\n    vm._isVue = true;\n    // merge options\n    if (options && options._isComponent) {\n      // optimize internal component instantiation\n      // since dynamic options merging is pretty slow, and none of the\n      // internal component options needs special treatment.\n      initInternalComponent(vm, options);\n    } else {\n      vm.$options = mergeOptions(\n        resolveConstructorOptions(vm.constructor),\n        options || {},\n        vm\n      );\n    }\n    /* istanbul ignore else */\n    if (true) {\n      initProxy(vm);\n    } else {}\n    // expose real self\n    vm._self = vm;\n    initLifecycle(vm);\n    initEvents(vm);\n    initRender(vm);\n    callHook(vm, 'beforeCreate');\n    vm.mpHost !== 'mp-toutiao' && initInjections(vm); // resolve injections before data/props  \n    initState(vm);\n    vm.mpHost !== 'mp-toutiao' && initProvide(vm); // resolve provide after data/props\n    vm.mpHost !== 'mp-toutiao' && callHook(vm, 'created');      \n\n    /* istanbul ignore if */\n    if ( true && config.performance && mark) {\n      vm._name = formatComponentName(vm, false);\n      mark(endTag);\n      measure((\"vue \" + (vm._name) + \" init\"), startTag, endTag);\n    }\n\n    if (vm.$options.el) {\n      vm.$mount(vm.$options.el);\n    }\n  };\n}\n\nfunction initInternalComponent (vm, options) {\n  var opts = vm.$options = Object.create(vm.constructor.options);\n  // doing this because it's faster than dynamic enumeration.\n  var parentVnode = options._parentVnode;\n  opts.parent = options.parent;\n  opts._parentVnode = parentVnode;\n\n  var vnodeComponentOptions = parentVnode.componentOptions;\n  opts.propsData = vnodeComponentOptions.propsData;\n  opts._parentListeners = vnodeComponentOptions.listeners;\n  opts._renderChildren = vnodeComponentOptions.children;\n  opts._componentTag = vnodeComponentOptions.tag;\n\n  if (options.render) {\n    opts.render = options.render;\n    opts.staticRenderFns = options.staticRenderFns;\n  }\n}\n\nfunction resolveConstructorOptions (Ctor) {\n  var options = Ctor.options;\n  if (Ctor.super) {\n    var superOptions = resolveConstructorOptions(Ctor.super);\n    var cachedSuperOptions = Ctor.superOptions;\n    if (superOptions !== cachedSuperOptions) {\n      // super option changed,\n      // need to resolve new options.\n      Ctor.superOptions = superOptions;\n      // check if there are any late-modified/attached options (#4976)\n      var modifiedOptions = resolveModifiedOptions(Ctor);\n      // update base extend options\n      if (modifiedOptions) {\n        extend(Ctor.extendOptions, modifiedOptions);\n      }\n      options = Ctor.options = mergeOptions(superOptions, Ctor.extendOptions);\n      if (options.name) {\n        options.components[options.name] = Ctor;\n      }\n    }\n  }\n  return options\n}\n\nfunction resolveModifiedOptions (Ctor) {\n  var modified;\n  var latest = Ctor.options;\n  var sealed = Ctor.sealedOptions;\n  for (var key in latest) {\n    if (latest[key] !== sealed[key]) {\n      if (!modified) { modified = {}; }\n      modified[key] = latest[key];\n    }\n  }\n  return modified\n}\n\nfunction Vue (options) {\n  if ( true &&\n    !(this instanceof Vue)\n  ) {\n    warn('Vue is a constructor and should be called with the `new` keyword');\n  }\n  this._init(options);\n}\n\ninitMixin(Vue);\nstateMixin(Vue);\neventsMixin(Vue);\nlifecycleMixin(Vue);\nrenderMixin(Vue);\n\n/*  */\n\nfunction initUse (Vue) {\n  Vue.use = function (plugin) {\n    var installedPlugins = (this._installedPlugins || (this._installedPlugins = []));\n    if (installedPlugins.indexOf(plugin) > -1) {\n      return this\n    }\n\n    // additional parameters\n    var args = toArray(arguments, 1);\n    args.unshift(this);\n    if (typeof plugin.install === 'function') {\n      plugin.install.apply(plugin, args);\n    } else if (typeof plugin === 'function') {\n      plugin.apply(null, args);\n    }\n    installedPlugins.push(plugin);\n    return this\n  };\n}\n\n/*  */\n\nfunction initMixin$1 (Vue) {\n  Vue.mixin = function (mixin) {\n    this.options = mergeOptions(this.options, mixin);\n    return this\n  };\n}\n\n/*  */\n\nfunction initExtend (Vue) {\n  /**\n   * Each instance constructor, including Vue, has a unique\n   * cid. This enables us to create wrapped \"child\n   * constructors\" for prototypal inheritance and cache them.\n   */\n  Vue.cid = 0;\n  var cid = 1;\n\n  /**\n   * Class inheritance\n   */\n  Vue.extend = function (extendOptions) {\n    extendOptions = extendOptions || {};\n    var Super = this;\n    var SuperId = Super.cid;\n    var cachedCtors = extendOptions._Ctor || (extendOptions._Ctor = {});\n    if (cachedCtors[SuperId]) {\n      return cachedCtors[SuperId]\n    }\n\n    var name = extendOptions.name || Super.options.name;\n    if ( true && name) {\n      validateComponentName(name);\n    }\n\n    var Sub = function VueComponent (options) {\n      this._init(options);\n    };\n    Sub.prototype = Object.create(Super.prototype);\n    Sub.prototype.constructor = Sub;\n    Sub.cid = cid++;\n    Sub.options = mergeOptions(\n      Super.options,\n      extendOptions\n    );\n    Sub['super'] = Super;\n\n    // For props and computed properties, we define the proxy getters on\n    // the Vue instances at extension time, on the extended prototype. This\n    // avoids Object.defineProperty calls for each instance created.\n    if (Sub.options.props) {\n      initProps$1(Sub);\n    }\n    if (Sub.options.computed) {\n      initComputed$1(Sub);\n    }\n\n    // allow further extension/mixin/plugin usage\n    Sub.extend = Super.extend;\n    Sub.mixin = Super.mixin;\n    Sub.use = Super.use;\n\n    // create asset registers, so extended classes\n    // can have their private assets too.\n    ASSET_TYPES.forEach(function (type) {\n      Sub[type] = Super[type];\n    });\n    // enable recursive self-lookup\n    if (name) {\n      Sub.options.components[name] = Sub;\n    }\n\n    // keep a reference to the super options at extension time.\n    // later at instantiation we can check if Super's options have\n    // been updated.\n    Sub.superOptions = Super.options;\n    Sub.extendOptions = extendOptions;\n    Sub.sealedOptions = extend({}, Sub.options);\n\n    // cache constructor\n    cachedCtors[SuperId] = Sub;\n    return Sub\n  };\n}\n\nfunction initProps$1 (Comp) {\n  var props = Comp.options.props;\n  for (var key in props) {\n    proxy(Comp.prototype, \"_props\", key);\n  }\n}\n\nfunction initComputed$1 (Comp) {\n  var computed = Comp.options.computed;\n  for (var key in computed) {\n    defineComputed(Comp.prototype, key, computed[key]);\n  }\n}\n\n/*  */\n\nfunction initAssetRegisters (Vue) {\n  /**\n   * Create asset registration methods.\n   */\n  ASSET_TYPES.forEach(function (type) {\n    Vue[type] = function (\n      id,\n      definition\n    ) {\n      if (!definition) {\n        return this.options[type + 's'][id]\n      } else {\n        /* istanbul ignore if */\n        if ( true && type === 'component') {\n          validateComponentName(id);\n        }\n        if (type === 'component' && isPlainObject(definition)) {\n          definition.name = definition.name || id;\n          definition = this.options._base.extend(definition);\n        }\n        if (type === 'directive' && typeof definition === 'function') {\n          definition = { bind: definition, update: definition };\n        }\n        this.options[type + 's'][id] = definition;\n        return definition\n      }\n    };\n  });\n}\n\n/*  */\n\n\n\nfunction getComponentName (opts) {\n  return opts && (opts.Ctor.options.name || opts.tag)\n}\n\nfunction matches (pattern, name) {\n  if (Array.isArray(pattern)) {\n    return pattern.indexOf(name) > -1\n  } else if (typeof pattern === 'string') {\n    return pattern.split(',').indexOf(name) > -1\n  } else if (isRegExp(pattern)) {\n    return pattern.test(name)\n  }\n  /* istanbul ignore next */\n  return false\n}\n\nfunction pruneCache (keepAliveInstance, filter) {\n  var cache = keepAliveInstance.cache;\n  var keys = keepAliveInstance.keys;\n  var _vnode = keepAliveInstance._vnode;\n  for (var key in cache) {\n    var cachedNode = cache[key];\n    if (cachedNode) {\n      var name = getComponentName(cachedNode.componentOptions);\n      if (name && !filter(name)) {\n        pruneCacheEntry(cache, key, keys, _vnode);\n      }\n    }\n  }\n}\n\nfunction pruneCacheEntry (\n  cache,\n  key,\n  keys,\n  current\n) {\n  var cached$$1 = cache[key];\n  if (cached$$1 && (!current || cached$$1.tag !== current.tag)) {\n    cached$$1.componentInstance.$destroy();\n  }\n  cache[key] = null;\n  remove(keys, key);\n}\n\nvar patternTypes = [String, RegExp, Array];\n\nvar KeepAlive = {\n  name: 'keep-alive',\n  abstract: true,\n\n  props: {\n    include: patternTypes,\n    exclude: patternTypes,\n    max: [String, Number]\n  },\n\n  created: function created () {\n    this.cache = Object.create(null);\n    this.keys = [];\n  },\n\n  destroyed: function destroyed () {\n    for (var key in this.cache) {\n      pruneCacheEntry(this.cache, key, this.keys);\n    }\n  },\n\n  mounted: function mounted () {\n    var this$1 = this;\n\n    this.$watch('include', function (val) {\n      pruneCache(this$1, function (name) { return matches(val, name); });\n    });\n    this.$watch('exclude', function (val) {\n      pruneCache(this$1, function (name) { return !matches(val, name); });\n    });\n  },\n\n  render: function render () {\n    var slot = this.$slots.default;\n    var vnode = getFirstComponentChild(slot);\n    var componentOptions = vnode && vnode.componentOptions;\n    if (componentOptions) {\n      // check pattern\n      var name = getComponentName(componentOptions);\n      var ref = this;\n      var include = ref.include;\n      var exclude = ref.exclude;\n      if (\n        // not included\n        (include && (!name || !matches(include, name))) ||\n        // excluded\n        (exclude && name && matches(exclude, name))\n      ) {\n        return vnode\n      }\n\n      var ref$1 = this;\n      var cache = ref$1.cache;\n      var keys = ref$1.keys;\n      var key = vnode.key == null\n        // same constructor may get registered as different local components\n        // so cid alone is not enough (#3269)\n        ? componentOptions.Ctor.cid + (componentOptions.tag ? (\"::\" + (componentOptions.tag)) : '')\n        : vnode.key;\n      if (cache[key]) {\n        vnode.componentInstance = cache[key].componentInstance;\n        // make current key freshest\n        remove(keys, key);\n        keys.push(key);\n      } else {\n        cache[key] = vnode;\n        keys.push(key);\n        // prune oldest entry\n        if (this.max && keys.length > parseInt(this.max)) {\n          pruneCacheEntry(cache, keys[0], keys, this._vnode);\n        }\n      }\n\n      vnode.data.keepAlive = true;\n    }\n    return vnode || (slot && slot[0])\n  }\n};\n\nvar builtInComponents = {\n  KeepAlive: KeepAlive\n};\n\n/*  */\n\nfunction initGlobalAPI (Vue) {\n  // config\n  var configDef = {};\n  configDef.get = function () { return config; };\n  if (true) {\n    configDef.set = function () {\n      warn(\n        'Do not replace the Vue.config object, set individual fields instead.'\n      );\n    };\n  }\n  Object.defineProperty(Vue, 'config', configDef);\n\n  // exposed util methods.\n  // NOTE: these are not considered part of the public API - avoid relying on\n  // them unless you are aware of the risk.\n  Vue.util = {\n    warn: warn,\n    extend: extend,\n    mergeOptions: mergeOptions,\n    defineReactive: defineReactive$$1\n  };\n\n  Vue.set = set;\n  Vue.delete = del;\n  Vue.nextTick = nextTick;\n\n  // 2.6 explicit observable API\n  Vue.observable = function (obj) {\n    observe(obj);\n    return obj\n  };\n\n  Vue.options = Object.create(null);\n  ASSET_TYPES.forEach(function (type) {\n    Vue.options[type + 's'] = Object.create(null);\n  });\n\n  // this is used to identify the \"base\" constructor to extend all plain-object\n  // components with in Weex's multi-instance scenarios.\n  Vue.options._base = Vue;\n\n  extend(Vue.options.components, builtInComponents);\n\n  initUse(Vue);\n  initMixin$1(Vue);\n  initExtend(Vue);\n  initAssetRegisters(Vue);\n}\n\ninitGlobalAPI(Vue);\n\nObject.defineProperty(Vue.prototype, '$isServer', {\n  get: isServerRendering\n});\n\nObject.defineProperty(Vue.prototype, '$ssrContext', {\n  get: function get () {\n    /* istanbul ignore next */\n    return this.$vnode && this.$vnode.ssrContext\n  }\n});\n\n// expose FunctionalRenderContext for ssr runtime helper installation\nObject.defineProperty(Vue, 'FunctionalRenderContext', {\n  value: FunctionalRenderContext\n});\n\nVue.version = '2.6.10';\n\n/**\n * https://raw.githubusercontent.com/Tencent/westore/master/packages/westore/utils/diff.js\n */\nvar ARRAYTYPE = '[object Array]';\nvar OBJECTTYPE = '[object Object]';\n// const FUNCTIONTYPE = '[object Function]'\n\nfunction diff(current, pre) {\n    var result = {};\n    syncKeys(current, pre);\n    _diff(current, pre, '', result);\n    return result\n}\n\nfunction syncKeys(current, pre) {\n    if (current === pre) { return }\n    var rootCurrentType = type(current);\n    var rootPreType = type(pre);\n    if (rootCurrentType == OBJECTTYPE && rootPreType == OBJECTTYPE) {\n        if(Object.keys(current).length >= Object.keys(pre).length){\n            for (var key in pre) {\n                var currentValue = current[key];\n                if (currentValue === undefined) {\n                    current[key] = null;\n                } else {\n                    syncKeys(currentValue, pre[key]);\n                }\n            }\n        }\n    } else if (rootCurrentType == ARRAYTYPE && rootPreType == ARRAYTYPE) {\n        if (current.length >= pre.length) {\n            pre.forEach(function (item, index) {\n                syncKeys(current[index], item);\n            });\n        }\n    }\n}\n\nfunction _diff(current, pre, path, result) {\n    if (current === pre) { return }\n    var rootCurrentType = type(current);\n    var rootPreType = type(pre);\n    if (rootCurrentType == OBJECTTYPE) {\n        if (rootPreType != OBJECTTYPE || Object.keys(current).length < Object.keys(pre).length) {\n            setResult(result, path, current);\n        } else {\n            var loop = function ( key ) {\n                var currentValue = current[key];\n                var preValue = pre[key];\n                var currentType = type(currentValue);\n                var preType = type(preValue);\n                if (currentType != ARRAYTYPE && currentType != OBJECTTYPE) {\n                    if (currentValue != pre[key]) {\n                        setResult(result, (path == '' ? '' : path + \".\") + key, currentValue);\n                    }\n                } else if (currentType == ARRAYTYPE) {\n                    if (preType != ARRAYTYPE) {\n                        setResult(result, (path == '' ? '' : path + \".\") + key, currentValue);\n                    } else {\n                        if (currentValue.length < preValue.length) {\n                            setResult(result, (path == '' ? '' : path + \".\") + key, currentValue);\n                        } else {\n                            currentValue.forEach(function (item, index) {\n                                _diff(item, preValue[index], (path == '' ? '' : path + \".\") + key + '[' + index + ']', result);\n                            });\n                        }\n                    }\n                } else if (currentType == OBJECTTYPE) {\n                    if (preType != OBJECTTYPE || Object.keys(currentValue).length < Object.keys(preValue).length) {\n                        setResult(result, (path == '' ? '' : path + \".\") + key, currentValue);\n                    } else {\n                        for (var subKey in currentValue) {\n                            _diff(currentValue[subKey], preValue[subKey], (path == '' ? '' : path + \".\") + key + '.' + subKey, result);\n                        }\n                    }\n                }\n            };\n\n            for (var key in current) loop( key );\n        }\n    } else if (rootCurrentType == ARRAYTYPE) {\n        if (rootPreType != ARRAYTYPE) {\n            setResult(result, path, current);\n        } else {\n            if (current.length < pre.length) {\n                setResult(result, path, current);\n            } else {\n                current.forEach(function (item, index) {\n                    _diff(item, pre[index], path + '[' + index + ']', result);\n                });\n            }\n        }\n    } else {\n        setResult(result, path, current);\n    }\n}\n\nfunction setResult(result, k, v) {\n    // if (type(v) != FUNCTIONTYPE) {\n        result[k] = v;\n    // }\n}\n\nfunction type(obj) {\n    return Object.prototype.toString.call(obj)\n}\n\n/*  */\r\n\r\nfunction flushCallbacks$1(vm) {\r\n    if (vm.__next_tick_callbacks && vm.__next_tick_callbacks.length) {\r\n        if (Object({\"VUE_APP_PLATFORM\":\"app-plus\",\"NODE_ENV\":\"development\",\"BASE_URL\":\"/\"}).VUE_APP_DEBUG) {\r\n            var mpInstance = vm.$scope;\r\n            console.log('[' + (+new Date) + '][' + (mpInstance.is || mpInstance.route) + '][' + vm._uid +\r\n                ']:flushCallbacks[' + vm.__next_tick_callbacks.length + ']');\r\n        }\r\n        var copies = vm.__next_tick_callbacks.slice(0);\r\n        vm.__next_tick_callbacks.length = 0;\r\n        for (var i = 0; i < copies.length; i++) {\r\n            copies[i]();\r\n        }\r\n    }\r\n}\r\n\r\nfunction hasRenderWatcher(vm) {\r\n    return queue.find(function (watcher) { return vm._watcher === watcher; })\r\n}\r\n\r\nfunction nextTick$1(vm, cb) {\r\n    //1.nextTick 之前 已 setData 且 setData 还未回调完成\r\n    //2.nextTick 之前存在 render watcher\r\n    if (!vm.__next_tick_pending && !hasRenderWatcher(vm)) {\n        if(Object({\"VUE_APP_PLATFORM\":\"app-plus\",\"NODE_ENV\":\"development\",\"BASE_URL\":\"/\"}).VUE_APP_DEBUG){\n            var mpInstance = vm.$scope;\n            console.log('[' + (+new Date) + '][' + (mpInstance.is || mpInstance.route) + '][' + vm._uid +\n                ']:nextVueTick');\n        }\r\n        return nextTick(cb, vm)\r\n    }else{\n        if(Object({\"VUE_APP_PLATFORM\":\"app-plus\",\"NODE_ENV\":\"development\",\"BASE_URL\":\"/\"}).VUE_APP_DEBUG){\n            var mpInstance$1 = vm.$scope;\n            console.log('[' + (+new Date) + '][' + (mpInstance$1.is || mpInstance$1.route) + '][' + vm._uid +\n                ']:nextMPTick');\n        }\n    }\r\n    var _resolve;\r\n    if (!vm.__next_tick_callbacks) {\r\n        vm.__next_tick_callbacks = [];\r\n    }\r\n    vm.__next_tick_callbacks.push(function () {\r\n        if (cb) {\r\n            try {\r\n                cb.call(vm);\r\n            } catch (e) {\r\n                handleError(e, vm, 'nextTick');\r\n            }\r\n        } else if (_resolve) {\r\n            _resolve(vm);\r\n        }\r\n    });\r\n    // $flow-disable-line\r\n    if (!cb && typeof Promise !== 'undefined') {\r\n        return new Promise(function (resolve) {\r\n            _resolve = resolve;\r\n        })\r\n    }\r\n}\n\n/*  */\r\n\r\nfunction cloneWithData(vm) {\r\n  // 确保当前 vm 所有数据被同步\r\n  var ret = Object.create(null);\r\n  var dataKeys = [].concat(\r\n    Object.keys(vm._data || {}),\r\n    Object.keys(vm._computedWatchers || {}));\r\n\r\n  dataKeys.reduce(function(ret, key) {\r\n    ret[key] = vm[key];\r\n    return ret\r\n  }, ret);\r\n  //TODO 需要把无用数据处理掉，比如 list=>l0 则 list 需要移除，否则多传输一份数据\r\n  Object.assign(ret, vm.$mp.data || {});\r\n  if (\r\n    Array.isArray(vm.$options.behaviors) &&\r\n    vm.$options.behaviors.indexOf('uni://form-field') !== -1\r\n  ) { //form-field\r\n    ret['name'] = vm.name;\r\n    ret['value'] = vm.value;\r\n  }\r\n\r\n  return JSON.parse(JSON.stringify(ret))\r\n}\r\n\r\nvar patch = function(oldVnode, vnode) {\n  var this$1 = this;\n\r\n  if (vnode === null) { //destroy\r\n    return\r\n  }\r\n  if (this.mpType === 'page' || this.mpType === 'component') {\r\n    var mpInstance = this.$scope;\r\n    var data = Object.create(null);\r\n    try {\r\n      data = cloneWithData(this);\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n    data.__webviewId__ = mpInstance.data.__webviewId__;\r\n    var mpData = Object.create(null);\r\n    Object.keys(data).forEach(function (key) { //仅同步 data 中有的数据\r\n      mpData[key] = mpInstance.data[key];\r\n    });\r\n    var diffData = diff(data, mpData);\r\n    if (Object.keys(diffData).length) {\r\n      if (Object({\"VUE_APP_PLATFORM\":\"app-plus\",\"NODE_ENV\":\"development\",\"BASE_URL\":\"/\"}).VUE_APP_DEBUG) {\r\n        console.log('[' + (+new Date) + '][' + (mpInstance.is || mpInstance.route) + '][' + this._uid +\r\n          ']差量更新',\r\n          JSON.stringify(diffData));\r\n      }\r\n      this.__next_tick_pending = true;\r\n      mpInstance.setData(diffData, function () {\r\n        this$1.__next_tick_pending = false;\r\n        flushCallbacks$1(this$1);\r\n      });\r\n    } else {\r\n      flushCallbacks$1(this);\r\n    }\r\n  }\r\n};\n\n/*  */\n\nfunction createEmptyRender() {\n\n}\n\nfunction mountComponent$1(\n  vm,\n  el,\n  hydrating\n) {\n  if (!vm.mpType) {//main.js 中的 new Vue\n    return vm\n  }\n  if (vm.mpType === 'app') {\n    vm.$options.render = createEmptyRender;\n  }\n  if (!vm.$options.render) {\n    vm.$options.render = createEmptyRender;\n    if (true) {\n      /* istanbul ignore if */\n      if ((vm.$options.template && vm.$options.template.charAt(0) !== '#') ||\n        vm.$options.el || el) {\n        warn(\n          'You are using the runtime-only build of Vue where the template ' +\n          'compiler is not available. Either pre-compile the templates into ' +\n          'render functions, or use the compiler-included build.',\n          vm\n        );\n      } else {\n        warn(\n          'Failed to mount component: template or render function not defined.',\n          vm\n        );\n      }\n    }\n  }\n  \n  vm.mpHost !== 'mp-toutiao' && callHook(vm, 'beforeMount');\n\n  var updateComponent = function () {\n    vm._update(vm._render(), hydrating);\n  };\n\n  // we set this to vm._watcher inside the watcher's constructor\n  // since the watcher's initial patch may call $forceUpdate (e.g. inside child\n  // component's mounted hook), which relies on vm._watcher being already defined\n  new Watcher(vm, updateComponent, noop, {\n    before: function before() {\n      if (vm._isMounted && !vm._isDestroyed) {\n        callHook(vm, 'beforeUpdate');\n      }\n    }\n  }, true /* isRenderWatcher */);\n  hydrating = false;\n  return vm\n}\n\n/*  */\n\nfunction renderClass (\n  staticClass,\n  dynamicClass\n) {\n  if (isDef(staticClass) || isDef(dynamicClass)) {\n    return concat(staticClass, stringifyClass(dynamicClass))\n  }\n  /* istanbul ignore next */\n  return ''\n}\n\nfunction concat (a, b) {\n  return a ? b ? (a + ' ' + b) : a : (b || '')\n}\n\nfunction stringifyClass (value) {\n  if (Array.isArray(value)) {\n    return stringifyArray(value)\n  }\n  if (isObject(value)) {\n    return stringifyObject(value)\n  }\n  if (typeof value === 'string') {\n    return value\n  }\n  /* istanbul ignore next */\n  return ''\n}\n\nfunction stringifyArray (value) {\n  var res = '';\n  var stringified;\n  for (var i = 0, l = value.length; i < l; i++) {\n    if (isDef(stringified = stringifyClass(value[i])) && stringified !== '') {\n      if (res) { res += ' '; }\n      res += stringified;\n    }\n  }\n  return res\n}\n\nfunction stringifyObject (value) {\n  var res = '';\n  for (var key in value) {\n    if (value[key]) {\n      if (res) { res += ' '; }\n      res += key;\n    }\n  }\n  return res\n}\n\n/*  */\n\nvar parseStyleText = cached(function (cssText) {\n  var res = {};\n  var listDelimiter = /;(?![^(]*\\))/g;\n  var propertyDelimiter = /:(.+)/;\n  cssText.split(listDelimiter).forEach(function (item) {\n    if (item) {\n      var tmp = item.split(propertyDelimiter);\n      tmp.length > 1 && (res[tmp[0].trim()] = tmp[1].trim());\n    }\n  });\n  return res\n});\n\n// normalize possible array / string values into Object\nfunction normalizeStyleBinding (bindingStyle) {\n  if (Array.isArray(bindingStyle)) {\n    return toObject(bindingStyle)\n  }\n  if (typeof bindingStyle === 'string') {\n    return parseStyleText(bindingStyle)\n  }\n  return bindingStyle\n}\n\n/*  */\r\n\r\nvar MP_METHODS = ['createSelectorQuery', 'createIntersectionObserver', 'selectAllComponents', 'selectComponent'];\r\n\r\nfunction getTarget(obj, path) {\r\n  var parts = path.split('.');\r\n  var key = parts[0];\r\n  if (key.indexOf('__$n') === 0) { //number index\r\n    key = parseInt(key.replace('__$n', ''));\r\n  }\r\n  if (parts.length === 1) {\r\n    return obj[key]\r\n  }\r\n  return getTarget(obj[key], parts.slice(1).join('.'))\r\n}\r\n\r\nfunction internalMixin(Vue) {\r\n\r\n  Vue.config.errorHandler = function(err) {\r\n    console.error(err);\r\n  };\r\n\r\n  var oldEmit = Vue.prototype.$emit;\r\n\r\n  Vue.prototype.$emit = function(event) {\r\n    if (this.$scope && event) {\r\n      this.$scope['triggerEvent'](event, {\r\n        __args__: toArray(arguments, 1)\r\n      });\r\n    }\r\n    return oldEmit.apply(this, arguments)\r\n  };\r\n\r\n  Vue.prototype.$nextTick = function(fn) {\r\n    return nextTick$1(this, fn)\r\n  };\r\n\r\n  MP_METHODS.forEach(function (method) {\r\n    Vue.prototype[method] = function(args) {\r\n      if (this.$scope) {\r\n        return this.$scope[method](args)\r\n      }\r\n    };\r\n  });\r\n\r\n  Vue.prototype.__init_provide = initProvide;\r\n\r\n  Vue.prototype.__init_injections = initInjections;\r\n\r\n  Vue.prototype.__call_hook = function(hook, args) {\r\n    var vm = this;\r\n    // #7573 disable dep collection when invoking lifecycle hooks\r\n    pushTarget();\r\n    var handlers = vm.$options[hook];\r\n    var info = hook + \" hook\";\r\n    var ret;\r\n    if (handlers) {\r\n      for (var i = 0, j = handlers.length; i < j; i++) {\r\n        ret = invokeWithErrorHandling(handlers[i], vm, args ? [args] : null, vm, info);\r\n      }\r\n    }\r\n    if (vm._hasHookEvent) {\r\n      vm.$emit('hook:' + hook);\r\n    }\r\n    popTarget();\r\n    return ret\r\n  };\r\n\r\n  Vue.prototype.__set_model = function(target, key, value, modifiers) {\r\n    if (Array.isArray(modifiers)) {\r\n      if (modifiers.indexOf('trim') !== -1) {\r\n        value = value.trim();\r\n      }\r\n      if (modifiers.indexOf('number') !== -1) {\r\n        value = this._n(value);\r\n      }\r\n    }\r\n    if (!target) {\r\n      target = this;\r\n    }\r\n    target[key] = value;\r\n  };\r\n\r\n  Vue.prototype.__set_sync = function(target, key, value) {\r\n    if (!target) {\r\n      target = this;\r\n    }\r\n    target[key] = value;\r\n  };\r\n\r\n  Vue.prototype.__get_orig = function(item) {\r\n    if (isPlainObject(item)) {\r\n      return item['$orig'] || item\r\n    }\r\n    return item\r\n  };\r\n\r\n  Vue.prototype.__get_value = function(dataPath, target) {\r\n    return getTarget(target || this, dataPath)\r\n  };\r\n\r\n\r\n  Vue.prototype.__get_class = function(dynamicClass, staticClass) {\r\n    return renderClass(staticClass, dynamicClass)\r\n  };\r\n\r\n  Vue.prototype.__get_style = function(dynamicStyle, staticStyle) {\r\n    if (!dynamicStyle && !staticStyle) {\r\n      return ''\r\n    }\r\n    var dynamicStyleObj = normalizeStyleBinding(dynamicStyle);\r\n    var styleObj = staticStyle ? extend(staticStyle, dynamicStyleObj) : dynamicStyleObj;\r\n    return Object.keys(styleObj).map(function (name) { return ((hyphenate(name)) + \":\" + (styleObj[name])); }).join(';')\r\n  };\r\n\r\n  Vue.prototype.__map = function(val, iteratee) {\r\n    //TODO 暂不考虑 string,number\r\n    var ret, i, l, keys, key;\r\n    if (Array.isArray(val)) {\r\n      ret = new Array(val.length);\r\n      for (i = 0, l = val.length; i < l; i++) {\r\n        ret[i] = iteratee(val[i], i);\r\n      }\r\n      return ret\r\n    } else if (isObject(val)) {\r\n      keys = Object.keys(val);\r\n      ret = Object.create(null);\r\n      for (i = 0, l = keys.length; i < l; i++) {\r\n        key = keys[i];\r\n        ret[key] = iteratee(val[key], key, i);\r\n      }\r\n      return ret\r\n    }\r\n    return []\r\n  };\r\n\r\n}\n\n/*  */\r\n\r\nvar LIFECYCLE_HOOKS$1 = [\r\n    //App\r\n    'onLaunch',\r\n    'onShow',\r\n    'onHide',\r\n    'onUniNViewMessage',\n    'onError',\r\n    //Page\r\n    'onLoad',\r\n    // 'onShow',\r\n    'onReady',\r\n    // 'onHide',\r\n    'onUnload',\r\n    'onPullDownRefresh',\r\n    'onReachBottom',\r\n    'onTabItemTap',\r\n    'onShareAppMessage',\n    'onResize',\r\n    'onPageScroll',\r\n    'onNavigationBarButtonTap',\r\n    'onBackPress',\r\n    'onNavigationBarSearchInputChanged',\r\n    'onNavigationBarSearchInputConfirmed',\r\n    'onNavigationBarSearchInputClicked',\r\n    //Component\r\n    // 'onReady', // 兼容旧版本，应该移除该事件\r\n    'onPageShow',\r\n    'onPageHide',\r\n    'onPageResize'\r\n];\r\nfunction lifecycleMixin$1(Vue) {\r\n\r\n    //fixed vue-class-component\r\n    var oldExtend = Vue.extend;\r\n    Vue.extend = function(extendOptions) {\r\n        extendOptions = extendOptions || {};\r\n\r\n        var methods = extendOptions.methods;\r\n        if (methods) {\r\n            Object.keys(methods).forEach(function (methodName) {\r\n                if (LIFECYCLE_HOOKS$1.indexOf(methodName)!==-1) {\r\n                    extendOptions[methodName] = methods[methodName];\r\n                    delete methods[methodName];\r\n                }\r\n            });\r\n        }\r\n\r\n        return oldExtend.call(this, extendOptions)\r\n    };\r\n\r\n    var strategies = Vue.config.optionMergeStrategies;\r\n    var mergeHook = strategies.created;\r\n    LIFECYCLE_HOOKS$1.forEach(function (hook) {\r\n        strategies[hook] = mergeHook;\r\n    });\r\n\r\n    Vue.prototype.__lifecycle_hooks__ = LIFECYCLE_HOOKS$1;\r\n}\n\n/*  */\r\n\n// install platform patch function\r\nVue.prototype.__patch__ = patch;\r\n\r\n// public mount method\r\nVue.prototype.$mount = function(\r\n    el ,\r\n    hydrating \r\n) {\r\n    return mountComponent$1(this, el, hydrating)\r\n};\r\n\r\nlifecycleMixin$1(Vue);\r\ninternalMixin(Vue);\n\n/*  */\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Vue);\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../../../webpack/buildin/global.js */ 2)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///3\n");

/***/ }),

/***/ 30:
/*!***********************************************!*\
  !*** ./node_modules/path-browserify/index.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(process) {// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// resolves . and .. elements in a path array with directory names there\n// must be no slashes, empty elements, or device names (c:\\) in the array\n// (so also no leading and trailing slashes - it does not distinguish\n// relative and absolute paths)\nfunction normalizeArray(parts, allowAboveRoot) {\n  // if the path tries to go above the root, `up` ends up > 0\n  var up = 0;\n  for (var i = parts.length - 1; i >= 0; i--) {\n    var last = parts[i];\n    if (last === '.') {\n      parts.splice(i, 1);\n    } else if (last === '..') {\n      parts.splice(i, 1);\n      up++;\n    } else if (up) {\n      parts.splice(i, 1);\n      up--;\n    }\n  }\n\n  // if the path is allowed to go above the root, restore leading ..s\n  if (allowAboveRoot) {\n    for (; up--; up) {\n      parts.unshift('..');\n    }\n  }\n\n  return parts;\n}\n\n// Split a filename into [root, dir, basename, ext], unix version\n// 'root' is just a slash, or nothing.\nvar splitPathRe =\n    /^(\\/?|)([\\s\\S]*?)((?:\\.{1,2}|[^\\/]+?|)(\\.[^.\\/]*|))(?:[\\/]*)$/;\nvar splitPath = function(filename) {\n  return splitPathRe.exec(filename).slice(1);\n};\n\n// path.resolve([from ...], to)\n// posix version\nexports.resolve = function() {\n  var resolvedPath = '',\n      resolvedAbsolute = false;\n\n  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {\n    var path = (i >= 0) ? arguments[i] : process.cwd();\n\n    // Skip empty and invalid entries\n    if (typeof path !== 'string') {\n      throw new TypeError('Arguments to path.resolve must be strings');\n    } else if (!path) {\n      continue;\n    }\n\n    resolvedPath = path + '/' + resolvedPath;\n    resolvedAbsolute = path.charAt(0) === '/';\n  }\n\n  // At this point the path should be resolved to a full absolute path, but\n  // handle relative paths to be safe (might happen when process.cwd() fails)\n\n  // Normalize the path\n  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {\n    return !!p;\n  }), !resolvedAbsolute).join('/');\n\n  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';\n};\n\n// path.normalize(path)\n// posix version\nexports.normalize = function(path) {\n  var isAbsolute = exports.isAbsolute(path),\n      trailingSlash = substr(path, -1) === '/';\n\n  // Normalize the path\n  path = normalizeArray(filter(path.split('/'), function(p) {\n    return !!p;\n  }), !isAbsolute).join('/');\n\n  if (!path && !isAbsolute) {\n    path = '.';\n  }\n  if (path && trailingSlash) {\n    path += '/';\n  }\n\n  return (isAbsolute ? '/' : '') + path;\n};\n\n// posix version\nexports.isAbsolute = function(path) {\n  return path.charAt(0) === '/';\n};\n\n// posix version\nexports.join = function() {\n  var paths = Array.prototype.slice.call(arguments, 0);\n  return exports.normalize(filter(paths, function(p, index) {\n    if (typeof p !== 'string') {\n      throw new TypeError('Arguments to path.join must be strings');\n    }\n    return p;\n  }).join('/'));\n};\n\n\n// path.relative(from, to)\n// posix version\nexports.relative = function(from, to) {\n  from = exports.resolve(from).substr(1);\n  to = exports.resolve(to).substr(1);\n\n  function trim(arr) {\n    var start = 0;\n    for (; start < arr.length; start++) {\n      if (arr[start] !== '') break;\n    }\n\n    var end = arr.length - 1;\n    for (; end >= 0; end--) {\n      if (arr[end] !== '') break;\n    }\n\n    if (start > end) return [];\n    return arr.slice(start, end - start + 1);\n  }\n\n  var fromParts = trim(from.split('/'));\n  var toParts = trim(to.split('/'));\n\n  var length = Math.min(fromParts.length, toParts.length);\n  var samePartsLength = length;\n  for (var i = 0; i < length; i++) {\n    if (fromParts[i] !== toParts[i]) {\n      samePartsLength = i;\n      break;\n    }\n  }\n\n  var outputParts = [];\n  for (var i = samePartsLength; i < fromParts.length; i++) {\n    outputParts.push('..');\n  }\n\n  outputParts = outputParts.concat(toParts.slice(samePartsLength));\n\n  return outputParts.join('/');\n};\n\nexports.sep = '/';\nexports.delimiter = ':';\n\nexports.dirname = function(path) {\n  var result = splitPath(path),\n      root = result[0],\n      dir = result[1];\n\n  if (!root && !dir) {\n    // No dirname whatsoever\n    return '.';\n  }\n\n  if (dir) {\n    // It has a dirname, strip trailing slash\n    dir = dir.substr(0, dir.length - 1);\n  }\n\n  return root + dir;\n};\n\n\nexports.basename = function(path, ext) {\n  var f = splitPath(path)[2];\n  // TODO: make this comparison case-insensitive on windows?\n  if (ext && f.substr(-1 * ext.length) === ext) {\n    f = f.substr(0, f.length - ext.length);\n  }\n  return f;\n};\n\n\nexports.extname = function(path) {\n  return splitPath(path)[3];\n};\n\nfunction filter (xs, f) {\n    if (xs.filter) return xs.filter(f);\n    var res = [];\n    for (var i = 0; i < xs.length; i++) {\n        if (f(xs[i], i, xs)) res.push(xs[i]);\n    }\n    return res;\n}\n\n// String.prototype.substr - negative index don't work in IE8\nvar substr = 'ab'.substr(-1) === 'b'\n    ? function (str, start, len) { return str.substr(start, len) }\n    : function (str, start, len) {\n        if (start < 0) start = str.length + start;\n        return str.substr(start, len);\n    }\n;\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../node-libs-browser/mock/process.js */ 29)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///30\n");

/***/ }),

/***/ 4:
/*!*************************************************!*\
  !*** C:/Users/Admin/Desktop/evc.app/pages.json ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiI0LmpzIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///4\n");

/***/ }),

/***/ 472:
/*!**************************************************************!*\
  !*** C:/Users/Admin/Desktop/evc.app/common/qiniuUploader.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(__f__, uni) { // created by gpake\n(function () {\n\n  var config = {\n    qiniuRegion: '',\n    qiniuImageURLPrefix: '',\n    qiniuUploadToken: '',\n    qiniuUploadTokenURL: '',\n    qiniuUploadTokenFunction: null,\n    qiniuShouldUseQiniuFileName: false };\n\n\n  module.exports = {\n    init: init,\n    upload: upload\n\n\n    // 在整个程序生命周期中，只需要 init 一次即可\n    // 如果需要变更参数，再调用 init 即可\n  };function init(options) {\n    config = {\n      qiniuRegion: '',\n      qiniuImageURLPrefix: '',\n      qiniuUploadToken: '',\n      qiniuUploadTokenURL: '',\n      qiniuUploadTokenFunction: null,\n      qiniuShouldUseQiniuFileName: false };\n\n    updateConfigWithOptions(options);\n  }\n\n  function updateConfigWithOptions(options) {\n    if (options.region) {\n      config.qiniuRegion = options.region;\n    } else {\n      console.error(__f__('qiniu uploader need your bucket region', \" at common\\\\qiniuUploader.js:36\"));\n    }\n    if (options.uptoken) {\n      config.qiniuUploadToken = options.uptoken;\n    } else if (options.uptokenURL) {\n      config.qiniuUploadTokenURL = options.uptokenURL;\n    } else if (options.uptokenFunc) {\n      config.qiniuUploadTokenFunction = options.uptokenFunc;\n    }\n    if (options.domain) {\n      config.qiniuImageURLPrefix = options.domain;\n    }\n    config.qiniuShouldUseQiniuFileName = options.shouldUseQiniuFileName;\n  }\n\n  function upload(filePath, success, fail, options, progress, cancelTask) {\n    if (null == filePath) {\n      console.error(__f__('qiniu uploader need filePath to upload', \" at common\\\\qiniuUploader.js:53\"));\n      return;\n    }\n    if (options) {\n      updateConfigWithOptions(options);\n    }\n    if (config.qiniuUploadToken) {\n      doUpload(filePath, success, fail, options, progress, cancelTask);\n    } else if (config.qiniuUploadTokenURL) {\n      getQiniuToken(function () {\n        doUpload(filePath, success, fail, options, progress, cancelTask);\n      });\n    } else if (config.qiniuUploadTokenFunction) {\n      config.qiniuUploadToken = config.qiniuUploadTokenFunction();\n      if (null == config.qiniuUploadToken && config.qiniuUploadToken.length > 0) {\n        console.error(__f__('qiniu UploadTokenFunction result is null, please check the return value', \" at common\\\\qiniuUploader.js:68\"));\n        return;\n      }\n      doUpload(filePath, success, fail, options, progress, cancelTask);\n    } else {\n      console.error(__f__('qiniu uploader need one of [uptoken, uptokenURL, uptokenFunc]', \" at common\\\\qiniuUploader.js:73\"));\n      return;\n    }\n  }\n\n  function doUpload(filePath, _success, _fail, options, progress, cancelTask) {\n    if (null == config.qiniuUploadToken && config.qiniuUploadToken.length > 0) {\n      console.error(__f__('qiniu UploadToken is null, please check the init config or networking', \" at common\\\\qiniuUploader.js:80\"));\n      return;\n    }\n    var url = uploadURLFromRegionCode(config.qiniuRegion);\n    var fileName = filePath.split('//')[1];\n    if (options && options.key) {\n      fileName = options.key;\n    }\n    var formData = {\n      'token': config.qiniuUploadToken };\n\n    if (!config.qiniuShouldUseQiniuFileName) {\n      formData['key'] = fileName;\n    }\n    var uploadTask = uni.uploadFile({\n      url: url,\n      filePath: filePath,\n      name: 'file',\n      formData: formData,\n      success: function success(res) {\n        var dataString = res.data;\n        //   // this if case is a compatibility with wechat server returned a charcode, but was fixed\n        //   if(res.data.hasOwnProperty('type') && res.data.type === 'Buffer'){\n        //     dataString = String.fromCharCode.apply(null, res.data.data)\n        //   }\n        try {\n          console.log(__f__(res, \" at common\\\\qiniuUploader.js:106\"));\n          var dataObject = JSON.parse(dataString);\n          //do something\n          var fileUrl = config.qiniuImageURLPrefix + '/' + dataObject.key;\n          dataObject.fileUrl = fileUrl;\n          dataObject.imageURL = fileUrl;\n          console.log(__f__(dataObject, \" at common\\\\qiniuUploader.js:112\"));\n          if (_success) {\n            _success(dataObject);\n          }\n        } catch (e) {\n          console.log(__f__('parse JSON failed, origin String is: ' + dataString, \" at common\\\\qiniuUploader.js:117\"));\n          if (_fail) {\n            _fail(e);\n          }\n        }\n      },\n      fail: function fail(error) {\n        console.error(__f__(error, \" at common\\\\qiniuUploader.js:124\"));\n        if (_fail) {\n          _fail(error);\n        }\n      } });\n\n\n    uploadTask.onProgressUpdate(function (res) {\n      progress && progress(res);\n    });\n\n    cancelTask && cancelTask(function () {\n      uploadTask.abort();\n    });\n  }\n\n  function getQiniuToken(callback) {\n    uni.request({\n      url: config.qiniuUploadTokenURL,\n      success: function success(res) {\n        var token = res.data.uptoken;\n        if (token && token.length > 0) {\n          config.qiniuUploadToken = token;\n          if (callback) {\n            callback();\n          }\n        } else {\n          console.error(__f__('qiniuUploader cannot get your token, please check the uptokenURL or server', \" at common\\\\qiniuUploader.js:151\"));\n        }\n      },\n      fail: function fail(error) {\n        console.error(__f__('qiniu UploadToken is null, please check the init config or networking: ' + error, \" at common\\\\qiniuUploader.js:155\"));\n      } });\n\n  }\n\n  function uploadURLFromRegionCode(code) {\n    var uploadURL = null;\n    switch (code) {\n      case 'ECN':uploadURL = 'https://up.qiniup.com';break;\n      case 'NCN':uploadURL = 'https://up-z1.qiniup.com';break;\n      case 'SCN':uploadURL = 'https://up-z2.qiniup.com';break;\n      case 'NA':uploadURL = 'https://up-na0.qiniup.com';break;\n      case 'ASG':uploadURL = 'https://up-as0.qiniup.com';break;\n      default:console.error(__f__('please make the region is with one of [ECN, SCN, NCN, NA, ASG]', \" at common\\\\qiniuUploader.js:168\"));}\n\n    return uploadURL;\n  }\n\n})();\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/vue-cli-plugin-uni/lib/format-log.js */ 12)[\"default\"], __webpack_require__(/*! ./node_modules/@dcloudio/uni-app-plus/dist/index.js */ 1)[\"default\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///472\n");

/***/ }),

/***/ 5:
/*!*******************************************************!*\
  !*** ./node_modules/@dcloudio/uni-stat/dist/index.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(uni) {var _package = __webpack_require__(/*! ../package.json */ 6);function _possibleConstructorReturn(self, call) {if (call && (typeof call === \"object\" || typeof call === \"function\")) {return call;}return _assertThisInitialized(self);}function _assertThisInitialized(self) {if (self === void 0) {throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");}return self;}function _getPrototypeOf(o) {_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {return o.__proto__ || Object.getPrototypeOf(o);};return _getPrototypeOf(o);}function _inherits(subClass, superClass) {if (typeof superClass !== \"function\" && superClass !== null) {throw new TypeError(\"Super expression must either be null or a function\");}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });if (superClass) _setPrototypeOf(subClass, superClass);}function _setPrototypeOf(o, p) {_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {o.__proto__ = p;return o;};return _setPrototypeOf(o, p);}function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError(\"Cannot call a class as a function\");}}function _defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function _createClass(Constructor, protoProps, staticProps) {if (protoProps) _defineProperties(Constructor.prototype, protoProps);if (staticProps) _defineProperties(Constructor, staticProps);return Constructor;}\n\nvar STAT_VERSION = _package.version;\nvar STAT_URL = 'https://tongji.dcloud.io/uni/stat';\nvar STAT_H5_URL = 'https://tongji.dcloud.io/uni/stat.gif';\nvar PAGE_PVER_TIME = 1800;\nvar APP_PVER_TIME = 300;\nvar OPERATING_TIME = 10;\n\nvar UUID_KEY = '__DC_STAT_UUID';\nvar UUID_VALUE = '__DC_UUID_VALUE';\n\nfunction getUuid() {\n  var uuid = '';\n  if (getPlatformName() === 'n') {\n    try {\n      uuid = plus.runtime.getDCloudId();\n    } catch (e) {\n      uuid = '';\n    }\n    return uuid;\n  }\n\n  try {\n    uuid = uni.getStorageSync(UUID_KEY);\n  } catch (e) {\n    uuid = UUID_VALUE;\n  }\n\n  if (!uuid) {\n    uuid = Date.now() + '' + Math.floor(Math.random() * 1e7);\n    try {\n      uni.setStorageSync(UUID_KEY, uuid);\n    } catch (e) {\n      uni.setStorageSync(UUID_KEY, UUID_VALUE);\n    }\n  }\n  return uuid;\n}\n\nvar getSgin = function getSgin(statData) {\n  var arr = Object.keys(statData);\n  var sortArr = arr.sort();\n  var sgin = {};\n  var sginStr = '';\n  for (var i in sortArr) {\n    sgin[sortArr[i]] = statData[sortArr[i]];\n    sginStr += sortArr[i] + '=' + statData[sortArr[i]] + '&';\n  }\n  // const options = sginStr.substr(0, sginStr.length - 1)\n  // sginStr = sginStr.substr(0, sginStr.length - 1) + '&key=' + STAT_KEY;\n  // const si = crypto.createHash('md5').update(sginStr).digest('hex');\n  return {\n    sign: '',\n    options: sginStr.substr(0, sginStr.length - 1) };\n\n};\n\nvar getSplicing = function getSplicing(data) {\n  var str = '';\n  for (var i in data) {\n    str += i + '=' + data[i] + '&';\n  }\n  return str.substr(0, str.length - 1);\n};\n\nvar getTime = function getTime() {\n  return parseInt(new Date().getTime() / 1000);\n};\n\nvar getPlatformName = function getPlatformName() {\n  var platformList = {\n    'app-plus': 'n',\n    'h5': 'h5',\n    'mp-weixin': 'wx',\n    'mp-alipay': 'ali',\n    'mp-baidu': 'bd',\n    'mp-toutiao': 'tt',\n    'mp-qq': 'qq' };\n\n  return platformList[\"app-plus\"];\n};\n\nvar getPackName = function getPackName() {\n  var packName = '';\n  if (getPlatformName() === 'wx' || getPlatformName() === 'qq') {\n    // 兼容微信小程序低版本基础库\n    if (uni.canIUse('getAccountInfoSync')) {\n      packName = uni.getAccountInfoSync().miniProgram.appId || '';\n    }\n  }\n  return packName;\n};\n\nvar getVersion = function getVersion() {\n  return getPlatformName() === 'n' ? plus.runtime.version : '';\n};\n\nvar getChannel = function getChannel() {\n  var platformName = getPlatformName();\n  var channel = '';\n  if (platformName === 'n') {\n    channel = plus.runtime.channel;\n  }\n  return channel;\n};\n\nvar getScene = function getScene(options) {\n  var platformName = getPlatformName();\n  var scene = '';\n  if (options) {\n    return options;\n  }\n  if (platformName === 'wx') {\n    scene = uni.getLaunchOptionsSync().scene;\n  }\n  return scene;\n};\nvar First__Visit__Time__KEY = 'First__Visit__Time';\nvar Last__Visit__Time__KEY = 'Last__Visit__Time';\n\nvar getFirstVisitTime = function getFirstVisitTime() {\n  var timeStorge = uni.getStorageSync(First__Visit__Time__KEY);\n  var time = 0;\n  if (timeStorge) {\n    time = timeStorge;\n  } else {\n    time = getTime();\n    uni.setStorageSync(First__Visit__Time__KEY, time);\n    uni.removeStorageSync(Last__Visit__Time__KEY);\n  }\n  return time;\n};\n\nvar getLastVisitTime = function getLastVisitTime() {\n  var timeStorge = uni.getStorageSync(Last__Visit__Time__KEY);\n  var time = 0;\n  if (timeStorge) {\n    time = timeStorge;\n  } else {\n    time = '';\n  }\n  uni.setStorageSync(Last__Visit__Time__KEY, getTime());\n  return time;\n};\n\n\nvar PAGE_RESIDENCE_TIME = '__page__residence__time';\nvar First_Page_residence_time = 0;\nvar Last_Page_residence_time = 0;\n\n\nvar setPageResidenceTime = function setPageResidenceTime() {\n  First_Page_residence_time = getTime();\n  if (getPlatformName() === 'n') {\n    uni.setStorageSync(PAGE_RESIDENCE_TIME, getTime());\n  }\n  return First_Page_residence_time;\n};\n\nvar getPageResidenceTime = function getPageResidenceTime() {\n  Last_Page_residence_time = getTime();\n  if (getPlatformName() === 'n') {\n    First_Page_residence_time = uni.getStorageSync(PAGE_RESIDENCE_TIME);\n  }\n  return Last_Page_residence_time - First_Page_residence_time;\n};\nvar TOTAL__VISIT__COUNT = 'Total__Visit__Count';\nvar getTotalVisitCount = function getTotalVisitCount() {\n  var timeStorge = uni.getStorageSync(TOTAL__VISIT__COUNT);\n  var count = 1;\n  if (timeStorge) {\n    count = timeStorge;\n    count++;\n  }\n  uni.setStorageSync(TOTAL__VISIT__COUNT, count);\n  return count;\n};\n\nvar GetEncodeURIComponentOptions = function GetEncodeURIComponentOptions(statData) {\n  var data = {};\n  for (var prop in statData) {\n    data[prop] = encodeURIComponent(statData[prop]);\n  }\n  return data;\n};\n\nvar Set__First__Time = 0;\nvar Set__Last__Time = 0;\n\nvar getFirstTime = function getFirstTime() {\n  var time = new Date().getTime();\n  Set__First__Time = time;\n  Set__Last__Time = 0;\n  return time;\n};\n\n\nvar getLastTime = function getLastTime() {\n  var time = new Date().getTime();\n  Set__Last__Time = time;\n  return time;\n};\n\n\nvar getResidenceTime = function getResidenceTime(type) {\n  var residenceTime = 0;\n  if (Set__First__Time !== 0) {\n    residenceTime = Set__Last__Time - Set__First__Time;\n  }\n\n  residenceTime = parseInt(residenceTime / 1000);\n  residenceTime = residenceTime < 1 ? 1 : residenceTime;\n  if (type === 'app') {\n    var overtime = residenceTime > APP_PVER_TIME ? true : false;\n    return {\n      residenceTime: residenceTime,\n      overtime: overtime };\n\n  }\n  if (type === 'page') {\n    var _overtime = residenceTime > PAGE_PVER_TIME ? true : false;\n    return {\n      residenceTime: residenceTime,\n      overtime: _overtime };\n\n  }\n\n  return {\n    residenceTime: residenceTime };\n\n\n};\n\nvar getRoute = function getRoute() {\n  var pages = getCurrentPages();\n  var page = pages[pages.length - 1];\n  var _self = page.$vm;\n\n  if (getPlatformName() === 'bd') {\n    return _self.$mp && _self.$mp.page.is;\n  } else {\n    return _self.$scope && _self.$scope.route || _self.$mp && _self.$mp.page.route;\n  }\n};\n\nvar getPageRoute = function getPageRoute(self) {\n  var pages = getCurrentPages();\n  var page = pages[pages.length - 1];\n  var _self = page.$vm;\n  var query = self._query;\n  var str = query && JSON.stringify(query) !== '{}' ? '?' + JSON.stringify(query) : '';\n  // clear\n  self._query = '';\n  if (getPlatformName() === 'bd') {\n    return _self.$mp && _self.$mp.page.is + str;\n  } else {\n    return _self.$scope && _self.$scope.route + str || _self.$mp && _self.$mp.page.route + str;\n  }\n};\n\nvar getPageTypes = function getPageTypes(self) {\n  if (self.mpType === 'page' || self.$mp && self.$mp.mpType === 'page' || self.$options.mpType === 'page') {\n    return true;\n  }\n  return false;\n};\n\nvar calibration = function calibration(eventName, options) {\n  //  login 、 share 、pay_success 、pay_fail 、register 、title\n  if (!eventName) {\n    console.error(\"uni.report \\u7F3A\\u5C11 [eventName] \\u53C2\\u6570\");\n    return true;\n  }\n  if (typeof eventName !== 'string') {\n    console.error(\"uni.report [eventName] \\u53C2\\u6570\\u7C7B\\u578B\\u9519\\u8BEF,\\u53EA\\u80FD\\u4E3A String \\u7C7B\\u578B\");\n    return true;\n  }\n  if (eventName.length > 255) {\n    console.error(\"uni.report [eventName] \\u53C2\\u6570\\u957F\\u5EA6\\u4E0D\\u80FD\\u5927\\u4E8E 255\");\n    return true;\n  }\n\n  if (typeof options !== 'string' && typeof options !== 'object') {\n    console.error(\"uni.report [options] \\u53C2\\u6570\\u7C7B\\u578B\\u9519\\u8BEF,\\u53EA\\u80FD\\u4E3A String \\u6216 Object \\u7C7B\\u578B\");\n    return true;\n  }\n\n  if (typeof options === 'string' && options.length > 255) {\n    console.error(\"uni.report [options] \\u53C2\\u6570\\u957F\\u5EA6\\u4E0D\\u80FD\\u5927\\u4E8E 255\");\n    return true;\n  }\n\n  if (eventName === 'title' && typeof options !== 'string') {\n    console.error('uni.report [eventName] 参数为 title 时，[options] 参数只能为 String 类型');\n    return true;\n  }\n};\n\nvar PagesJson = __webpack_require__(/*! uni-pages?{\"type\":\"style\"} */ 7).default;\nvar statConfig = __webpack_require__(/*! uni-stat-config */ 8).default || __webpack_require__(/*! uni-stat-config */ 8);\n\nvar resultOptions = uni.getSystemInfoSync();var\n\nUtil = /*#__PURE__*/function () {\n  function Util() {_classCallCheck(this, Util);\n    this.self = '';\n    this._retry = 0;\n    this._platform = '';\n    this._query = {};\n    this._navigationBarTitle = {\n      config: '',\n      page: '',\n      report: '',\n      lt: '' };\n\n    this._operatingTime = 0;\n    this._reportingRequestData = {\n      '1': [],\n      '11': [] };\n\n    this.__prevent_triggering = false;\n\n    this.__licationHide = false;\n    this.__licationShow = false;\n    this._lastPageRoute = '';\n    this.statData = {\n      uuid: getUuid(),\n      ut: getPlatformName(),\n      mpn: getPackName(),\n      ak: statConfig.appid,\n      usv: STAT_VERSION,\n      v: getVersion(),\n      ch: getChannel(),\n      cn: '',\n      pn: '',\n      ct: '',\n      t: getTime(),\n      tt: '',\n      p: resultOptions.platform === 'android' ? 'a' : 'i',\n      brand: resultOptions.brand || '',\n      md: resultOptions.model,\n      sv: resultOptions.system.replace(/(Android|iOS)\\s/, ''),\n      mpsdk: resultOptions.SDKVersion || '',\n      mpv: resultOptions.version || '',\n      lang: resultOptions.language,\n      pr: resultOptions.pixelRatio,\n      ww: resultOptions.windowWidth,\n      wh: resultOptions.windowHeight,\n      sw: resultOptions.screenWidth,\n      sh: resultOptions.screenHeight };\n\n\n  }_createClass(Util, [{ key: \"_applicationShow\", value: function _applicationShow()\n\n    {\n      if (this.__licationHide) {\n        getLastTime();\n        var time = getResidenceTime('app');\n        if (time.overtime) {\n          var options = {\n            path: this._lastPageRoute,\n            scene: this.statData.sc };\n\n          this._sendReportRequest(options);\n        }\n        this.__licationHide = false;\n      }\n    } }, { key: \"_applicationHide\", value: function _applicationHide(\n\n    self, type) {\n\n      this.__licationHide = true;\n      getLastTime();\n      var time = getResidenceTime();\n      getFirstTime();\n      var route = getPageRoute(this);\n      this._sendHideRequest({\n        urlref: route,\n        urlref_ts: time.residenceTime },\n      type);\n    } }, { key: \"_pageShow\", value: function _pageShow()\n\n    {\n      var route = getPageRoute(this);\n      var routepath = getRoute();\n      this._navigationBarTitle.config = PagesJson &&\n      PagesJson.pages[routepath] &&\n      PagesJson.pages[routepath].titleNView &&\n      PagesJson.pages[routepath].titleNView.titleText ||\n      PagesJson &&\n      PagesJson.pages[routepath] &&\n      PagesJson.pages[routepath].navigationBarTitleText || '';\n\n      if (this.__licationShow) {\n        getFirstTime();\n        this.__licationShow = false;\n        // console.log('这是 onLauch 之后执行的第一次 pageShow ，为下次记录时间做准备');\n        this._lastPageRoute = route;\n        return;\n      }\n\n      getLastTime();\n      this._lastPageRoute = route;\n      var time = getResidenceTime('page');\n      if (time.overtime) {\n        var options = {\n          path: this._lastPageRoute,\n          scene: this.statData.sc };\n\n        this._sendReportRequest(options);\n      }\n      getFirstTime();\n    } }, { key: \"_pageHide\", value: function _pageHide()\n\n    {\n      if (!this.__licationHide) {\n        getLastTime();\n        var time = getResidenceTime('page');\n        this._sendPageRequest({\n          url: this._lastPageRoute,\n          urlref: this._lastPageRoute,\n          urlref_ts: time.residenceTime });\n\n        this._navigationBarTitle = {\n          config: '',\n          page: '',\n          report: '',\n          lt: '' };\n\n        return;\n      }\n    } }, { key: \"_login\", value: function _login()\n\n    {\n      this._sendEventRequest({\n        key: 'login' },\n      0);\n    } }, { key: \"_share\", value: function _share()\n\n    {\n      this._sendEventRequest({\n        key: 'share' },\n      0);\n    } }, { key: \"_payment\", value: function _payment(\n    key) {\n      this._sendEventRequest({\n        key: key },\n      0);\n    } }, { key: \"_sendReportRequest\", value: function _sendReportRequest(\n    options) {\n\n      this._navigationBarTitle.lt = '1';\n      var query = options.query && JSON.stringify(options.query) !== '{}' ? '?' + JSON.stringify(options.query) : '';\n      this.statData.lt = '1';\n      this.statData.url = options.path + query || '';\n      this.statData.t = getTime();\n      this.statData.sc = getScene(options.scene);\n      this.statData.fvts = getFirstVisitTime();\n      this.statData.lvts = getLastVisitTime();\n      this.statData.tvc = getTotalVisitCount();\n      if (getPlatformName() === 'n') {\n        this.getProperty();\n      } else {\n        this.getNetworkInfo();\n      }\n    } }, { key: \"_sendPageRequest\", value: function _sendPageRequest(\n\n    opt) {var\n\n      url =\n\n\n      opt.url,urlref = opt.urlref,urlref_ts = opt.urlref_ts;\n      this._navigationBarTitle.lt = '11';\n      var options = {\n        ak: this.statData.ak,\n        uuid: this.statData.uuid,\n        lt: '11',\n        ut: this.statData.ut,\n        url: url,\n        tt: this.statData.tt,\n        urlref: urlref,\n        urlref_ts: urlref_ts,\n        ch: this.statData.ch,\n        usv: this.statData.usv,\n        t: getTime(),\n        p: this.statData.p };\n\n      this.request(options);\n    } }, { key: \"_sendHideRequest\", value: function _sendHideRequest(\n\n    opt, type) {var\n\n      urlref =\n\n      opt.urlref,urlref_ts = opt.urlref_ts;\n      var options = {\n        ak: this.statData.ak,\n        uuid: this.statData.uuid,\n        lt: '3',\n        ut: this.statData.ut,\n        urlref: urlref,\n        urlref_ts: urlref_ts,\n        ch: this.statData.ch,\n        usv: this.statData.usv,\n        t: getTime(),\n        p: this.statData.p };\n\n      this.request(options, type);\n    } }, { key: \"_sendEventRequest\", value: function _sendEventRequest()\n\n\n\n    {var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},_ref$key = _ref.key,key = _ref$key === void 0 ? '' : _ref$key,_ref$value = _ref.value,value = _ref$value === void 0 ? \"\" : _ref$value;\n      var route = this._lastPageRoute;\n      var options = {\n        ak: this.statData.ak,\n        uuid: this.statData.uuid,\n        lt: '21',\n        ut: this.statData.ut,\n        url: route,\n        ch: this.statData.ch,\n        e_n: key,\n        e_v: typeof value === 'object' ? JSON.stringify(value) : value.toString(),\n        usv: this.statData.usv,\n        t: getTime(),\n        p: this.statData.p };\n\n      this.request(options);\n    } }, { key: \"getNetworkInfo\", value: function getNetworkInfo()\n\n    {var _this = this;\n      uni.getNetworkType({\n        success: function success(result) {\n          _this.statData.net = result.networkType;\n          _this.getLocation();\n        } });\n\n    } }, { key: \"getProperty\", value: function getProperty()\n\n    {var _this2 = this;\n      plus.runtime.getProperty(plus.runtime.appid, function (wgtinfo) {\n        _this2.statData.v = wgtinfo.version || '';\n        _this2.getNetworkInfo();\n      });\n    } }, { key: \"getLocation\", value: function getLocation()\n\n    {var _this3 = this;\n      if (statConfig.getLocation) {\n        uni.getLocation({\n          type: 'wgs84',\n          geocode: true,\n          success: function success(result) {\n            if (result.address) {\n              _this3.statData.cn = result.address.country;\n              _this3.statData.pn = result.address.province;\n              _this3.statData.ct = result.address.city;\n            }\n\n            _this3.statData.lat = result.latitude;\n            _this3.statData.lng = result.longitude;\n            _this3.request(_this3.statData);\n          } });\n\n      } else {\n        this.statData.lat = 0;\n        this.statData.lng = 0;\n        this.request(this.statData);\n      }\n    } }, { key: \"request\", value: function request(\n\n    data, type) {var _this4 = this;\n      var time = getTime();\n      var title = this._navigationBarTitle;\n      data.ttn = title.page;\n      data.ttpj = title.config;\n      data.ttc = title.report;\n\n      var requestData = this._reportingRequestData;\n      if (getPlatformName() === 'n') {\n        requestData = uni.getStorageSync('__UNI__STAT__DATA') || {};\n      }\n      if (!requestData[data.lt]) {\n        requestData[data.lt] = [];\n      }\n      requestData[data.lt].push(data);\n\n      if (getPlatformName() === 'n') {\n        uni.setStorageSync('__UNI__STAT__DATA', requestData);\n      }\n      if (getPageResidenceTime() < OPERATING_TIME && !type) {\n        return;\n      }\n      var uniStatData = this._reportingRequestData;\n      if (getPlatformName() === 'n') {\n        uniStatData = uni.getStorageSync('__UNI__STAT__DATA');\n      }\n      // 时间超过，重新获取时间戳\n      setPageResidenceTime();\n      var firstArr = [];\n      var contentArr = [];\n      var lastArr = [];var _loop = function _loop(\n\n      i) {\n        var rd = uniStatData[i];\n        rd.forEach(function (elm) {\n          var newData = getSplicing(elm);\n          if (i === 0) {\n            firstArr.push(newData);\n          } else if (i === 3) {\n            lastArr.push(newData);\n          } else {\n            contentArr.push(newData);\n          }\n        });};for (var i in uniStatData) {_loop(i);\n      }\n\n      firstArr.push.apply(firstArr, contentArr.concat(lastArr));\n      var optionsData = {\n        usv: STAT_VERSION, //统计 SDK 版本号\n        t: time, //发送请求时的时间戮\n        requests: JSON.stringify(firstArr) };\n\n\n      this._reportingRequestData = {};\n      if (getPlatformName() === 'n') {\n        uni.removeStorageSync('__UNI__STAT__DATA');\n      }\n\n      if (data.ut === 'h5') {\n        this.imageRequest(optionsData);\n        return;\n      }\n\n      if (getPlatformName() === 'n' && this.statData.p === 'a') {\n        setTimeout(function () {\n          _this4._sendRequest(optionsData);\n        }, 200);\n        return;\n      }\n      this._sendRequest(optionsData);\n    } }, { key: \"_sendRequest\", value: function _sendRequest(\n    optionsData) {var _this5 = this;\n      uni.request({\n        url: STAT_URL,\n        method: 'POST',\n        // header: {\n        //   'content-type': 'application/json' // 默认值\n        // },\n        data: optionsData,\n        success: function success() {\n          // if (process.env.NODE_ENV === 'development') {\n          //   console.log('stat request success');\n          // }\n        },\n        fail: function fail(e) {\n          if (++_this5._retry < 3) {\n            setTimeout(function () {\n              _this5._sendRequest(optionsData);\n            }, 1000);\n          }\n        } });\n\n    }\n    /**\r\n       * h5 请求\r\n       */ }, { key: \"imageRequest\", value: function imageRequest(\n    data) {\n      var image = new Image();\n      var options = getSgin(GetEncodeURIComponentOptions(data)).options;\n      image.src = STAT_H5_URL + '?' + options;\n    } }, { key: \"sendEvent\", value: function sendEvent(\n\n    key, value) {\n      // 校验 type 参数\n      if (calibration(key, value)) return;\n\n      if (key === 'title') {\n        this._navigationBarTitle.report = value;\n        return;\n      }\n      this._sendEventRequest({\n        key: key,\n        value: typeof value === 'object' ? JSON.stringify(value) : value },\n      1);\n    } }]);return Util;}();var\n\n\n\nStat = /*#__PURE__*/function (_Util) {_inherits(Stat, _Util);_createClass(Stat, null, [{ key: \"getInstance\", value: function getInstance()\n    {\n      if (!this.instance) {\n        this.instance = new Stat();\n      }\n      return this.instance;\n    } }]);\n  function Stat() {var _this6;_classCallCheck(this, Stat);\n    _this6 = _possibleConstructorReturn(this, _getPrototypeOf(Stat).call(this));\n    _this6.instance = null;\n    // 注册拦截器\n    if (typeof uni.addInterceptor === 'function' && \"development\" !== 'development') {\n      _this6.addInterceptorInit();\n      _this6.interceptLogin();\n      _this6.interceptShare(true);\n      _this6.interceptRequestPayment();\n    }return _this6;\n  }_createClass(Stat, [{ key: \"addInterceptorInit\", value: function addInterceptorInit()\n\n    {\n      var self = this;\n      uni.addInterceptor('setNavigationBarTitle', {\n        invoke: function invoke(args) {\n          self._navigationBarTitle.page = args.title;\n        } });\n\n    } }, { key: \"interceptLogin\", value: function interceptLogin()\n\n    {\n      var self = this;\n      uni.addInterceptor('login', {\n        complete: function complete() {\n          self._login();\n        } });\n\n    } }, { key: \"interceptShare\", value: function interceptShare(\n\n    type) {\n      var self = this;\n      if (!type) {\n        self._share();\n        return;\n      }\n      uni.addInterceptor('share', {\n        success: function success() {\n          self._share();\n        },\n        fail: function fail() {\n          self._share();\n        } });\n\n    } }, { key: \"interceptRequestPayment\", value: function interceptRequestPayment()\n\n    {\n      var self = this;\n      uni.addInterceptor('requestPayment', {\n        success: function success() {\n          self._payment('pay_success');\n        },\n        fail: function fail() {\n          self._payment('pay_fail');\n        } });\n\n    } }, { key: \"report\", value: function report(\n\n    options, self) {\n      this.self = self;\n      // if (process.env.NODE_ENV === 'development') {\n      //   console.log('report init');\n      // }\n      setPageResidenceTime();\n      this.__licationShow = true;\n      this._sendReportRequest(options, true);\n    } }, { key: \"load\", value: function load(\n\n    options, self) {\n      if (!self.$scope && !self.$mp) {\n        var page = getCurrentPages();\n        self.$scope = page[page.length - 1];\n      }\n      this.self = self;\n      this._query = options;\n    } }, { key: \"show\", value: function show(\n\n    self) {\n      this.self = self;\n      if (getPageTypes(self)) {\n        this._pageShow(self);\n      } else {\n        this._applicationShow(self);\n      }\n    } }, { key: \"ready\", value: function ready(\n\n    self) {\n      // this.self = self;\n      // if (getPageTypes(self)) {\n      //   this._pageShow(self);\n      // }\n    } }, { key: \"hide\", value: function hide(\n    self) {\n      this.self = self;\n      if (getPageTypes(self)) {\n        this._pageHide(self);\n      } else {\n        this._applicationHide(self, true);\n      }\n    } }, { key: \"error\", value: function error(\n    em) {\n      if (this._platform === 'devtools') {\n        if (true) {\n          console.info('当前运行环境为开发者工具，不上报数据。');\n        }\n        // return;\n      }\n      var emVal = '';\n      if (!em.message) {\n        emVal = JSON.stringify(em);\n      } else {\n        emVal = em.stack;\n      }\n      var options = {\n        ak: this.statData.ak,\n        uuid: this.statData.uuid,\n        lt: '31',\n        ut: this.statData.ut,\n        ch: this.statData.ch,\n        mpsdk: this.statData.mpsdk,\n        mpv: this.statData.mpv,\n        v: this.statData.v,\n        em: emVal,\n        usv: this.statData.usv,\n        t: getTime(),\n        p: this.statData.p };\n\n      this.request(options);\n    } }]);return Stat;}(Util);\n\n\nvar stat = Stat.getInstance();\nvar isHide = false;\nvar lifecycle = {\n  onLaunch: function onLaunch(options) {\n    stat.report(options, this);\n  },\n  onReady: function onReady() {\n    stat.ready(this);\n  },\n  onLoad: function onLoad(options) {\n    stat.load(options, this);\n    // 重写分享，获取分享上报事件\n    if (this.$scope && this.$scope.onShareAppMessage) {\n      var oldShareAppMessage = this.$scope.onShareAppMessage;\n      this.$scope.onShareAppMessage = function (options) {\n        stat.interceptShare(false);\n        return oldShareAppMessage.call(this, options);\n      };\n    }\n  },\n  onShow: function onShow() {\n    isHide = false;\n    stat.show(this);\n  },\n  onHide: function onHide() {\n    isHide = true;\n    stat.hide(this);\n  },\n  onUnload: function onUnload() {\n    if (isHide) {\n      isHide = false;\n      return;\n    }\n    stat.hide(this);\n  },\n  onError: function onError(e) {\n    stat.error(e);\n  } };\n\n\nfunction main() {\n  if (true) {\n    uni.report = function (type, options) {};\n  } else { var Vue; }\n}\n\nmain();\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/uni-app-plus/dist/index.js */ 1)[\"default\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///5\n");

/***/ }),

/***/ 6:
/*!******************************************************!*\
  !*** ./node_modules/@dcloudio/uni-stat/package.json ***!
  \******************************************************/
/*! exports provided: _from, _id, _inBundle, _integrity, _location, _phantomChildren, _requested, _requiredBy, _resolved, _shasum, _spec, _where, author, bugs, bundleDependencies, deprecated, description, devDependencies, files, gitHead, homepage, license, main, name, repository, scripts, version, default */
/***/ (function(module) {

eval("module.exports = {\"_from\":\"@dcloudio/uni-stat@next\",\"_id\":\"@dcloudio/uni-stat@2.0.0-23720191024001\",\"_inBundle\":false,\"_integrity\":\"sha512-vJEk493Vdb8KueNzR2otzDi23rfyRcQBo/t1R41MwNGPk+AUB94gh10+HVLo98DRcvMzkuVofz3KXTAfEx24iw==\",\"_location\":\"/@dcloudio/uni-stat\",\"_phantomChildren\":{},\"_requested\":{\"type\":\"tag\",\"registry\":true,\"raw\":\"@dcloudio/uni-stat@next\",\"name\":\"@dcloudio/uni-stat\",\"escapedName\":\"@dcloudio%2funi-stat\",\"scope\":\"@dcloudio\",\"rawSpec\":\"next\",\"saveSpec\":null,\"fetchSpec\":\"next\"},\"_requiredBy\":[\"#USER\",\"/\",\"/@dcloudio/vue-cli-plugin-uni\"],\"_resolved\":\"https://registry.npmjs.org/@dcloudio/uni-stat/-/uni-stat-2.0.0-23720191024001.tgz\",\"_shasum\":\"18272814446a9bc6053bc92666ec7064a1767588\",\"_spec\":\"@dcloudio/uni-stat@next\",\"_where\":\"/Users/fxy/Documents/DCloud/HbuilderX-plugins/release/uniapp-cli\",\"author\":\"\",\"bugs\":{\"url\":\"https://github.com/dcloudio/uni-app/issues\"},\"bundleDependencies\":false,\"deprecated\":false,\"description\":\"\",\"devDependencies\":{\"@babel/core\":\"^7.5.5\",\"@babel/preset-env\":\"^7.5.5\",\"eslint\":\"^6.1.0\",\"rollup\":\"^1.19.3\",\"rollup-plugin-babel\":\"^4.3.3\",\"rollup-plugin-clear\":\"^2.0.7\",\"rollup-plugin-commonjs\":\"^10.0.2\",\"rollup-plugin-copy\":\"^3.1.0\",\"rollup-plugin-eslint\":\"^7.0.0\",\"rollup-plugin-json\":\"^4.0.0\",\"rollup-plugin-node-resolve\":\"^5.2.0\",\"rollup-plugin-replace\":\"^2.2.0\",\"rollup-plugin-uglify\":\"^6.0.2\"},\"files\":[\"dist\",\"package.json\",\"LICENSE\"],\"gitHead\":\"a725c04ef762e5df78a9a69d140c2666e0de05fc\",\"homepage\":\"https://github.com/dcloudio/uni-app#readme\",\"license\":\"Apache-2.0\",\"main\":\"dist/index.js\",\"name\":\"@dcloudio/uni-stat\",\"repository\":{\"type\":\"git\",\"url\":\"git+https://github.com/dcloudio/uni-app.git\",\"directory\":\"packages/uni-stat\"},\"scripts\":{\"build\":\"NODE_ENV=production rollup -c rollup.config.js\",\"dev\":\"NODE_ENV=development rollup -w -c rollup.config.js\"},\"version\":\"2.0.0-23720191024001\"};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiI2LmpzIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///6\n");

/***/ }),

/***/ 623:
/*!**********************************************************!*\
  !*** C:/Users/Admin/Desktop/evc.app/common/js/qrcode.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(uni) {Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = void 0;var QRCode = {};\n(function () {\n  /**\r\n               * 获取单个字符的utf8编码\r\n               * unicode BMP平面约65535个字符\r\n               * @param {num} code\r\n               * return {array}\r\n               */\n  function unicodeFormat8(code) {\n    // 1 byte\n    var c0, c1, c2;\n    if (code < 128) {\n      return [code];\n      // 2 bytes\n    } else if (code < 2048) {\n      c0 = 192 + (code >> 6);\n      c1 = 128 + (code & 63);\n      return [c0, c1];\n      // 3 bytes\n    } else {\n      c0 = 224 + (code >> 12);\n      c1 = 128 + (code >> 6 & 63);\n      c2 = 128 + (code & 63);\n      return [c0, c1, c2];\n    }\n  }\n  /**\r\n     * 获取字符串的utf8编码字节串\r\n     * @param {string} string\r\n     * @return {array}\r\n     */\n  function getUTF8Bytes(string) {\n    var utf8codes = [];\n    for (var i = 0; i < string.length; i++) {\n      var code = string.charCodeAt(i);\n      var utf8 = unicodeFormat8(code);\n      for (var j = 0; j < utf8.length; j++) {\n        utf8codes.push(utf8[j]);\n      }\n    }\n    return utf8codes;\n  }\n  /**\r\n     * 二维码算法实现\r\n     * @param {string} data              要编码的信息字符串\r\n     * @param {num} errorCorrectLevel 纠错等级\r\n     */\n  function QRCodeAlg(data, errorCorrectLevel) {\n    this.typeNumber = -1; //版本\n    this.errorCorrectLevel = errorCorrectLevel;\n    this.modules = null; //二维矩阵，存放最终结果\n    this.moduleCount = 0; //矩阵大小\n    this.dataCache = null; //数据缓存\n    this.rsBlocks = null; //版本数据信息\n    this.totalDataCount = -1; //可使用的数据量\n    this.data = data;\n    this.utf8bytes = getUTF8Bytes(data);\n    this.make();\n  }\n  QRCodeAlg.prototype = {\n    constructor: QRCodeAlg,\n    /**\r\n                             * 获取二维码矩阵大小\r\n                             * @return {num} 矩阵大小\r\n                             */\n    getModuleCount: function getModuleCount() {\n      return this.moduleCount;\n    },\n    /**\r\n        * 编码\r\n        */\n    make: function make() {\n      this.getRightType();\n      this.dataCache = this.createData();\n      this.createQrcode();\n    },\n    /**\r\n        * 设置二位矩阵功能图形\r\n        * @param  {bool} test 表示是否在寻找最好掩膜阶段\r\n        * @param  {num} maskPattern 掩膜的版本\r\n        */\n    makeImpl: function makeImpl(maskPattern) {\n      this.moduleCount = this.typeNumber * 4 + 17;\n      this.modules = new Array(this.moduleCount);\n      for (var row = 0; row < this.moduleCount; row++) {\n        this.modules[row] = new Array(this.moduleCount);\n      }\n      this.setupPositionProbePattern(0, 0);\n      this.setupPositionProbePattern(this.moduleCount - 7, 0);\n      this.setupPositionProbePattern(0, this.moduleCount - 7);\n      this.setupPositionAdjustPattern();\n      this.setupTimingPattern();\n      this.setupTypeInfo(true, maskPattern);\n      if (this.typeNumber >= 7) {\n        this.setupTypeNumber(true);\n      }\n      this.mapData(this.dataCache, maskPattern);\n    },\n    /**\r\n        * 设置二维码的位置探测图形\r\n        * @param  {num} row 探测图形的中心横坐标\r\n        * @param  {num} col 探测图形的中心纵坐标\r\n        */\n    setupPositionProbePattern: function setupPositionProbePattern(row, col) {\n      for (var r = -1; r <= 7; r++) {\n        if (row + r <= -1 || this.moduleCount <= row + r) continue;\n        for (var c = -1; c <= 7; c++) {\n          if (col + c <= -1 || this.moduleCount <= col + c) continue;\n          if (0 <= r && r <= 6 && (c == 0 || c == 6) || 0 <= c && c <= 6 && (r == 0 || r == 6) || 2 <= r && r <= 4 && 2 <= c && c <= 4) {\n            this.modules[row + r][col + c] = true;\n          } else {\n            this.modules[row + r][col + c] = false;\n          }\n        }\n      }\n    },\n    /**\r\n        * 创建二维码\r\n        * @return {[type]} [description]\r\n        */\n    createQrcode: function createQrcode() {\n      var minLostPoint = 0;\n      var pattern = 0;\n      var bestModules = null;\n      for (var i = 0; i < 8; i++) {\n        this.makeImpl(i);\n        var lostPoint = QRUtil.getLostPoint(this);\n        if (i == 0 || minLostPoint > lostPoint) {\n          minLostPoint = lostPoint;\n          pattern = i;\n          bestModules = this.modules;\n        }\n      }\n      this.modules = bestModules;\n      this.setupTypeInfo(false, pattern);\n      if (this.typeNumber >= 7) {\n        this.setupTypeNumber(false);\n      }\n    },\n    /**\r\n        * 设置定位图形\r\n        * @return {[type]} [description]\r\n        */\n    setupTimingPattern: function setupTimingPattern() {\n      for (var r = 8; r < this.moduleCount - 8; r++) {\n        if (this.modules[r][6] != null) {\n          continue;\n        }\n        this.modules[r][6] = r % 2 == 0;\n        if (this.modules[6][r] != null) {\n          continue;\n        }\n        this.modules[6][r] = r % 2 == 0;\n      }\n    },\n    /**\r\n        * 设置矫正图形\r\n        * @return {[type]} [description]\r\n        */\n    setupPositionAdjustPattern: function setupPositionAdjustPattern() {\n      var pos = QRUtil.getPatternPosition(this.typeNumber);\n      for (var i = 0; i < pos.length; i++) {\n        for (var j = 0; j < pos.length; j++) {\n          var row = pos[i];\n          var col = pos[j];\n          if (this.modules[row][col] != null) {\n            continue;\n          }\n          for (var r = -2; r <= 2; r++) {\n            for (var c = -2; c <= 2; c++) {\n              if (r == -2 || r == 2 || c == -2 || c == 2 || r == 0 && c == 0) {\n                this.modules[row + r][col + c] = true;\n              } else {\n                this.modules[row + r][col + c] = false;\n              }\n            }\n          }\n        }\n      }\n    },\n    /**\r\n        * 设置版本信息（7以上版本才有）\r\n        * @param  {bool} test 是否处于判断最佳掩膜阶段\r\n        * @return {[type]}      [description]\r\n        */\n    setupTypeNumber: function setupTypeNumber(test) {\n      var bits = QRUtil.getBCHTypeNumber(this.typeNumber);\n      for (var i = 0; i < 18; i++) {\n        var mod = !test && (bits >> i & 1) == 1;\n        this.modules[Math.floor(i / 3)][i % 3 + this.moduleCount - 8 - 3] = mod;\n        this.modules[i % 3 + this.moduleCount - 8 - 3][Math.floor(i / 3)] = mod;\n      }\n    },\n    /**\r\n        * 设置格式信息（纠错等级和掩膜版本）\r\n        * @param  {bool} test\r\n        * @param  {num} maskPattern 掩膜版本\r\n        * @return {}\r\n        */\n    setupTypeInfo: function setupTypeInfo(test, maskPattern) {\n      var data = QRErrorCorrectLevel[this.errorCorrectLevel] << 3 | maskPattern;\n      var bits = QRUtil.getBCHTypeInfo(data);\n      // vertical\n      for (var i = 0; i < 15; i++) {\n        var mod = !test && (bits >> i & 1) == 1;\n        if (i < 6) {\n          this.modules[i][8] = mod;\n        } else if (i < 8) {\n          this.modules[i + 1][8] = mod;\n        } else {\n          this.modules[this.moduleCount - 15 + i][8] = mod;\n        }\n        // horizontal\n        var mod = !test && (bits >> i & 1) == 1;\n        if (i < 8) {\n          this.modules[8][this.moduleCount - i - 1] = mod;\n        } else if (i < 9) {\n          this.modules[8][15 - i - 1 + 1] = mod;\n        } else {\n          this.modules[8][15 - i - 1] = mod;\n        }\n      }\n      // fixed module\n      this.modules[this.moduleCount - 8][8] = !test;\n    },\n    /**\r\n        * 数据编码\r\n        * @return {[type]} [description]\r\n        */\n    createData: function createData() {\n      var buffer = new QRBitBuffer();\n      var lengthBits = this.typeNumber > 9 ? 16 : 8;\n      buffer.put(4, 4); //添加模式\n      buffer.put(this.utf8bytes.length, lengthBits);\n      for (var i = 0, l = this.utf8bytes.length; i < l; i++) {\n        buffer.put(this.utf8bytes[i], 8);\n      }\n      if (buffer.length + 4 <= this.totalDataCount * 8) {\n        buffer.put(0, 4);\n      }\n      // padding\n      while (buffer.length % 8 != 0) {\n        buffer.putBit(false);\n      }\n      // padding\n      while (true) {\n        if (buffer.length >= this.totalDataCount * 8) {\n          break;\n        }\n        buffer.put(QRCodeAlg.PAD0, 8);\n        if (buffer.length >= this.totalDataCount * 8) {\n          break;\n        }\n        buffer.put(QRCodeAlg.PAD1, 8);\n      }\n      return this.createBytes(buffer);\n    },\n    /**\r\n        * 纠错码编码\r\n        * @param  {buffer} buffer 数据编码\r\n        * @return {[type]}\r\n        */\n    createBytes: function createBytes(buffer) {\n      var offset = 0;\n      var maxDcCount = 0;\n      var maxEcCount = 0;\n      var length = this.rsBlock.length / 3;\n      var rsBlocks = new Array();\n      for (var i = 0; i < length; i++) {\n        var count = this.rsBlock[i * 3 + 0];\n        var totalCount = this.rsBlock[i * 3 + 1];\n        var dataCount = this.rsBlock[i * 3 + 2];\n        for (var j = 0; j < count; j++) {\n          rsBlocks.push([dataCount, totalCount]);\n        }\n      }\n      var dcdata = new Array(rsBlocks.length);\n      var ecdata = new Array(rsBlocks.length);\n      for (var r = 0; r < rsBlocks.length; r++) {\n        var dcCount = rsBlocks[r][0];\n        var ecCount = rsBlocks[r][1] - dcCount;\n        maxDcCount = Math.max(maxDcCount, dcCount);\n        maxEcCount = Math.max(maxEcCount, ecCount);\n        dcdata[r] = new Array(dcCount);\n        for (var i = 0; i < dcdata[r].length; i++) {\n          dcdata[r][i] = 0xff & buffer.buffer[i + offset];\n        }\n        offset += dcCount;\n        var rsPoly = QRUtil.getErrorCorrectPolynomial(ecCount);\n        var rawPoly = new QRPolynomial(dcdata[r], rsPoly.getLength() - 1);\n        var modPoly = rawPoly.mod(rsPoly);\n        ecdata[r] = new Array(rsPoly.getLength() - 1);\n        for (var i = 0; i < ecdata[r].length; i++) {\n          var modIndex = i + modPoly.getLength() - ecdata[r].length;\n          ecdata[r][i] = modIndex >= 0 ? modPoly.get(modIndex) : 0;\n        }\n      }\n      var data = new Array(this.totalDataCount);\n      var index = 0;\n      for (var i = 0; i < maxDcCount; i++) {\n        for (var r = 0; r < rsBlocks.length; r++) {\n          if (i < dcdata[r].length) {\n            data[index++] = dcdata[r][i];\n          }\n        }\n      }\n      for (var i = 0; i < maxEcCount; i++) {\n        for (var r = 0; r < rsBlocks.length; r++) {\n          if (i < ecdata[r].length) {\n            data[index++] = ecdata[r][i];\n          }\n        }\n      }\n      return data;\n\n    },\n    /**\r\n        * 布置模块，构建最终信息\r\n        * @param  {} data\r\n        * @param  {} maskPattern\r\n        * @return {}\r\n        */\n    mapData: function mapData(data, maskPattern) {\n      var inc = -1;\n      var row = this.moduleCount - 1;\n      var bitIndex = 7;\n      var byteIndex = 0;\n      for (var col = this.moduleCount - 1; col > 0; col -= 2) {\n        if (col == 6) col--;\n        while (true) {\n          for (var c = 0; c < 2; c++) {\n            if (this.modules[row][col - c] == null) {\n              var dark = false;\n              if (byteIndex < data.length) {\n                dark = (data[byteIndex] >>> bitIndex & 1) == 1;\n              }\n              var mask = QRUtil.getMask(maskPattern, row, col - c);\n              if (mask) {\n                dark = !dark;\n              }\n              this.modules[row][col - c] = dark;\n              bitIndex--;\n              if (bitIndex == -1) {\n                byteIndex++;\n                bitIndex = 7;\n              }\n            }\n          }\n          row += inc;\n          if (row < 0 || this.moduleCount <= row) {\n            row -= inc;\n            inc = -inc;\n            break;\n          }\n        }\n      }\n    } };\n\n  /**\r\n          * 填充字段\r\n          */\n  QRCodeAlg.PAD0 = 0xEC;\n  QRCodeAlg.PAD1 = 0x11;\n  //---------------------------------------------------------------------\n  // 纠错等级对应的编码\n  //---------------------------------------------------------------------\n  var QRErrorCorrectLevel = [1, 0, 3, 2];\n  //---------------------------------------------------------------------\n  // 掩膜版本\n  //---------------------------------------------------------------------\n  var QRMaskPattern = {\n    PATTERN000: 0,\n    PATTERN001: 1,\n    PATTERN010: 2,\n    PATTERN011: 3,\n    PATTERN100: 4,\n    PATTERN101: 5,\n    PATTERN110: 6,\n    PATTERN111: 7 };\n\n  //---------------------------------------------------------------------\n  // 工具类\n  //---------------------------------------------------------------------\n  var QRUtil = {\n    /*\r\n                 每个版本矫正图形的位置\r\n                  */\n    PATTERN_POSITION_TABLE: [\n    [],\n    [6, 18],\n    [6, 22],\n    [6, 26],\n    [6, 30],\n    [6, 34],\n    [6, 22, 38],\n    [6, 24, 42],\n    [6, 26, 46],\n    [6, 28, 50],\n    [6, 30, 54],\n    [6, 32, 58],\n    [6, 34, 62],\n    [6, 26, 46, 66],\n    [6, 26, 48, 70],\n    [6, 26, 50, 74],\n    [6, 30, 54, 78],\n    [6, 30, 56, 82],\n    [6, 30, 58, 86],\n    [6, 34, 62, 90],\n    [6, 28, 50, 72, 94],\n    [6, 26, 50, 74, 98],\n    [6, 30, 54, 78, 102],\n    [6, 28, 54, 80, 106],\n    [6, 32, 58, 84, 110],\n    [6, 30, 58, 86, 114],\n    [6, 34, 62, 90, 118],\n    [6, 26, 50, 74, 98, 122],\n    [6, 30, 54, 78, 102, 126],\n    [6, 26, 52, 78, 104, 130],\n    [6, 30, 56, 82, 108, 134],\n    [6, 34, 60, 86, 112, 138],\n    [6, 30, 58, 86, 114, 142],\n    [6, 34, 62, 90, 118, 146],\n    [6, 30, 54, 78, 102, 126, 150],\n    [6, 24, 50, 76, 102, 128, 154],\n    [6, 28, 54, 80, 106, 132, 158],\n    [6, 32, 58, 84, 110, 136, 162],\n    [6, 26, 54, 82, 110, 138, 166],\n    [6, 30, 58, 86, 114, 142, 170]],\n\n    G15: 1 << 10 | 1 << 8 | 1 << 5 | 1 << 4 | 1 << 2 | 1 << 1 | 1 << 0,\n    G18: 1 << 12 | 1 << 11 | 1 << 10 | 1 << 9 | 1 << 8 | 1 << 5 | 1 << 2 | 1 << 0,\n    G15_MASK: 1 << 14 | 1 << 12 | 1 << 10 | 1 << 4 | 1 << 1,\n    /*\r\n                                                             BCH编码格式信息\r\n                                                              */\n    getBCHTypeInfo: function getBCHTypeInfo(data) {\n      var d = data << 10;\n      while (QRUtil.getBCHDigit(d) - QRUtil.getBCHDigit(QRUtil.G15) >= 0) {\n        d ^= QRUtil.G15 << QRUtil.getBCHDigit(d) - QRUtil.getBCHDigit(QRUtil.G15);\n      }\n      return (data << 10 | d) ^ QRUtil.G15_MASK;\n    },\n    /*\r\n       BCH编码版本信息\r\n        */\n    getBCHTypeNumber: function getBCHTypeNumber(data) {\n      var d = data << 12;\n      while (QRUtil.getBCHDigit(d) - QRUtil.getBCHDigit(QRUtil.G18) >= 0) {\n        d ^= QRUtil.G18 << QRUtil.getBCHDigit(d) - QRUtil.getBCHDigit(QRUtil.G18);\n      }\n      return data << 12 | d;\n    },\n    /*\r\n       获取BCH位信息\r\n        */\n    getBCHDigit: function getBCHDigit(data) {\n      var digit = 0;\n      while (data != 0) {\n        digit++;\n        data >>>= 1;\n      }\n      return digit;\n    },\n    /*\r\n       获取版本对应的矫正图形位置\r\n        */\n    getPatternPosition: function getPatternPosition(typeNumber) {\n      return QRUtil.PATTERN_POSITION_TABLE[typeNumber - 1];\n    },\n    /*\r\n       掩膜算法\r\n        */\n    getMask: function getMask(maskPattern, i, j) {\n      switch (maskPattern) {\n        case QRMaskPattern.PATTERN000:\n          return (i + j) % 2 == 0;\n        case QRMaskPattern.PATTERN001:\n          return i % 2 == 0;\n        case QRMaskPattern.PATTERN010:\n          return j % 3 == 0;\n        case QRMaskPattern.PATTERN011:\n          return (i + j) % 3 == 0;\n        case QRMaskPattern.PATTERN100:\n          return (Math.floor(i / 2) + Math.floor(j / 3)) % 2 == 0;\n        case QRMaskPattern.PATTERN101:\n          return i * j % 2 + i * j % 3 == 0;\n        case QRMaskPattern.PATTERN110:\n          return (i * j % 2 + i * j % 3) % 2 == 0;\n        case QRMaskPattern.PATTERN111:\n          return (i * j % 3 + (i + j) % 2) % 2 == 0;\n        default:\n          throw new Error(\"bad maskPattern:\" + maskPattern);}\n\n    },\n    /*\r\n       获取RS的纠错多项式\r\n        */\n    getErrorCorrectPolynomial: function getErrorCorrectPolynomial(errorCorrectLength) {\n      var a = new QRPolynomial([1], 0);\n      for (var i = 0; i < errorCorrectLength; i++) {\n        a = a.multiply(new QRPolynomial([1, QRMath.gexp(i)], 0));\n      }\n      return a;\n    },\n    /*\r\n       获取评价\r\n        */\n    getLostPoint: function getLostPoint(qrCode) {\n      var moduleCount = qrCode.getModuleCount(),\n      lostPoint = 0,\n      darkCount = 0;\n      for (var row = 0; row < moduleCount; row++) {\n        var sameCount = 0;\n        var head = qrCode.modules[row][0];\n        for (var col = 0; col < moduleCount; col++) {\n          var current = qrCode.modules[row][col];\n          //level 3 评价\n          if (col < moduleCount - 6) {\n            if (current && !qrCode.modules[row][col + 1] && qrCode.modules[row][col + 2] && qrCode.modules[row][col + 3] && qrCode.modules[row][col + 4] && !qrCode.modules[row][col + 5] && qrCode.modules[row][col + 6]) {\n              if (col < moduleCount - 10) {\n                if (qrCode.modules[row][col + 7] && qrCode.modules[row][col + 8] && qrCode.modules[row][col + 9] && qrCode.modules[row][col + 10]) {\n                  lostPoint += 40;\n                }\n              } else if (col > 3) {\n                if (qrCode.modules[row][col - 1] && qrCode.modules[row][col - 2] && qrCode.modules[row][col - 3] && qrCode.modules[row][col - 4]) {\n                  lostPoint += 40;\n                }\n              }\n            }\n          }\n          //level 2 评价\n          if (row < moduleCount - 1 && col < moduleCount - 1) {\n            var count = 0;\n            if (current) count++;\n            if (qrCode.modules[row + 1][col]) count++;\n            if (qrCode.modules[row][col + 1]) count++;\n            if (qrCode.modules[row + 1][col + 1]) count++;\n            if (count == 0 || count == 4) {\n              lostPoint += 3;\n            }\n          }\n          //level 1 评价\n          if (head ^ current) {\n            sameCount++;\n          } else {\n            head = current;\n            if (sameCount >= 5) {\n              lostPoint += 3 + sameCount - 5;\n            }\n            sameCount = 1;\n          }\n          //level 4 评价\n          if (current) {\n            darkCount++;\n          }\n        }\n      }\n      for (var col = 0; col < moduleCount; col++) {\n        var sameCount = 0;\n        var head = qrCode.modules[0][col];\n        for (var row = 0; row < moduleCount; row++) {\n          var current = qrCode.modules[row][col];\n          //level 3 评价\n          if (row < moduleCount - 6) {\n            if (current && !qrCode.modules[row + 1][col] && qrCode.modules[row + 2][col] && qrCode.modules[row + 3][col] && qrCode.modules[row + 4][col] && !qrCode.modules[row + 5][col] && qrCode.modules[row + 6][col]) {\n              if (row < moduleCount - 10) {\n                if (qrCode.modules[row + 7][col] && qrCode.modules[row + 8][col] && qrCode.modules[row + 9][col] && qrCode.modules[row + 10][col]) {\n                  lostPoint += 40;\n                }\n              } else if (row > 3) {\n                if (qrCode.modules[row - 1][col] && qrCode.modules[row - 2][col] && qrCode.modules[row - 3][col] && qrCode.modules[row - 4][col]) {\n                  lostPoint += 40;\n                }\n              }\n            }\n          }\n          //level 1 评价\n          if (head ^ current) {\n            sameCount++;\n          } else {\n            head = current;\n            if (sameCount >= 5) {\n              lostPoint += 3 + sameCount - 5;\n            }\n            sameCount = 1;\n          }\n        }\n      }\n      // LEVEL4\n      var ratio = Math.abs(100 * darkCount / moduleCount / moduleCount - 50) / 5;\n      lostPoint += ratio * 10;\n      return lostPoint;\n    } };\n\n\n  //---------------------------------------------------------------------\n  // QRMath使用的数学工具\n  //---------------------------------------------------------------------\n  var QRMath = {\n    /*\r\n                 将n转化为a^m\r\n                  */\n    glog: function glog(n) {\n      if (n < 1) {\n        throw new Error(\"glog(\" + n + \")\");\n      }\n      return QRMath.LOG_TABLE[n];\n    },\n    /*\r\n       将a^m转化为n\r\n        */\n    gexp: function gexp(n) {\n      while (n < 0) {\n        n += 255;\n      }\n      while (n >= 256) {\n        n -= 255;\n      }\n      return QRMath.EXP_TABLE[n];\n    },\n    EXP_TABLE: new Array(256),\n    LOG_TABLE: new Array(256) };\n\n\n  for (var i = 0; i < 8; i++) {\n    QRMath.EXP_TABLE[i] = 1 << i;\n  }\n  for (var i = 8; i < 256; i++) {\n    QRMath.EXP_TABLE[i] = QRMath.EXP_TABLE[i - 4] ^ QRMath.EXP_TABLE[i - 5] ^ QRMath.EXP_TABLE[i - 6] ^ QRMath.EXP_TABLE[i - 8];\n  }\n  for (var i = 0; i < 255; i++) {\n    QRMath.LOG_TABLE[QRMath.EXP_TABLE[i]] = i;\n  }\n  //---------------------------------------------------------------------\n  // QRPolynomial 多项式\n  //---------------------------------------------------------------------\n  /**\r\n   * 多项式类\r\n   * @param {Array} num   系数\r\n   * @param {num} shift a^shift\r\n   */\n  function QRPolynomial(num, shift) {\n    if (num.length == undefined) {\n      throw new Error(num.length + \"/\" + shift);\n    }\n    var offset = 0;\n    while (offset < num.length && num[offset] == 0) {\n      offset++;\n    }\n    this.num = new Array(num.length - offset + shift);\n    for (var i = 0; i < num.length - offset; i++) {\n      this.num[i] = num[i + offset];\n    }\n  }\n  QRPolynomial.prototype = {\n    get: function get(index) {\n      return this.num[index];\n    },\n    getLength: function getLength() {\n      return this.num.length;\n    },\n    /**\r\n        * 多项式乘法\r\n        * @param  {QRPolynomial} e 被乘多项式\r\n        * @return {[type]}   [description]\r\n        */\n    multiply: function multiply(e) {\n      var num = new Array(this.getLength() + e.getLength() - 1);\n      for (var i = 0; i < this.getLength(); i++) {\n        for (var j = 0; j < e.getLength(); j++) {\n          num[i + j] ^= QRMath.gexp(QRMath.glog(this.get(i)) + QRMath.glog(e.get(j)));\n        }\n      }\n      return new QRPolynomial(num, 0);\n    },\n    /**\r\n        * 多项式模运算\r\n        * @param  {QRPolynomial} e 模多项式\r\n        * @return {}\r\n        */\n    mod: function mod(e) {\n      var tl = this.getLength(),\n      el = e.getLength();\n      if (tl - el < 0) {\n        return this;\n      }\n      var num = new Array(tl);\n      for (var i = 0; i < tl; i++) {\n        num[i] = this.get(i);\n      }\n      while (num.length >= el) {\n        var ratio = QRMath.glog(num[0]) - QRMath.glog(e.get(0));\n\n        for (var i = 0; i < e.getLength(); i++) {\n          num[i] ^= QRMath.gexp(QRMath.glog(e.get(i)) + ratio);\n        }\n        while (num[0] == 0) {\n          num.shift();\n        }\n      }\n      return new QRPolynomial(num, 0);\n    } };\n\n\n  //---------------------------------------------------------------------\n  // RS_BLOCK_TABLE\n  //---------------------------------------------------------------------\n  /*\r\n  二维码各个版本信息[块数, 每块中的数据块数, 每块中的信息块数]\r\n   */\n  var RS_BLOCK_TABLE = [\n  // L\n  // M\n  // Q\n  // H\n  // 1\n  [1, 26, 19],\n  [1, 26, 16],\n  [1, 26, 13],\n  [1, 26, 9],\n\n  // 2\n  [1, 44, 34],\n  [1, 44, 28],\n  [1, 44, 22],\n  [1, 44, 16],\n\n  // 3\n  [1, 70, 55],\n  [1, 70, 44],\n  [2, 35, 17],\n  [2, 35, 13],\n\n  // 4\n  [1, 100, 80],\n  [2, 50, 32],\n  [2, 50, 24],\n  [4, 25, 9],\n\n  // 5\n  [1, 134, 108],\n  [2, 67, 43],\n  [2, 33, 15, 2, 34, 16],\n  [2, 33, 11, 2, 34, 12],\n\n  // 6\n  [2, 86, 68],\n  [4, 43, 27],\n  [4, 43, 19],\n  [4, 43, 15],\n\n  // 7\n  [2, 98, 78],\n  [4, 49, 31],\n  [2, 32, 14, 4, 33, 15],\n  [4, 39, 13, 1, 40, 14],\n\n  // 8\n  [2, 121, 97],\n  [2, 60, 38, 2, 61, 39],\n  [4, 40, 18, 2, 41, 19],\n  [4, 40, 14, 2, 41, 15],\n\n  // 9\n  [2, 146, 116],\n  [3, 58, 36, 2, 59, 37],\n  [4, 36, 16, 4, 37, 17],\n  [4, 36, 12, 4, 37, 13],\n\n  // 10\n  [2, 86, 68, 2, 87, 69],\n  [4, 69, 43, 1, 70, 44],\n  [6, 43, 19, 2, 44, 20],\n  [6, 43, 15, 2, 44, 16],\n\n  // 11\n  [4, 101, 81],\n  [1, 80, 50, 4, 81, 51],\n  [4, 50, 22, 4, 51, 23],\n  [3, 36, 12, 8, 37, 13],\n\n  // 12\n  [2, 116, 92, 2, 117, 93],\n  [6, 58, 36, 2, 59, 37],\n  [4, 46, 20, 6, 47, 21],\n  [7, 42, 14, 4, 43, 15],\n\n  // 13\n  [4, 133, 107],\n  [8, 59, 37, 1, 60, 38],\n  [8, 44, 20, 4, 45, 21],\n  [12, 33, 11, 4, 34, 12],\n\n  // 14\n  [3, 145, 115, 1, 146, 116],\n  [4, 64, 40, 5, 65, 41],\n  [11, 36, 16, 5, 37, 17],\n  [11, 36, 12, 5, 37, 13],\n\n  // 15\n  [5, 109, 87, 1, 110, 88],\n  [5, 65, 41, 5, 66, 42],\n  [5, 54, 24, 7, 55, 25],\n  [11, 36, 12],\n\n  // 16\n  [5, 122, 98, 1, 123, 99],\n  [7, 73, 45, 3, 74, 46],\n  [15, 43, 19, 2, 44, 20],\n  [3, 45, 15, 13, 46, 16],\n\n  // 17\n  [1, 135, 107, 5, 136, 108],\n  [10, 74, 46, 1, 75, 47],\n  [1, 50, 22, 15, 51, 23],\n  [2, 42, 14, 17, 43, 15],\n\n  // 18\n  [5, 150, 120, 1, 151, 121],\n  [9, 69, 43, 4, 70, 44],\n  [17, 50, 22, 1, 51, 23],\n  [2, 42, 14, 19, 43, 15],\n\n  // 19\n  [3, 141, 113, 4, 142, 114],\n  [3, 70, 44, 11, 71, 45],\n  [17, 47, 21, 4, 48, 22],\n  [9, 39, 13, 16, 40, 14],\n\n  // 20\n  [3, 135, 107, 5, 136, 108],\n  [3, 67, 41, 13, 68, 42],\n  [15, 54, 24, 5, 55, 25],\n  [15, 43, 15, 10, 44, 16],\n\n  // 21\n  [4, 144, 116, 4, 145, 117],\n  [17, 68, 42],\n  [17, 50, 22, 6, 51, 23],\n  [19, 46, 16, 6, 47, 17],\n\n  // 22\n  [2, 139, 111, 7, 140, 112],\n  [17, 74, 46],\n  [7, 54, 24, 16, 55, 25],\n  [34, 37, 13],\n\n  // 23\n  [4, 151, 121, 5, 152, 122],\n  [4, 75, 47, 14, 76, 48],\n  [11, 54, 24, 14, 55, 25],\n  [16, 45, 15, 14, 46, 16],\n\n  // 24\n  [6, 147, 117, 4, 148, 118],\n  [6, 73, 45, 14, 74, 46],\n  [11, 54, 24, 16, 55, 25],\n  [30, 46, 16, 2, 47, 17],\n\n  // 25\n  [8, 132, 106, 4, 133, 107],\n  [8, 75, 47, 13, 76, 48],\n  [7, 54, 24, 22, 55, 25],\n  [22, 45, 15, 13, 46, 16],\n\n  // 26\n  [10, 142, 114, 2, 143, 115],\n  [19, 74, 46, 4, 75, 47],\n  [28, 50, 22, 6, 51, 23],\n  [33, 46, 16, 4, 47, 17],\n\n  // 27\n  [8, 152, 122, 4, 153, 123],\n  [22, 73, 45, 3, 74, 46],\n  [8, 53, 23, 26, 54, 24],\n  [12, 45, 15, 28, 46, 16],\n\n  // 28\n  [3, 147, 117, 10, 148, 118],\n  [3, 73, 45, 23, 74, 46],\n  [4, 54, 24, 31, 55, 25],\n  [11, 45, 15, 31, 46, 16],\n\n  // 29\n  [7, 146, 116, 7, 147, 117],\n  [21, 73, 45, 7, 74, 46],\n  [1, 53, 23, 37, 54, 24],\n  [19, 45, 15, 26, 46, 16],\n\n  // 30\n  [5, 145, 115, 10, 146, 116],\n  [19, 75, 47, 10, 76, 48],\n  [15, 54, 24, 25, 55, 25],\n  [23, 45, 15, 25, 46, 16],\n\n  // 31\n  [13, 145, 115, 3, 146, 116],\n  [2, 74, 46, 29, 75, 47],\n  [42, 54, 24, 1, 55, 25],\n  [23, 45, 15, 28, 46, 16],\n\n  // 32\n  [17, 145, 115],\n  [10, 74, 46, 23, 75, 47],\n  [10, 54, 24, 35, 55, 25],\n  [19, 45, 15, 35, 46, 16],\n\n  // 33\n  [17, 145, 115, 1, 146, 116],\n  [14, 74, 46, 21, 75, 47],\n  [29, 54, 24, 19, 55, 25],\n  [11, 45, 15, 46, 46, 16],\n\n  // 34\n  [13, 145, 115, 6, 146, 116],\n  [14, 74, 46, 23, 75, 47],\n  [44, 54, 24, 7, 55, 25],\n  [59, 46, 16, 1, 47, 17],\n\n  // 35\n  [12, 151, 121, 7, 152, 122],\n  [12, 75, 47, 26, 76, 48],\n  [39, 54, 24, 14, 55, 25],\n  [22, 45, 15, 41, 46, 16],\n\n  // 36\n  [6, 151, 121, 14, 152, 122],\n  [6, 75, 47, 34, 76, 48],\n  [46, 54, 24, 10, 55, 25],\n  [2, 45, 15, 64, 46, 16],\n\n  // 37\n  [17, 152, 122, 4, 153, 123],\n  [29, 74, 46, 14, 75, 47],\n  [49, 54, 24, 10, 55, 25],\n  [24, 45, 15, 46, 46, 16],\n\n  // 38\n  [4, 152, 122, 18, 153, 123],\n  [13, 74, 46, 32, 75, 47],\n  [48, 54, 24, 14, 55, 25],\n  [42, 45, 15, 32, 46, 16],\n\n  // 39\n  [20, 147, 117, 4, 148, 118],\n  [40, 75, 47, 7, 76, 48],\n  [43, 54, 24, 22, 55, 25],\n  [10, 45, 15, 67, 46, 16],\n\n  // 40\n  [19, 148, 118, 6, 149, 119],\n  [18, 75, 47, 31, 76, 48],\n  [34, 54, 24, 34, 55, 25],\n  [20, 45, 15, 61, 46, 16]];\n\n\n  /**\r\n                              * 根据数据获取对应版本\r\n                              * @return {[type]} [description]\r\n                              */\n  QRCodeAlg.prototype.getRightType = function () {\n    for (var typeNumber = 1; typeNumber < 41; typeNumber++) {\n      var rsBlock = RS_BLOCK_TABLE[(typeNumber - 1) * 4 + this.errorCorrectLevel];\n      if (rsBlock == undefined) {\n        throw new Error(\"bad rs block @ typeNumber:\" + typeNumber + \"/errorCorrectLevel:\" + this.errorCorrectLevel);\n      }\n      var length = rsBlock.length / 3;\n      var totalDataCount = 0;\n      for (var i = 0; i < length; i++) {\n        var count = rsBlock[i * 3 + 0];\n        var dataCount = rsBlock[i * 3 + 2];\n        totalDataCount += dataCount * count;\n      }\n      var lengthBytes = typeNumber > 9 ? 2 : 1;\n      if (this.utf8bytes.length + lengthBytes < totalDataCount || typeNumber == 40) {\n        this.typeNumber = typeNumber;\n        this.rsBlock = rsBlock;\n        this.totalDataCount = totalDataCount;\n        break;\n      }\n    }\n  };\n\n  //---------------------------------------------------------------------\n  // QRBitBuffer\n  //---------------------------------------------------------------------\n  function QRBitBuffer() {\n    this.buffer = new Array();\n    this.length = 0;\n  }\n  QRBitBuffer.prototype = {\n    get: function get(index) {\n      var bufIndex = Math.floor(index / 8);\n      return this.buffer[bufIndex] >>> 7 - index % 8 & 1;\n    },\n    put: function put(num, length) {\n      for (var i = 0; i < length; i++) {\n        this.putBit(num >>> length - i - 1 & 1);\n      }\n    },\n    putBit: function putBit(bit) {\n      var bufIndex = Math.floor(this.length / 8);\n      if (this.buffer.length <= bufIndex) {\n        this.buffer.push(0);\n      }\n      if (bit) {\n        this.buffer[bufIndex] |= 0x80 >>> this.length % 8;\n      }\n      this.length++;\n    } };\n\n\n\n\n  // xzedit\n  var qrcodeAlgObjCache = [];\n  /**\r\n                               * 二维码构造函数，主要用于绘制\r\n                               * @param  {参数列表} opt 传递参数\r\n                               * @return {}\r\n                               */\n  QRCode = function QRCode(opt) {\n    //设置默认参数\n    this.options = {\n      text: '',\n      size: 256,\n      correctLevel: 3,\n      background: '#ffffff',\n      foreground: '#000000',\n      pdground: '#000000',\n      image: '',\n      imageSize: 30,\n      canvasId: '_myQrCodeCanvas',\n      context: opt.context,\n      usingComponents: opt.usingComponents,\n      showLoading: opt.showLoading,\n      loadingText: opt.loadingText };\n\n    if (typeof opt === 'string') {// 只编码ASCII字符串\n      opt = {\n        text: opt };\n\n    }\n    if (opt) {\n      for (var i in opt) {\n        this.options[i] = opt[i];\n      }\n    }\n    //使用QRCodeAlg创建二维码结构\n    var qrCodeAlg = null;\n    for (var i = 0, l = qrcodeAlgObjCache.length; i < l; i++) {\n      if (qrcodeAlgObjCache[i].text == this.options.text && qrcodeAlgObjCache[i].text.correctLevel == this.options.correctLevel) {\n        qrCodeAlg = qrcodeAlgObjCache[i].obj;\n        break;\n      }\n    }\n    if (i == l) {\n      qrCodeAlg = new QRCodeAlg(this.options.text, this.options.correctLevel);\n      qrcodeAlgObjCache.push({\n        text: this.options.text,\n        correctLevel: this.options.correctLevel,\n        obj: qrCodeAlg });\n\n    }\n    /**\r\n       * 计算矩阵点的前景色\r\n       * @param {Obj} config\r\n       * @param {Number} config.row 点x坐标\r\n       * @param {Number} config.col 点y坐标\r\n       * @param {Number} config.count 矩阵大小\r\n       * @param {Number} config.options 组件的options\r\n       * @return {String}\r\n       */\n    var getForeGround = function getForeGround(config) {\n      var options = config.options;\n      if (options.pdground && (\n      config.row > 1 && config.row < 5 && config.col > 1 && config.col < 5 ||\n      config.row > config.count - 6 && config.row < config.count - 2 && config.col > 1 && config.col < 5 ||\n      config.row > 1 && config.row < 5 && config.col > config.count - 6 && config.col < config.count - 2))\n      {\n        return options.pdground;\n      }\n      return options.foreground;\n    };\n    // 创建canvas\n    var createCanvas = function createCanvas(options) {\n      if (options.showLoading) {\n        uni.showLoading({\n          title: options.loadingText,\n          mask: true });\n\n      }\n      var ctx = uni.createCanvasContext(options.canvasId, options.context);\n      var count = qrCodeAlg.getModuleCount();\n      var ratioSize = options.size;\n      var ratioImgSize = options.imageSize;\n      //计算每个点的长宽\n      var tileW = (ratioSize / count).toPrecision(4);\n      var tileH = (ratioSize / count).toPrecision(4);\n      //绘制\n      for (var row = 0; row < count; row++) {\n        for (var col = 0; col < count; col++) {\n          var w = Math.ceil((col + 1) * tileW) - Math.floor(col * tileW);\n          var h = Math.ceil((row + 1) * tileW) - Math.floor(row * tileW);\n          var foreground = getForeGround({\n            row: row,\n            col: col,\n            count: count,\n            options: options });\n\n          ctx.setFillStyle(qrCodeAlg.modules[row][col] ? foreground : options.background);\n          ctx.fillRect(Math.round(col * tileW), Math.round(row * tileH), w, h);\n        }\n      }\n      if (options.image) {\n\n\n\n\n        // 画圆角矩形\n        var drawRoundedRect = function drawRoundedRect(ctxi, x, y, width, height, r, lineWidth, fill, stroke) {\n          ctxi.setLineWidth(lineWidth);\n          ctxi.setFillStyle(options.background);\n          ctxi.setStrokeStyle(options.background);\n          ctxi.beginPath(); // draw top and top right corner \n          ctxi.moveTo(x + r, y);\n          ctxi.arcTo(x + width, y, x + width, y + r, r); // draw right side and bottom right corner \n          ctxi.arcTo(x + width, y + height, x + width - r, y + height, r); // draw bottom and bottom left corner \n          ctxi.arcTo(x, y + height, x, y + height - r, r); // draw left and top left corner \n          ctxi.arcTo(x, y, x + r, y, r);\n          ctxi.closePath();\n          if (fill) {\n            ctxi.fill();\n          }\n          if (stroke) {\n            ctxi.stroke();\n          }\n        };var x = Number(((ratioSize - ratioImgSize) / 2).toFixed(2));var y = Number(((ratioSize - ratioImgSize) / 2).toFixed(2));drawRoundedRect(ctx, x, y, ratioImgSize, ratioImgSize, 2, 6, true, true);ctx.drawImage(options.image, x, y, ratioImgSize, ratioImgSize);\n      }\n      setTimeout(function () {\n        ctx.draw(true, function () {\n          // 保存到临时区域\n          setTimeout(function () {\n            uni.canvasToTempFilePath({\n              width: options.width,\n              height: options.height,\n              destWidth: options.width,\n              destHeight: options.height,\n              canvasId: options.canvasId,\n              quality: Number(1),\n              success: function success(res) {\n                if (options.cbResult) {\n                  // 由于官方还没有统一此接口的输出字段，所以先判定下  支付宝为 res.apFilePath\n                  if (!empty(res.tempFilePath)) {\n                    options.cbResult(res.tempFilePath);\n                  } else if (!empty(res.apFilePath)) {\n                    options.cbResult(res.apFilePath);\n                  } else {\n                    options.cbResult(res.tempFilePath);\n                  }\n                }\n              },\n              fail: function fail(res) {\n                if (options.cbResult) {\n                  options.cbResult(res);\n                }\n              },\n              complete: function complete() {\n                //uni.hideLoading();\n              } },\n            options.context);\n          }, options.text.length + 100);\n        });\n      }, options.usingComponents ? 0 : 150);\n    };\n    createCanvas(this.options);\n    // 空判定\n    var empty = function empty(v) {\n      var tp = typeof v,\n      rt = false;\n      if (tp == \"number\" && String(v) == \"\") {\n        rt = true;\n      } else if (tp == \"undefined\") {\n        rt = true;\n      } else if (tp == \"object\") {\n        if (JSON.stringify(v) == \"{}\" || JSON.stringify(v) == \"[]\" || v == null) rt = true;\n      } else if (tp == \"string\") {\n        if (v == \"\" || v == \"undefined\" || v == \"null\" || v == \"{}\" || v == \"[]\") rt = true;\n      } else if (tp == \"function\") {\n        rt = false;\n      }\n      return rt;\n    };\n  };\n  QRCode.prototype.clear = function (fn) {\n    var ctx = uni.createCanvasContext(this.options.canvasId, this.options.context);\n    ctx.clearRect(0, 0, this.options.size, this.options.size);\n    ctx.draw(false, function () {\n      if (fn) {\n        fn();\n      }\n    });\n  };\n})();var _default =\n\nQRCode;exports.default = _default;\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/uni-app-plus/dist/index.js */ 1)[\"default\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///623\n");

/***/ }),

/***/ 7:
/*!******************************************************************!*\
  !*** C:/Users/Admin/Desktop/evc.app/pages.json?{"type":"style"} ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = void 0;var _default = { \"pages\": { \"pages/wallet/wallet\": { \"navigationBarTitleText\": \"钱包\", \"enablePullDownRefresh\": true, \"titleNView\": { \"buttons\": [{ \"text\": \"\", \"fontSrc\": \"/static/font/iconfont.ttf\", \"fontSize\": \"13px\", \"float\": \"left\" }, { \"text\": \"\", \"fontSrc\": \"/static/font/iconfont.ttf\", \"fontSize\": \"22px\", \"float\": \"right\" }] }, \"usingComponents\": { \"uni-popup\": \"/components/uni-popup\", \"tki-qrcode\": \"/components/tki-qrcode\" } }, \"pages/wallet/create\": { \"navigationBarTitleText\": \"创建钱包\", \"usingComponents\": {} }, \"pages/wallet/backupMnemonic1\": { \"navigationBarTitleText\": \"备份助记词\", \"usingComponents\": {} }, \"pages/wallet/backupMnemonic\": { \"navigationBarTitleText\": \"备份助记词\", \"usingComponents\": {} }, \"pages/wallet/import\": { \"navigationBarTitleText\": \"助记词导入\", \"usingComponents\": {} }, \"pages/wallet/resetPin\": { \"navigationBarTitleText\": \"重置PIN码\", \"usingComponents\": {} }, \"pages/wallet/backup\": { \"navigationBarTitleText\": \"管理\", \"usingComponents\": { \"uni-popup\": \"/components/uni-popup\" } }, \"pages/wallet/manage\": { \"navigationBarTitleText\": \"钱包管理\", \"titleNView\": { \"buttons\": [{ \"text\": \"\", \"fontSrc\": \"/static/font/iconfont.ttf\", \"fontSize\": \"22px\", \"float\": \"right\", \"background\": \"rgba(0,0,0,0)\" }] }, \"usingComponents\": { \"uni-popup\": \"/components/uni-popup\" } }, \"pages/user/user\": { \"navigationBarTextStyle\": \"white\", \"navigationBarTitleText\": \"我的\", \"titleNView\": { \"type\": \"transparent\", \"titleColor\": \"#fff\", \"backgroundColor\": \"#007AFF\" }, \"usingComponents\": {} }, \"pages/user/about\": { \"navigationBarTitleText\": \"关于我们\", \"usingComponents\": {}, \"usingGlobalComponents\": { \"page-loading\": \"/components/pageloading\" } }, \"pages/message/message\": { \"navigationBarTitleText\": \"消息中心\", \"usingComponents\": {} }, \"pages/message/detail\": { \"navigationBarTitleText\": \"详情\", \"usingComponents\": {} }, \"pages/coin/detail\": { \"navigationBarTitleText\": \"USDT\", \"usingComponents\": {}, \"usingGlobalComponents\": { \"page-loading\": \"/components/pageloading\" } }, \"pages/coin/charge\": { \"navigationBarTitleText\": \"收款\", \"usingComponents\": { \"tki-qrcode\": \"/components/tki-qrcode\" } }, \"pages/coin/transfer\": { \"navigationBarTitleText\": \"转账\", \"usingComponents\": { \"uni-popup\": \"/components/uni-popup\" } }, \"pages/coin/transferDetail\": { \"navigationBarTitleText\": \"记录详情\", \"usingComponents\": {} }, \"pages/market/market\": { \"navigationBarTitleText\": \"行情\", \"enablePullDownRefresh\": true, \"usingComponents\": {} }, \"pages/dapp/dapp\": { \"navigationBarTitleText\": \"DAPP\", \"usingComponents\": {} }, \"pages/pagesB/login/login\": { \"navigationBarTitleText\": \"登录\", \"usingComponents\": {} }, \"pages/pagesB/login/register\": { \"navigationBarTitleText\": \"邮箱注册\", \"usingComponents\": {} }, \"pages/pagesB/login/setPassword\": { \"navigationBarTitleText\": \"设置密码\", \"usingComponents\": {} }, \"pages/pagesB/index/index\": { \"enablePullDownRefresh\": true, \"navigationBarTitleText\": \"首页\", \"titleNView\": { \"type\": \"default\", \"titleColor\": \"#333333\", \"backgroundColor\": \"#fff\", \"titleSize\": \"18px\", \"buttons\": [{ \"text\": \"EVC\", \"fontSrc\": \"/static/font/iconfont.ttf\", \"fontSize\": \"13px\", \"float\": \"left\" }, { \"text\": \"\", \"fontSrc\": \"/static/font/iconfont.ttf\", \"fontSize\": \"22px\", \"float\": \"right\", \"background\": \"rgba(0,0,0,0)\" }] }, \"usingComponents\": { \"uni-load-more\": \"/components/uni-load-more\", \"evc-tabbar\": \"/components/evcTabbar\" } }, \"pages/pagesB/index/product-detail\": { \"navigationBarTitleText\": \"产品详情\", \"usingComponents\": {} }, \"pages/pagesB/index/noticeDetail\": { \"navigationBarTitleText\": \"公告详情\", \"usingComponents\": {} }, \"pages/pagesB/login/forgetPassword\": { \"navigationBarTitleText\": \"忘记密码\", \"usingComponents\": {} }, \"pages/pagesB/login/resetPassword\": { \"navigationBarTitleText\": \"重置密码\", \"usingComponents\": {} }, \"pages/pagesB/index/buy\": { \"navigationBarTitleText\": \"购买\", \"usingComponents\": {} }, \"pages/pagesB/index/myad\": { \"navigationBarTitleText\": \"我的广告包\", \"usingComponents\": {} }, \"pages/pagesB/index/profit\": { \"navigationBarTitleText\": \"收益账户\", \"usingComponents\": { \"uni-load-more\": \"/components/uni-load-more\" } }, \"pages/pagesB/index/detail\": { \"navigationBarTitleText\": \"详情\", \"usingComponents\": {} }, \"pages/pagesB/index/public-notification\": { \"navigationBarTitleText\": \"公告\", \"usingComponents\": {} }, \"pages/pagesB/personal/hasBindingAddr\": { \"navigationBarTitleText\": \"已绑地址\", \"usingComponents\": {} }, \"pages/pagesB/personal/invite\": { \"navigationBarTitleText\": \"邀请好友\", \"usingComponents\": {} }, \"pages/pagesB/wallet/wallet\": { \"navigationBarTitleText\": \"钱包\", \"titleNView\": { \"type\": \"default\", \"titleColor\": \"#333333\", \"backgroundColor\": \"#fff\", \"titleSize\": \"18px\", \"buttons\": [{ \"text\": \"EVC\", \"fontSrc\": \"/static/font/iconfont.ttf\", \"fontSize\": \"13px\", \"float\": \"left\" }] }, \"usingComponents\": { \"evc-tabbar\": \"/components/evcTabbar\" } }, \"pages/pagesB/wallet/transfer-num\": { \"navigationBarTitleText\": \"转账\", \"usingComponents\": {} }, \"pages/pagesB/wallet/receivables-qrcode\": { \"navigationBarTitleText\": \"收款\", \"usingComponents\": {} }, \"pages/pagesB/wallet/charging-record\": { \"navigationBarTitleText\": \"充提记录\", \"usingComponents\": {} }, \"pages/pagesB/wallet/record-details\": { \"navigationBarTitleText\": \"记录详情\", \"usingComponents\": {} }, \"pages/pagesB/wallet/currency-detail\": { \"navigationBarTitleText\": \"币种详情\", \"usingComponents\": {} }, \"pages/pagesB/wallet/recharge-record\": { \"navigationBarTitleText\": \"充提记录\", \"usingComponents\": {} }, \"pages/pagesB/my/my-team\": { \"navigationBarTitleText\": \"我的团队\", \"titleNView\": { \"type\": \"default\", \"titleColor\": \"#333333\", \"backgroundColor\": \"#fff\", \"titleSize\": \"36rpx\", \"buttons\": [{ \"text\": \"EVC\", \"fontSrc\": \"/static/font/iconfont.ttf\", \"fontSize\": \"13px\", \"float\": \"left\" }] }, \"usingComponents\": { \"evc-tabbar\": \"/components/evcTabbar\" } }, \"pages/pagesB/personal/personal\": { \"navigationBarTitleText\": \"个人中心\", \"titleNView\": { \"type\": \"default\", \"titleColor\": \"#333333\", \"backgroundColor\": \"#fff\", \"titleSize\": \"36rpx\", \"buttons\": [{ \"text\": \"EVC\", \"fontSrc\": \"/static/font/iconfont.ttf\", \"fontSize\": \"13px\", \"float\": \"left\" }] }, \"usingComponents\": { \"evc-tabbar\": \"/components/evcTabbar\" } }, \"pages/pagesB/personal/examine\": { \"navigationBarTitleText\": \"\", \"usingComponents\": { \"uni-steps\": \"/components/uni-steps\" } }, \"pages/pagesB/personal/aboutus\": { \"navigationBarTitleText\": \"关于我们\", \"usingComponents\": {} }, \"pages/pagesB/personal/userform\": { \"navigationBarTitleText\": \"用户协议\", \"usingComponents\": {} }, \"pages/pagesB/personal/unsealing\": { \"navigationBarTitleText\": \"账号解封\", \"usingComponents\": {} }, \"pages/pagesB/personal/problem\": { \"navigationBarTitleText\": \"常见问题\", \"usingComponents\": {} }, \"pages/pagesB/personal/real-name\": { \"navigationBarTitleText\": \"实名认证\", \"usingComponents\": { \"uni-steps\": \"/components/uni-steps\" } }, \"pages/pagesB/personal/set-password\": { \"navigationBarTitleText\": \"修改登录密码\", \"usingComponents\": {} }, \"pages/pagesB/personal/set-paypassword\": { \"navigationBarTitleText\": \"修改交易密码\", \"usingComponents\": {} }, \"pages/pagesB/personal/forget-pay-password\": { \"navigationBarTitleText\": \"忘记交易密码\", \"usingComponents\": {} }, \"pages/pagesB/personal/binding-addr\": { \"navigationBarTitleText\": \"绑定地址\", \"usingComponents\": {} }, \"pages/pagesB/personal/answer\": { \"navigationBarTitleText\": \"问题详情\", \"usingComponents\": {} }, \"pages/pagesB/personal/hasBindingPhone\": { \"navigationBarTitleText\": \"\", \"usingComponents\": {} }, \"pages/pagesB/personal/self-in\": { \"navigationBarTitleText\": \"安全中心\", \"usingComponents\": {} }, \"pages/pagesB/personal/real-photo\": { \"navigationBarTitleText\": \"实名认证\", \"usingComponents\": { \"uni-steps\": \"/components/uni-steps\" } }, \"pages/pagesB/personal/personal-info\": { \"navigationBarTitleText\": \"个人信息\", \"usingComponents\": {} }, \"pages/pagesB/personal/set-nickname\": { \"navigationBarTitleText\": \"设置昵称\", \"usingComponents\": {} }, \"pages/pagesB/personal/my-bill\": { \"navigationBarTitleText\": \"我的账单\", \"usingComponents\": {} }, \"pages/pagesB/personal/recorde-detail\": { \"navigationBarTitleText\": \"记录详情\", \"usingComponents\": {} }, \"pages/pagesB/personal/resetPayPassword\": { \"navigationBarTitleText\": \"忘记交易密码\", \"usingComponents\": {} }, \"pages/pagesB/personal/binding-phone\": { \"navigationBarTitleText\": \"绑定手机\", \"usingComponents\": {} }, \"pages/dapp/text-detail\": { \"navigationBarTitleText\": \"正文详情\", \"usingComponents\": {} }, \"pages/dapp/public-notification\": { \"navigationBarTitleText\": \"公告\", \"usingComponents\": {} }, \"pages/dapp/public-detail\": { \"navigationBarTitleText\": \"详情\", \"usingComponents\": {} }, \"pages/pagesB/quotation/quotation\": { \"navigationBarTitleText\": \"行情\", \"usingComponents\": {} }, \"pages/forget/privatekey\": { \"navigationBarTitleText\": \"忘记密码\", \"usingComponents\": {} }, \"pages/forget/pwd\": { \"navigationBarTitleText\": \"重置密码\", \"usingComponents\": {} }, \"pages/export/mnemonic\": { \"navigationBarTitleText\": \"导出助记词\", \"usingComponents\": {} }, \"pages/export/privatekey\": { \"navigationBarTitleText\": \"导出私钥\", \"usingComponents\": {} }, \"pages/question/question\": { \"navigationBarTitleText\": \"常见问题\", \"usingComponents\": {} }, \"pages/question/answer\": { \"navigationBarTitleText\": \"问题解答\", \"usingComponents\": {} }, \"pages/pagesB/wallet/coinDetail\": { \"navigationBarTitleText\": \"记录详情\", \"usingComponents\": {}, \"usingGlobalComponents\": { \"page-loading\": \"/components/pageloading\" } } }, \"globalStyle\": { \"navigationBarTextStyle\": \"black\", \"navigationBarTitleText\": \"EVC\", \"navigationBarBackgroundColor\": \"#FFFFFF\", \"backgroundColor\": \"#FFFFFF\" } };exports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///7\n");

/***/ }),

/***/ 8:
/*!*****************************************************************!*\
  !*** C:/Users/Admin/Desktop/evc.app/pages.json?{"type":"stat"} ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = void 0;var _default = { \"appid\": \"__UNI__A1A6FE1\" };exports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJzR0FBZSxFQUFDLFNBQVEsZ0JBQVQsRSIsImZpbGUiOiI4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQge1wiYXBwaWRcIjpcIl9fVU5JX19BMUE2RkUxXCJ9Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///8\n");

/***/ })

}]);